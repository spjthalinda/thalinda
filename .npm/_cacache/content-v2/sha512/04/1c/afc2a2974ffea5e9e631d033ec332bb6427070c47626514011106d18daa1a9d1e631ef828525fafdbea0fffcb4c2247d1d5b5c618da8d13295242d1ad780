{"_id":"micro-packed","_rev":"18-5fcfcb67f8369cfcf74c7cbcf832bb1c","name":"micro-packed","dist-tags":{"latest":"0.7.3"},"versions":{"0.1.0":{"name":"micro-packed","version":"0.1.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.1.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"2c58c87c3fc2c8ae847df3358692a03fcc02f1f1","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.1.0.tgz","fileCount":7,"integrity":"sha512-pU6mVws4UCIkJBeDhW0P4ve98gIguKlzWwXjagbBFHuwusLGQMoBXCc2Y2kcBY44xoJCrvIgYHamExA9el+ZXA==","signatures":[{"sig":"MEUCIQCPTmJ93PHxF9zmXVFqjqw8b/f/SRBY2JJDzpg2Krh1TgIgHCof/8+l6WWZoNm/7D0zzxSK+Wq+dF206moUKe16UoM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":63447,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJirvPRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqhGQ/+PWZnoF13OIdDk1cvPSUFFMASPcaD/bQfrapkmfVHjZV7Ex83\r\nNqZQ8BtTI97ja5e9cfq4WR9esp9bWqCNnMrotNPuYsVTJk/YbYS/imxpzr8k\r\nvgaStYIKoVohm1J6H/VHG277a7m8Tf53cuvfpi62Y4sJsjw7zhzyvN0/DLTM\r\n8jBOprMrI7eIxWEwZsLU+Dji+Fda4dvva95n+22hwFybfsHtkX9fgYlqquDk\r\n9URf/hKRLGpg2gyGKf39EJ7yLv/O4GAMoUPh7Q6g5mQ1aNIzz9Ksyme6Tmin\r\ncQ3mBmPuIQhWzsNSrjFtK28gfXtzNsk/z7E7BaWsbPwEZLtml5ffrEPt6ypR\r\nfdEUKLZI6KtIzgWjaMHNXx9y96K4ZtBg5v+zni2S8xkcMjabsZnr8nC9krqN\r\nbwj8fT6QYYbDs9Z46MUo1QUo2B4Z501thw1nd3yJxcHfNwFfCElxLEsbsd2c\r\nLz+vfjTkfaPjHeHd8rrmP9ocQ2bRLwrNbf23Kt8COq0da8Ldp5TU1bDegbS4\r\nLw1AfCdh4AgFfr4C0weOPrFqEc1m/MRLzDUHKCw2PRFKV0AniIJNYKaq0OeN\r\nw28O2m1lnR4e7RXgKKatMapWQ4F+34cFyxnq9byzJw61ury0nqlPYaIR+3oo\r\nI5WPu40dExgKA1LP0biqHyP9n5Ap47/ioRs=\r\n=jOzS\r\n-----END PGP SIGNATURE-----\r\n"},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"import":"./lib/esm/index.js","default":"./lib/index.js"},"./index.d.ts":"./lib/index.d.ts"},"funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"7820ccf165821734c4c7269cc25458c5ce6642d9","scripts":{"lint":"prettier --check index.ts","test":"node test/index.js","build":"tsc -d && tsc -p tsconfig.esm.json"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"8.11.0","description":"Less painful binary encoding / decoding","directories":{},"_nodeVersion":"18.3.0","dependencies":{"@scure/base":"~1.1.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"2.6.2","typescript":"4.7.3","micro-should":"0.2.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.1.0_1655632848807_0.4376182710660794","host":"s3://npm-registry-packages"}},"0.2.0":{"name":"micro-packed","version":"0.2.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.2.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"e96866c2de11f3adfdb85cb90212cc2cff732cbe","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.2.0.tgz","fileCount":7,"integrity":"sha512-lPYq+ZvSD04leLSRsK6piQRckFg/QVXmR1dxm4e0NiTDo8GPgUqPVD5X+Y/hC4T5H/MJuZhJlMdDK+N1aO4g6w==","signatures":[{"sig":"MEYCIQDiMh7InA5oFD9c4dhWJNI0LBtrQO8uDEDkvKEgU51qYQIhAPVlY90/JOFY6QGCReZRr4wxXj1/YYwHTM93AnOv/85H","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":70947,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi1E7MACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmowSQ/+MZGeujARNYz/9k+xuTgRBLr57eYqbRk0HITYJT+ZRpFFLCUm\r\nrEkxesTRJA+9r+AjmwlmoyQHaWQD3Id3SqOD+i8htTQVJCO/1t4VGg4q7+i2\r\n/Wt3eBw6Y7ilIZlvzUB559x7EDiCl/5s/edczb9a69jqGNca5HaUGFW6pylQ\r\nUdNrqKourHEFhI+1gFuZbz+6ftB2ehZoNTymZ+lkTEXU0iWUqEqzH29Ou+WZ\r\nAhkVEMFMWp3JXQbzRI3ya/MFUT+zUhPnscbEI4rYp/Igo6s+mWoedb+j44/z\r\n/aPUK0qx+4IJRFTLu4Fqo1vQhOCah12jmssCMo69z+aaWAActnb0d/Me/Z5j\r\n6X0Hd1bs+ubTGEMpG74SpRox9epg4y7TUV0QVfR0zOlVzti+IE5eO7DFZ/KR\r\nTMWPosn0i7+ujnPtxJDVt6KL0I1HbUnrizegFF3oKPNr8R9aJcBre3ac5rUZ\r\n4gQjZK2RCE3ZGQhbx2cndKWXarGJqztlhMqxNHKPEaapGztEAsc2N4l7rjSp\r\nmhbdnUYJGva/23osTp82C7l25NPYEEDjJFCGfd3fu+rkrTL4oxQtRfsgxrQR\r\n7eitw7iON6N4fQ/SxjXLbotZSU1AxfKb7fGVr9MBg/WrDTqjS3Kb2ynz6PKv\r\nN2vGlrFicaOkuK5xGG1zQn0U4CeML3vJ58U=\r\n=XIMh\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"30c571b9447d08a8e943a2d7822160d3091cf326","scripts":{"lint":"prettier --check index.ts","test":"node test/index.js","build":"tsc"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"8.14.0","description":"Less painful binary encoding / decoding","directories":{},"_nodeVersion":"18.6.0","dependencies":{"@scure/base":"~1.1.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"2.6.2","typescript":"4.7.3","micro-should":"0.2.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.2.0_1658080972622_0.2984092155617917","host":"s3://npm-registry-packages"}},"0.3.0":{"name":"micro-packed","version":"0.3.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.3.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"207eee0603cb79a28dc54af4d4111a69f7bf79db","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.3.0.tgz","fileCount":7,"integrity":"sha512-B7azEi2D9QqpGDAtayhJDdE0jiiganlBAVN1WIUsa86Lzb/Zyh1vFoORGkqFhrPeBERPBYNoVXrRPi7PHoPN6w==","signatures":[{"sig":"MEYCIQDqVMgDF0gsLITQKIEc4iF9oCEuCvtc7TySBJ941aL8UgIhAIUYu01L36XBvqsf8F2ByCop5wbmfYJfHByYX76Z/5ME","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":97194,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjB/LBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr9Hw//TKKriMHaF57ZEPOOW+dsg23798FXeGKuUH1A1PUQ/e+cC7/V\r\nDBD0VqT2C+4XmVxcrnBspCrxth0TSEF0VA5QQxym6yxDJwnqLHjJoWZ9TIcb\r\nTjNeFTY5506oTtW8Xp5IgVIz0Pu3DNc5ncPpbeby8ZdFQIJHHoY9woONlP04\r\nVJ77Dd35rd2D0w8ATOnJ9CEFmdL0ASbyi/q5NZa6wyqq/g5EA0nUMWiPBHIN\r\nw7a3X8uppxlhOvMJLzusj9cGLGUyVYsh7/YNbUa4fGHESVN5hMgLDMG3h4zy\r\n09e8msfGefYjC4OuOtaQW0mCuhWtJE0kHwaV0qdfsOkGE8lmvfhmG47U4EsA\r\n3knbvSrGPxfG+Ef50pwzDoZdUMFRTaJUqXCpS6fB2ECz09ZY6uo+E03w7r/C\r\nxroWZmbG0375ax2J2x+Pn6NiiAhE+teu9uPQKYEBj3smS2DfAa/JMSFF0Zfl\r\nKOfSEJgq664a3sf+D0LCdComa/RO3+jngayH+s22ZeF2OKD4hNvn0RS+fKHE\r\nacL2Bkad75Lj5sa792ndTnF5LDI7aWGzeNitekyk1gT9MxA3pVhoPLMhFX6N\r\n+Jna/v4cyEJEwwvdySznM2N07t9YNFgF7J9jSHEiiXRKE5T+E6RdqOm9/jvk\r\njqH7wI2S+d+/Chlwkf+BhL53fLdubnuUACE=\r\n=7TWp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"197e2d16d7afaed041da98680eb8ac6db6580f49","scripts":{"lint":"prettier --check index.ts","test":"node test/index.js","build":"tsc"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"8.15.0","description":"Less painful binary encoding / decoding","directories":{},"_nodeVersion":"18.7.0","dependencies":{"@scure/base":"~1.1.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"2.6.2","typescript":"4.7.3","micro-should":"0.2.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.3.0_1661465281767_0.14973032729690972","host":"s3://npm-registry-packages"}},"0.3.1":{"name":"micro-packed","version":"0.3.1","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.3.1","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"d734127aa5a8d19848372636a76395d17c6f8e89","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.3.1.tgz","fileCount":7,"integrity":"sha512-GOTor/Cdd094XYPDOsNQU6qJfki9H+A8yn8VI2thIG3GRizmuw+cTInajiG8YZ7j8m6Ev7PyJOUeRd70rQf5vA==","signatures":[{"sig":"MEUCIQDGJxrFXyddb16lyV+4PHGnAYdEPenv0IA+aEHGCtnenwIgC+gI1RX18m9zqL+8uYMi37z7347h4VmGg1dxuhqVl1o=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":99258,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjH1BzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmphDxAAjUIMmxAWCBkuGWBi+MWevKlLuoYbIvIBDtO2hDvl2t01cumD\r\nVpxCVinuDpKVXY4hDgNlVEUD32CQkWgCpyGs3GK8m1qsavm5lWM1CEOSt9SV\r\n0G0lz5dZROVbphZpd7quxDlRxD8GPTA679INS8H+3n5IOmGddDqpwnNxqXa5\r\nuVKlkVI/jBqt3Fzp0eOprlWcKmAs6//92pWOWgL+YQc3yQttndb8bNWRibYf\r\ntkidQWjzXEmx0jV71riBYL3OC5kMjUYCIFJpY6PnhgMEANBZmwm2sIQJjwEL\r\nm2ObcoKd1G/N2iCXs1tdn1hXy+JIVBWx63INs8YJBSTuLc57SGoXu+ICVvwo\r\nAfN7aECZAIyPnXKRFnteR6lV5P10emgc4fKA0VpHdCm5g2X382QhgcoNWyfR\r\n/tHGm8S5TBoqOOB10Y30yhrEYDJCHRqC0YzPwUd+l3sQiXDIU3shtffKPZc/\r\n7Pd5WB+/dfiYnbao9lo8LWjhrcGBOmxI+uSObJe6UNXAqA/I1ksxCcB2oLW7\r\nvQnbkBAmMZ0fApLfl21Z/X5stiJI3qge9Nu7JE3pfFLi328BfZSC1ajQdBss\r\ndWlBMItm3URirdrSS5tHAK3otb205gGgnSJhHOq03+VwCwP0aGJrex2puaoi\r\nN4s2rjE+WnErnDr7E3YGneCuiAxVvjnNZOE=\r\n=fIsI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"e3f4ae6a1349927a9d78a7f4081e65006b5867ac","scripts":{"lint":"prettier --check index.ts","test":"node test/index.js","build":"tsc"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"8.18.0","description":"Less painful binary encoding / decoding","directories":{},"_nodeVersion":"18.8.0","dependencies":{"@scure/base":"~1.1.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"2.6.2","typescript":"4.7.3","micro-should":"0.2.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.3.1_1662996595410_0.934100456280597","host":"s3://npm-registry-packages"}},"0.3.2":{"name":"micro-packed","version":"0.3.2","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.3.2","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"3679188366c2283cb60a78366ed0416e5472b7cf","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.3.2.tgz","fileCount":7,"integrity":"sha512-D1Bq0/lVOzdxhnX5vylCxZpdw5LylH7Vd81py0DfRsKUP36XYpwvy8ZIsECVo3UfnoROn8pdKqkOzL7Cd82sGA==","signatures":[{"sig":"MEQCIA3Qbm43OcmgOZjHUBTONfNdZsrPqdhARX8v0deYaAwFAiAbd2YrCjnp/zNLdrbYX0gI7gu29Sk8w+VDy3fC1FlfOg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":99450,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj2+cNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrJbBAAjugBmxvRhg60miamjji9fClsmnHopOjhajKsIxVIjJtYiZHA\r\n1ZVjAwgEOuz14sgG/yvbmFovyuqbRcXvnahnVzLhqL3vbUQGIBXXzEmMhA18\r\nojv15PZIvqdmkvhkaWOp4EcDzPvZSf/L16NmVRH14TiGyWnfh2OqFBcdI9rD\r\n6mLEAR5oppV09OjAGyWzarExJUBxoDd6IRU6SCSVN3UDIAIMyVRkw6RoujHa\r\njr+2aGZRnorhUyhSv9z5/lt1eI7KytKtOX2FH6/v6Scy0OHjSHTcmEKvo4ZN\r\neNLPOcZTCxZyC1i6XlBOaDOKCBdxP9T/uMOJrLUXs+AOsf7AvSC3V+7fywFb\r\ndVj/KnLbmKacWSHOkHdPjU6FkjhpC429YNQqT0olDQv1DfsvKiiCeyIDxUND\r\nREA76SrAPMwBxN5LUg3QcnR05FrqQTLbDLI+EuXnjdFcJcoHw5bsjvBmk2Tg\r\ng7lcy6auDPvAwy2UEOQfEX+Y8dX+DpjpAzf13m+00WsdfJz4MzldFImjkKuz\r\nah2Rx1fgdLzh+K0kWNpGOl/VTywtL+BONJ144kJYbUgZt9U5V3kz4nM/NbGF\r\nNCEEjWU8YBC3EZiY35BMJY1xrIrM/9FBxESGDYaEtu+qFMdE3G3my8TXsCPe\r\nmlGbRot6kUS+RzdXJbP1j/uE8bzVBZ4ovkY=\r\n=z4Gp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"66999bf00f2054272299a9e06b68e4e861bced00","scripts":{"lint":"prettier --check index.ts","test":"node test/index.js","build":"tsc"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"9.3.1","description":"Less painful binary encoding / decoding","directories":{},"_nodeVersion":"19.5.0","dependencies":{"@scure/base":"~1.1.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"2.6.2","typescript":"4.7.3","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.3.2_1675355917613_0.05462294588516259","host":"s3://npm-registry-packages"}},"0.4.0":{"name":"micro-packed","version":"0.4.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.4.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"6aa87792aabfddb279f1b2e238fe6e3a6b5f9d4f","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.4.0.tgz","fileCount":7,"integrity":"sha512-H1+8SUMwcm68RXLOj3t5S8wXVf49FuR5m9IAG7XZ1XUOexbnQriyql5lk2I3fx/KyYf48LWNf5Lnbc2OjyQFMw==","signatures":[{"sig":"MEUCIDJcHA6d6TeldgxBR2CUTZQnVbHUJctcGEAV3IJ618MaAiEAhRojrAwaZY9J8YmNt4a1JWvdXHfD5fXxENAMJd7NaVA=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":99966},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"f74efe1af71c3444fcbe9294a0814998ade448c0","scripts":{"lint":"prettier --check index.ts","test":"node test/index.js","build":"tsc","format":"prettier --write index.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.2.4","description":"Less painful binary encoding / decoding","directories":{},"_nodeVersion":"21.4.0","dependencies":{"@scure/base":"~1.1.3"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.4.0_1702338572046_0.07830207180375237","host":"s3://npm-registry-packages"}},"0.5.0":{"name":"micro-packed","version":"0.5.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.5.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"e9e2ce6db30e34196609f17e5479cdd8562a7fde","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.5.0.tgz","fileCount":14,"integrity":"sha512-64sfm7giGWi1qFdH9D2hCUz/YPXPe41v8bYN/q8oYiimtEe4fqQ8r0oM6vknk3+H+Yf8jjEFSDpAYSFI9fiuAQ==","signatures":[{"sig":"MEUCIAdI/Y6jKhorc/m+bcwppLsz3Xptmx+Tslfh3sqN1e/KAiEA9EmmOvX9Mjcqu08nlOmMNkpBuHvm3r+urwdeKJ8D1fM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.5.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":171156},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"8c364b185f1ed1cd230383b3dc010c64d5912e91","scripts":{"lint":"prettier --check index.ts debugger.ts","test":"node test/index.js && node test/debugger.test.js","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write index.ts debugger.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.2.5","description":"Define complex binary structures using composable primitives.","directories":{},"_nodeVersion":"20.10.0","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.5.0_1704428610576_0.5653153786468057","host":"s3://npm-registry-packages"}},"0.5.1":{"name":"micro-packed","version":"0.5.1","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.5.1","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"871965e69b9e34372226972031b22208f6f80145","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.5.1.tgz","fileCount":14,"integrity":"sha512-VjBHcsMAVfivjCZPnqAEEkcihPBbNd39KLEMH76ksL3ORKSZE04gkrtsAmXtaTor67PmTO5h0Rq9+j3PA4zNrw==","signatures":[{"sig":"MEQCIAqmugWSCtMlhXoAO3P3Awr7E5O4CkbF15jjcyHOisF9AiBwdAuKPXrDHeRWFzoiP8MmTRNlAzvYrHffXaAicFOOJw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.5.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":192549},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"f8cf890796a56916c02a747355972df34149868a","scripts":{"lint":"prettier --check index.ts debugger.ts","test":"node test/index.js && node test/debugger.test.js","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write index.ts debugger.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.2.5","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.10.0","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.5.1_1704790191703_0.19228752351650757","host":"s3://npm-registry-packages"}},"0.5.2":{"name":"micro-packed","version":"0.5.2","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.5.2","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"5537f97f74fe00d3b3d761d697bb38b9d96d241e","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.5.2.tgz","fileCount":14,"integrity":"sha512-l8sgdeDNz4KMFdEyk2o0qt+GfmzGZH7sV5+XcHRyBS8LQLCHh/7LYlFlQ5k+axqz7hgANsn8SqzDxRe7O2DIIg==","signatures":[{"sig":"MEYCIQCJZyYmRCIwQNWRkj/6I0FYBQR5XLZpMyAN85l9O3x3KwIhAJcFpLx3Ck10N8jGXSo6XZMgV0ry4mBu9kQicXM2r6AW","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.5.2","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":196256},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"8feb353456682587d0101ae5472f44a89a369f4a","scripts":{"lint":"prettier --check index.ts debugger.ts","test":"node test/index.js && node test/debugger.test.js","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write index.ts debugger.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.4.0","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.11.0","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.5.2_1707602261820_0.17212076954420175","host":"s3://npm-registry-packages"}},"0.5.3":{"name":"micro-packed","version":"0.5.3","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.5.3","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"b2bc45ccf10347b5f253d3a566f0c86fc0652445","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.5.3.tgz","fileCount":14,"integrity":"sha512-zWRoH+qUb/ZMp9gVZhexvRGCENDM5HEQF4sflqpdilUHWK2/zKR7/MT8GBctnTwbhNJwy1iuk5q6+TYP7/twYA==","signatures":[{"sig":"MEQCIBJUsbSulcwmAxXLFHeKQHmFP9UW9yRYd+qyzwhDOznVAiBb1Y24+BH9HLqkoOwYQyZjQ9jsZv1ihPLigrTgNPZV4g==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.5.3","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":197284},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"08595b7d25090928b73c61c2730e02e0c8300a7e","scripts":{"lint":"prettier --check index.ts debugger.ts","test":"node test/index.js && node test/debugger.test.js","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write index.ts debugger.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.5.0","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.11.1","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.5.3_1710396839958_0.9163660916559686","host":"s3://npm-registry-packages"}},"0.6.0":{"name":"micro-packed","version":"0.6.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.6.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"9d824d619fcb90d76e28a795a158c9720d09c7fc","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.6.0.tgz","fileCount":16,"integrity":"sha512-KPn2O2kdhhArpPJ/DklR4Iv1AKju2i/2GfCEDpL6E4JqvIrKJW7U9iT3gq93EGsFqsVQOGE4F8daO/zhphSduQ==","signatures":[{"sig":"MEYCIQDyXoasVWeByi76yTJ+NCZbWxAQBOaBkjqhbT8WxdPQfAIhANDz2b2DgYKiMW9nkYKjle9uVXACVwRjepqlJ0T7Czpy","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.6.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":351971},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"14a8dda59aaeba0cc4d355e646dc35065532d217","scripts":{"lint":"prettier --check src","test":"node test/index.js && node test/debugger.test.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src","bench:all":"node benchmark/index.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.8.0","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.13.1","dependencies":{"@scure/base":"~1.1.5","micro-bmark":"0.3.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-should":"0.4.0","@paulmillr/jsbt":"0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.6.0_1715834079801_0.2679736276850895","host":"s3://npm-registry-packages"}},"0.6.1":{"name":"micro-packed","version":"0.6.1","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.6.1","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"620d77e538c2be9c8e48ad2721a3e68cddff4f4f","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.6.1.tgz","fileCount":16,"integrity":"sha512-L990sYu+qWS4OWegPKyVDEpuVtnk6xxcZICU17Bp0it93eTaPsqMhJeqQvHj586P3JDEalWTEs4uIwheHxeEWg==","signatures":[{"sig":"MEQCID7ER2NBb/yLx8dfEusqD3qbV36hN1COB8y+82veF3VbAiBiFgrkPB0PpPXsiWt/htIlLnPiqnpJ6e54V64Y/fe/9Q==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.6.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":351971},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"19249cd4010e1ea6676db8a6146707ba86c17837","scripts":{"lint":"prettier --check src","test":"node test/index.js && node test/debugger.test.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src","bench:all":"node benchmark/index.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.8.0","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.13.1","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.6.1_1715834411179_0.8911939795383668","host":"s3://npm-registry-packages"}},"0.6.2":{"name":"micro-packed","version":"0.6.2","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.6.2","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"cc132517730b3b865a534166d6d58d8b1ee4d586","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.6.2.tgz","fileCount":16,"integrity":"sha512-a1C2m0WdjZSMleMylPihztSwQSt3pd97lbk6inQgYJ+AVWJIzNfufOQo3faBztJAdvr0h9gt190H9xp+sKKJGA==","signatures":[{"sig":"MEQCIFTobL4D/uedY368l0xzYUQrwWdddiKksqsuQBnQprQIAiA93jwsydYjtWUOLgojlc+6DeEnIDFALbGR2ooHaIUZBw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.6.2","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":353763},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"e37277fb3a307f843b85ba5920eebf5bdfbd61cf","scripts":{"lint":"prettier --check src","test":"node test/index.js && node test/debugger.test.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src","bench:all":"node benchmark/index.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.8.0","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.13.1","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.6.2_1715835877344_0.8430758703252939","host":"s3://npm-registry-packages"}},"0.6.3":{"name":"micro-packed","version":"0.6.3","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.6.3","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"125e36bcfd4aa03dbdb31c81cda3bfea84367ae0","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.6.3.tgz","fileCount":16,"integrity":"sha512-VmVkyc7lIzAq/XCPFuLc/CwQ7Ehs5XDK3IwqsZHiBIDttAI9Gs7go6Lv4lNRuAIKrGKcRTtthFKUNyHS0S4wJQ==","signatures":[{"sig":"MEQCIBDly5/DC0DIl8aINseAYyOmt9MwBHiT2atPF7Uxo4KKAiAvDuu0U4Cwc4Yz9q45Yu+kzUtmV1B4SaZ7+glPsc+9gA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.6.3","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":355810},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"types":"./lib/index.d.ts","import":"./lib/esm/index.js","default":"./lib/index.js"},"./debugger":{"types":"./lib/debugger.d.ts","import":"./lib/esm/debugger.js","default":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"2b6bf5e62605fbe50270997cc274ce416419cba3","scripts":{"lint":"prettier --check src","test":"node test/index.js && node test/debugger.test.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src","bench:all":"node benchmark/index.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.8.0","description":"Define complex binary structures using composable primitives","directories":{},"_nodeVersion":"20.13.1","dependencies":{"@scure/base":"~1.1.5"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.1.1","typescript":"5.3.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.6.3_1716352778985_0.5542724647005215","host":"s3://npm-registry-packages"}},"0.7.0":{"name":"micro-packed","version":"0.7.0","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.7.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"e69ca4f1c160eb1f2c91329eca06b799c72f3bf0","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.7.0.tgz","fileCount":23,"integrity":"sha512-GJB99Ox8AI3C2Xr9DFalmHjYaJTUwh6w18jqnOKJEU9fpR9uZaRGCE8xjSS4b9yH2KDmW2BdPR8BylzfYVBIdg==","signatures":[{"sig":"MEUCIDBiZP2TqZpaXh6gMaveUaNSVgwMNPzWB8M5tVoucw2mAiEA22G9FIyP5q6FTqUv5ixwLBdtt0cHbbg+Hu0o8DkZ/YY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.7.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":555382},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"import":"./lib/esm/index.js","require":"./lib/index.js"},"./debugger":{"import":"./lib/esm/debugger.js","require":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"245eda4e2587323bd5fce60fdb9b45e99aaaa11b","scripts":{"lint":"prettier --check src","test":"node test/index.js && node test/debugger.test.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src","bench:all":"node benchmark/index.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.9.1","description":"Define complex binary structures using composable primitives","directories":{},"sideEffects":false,"_nodeVersion":"20.18.0","dependencies":{"@scure/base":"~1.2.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.3.2","fast-check":"3.0.0","typescript":"5.5.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.2.1"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.7.0_1732346776973_0.6736872179951656","host":"s3://npm-registry-packages"}},"0.7.1":{"name":"micro-packed","version":"0.7.1","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.7.1","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"385337d0a1ee37f08b83c001e964356e7e2d694a","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.7.1.tgz","fileCount":23,"integrity":"sha512-Ab7jfxdnrwH3QtHNkz+hIwPxfl7IXPDcODZ0ED645uqHn/iijboGhBfUk5H53mdbmrbiQxagmUYkbzrYKEDwLA==","signatures":[{"sig":"MEQCIA5iJrxITH3aX/7hTNzQAobQxoBrQzALlxkKGMUbmrttAiAMjWgXRwzA3dtO7LT4YFZLCtUFTdgYlmTJK5zZpIykRA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.7.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":562306},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"import":"./lib/esm/index.js","require":"./lib/index.js"},"./debugger":{"import":"./lib/esm/debugger.js","require":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"744a89455aed2072c454e537102fcbdcb6e6cf91","scripts":{"lint":"prettier --check src","test":"node test/index.js && node test/debugger.test.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src","bench:all":"node benchmark/index.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"11.0.0","description":"Define complex binary structures using composable primitives","directories":{},"sideEffects":false,"_nodeVersion":"20.18.1","dependencies":{"@scure/base":"~1.2.1"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.3.2","fast-check":"3.0.0","typescript":"5.5.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.2.1"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.7.1_1736289502971_0.5381423384964952","host":"s3://npm-registry-packages-npm-production"}},"0.7.2":{"name":"micro-packed","version":"0.7.2","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"MIT","_id":"micro-packed@0.7.2","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/micro-packed","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"dist":{"shasum":"7f9decd6c11fe2617bc85ad4ebc0ad48bf423f36","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.7.2.tgz","fileCount":23,"integrity":"sha512-HJ/u8+tMzgrJVAl6P/4l8KGjJSA3SCZaRb1m4wpbovNScCSmVOGUYbkkcoPPcknCHWPpRAdjy+yqXqyQWf+k8g==","signatures":[{"sig":"MEUCIGl8WFEpZrMNUjEIAKRcLrmnJnn+JqwaUyiYP06mNjNSAiEA+6g41E9VbUFhGNWZz7BccJmSHmU1q6ZNxJhic2MgaZE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.7.2","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":562428},"main":"lib/index.js","types":"lib/index.d.ts","module":"lib/esm/index.js","exports":{".":{"import":"./lib/esm/index.js","require":"./lib/index.js"},"./debugger":{"import":"./lib/esm/debugger.js","require":"./lib/debugger.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"8d3a769d999d0563b3ac4c4d32cef46fe01e579d","scripts":{"lint":"prettier --check src","test":"node test/index.js","bench":"node benchmark/index.js noble","build":"tsc && tsc -p tsconfig.cjs.json","format":"prettier --write src","test:bun":"bun test/index.js","bench:all":"node benchmark/index.js","test:deno":"deno --allow-env --allow-read test/index.js","test:slow":"node test/slow.test.js"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/micro-packed.git","type":"git"},"_npmVersion":"10.9.2","description":"Define complex binary structures using composable primitives","directories":{},"sideEffects":false,"_nodeVersion":"22.13.0","dependencies":{"@scure/base":"~1.2.2"},"_hasShrinkwrap":false,"devDependencies":{"prettier":"3.3.2","fast-check":"3.0.0","typescript":"5.5.2","micro-bmark":"0.4.0","micro-should":"0.5.1","@paulmillr/jsbt":"0.3.1"},"_npmOperationalInternal":{"tmp":"tmp/micro-packed_0.7.2_1737191534720_0.2476777929321352","host":"s3://npm-registry-packages-npm-production"}},"0.7.3":{"name":"micro-packed","version":"0.7.3","description":"Define complex binary structures using composable primitives","dependencies":{"@scure/base":"~1.2.5"},"main":"lib/index.js","module":"lib/esm/index.js","types":"lib/index.d.ts","exports":{".":{"import":"./lib/esm/index.js","require":"./lib/index.js"},"./debugger":{"import":"./lib/esm/debugger.js","require":"./lib/debugger.js"}},"sideEffects":false,"scripts":{"bench":"node benchmark/index.js noble","bench:all":"node benchmark/index.js","build":"tsc && tsc -p tsconfig.cjs.json","build:release":"npx jsbt esbuild test/build","lint":"prettier --check src","format":"prettier --write src","test":"node test/index.js","test:bun":"bun test/index.js","test:deno":"deno --allow-env --allow-read test/index.js","test:slow":"node test/slow.test.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"license":"MIT","homepage":"https://github.com/paulmillr/micro-packed","repository":{"type":"git","url":"git+https://github.com/paulmillr/micro-packed.git"},"devDependencies":{"@paulmillr/jsbt":"0.3.3","fast-check":"3.0.0","micro-bmark":"0.4.1","micro-should":"0.5.2","prettier":"3.5.3","typescript":"5.8.3"},"keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"funding":"https://paulmillr.com/funding/","_id":"micro-packed@0.7.3","gitHead":"45dee2571db241af3ddc8b10a433458ec04bdab6","bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"_nodeVersion":"22.13.0","_npmVersion":"10.9.2","dist":{"integrity":"sha512-2Milxs+WNC00TRlem41oRswvw31146GiSaoCT7s3Xi2gMUglW5QBeqlQaZeHr5tJx9nm3i57LNXPqxOOaWtTYg==","shasum":"59e96b139dffeda22705c7a041476f24cabb12b6","tarball":"https://registry.npmjs.org/micro-packed/-/micro-packed-0.7.3.tgz","fileCount":23,"unpackedSize":563186,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/micro-packed@0.7.3","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEUCIQDLffutuOUeC0LmX7KFOaTGSc8bBbGMGxj8X3HwSc0bEQIgBUtYh5ecFL6mEAU46Se46+Wuw8ZavEy37p/YhRnZWnY="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/micro-packed_0.7.3_1745510407121_0.5947125717915014"},"_hasShrinkwrap":false}},"time":{"created":"2022-06-19T10:00:48.806Z","modified":"2025-04-24T16:00:07.704Z","0.1.0":"2022-06-19T10:00:49.006Z","0.2.0":"2022-07-17T18:02:52.821Z","0.3.0":"2022-08-25T22:08:01.964Z","0.3.1":"2022-09-12T15:29:55.660Z","0.3.2":"2023-02-02T16:38:37.835Z","0.4.0":"2023-12-11T23:49:32.217Z","0.5.0":"2024-01-05T04:23:30.806Z","0.5.1":"2024-01-09T08:49:51.877Z","0.5.2":"2024-02-10T21:57:41.961Z","0.5.3":"2024-03-14T06:14:00.152Z","0.6.0":"2024-05-16T04:34:39.972Z","0.6.1":"2024-05-16T04:40:11.331Z","0.6.2":"2024-05-16T05:04:37.567Z","0.6.3":"2024-05-22T04:39:39.190Z","0.7.0":"2024-11-23T07:26:17.223Z","0.7.1":"2025-01-07T22:38:23.190Z","0.7.2":"2025-01-18T09:12:14.912Z","0.7.3":"2025-04-24T16:00:07.303Z"},"bugs":{"url":"https://github.com/paulmillr/micro-packed/issues"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"license":"MIT","homepage":"https://github.com/paulmillr/micro-packed","keywords":["encode","encoder","binary","bytes","struct","tuple","enum"],"repository":{"type":"git","url":"git+https://github.com/paulmillr/micro-packed.git"},"description":"Define complex binary structures using composable primitives","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"readme":"# micro-packed\n\n> Less painful binary encoding / decoding\n\nDefine complex binary structures using composable primitives. Comes with a friendly [debugger](#debugger).\n\nUsed in:\n\n- [btc-signer](https://github.com/paulmillr/scure-btc-signer) for parsing of Bitcoin Script\n- [eth-signer](https://github.com/paulmillr/micro-eth-signer) for RLP and SSZ decoding. RLP pointers are protected against DoS\n- [sol-signer](https://github.com/paulmillr/micro-sol-signer) for parsing of keys, messages and other things\n- [micro-ordinals](https://github.com/paulmillr/micro-ordinals) for Bitcoin ordinal parsing\n- [key-producer](https://github.com/paulmillr/micro-key-producer) for lightweight implementations of PGP, SSH and OTP\n\n## Usage\n\n> `npm install micro-packed`\n\n> `jsr add jsr:@paulmillr/micro-packed`\n\n```ts\nimport * as P from 'micro-packed';\nconst s = P.struct({\n  field1: P.U32BE, // 32-bit unsigned big-endian integer\n  field2: P.string(P.U8), // String with U8 length prefix\n  field3: P.bytes(32), // 32 bytes\n  field4: P.array(\n    P.U16BE,\n    P.struct({\n      // Array of structs with U16BE length\n      subField1: P.U64BE, // 64-bit unsigned big-endian integer\n      subField2: P.string(10), // 10-byte string\n    })\n  ),\n});\n```\n\nTable of contents:\n\n- [Basics](#basics)\n- Primitive types: [P.bytes](#pbytes), [P.string](#pstring), [P.hex](#phex), [P.constant](#pconstant), [P.pointer](#ppointer)\n- Complex types: [P.array](#parray), [P.struct](#pstruct), [P.tuple](#ptuple), [P.map](#pmap), [P.tag](#ptag), [P.mappedTag](#pmappedtag)\n- Padding, prefix, magic: [P.padLeft](#ppadleft), [P.padRight](#ppadright), [P.prefix](#pprefix), [P.magic](#pmagic), [P.magicBytes](#pmagicbytes)\n- Flags: [P.flag](#pflag), [P.flagged](#pflagged), [P.optional](#poptional)\n- Wrappers: [P.apply](#papply), [P.wrap](#pwrap), [P.lazy](#plazy)\n- Bit fiddling: [P.bits](#pbits), [P.bitset](#pbitset)\n- [utils](#utils): [P.validate](#pvalidate), [coders.decimal](#codersdecimal)\n- [Debugger](#debugger)\n\n### Basics\n\nThere are 3 main interfaces:\n\n- `Coder<F, T>` - a converter between types F and T\n- `BytesCoder<T>` - a Coder from type T to Bytes\n- `BytesCoderStream<T>` - streaming BytesCoder with Reader and Writer streams\n\nCoder and BytesCoder use `encode` / `decode` methods\n\nBytesCoderStream use `encodeStream` and `decodeStream`\n\n#### Flexible size\n\nMany primitives accept length / size / len as their argument.\nIt represents their size. There are four different types of size:\n\n- CoderType: Dynamic size (prefixed with a length CoderType like U16BE)\n- number: Fixed size (specified by a number)\n- terminator: Uint8Array (will parse until these bytes are matched)\n- null: (null, will parse until end of buffer)\n\n## Primitive types\n\n### P.bytes\n\nBytes CoderType with a specified length and endianness.\n\n| Param | Description                                                     |\n| ----- | --------------------------------------------------------------- |\n| len   | Length CoderType, number, Uint8Array (for terminator), or null. |\n| le    | Whether to use little-endian byte order.                        |\n\n```js\n// Dynamic size bytes (prefixed with P.U16BE number of bytes length)\nconst dynamicBytes = P.bytes(P.U16BE, false);\nconst fixedBytes = P.bytes(32, false); // Fixed size bytes\nconst unknownBytes = P.bytes(null, false); // Unknown size bytes, will parse until end of buffer\nconst zeroTerminatedBytes = P.bytes(new Uint8Array([0]), false); // Zero-terminated bytes\n```\n\nFollowing shortcuts are also available:\n\n- `P.EMPTY`: Shortcut to zero-length (empty) byte array\n- `P.NULL`: Shortcut to one-element (element is 0) byte array\n\n### P.string\n\nString CoderType with a specified length and endianness.\n\n| Param | Description                                        |\n| ----- | -------------------------------------------------- |\n| len   | CoderType, number, Uint8Array (terminator) or null |\n| le    | Whether to use little-endian byte order.           |\n\n```js\nconst dynamicString = P.string(P.U16BE, false); // Dynamic size string (prefixed with P.U16BE number of string length)\nconst fixedString = P.string(10, false); // Fixed size string\nconst unknownString = P.string(null, false); // Unknown size string, will parse until end of buffer\nconst nullTerminatedString = P.cstring; // NUL-terminated string\nconst _cstring = P.string(new Uint8Array([0])); // Same thing\n```\n\n### P.hex\n\nHexadecimal string CoderType with a specified length, endianness, and optional 0x prefix.\n\n**Returns**: CoderType representing the hexadecimal string.\n\n| Param  | Description                                                                                                                 |\n| ------ | --------------------------------------------------------------------------------------------------------------------------- |\n| len    | Length CoderType (dynamic size), number (fixed size), Uint8Array (for terminator), or null (will parse until end of buffer) |\n| isLE   | Whether to use little-endian byte order.                                                                                    |\n| with0x | Whether to include the 0x prefix.                                                                                           |\n\n```js\nconst dynamicHex = P.hex(P.U16BE, { isLE: false, with0x: true }); // Hex string with 0x prefix and U16BE length\nconst fixedHex = P.hex(32, { isLE: false, with0x: false }); // Fixed-length 32-byte hex string without 0x prefix\n```\n\n### P.constant\n\nCreates a CoderType for a constant value. The function enforces this value during encoding,\nensuring it matches the provided constant. During decoding, it always returns the constant value.\nThe actual value is not written to or read from any byte stream; it's used only for validation.\n\n**Returns**: CoderType representing the constant value.\n\n| Param | Description     |\n| ----- | --------------- |\n| c     | Constant value. |\n\n```js\n// Always return 123 on decode, throws on encoding anything other than 123\nconst constantU8 = P.constant(123);\n```\n\n### P.pointer\n\nPointer to a value using a pointer CoderType and an inner CoderType.\nPointers are scoped, and the next pointer in the dereference chain is offset by the previous one.\nBy default (if no 'allowMultipleReads' in ReaderOpts is set) is safe, since\nsame region of memory cannot be read multiple times.\n\n**Returns**: CoderType representing the pointer to the value.\n\n| Param | Description                                        |\n| ----- | -------------------------------------------------- |\n| ptr   | CoderType for the pointer value.                   |\n| inner | CoderType for encoding/decoding the pointed value. |\n| sized | Whether the pointer should have a fixed size.      |\n\n```js\nconst pointerToU8 = P.pointer(P.U16BE, P.U8); // Pointer to a single U8 value\n```\n\n## Complex types\n\n### P.array\n\nArray of items (inner type) with a specified length.\n\n| Param | Description                                                                                                             |\n| ----- | ----------------------------------------------------------------------------------------------------------------------- |\n| len   | Length CoderType (dynamic size), number (fixed size), Uint8Array (terminator), or null (will parse until end of buffer) |\n| inner | CoderType for encoding/decoding each array item.                                                                        |\n\n```js\nconst a1 = P.array(P.U16BE, child); // Dynamic size array (prefixed with P.U16BE number of array length)\nconst a2 = P.array(4, child); // Fixed size array\nconst a3 = P.array(null, child); // Unknown size array, will parse until end of buffer\nconst a4 = P.array(new Uint8Array([0]), child); // zero-terminated array (NOTE: terminator can be any buffer)\n```\n\n### P.struct\n\nStructure of composable primitives (C/Rust struct)\n\n**Returns**: CoderType representing the structure.\n\n| Param  | Description                               |\n| ------ | ----------------------------------------- |\n| fields | Object mapping field names to CoderTypes. |\n\n```js\n// Define a structure with a 32-bit big-endian unsigned integer, a string, and a nested structure\nconst myStruct = P.struct({\n  id: P.U32BE,\n  name: P.string(P.U8),\n  nested: P.struct({\n    flag: P.bool,\n    value: P.I16LE,\n  }),\n});\n```\n\n### P.tuple\n\nTuple (unnamed structure) of CoderTypes. Same as struct but with unnamed fields.\n\n| Param  | Description          |\n| ------ | -------------------- |\n| fields | Array of CoderTypes. |\n\n```js\nconst myTuple = P.tuple([P.U8, P.U16LE, P.string(P.U8)]);\n```\n\n### P.map\n\nMapping between encoded values and string representations.\n\n**Returns**: CoderType representing the mapping.\n\n| Param    | Description                                              |\n| -------- | -------------------------------------------------------- |\n| inner    | CoderType for encoded values.                            |\n| variants | Object mapping string representations to encoded values. |\n\n```ts\n// Map between numbers and strings\nconst numberMap = P.map(P.U8, {\n  one: 1,\n  two: 2,\n  three: 3,\n});\n\n// Map between byte arrays and strings\nconst byteMap = P.map(P.bytes(2, false), {\n  ab: Uint8Array.from([0x61, 0x62]),\n  cd: Uint8Array.from([0x63, 0x64]),\n});\n```\n\n### P.tag\n\nTagged union of CoderTypes, where the tag value determines which CoderType to use.\nThe decoded value will have the structure `{ TAG: number, data: ... }`.\n\n| Param    | Description                              |\n| -------- | ---------------------------------------- |\n| tag      | CoderType for the tag value.             |\n| variants | Object mapping tag values to CoderTypes. |\n\n```js\n// Tagged union of array, string, and number\n// Depending on the value of the first byte, it will be decoded as an array, string, or number.\nconst taggedUnion = P.tag(P.U8, {\n  0x01: P.array(P.U16LE, P.U8),\n  0x02: P.string(P.U8),\n  0x03: P.U32BE,\n});\n\nconst encoded = taggedUnion.encode({ TAG: 0x01, data: 'hello' }); // Encodes the string 'hello' with tag 0x01\nconst decoded = taggedUnion.decode(encoded); // Decodes the encoded value back to { TAG: 0x01, data: 'hello' }\n```\n\n### P.mappedTag\n\nMapping between encoded values, string representations, and CoderTypes using a tag CoderType.\n\n| Param    | Description                                                            |\n| -------- | ---------------------------------------------------------------------- |\n| tagCoder | CoderType for the tag value.                                           |\n| variants | Object mapping string representations to [tag value, CoderType] pairs. |\n\n```js\nconst cborValue: P.CoderType<CborValue> = P.mappedTag(P.bits(3), {\n  uint: [0, cborUint], // An unsigned integer in the range 0..264-1 inclusive.\n  negint: [1, cborNegint], // A negative integer in the range -264..-1 inclusive\n  bytes: [2, P.lazy(() => cborLength(P.bytes, cborValue))], // A byte string.\n  string: [3, P.lazy(() => cborLength(P.string, cborValue))], // A text string (utf8)\n  array: [4, cborArrLength(P.lazy(() => cborValue))], // An array of data items\n  map: [5, P.lazy(() => cborArrLength(P.tuple([cborValue, cborValue])))], // A map of pairs of data items\n  tag: [6, P.tuple([cborUint, P.lazy(() => cborValue)] as const)], // A tagged data item (\"tag\") whose tag number\n  simple: [7, cborSimple], // Floating-point numbers and simple values, as well as the \"break\" stop code\n});\n```\n\n## Padding, prefix, magic\n\n### P.padLeft\n\nPads a CoderType with a specified block size and padding function on the left side.\n\n**Returns**: CoderType representing the padded value.\n\n| Param     | Description                                                     |\n| --------- | --------------------------------------------------------------- |\n| blockSize | Block size for padding (positive safe integer).                 |\n| inner     | Inner CoderType to pad.                                         |\n| padFn     | Padding function to use. If not provided, zero padding is used. |\n\n```js\n// Pad a U32BE with a block size of 4 and zero padding\nconst paddedU32BE = P.padLeft(4, P.U32BE);\n\n// Pad a string with a block size of 16 and custom padding\nconst paddedString = P.padLeft(16, P.string(P.U8), (i) => i + 1);\n```\n\n### P.padRight\n\nPads a CoderType with a specified block size and padding function on the right side.\n\n**Returns**: CoderType representing the padded value.\n\n| Param     | Description                                                     |\n| --------- | --------------------------------------------------------------- |\n| blockSize | Block size for padding (positive safe integer).                 |\n| inner     | Inner CoderType to pad.                                         |\n| padFn     | Padding function to use. If not provided, zero padding is used. |\n\n```js\n// Pad a U16BE with a block size of 2 and zero padding\nconst paddedU16BE = P.padRight(2, P.U16BE);\n\n// Pad a bytes with a block size of 8 and custom padding\nconst paddedBytes = P.padRight(8, P.bytes(null), (i) => i + 1);\n```\n\n### P.ZeroPad\n\nShortcut to zero-bytes padding\n\n### P.prefix\n\nPrefix-encoded value using a length prefix and an inner CoderType.\n\n**Returns**: CoderType representing the prefix-encoded value.\n\n| Param | Description                                                     |\n| ----- | --------------------------------------------------------------- |\n| len   | Length CoderType, number, Uint8Array (for terminator), or null. |\n| inner | CoderType for the actual value to be prefix-encoded.            |\n\n```js\nconst dynamicPrefix = P.prefix(P.U16BE, P.bytes(null)); // Dynamic size prefix (prefixed with P.U16BE number of bytes length)\nconst fixedPrefix = P.prefix(10, P.bytes(null)); // Fixed size prefix (always 10 bytes)\n```\n\n### P.magic\n\nMagic value CoderType that encodes/decodes a constant value.\nThis can be used to check for a specific magic value or sequence of bytes at the beginning of a data structure.\n\n**Returns**: CoderType representing the magic value.\n\n| Param    | Description                                              |\n| -------- | -------------------------------------------------------- |\n| inner    | Inner CoderType for the value.                           |\n| constant | Constant value.                                          |\n| check    | Whether to check the decoded value against the constant. |\n\n```js\n// Always encodes constant as bytes using inner CoderType, throws if encoded value is not present\nconst magicU8 = P.magic(P.U8, 0x42);\n```\n\n### P.magicBytes\n\nMagic bytes CoderType that encodes/decodes a constant byte array or string.\n\n**Returns**: CoderType representing the magic bytes.\n\n| Param    | Description                    |\n| -------- | ------------------------------ |\n| constant | Constant byte array or string. |\n\n```js\n// Always encodes undefined into byte representation of string 'MAGIC'\nconst magicBytes = P.magicBytes('MAGIC');\n```\n\n## Flags\n\n### P.flag\n\nFlag CoderType that encodes/decodes a boolean value based on the presence of a marker.\n\n**Returns**: CoderType representing the flag value.\n\n| Param     | Description                          |\n| --------- | ------------------------------------ |\n| flagValue | Marker value.                        |\n| xor       | Whether to invert the flag behavior. |\n\n```js\nconst flag = P.flag(new Uint8Array([0x01, 0x02])); // Encodes true as u8a([0x01, 0x02]), false as u8a([])\nconst flagXor = P.flag(new Uint8Array([0x01, 0x02]), true); // Encodes true as u8a([]), false as u8a([0x01, 0x02])\n// Conditional encoding with flagged\nconst s = P.struct({ f: P.flag(new Uint8Array([0x0, 0x1])), f2: P.flagged('f', P.U32BE) });\n```\n\n### P.flagged\n\nConditional CoderType that encodes/decodes a value only if a flag is present.\n\n**Returns**: CoderType representing the conditional value.\n\n| Param | Description                                               |\n| ----- | --------------------------------------------------------- |\n| path  | Path to the flag value or a CoderType for the flag.       |\n| inner | Inner CoderType for the value.                            |\n| def   | Optional default value to use if the flag is not present. |\n\n### P.optional\n\nOptional CoderType that encodes/decodes a value based on a flag.\n\n**Returns**: CoderType representing the optional value.\n\n| Param | Description                                               |\n| ----- | --------------------------------------------------------- |\n| flag  | CoderType for the flag value.                             |\n| inner | Inner CoderType for the value.                            |\n| def   | Optional default value to use if the flag is not present. |\n\n```js\n// Will decode into P.U32BE only if flag present\nconst optional = P.optional(P.flag(new Uint8Array([0x0, 0x1])), P.U32BE);\n```\n\n```js\n// If no flag present, will decode into default value\nconst optionalWithDefault = P.optional(P.flag(new Uint8Array([0x0, 0x1])), P.U32BE, 123);\n```\n\n```js\nconst s = P.struct({\n  f: P.flag(new Uint8Array([0x0, 0x1])),\n  f2: P.flagged('f', P.U32BE),\n});\n```\n\n```js\nconst s2 = P.struct({\n  f: P.flag(new Uint8Array([0x0, 0x1])),\n  f2: P.flagged('f', P.U32BE, 123),\n});\n```\n\n## Wrappers\n\n### P.apply\n\nApplies a base coder to a CoderType.\n\n**Returns**: CoderType representing the transformed value.\n\n| Param | Description              |\n| ----- | ------------------------ |\n| inner | The inner CoderType.     |\n| b     | The base coder to apply. |\n\n```js\nimport { hex } from '@scure/base';\nconst hex = P.apply(P.bytes(32), hex); // will decode bytes into a hex string\n```\n\n### P.wrap\n\nWraps a stream encoder into a generic encoder and optionally validation function\n\n| Param | Description                                    |\n| ----- | ---------------------------------------------- |\n| inner | BytesCoderStream & { validate?: Validate<T> }. |\n\n```js\nconst U8 = P.wrap({\n  encodeStream: (w: Writer, value: number) => w.byte(value),\n  decodeStream: (r: Reader): number => r.byte()\n});\n\nconst checkedU8 = P.wrap({\n  encodeStream: (w: Writer, value: number) => w.byte(value),\n  decodeStream: (r: Reader): number => r.byte()\n  validate: (n: number) => {\n   if (n > 10) throw new Error(`${n} > 10`);\n   return n;\n  }\n});\n```\n\n### P.lazy\n\nLazy CoderType that is evaluated at runtime.\n\n**Returns**: CoderType representing the lazy value.\n\n| Param | Description                            |\n| ----- | -------------------------------------- |\n| fn    | A function that returns the CoderType. |\n\n```js\ntype Tree = { name: string; children: Tree[] };\nconst tree = P.struct({\n  name: P.cstring,\n  children: P.array(\n    P.U16BE,\n    P.lazy((): P.CoderType<Tree> => tree)\n  ),\n});\n```\n\n## Bit fiddling\n\nBit fiddling is implementing using primitive called Bitset: a small structure to store position of ranges that have been read.\nCan be more efficient when internal trees are utilized at the cost of complexity.\nNeeds `O(N/8)` memory for parsing.\nPurpose: if there are pointers in parsed structure,\nthey can cause read of two distinct ranges:\n[0-32, 64-128], which means 'pos' is not enough to handle them\n\n### P.bits\n\nCoderType for parsing individual bits.\nNOTE: Structure should parse whole amount of bytes before it can start parsing byte-level elements.\n\n**Returns**: CoderType representing the parsed bits.\n\n| Param | Description              |\n| ----- | ------------------------ |\n| len   | Number of bits to parse. |\n\n```js\nconst s = P.struct({ magic: P.bits(1), version: P.bits(1), tag: P.bits(4), len: P.bits(2) });\n```\n\n### P.bitset\n\nBitset of boolean values with optional padding.\n\n**Returns**: CoderType representing the bitset.\n\n| Param | Description                                        |\n| ----- | -------------------------------------------------- |\n| names | An array of string names for the bitset values.    |\n| pad   | Whether to pad the bitset to a multiple of 8 bits. |\n\n```js\nconst myBitset = P.bitset(['flag1', 'flag2', 'flag3', 'flag4'], true);\n```\n\n## utils\n\n#### P.validate\n\nValidates a value before encoding and after decoding using a provided function.\n\n**Returns**: CoderType which check value with validation function.\n\n| Param | Description              |\n| ----- | ------------------------ |\n| inner | The inner CoderType.     |\n| fn    | The validation function. |\n\n```js\nconst val = (n: number) => {\n  if (n > 10) throw new Error(`${n} > 10`);\n  return n;\n};\n\nconst RangedInt = P.validate(P.U32LE, val); // Will check if value is <= 10 during encoding and decoding\n```\n\n#### coders.dict\n\nBase coder for working with dictionaries (records, objects, key-value map)\nDictionary is dynamic type like: `[key: string, value: any][]`\n\n**Returns**: base coder that encodes/decodes between arrays of key-value tuples and dictionaries.\n\n```js\nconst dict: P.CoderType<Record<string, number>> = P.apply(\n P.array(P.U16BE, P.tuple([P.cstring, P.U32LE] as const)),\n P.coders.dict()\n);\n```\n\n#### coders.decimal\n\nBase coder for working with decimal numbers.\n\n**Returns**: base coder that encodes/decodes between bigints and decimal strings.\n\n| Param     | Default            | Description                                                            |\n| --------- | ------------------ | ---------------------------------------------------------------------- |\n| precision |                    | Number of decimal places.                                              |\n| round     | <code>false</code> | Round fraction part if bigger than precision (throws error by default) |\n\n```js\nconst decimal8 = P.coders.decimal(8);\ndecimal8.encode(630880845n); // '6.30880845'\ndecimal8.decode('6.30880845'); // 630880845n\n```\n\n#### coders.match\n\nCombines multiple coders into a single coder, allowing conditional encoding/decoding based on input.\nActs as a parser combinator, splitting complex conditional coders into smaller parts.\n\n`encode = [Ae, Be]; decode = [Ad, Bd]`\n->\n`match([{encode: Ae, decode: Ad}, {encode: Be; decode: Bd}])`\n\n**Returns**: Combined coder for conditional encoding/decoding.\n\n| Param | Description               |\n| ----- | ------------------------- |\n| lst   | Array of coders to match. |\n\n#### coders.reverse\n\nReverses direction of coder\n\n## Debugger\n\nThere is a second optional module for debugging into console.\n\n```ts\nimport * as P from 'micro-packed';\nimport * as PD from 'micro-packed/debugger';\n\nconst debugInt = PD.debug(P.U32LE); // Will print info to console\n// PD.decode(<coder>, data);\n// PD.diff(<coder>, actual, expected);\n```\n\n![Decode](./test/screens/decode.png)\n\n![Diff](./test/screens/diff.png)\n\n## License\n\nMIT (c) Paul Miller [(https://paulmillr.com)](https://paulmillr.com), see LICENSE file.\n","readmeFilename":"README.md"}