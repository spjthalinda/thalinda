{
  "manifest": {
    "name": "with",
    "version": "7.0.2",
    "description": "Compile time `with` for strict mode JavaScript",
    "main": "lib/index.js",
    "scripts": {
      "build": "tsc",
      "postbuild": "rimraf lib/**/__tests__",
      "lint": "tslint './src/**/*.{ts,tsx}' -t verbose -p .",
      "prettier:write": "prettier --ignore-path .gitignore --write './**/*.{md,json,yaml,js,jsx,ts,tsx}'",
      "prettier:check": "prettier --ignore-path .gitignore --list-different './**/*.{md,json,yaml,js,jsx,ts,tsx}'",
      "pretest": "yarn build",
      "test": "mocha test/index.js -R spec"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/pugjs/with.git"
    },
    "author": {
      "name": "ForbesLindesay"
    },
    "license": "MIT",
    "dependencies": {
      "@babel/parser": "^7.9.6",
      "@babel/types": "^7.9.6",
      "assert-never": "^1.2.1",
      "babel-walk": "3.0.0-canary-5"
    },
    "devDependencies": {
      "@forbeslindesay/tsconfig": "^2.0.0",
      "@types/node": "^14.0.5",
      "mocha": "*",
      "prettier": "^2.0.5",
      "rimraf": "^3.0.2",
      "tslint": "^6.1.2",
      "typescript": "^3.9.3",
      "uglify-js": "^2.6.2"
    },
    "engines": {
      "node": ">= 10.0.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-with-7.0.2-ccee3ad542d25538a7a7a80aad212b9828495bac-integrity/node_modules/with/package.json",
    "readmeFilename": "README.md",
    "readme": "# with\n\nCompile time `with` for strict mode JavaScript\n\n[![Build Status](https://img.shields.io/github/workflow/status/pugjs/with/Publish%20Canary/master?style=for-the-badge)](https://github.com/pugjs/with/actions?query=workflow%3A%22Publish+Canary%22)\n[![Rolling Versions](https://img.shields.io/badge/Rolling%20Versions-Enabled-brightgreen?style=for-the-badge)](https://rollingversions.com/pugjs/with)\n[![NPM version](https://img.shields.io/npm/v/with?style=for-the-badge)](https://www.npmjs.com/package/with)\n\n## Installation\n\n    $ npm install with\n\n## Usage\n\n```js\nvar addWith = require('with');\n\naddWith('obj', 'console.log(a)');\n// => ';(function (console, a) {\n//       console.log(a)\n//     }(\"console\" in obj ? obj.console :\n//                          typeof console!==\"undefined\" ? console : undefined,\n//       \"a\" in obj ? obj.a :\n//                    typeof a !== \"undefined\" ? a : undefined));'\n\naddWith('obj', 'console.log(a)', ['console']);\n// => ';(function (console, a) {\n//       console.log(a)\n//     }(\"a\" in obj ? obj.a :\n//                    typeof a !== \"undefined\" ? a : undefined));'\n```\n\n## API\n\n### addWith(obj, src[, exclude])\n\nThe idea is that this is roughly equivallent to:\n\n```js\nwith (obj) {\n  src;\n}\n```\n\nThere are a few differences though. For starters, assignments to variables will always remain contained within the with block.\n\ne.g.\n\n```js\nvar foo = 'foo';\nwith ({}) {\n  foo = 'bar';\n}\nassert(foo === 'bar'); // => This fails for compile time with but passes for native with\n\nvar obj = {foo: 'foo'};\nwith ({}) {\n  foo = 'bar';\n}\nassert(obj.foo === 'bar'); // => This fails for compile time with but passes for native with\n```\n\nIt also makes everything be declared, so you can always do:\n\n```js\nif (foo === undefined)\n```\n\ninstead of\n\n```js\nif (typeof foo === 'undefined')\n```\n\nThis is not the case if foo is in `exclude`. If a variable is excluded, we ignore it entirely. This is useful if you know a variable will be global as it can lead to efficiency improvements.\n\nIt is also safe to use in strict mode (unlike `with`) and it minifies properly (`with` disables virtually all minification).\n\n#### Parsing Errors\n\nwith internally uses babylon to parse code passed to `addWith`. If babylon throws an error, probably due to a syntax error, `addWith` returns an error wrapping the babylon error, so you can\nretrieve location information. `error.component` is `\"src\"` if the error is in the body or `\"obj\"` if it's in the object part of the with expression. `error.babylonError` is\nthe error thrown from babylon.\n\n## License\n\nMIT\n",
    "licenseText": "Copyright (c) 2013 Forbes Lindesay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/with/-/with-7.0.2.tgz#ccee3ad542d25538a7a7a80aad212b9828495bac",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/with/-/with-7.0.2.tgz",
    "hash": "ccee3ad542d25538a7a7a80aad212b9828495bac",
    "integrity": "sha512-RNGKj82nUPg3g5ygxkQl0R937xLyho1J24ItRCBTr/m1YnZkzJy1hUiHUJrc/VlsDQzsCnInEGSg3bci0Lmd4w==",
    "registry": "npm",
    "packageName": "with",
    "cacheIntegrity": "sha512-RNGKj82nUPg3g5ygxkQl0R937xLyho1J24ItRCBTr/m1YnZkzJy1hUiHUJrc/VlsDQzsCnInEGSg3bci0Lmd4w== sha1-zO461ULSVTinp6gKrSErmChJW6w="
  },
  "registry": "npm",
  "hash": "ccee3ad542d25538a7a7a80aad212b9828495bac"
}