{
  "manifest": {
    "name": "refa",
    "version": "0.9.1",
    "description": "A library for finite automata and regular expressions in the context of JS RegExp",
    "main": "index",
    "scripts": {
      "check": "npm run lint && npm run check:dependencies && npx tsc --noEmit && cd tests && npx tsc --noEmit && cd ../scripts && npx tsc --noEmit",
      "check:dependencies": "npx depcruise --validate .dependency-cruiser.js src",
      "lint": "npx eslint --ignore-path .gitignore **/*.ts",
      "test": "cd tests && mocha -r ts-node/register '**/*.ts'",
      "test:all": "npm run test -- --reporter=dot --run-transformers --run-stress-test",
      "test:update": "npm run test -- --update --run-transformers",
      "build": "npx rimraf ./index.* .out/** && npx tsc && rollup -c && npm run build:dts",
      "build:dts": "dts-bundle --main ./.out/index.d.ts --name refa --out ../index.d.ts && npm run scripts:flat-dts && prettier --write ./index.d.ts",
      "build:docs": "typedoc --listInvalidSymbolLinks",
      "coverage": "npx nyc --reporter=html --reporter=text npm run test",
      "scripts:create-case-folding": "npx ts-node --project scripts/tsconfig.json scripts/create-case-folding.ts",
      "scripts:create-unicode": "npx ts-node --project scripts/tsconfig.json scripts/create-unicode.ts",
      "scripts:debug": "npx ts-node --project scripts/tsconfig.json scripts/debug.ts",
      "scripts:flat-dts": "npx ts-node --project scripts/tsconfig.json scripts/flat-dts.ts",
      "scripts:perf": "npx ts-node --project scripts/tsconfig.json scripts/perf.ts",
      "prepublishOnly": "npm run build"
    },
    "keywords": [
      "dfa",
      "nfa",
      "regex",
      "regexp",
      "regular",
      "expression"
    ],
    "author": {
      "name": "Michael Schmidt"
    },
    "homepage": "https://github.com/RunDevelopment/refa#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/RunDevelopment/refa.git"
    },
    "license": "MIT",
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^9.0.0",
      "@types/chai": "^4.2.18",
      "@types/mocha": "^7.0.2",
      "@types/node": "^12.20.13",
      "@typescript-eslint/eslint-plugin": "^4.23.0",
      "@typescript-eslint/parser": "^4.23.0",
      "@unicode/unicode-13.0.0": "^1.1.0",
      "chai": "^4.3.4",
      "dependency-cruiser": "^10.0.1",
      "dts-bundle": "^0.7.3",
      "eslint": "^7.26.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-jsdoc": "^35.4.1",
      "eslint-plugin-prettier": "^3.4.0",
      "mocha": "^7.2.0",
      "nyc": "^15.1.0",
      "prettier": "^2.3.0",
      "rimraf": "^3.0.2",
      "rollup": "^2.47.0",
      "rollup-plugin-terser": "^7.0.2",
      "ts-node": "^8.10.2",
      "typedoc": "^0.21.4",
      "typescript": "^4.2.4"
    },
    "dependencies": {
      "regexpp": "^3.2.0"
    },
    "files": [
      "index.js",
      "index.mjs",
      "index.d.ts"
    ],
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-refa-0.9.1-12731fce378d235731b1f73182b20083c8a75ca8-integrity/node_modules/refa/package.json",
    "readmeFilename": "README.md",
    "readme": "# Regular Expressions and Finite Automata (refa)\n\n[![Actions Status](https://github.com/RunDevelopment/refa/workflows/Node.js%20CI/badge.svg)](https://github.com/RunDevelopment/refa/actions)\n[![npm](https://img.shields.io/npm/v/refa)](https://www.npmjs.com/package/refa)\n\nA library for regular expressions (RE) and finite automata (FA) in the context of [Javascript RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\n\n## About\n\nrefa is a general library for [DFA](https://en.wikipedia.org/wiki/Deterministic_finite_automaton), [NFA](https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton), and REs of [formal regular languages](https://en.wikipedia.org/wiki/Induction_of_regular_languages). It also includes methods to easily convert from JS RegExp to the internal RE AST and vice versa.\n\n\n## Installation\n\nGet [refa from NPM](https://www.npmjs.com/package/refa):\n\n```\nnpm i --save refa\n```\n\nor\n\n```\nyarn add refa\n```\n\n\n## Features\n\n- Conversions\n\n  * RE AST to NFA and ENFA (_assertions are not implemented yet_)\n  * DFA, NFA, and ENFA can all be converted into each other\n  * DFA, NFA, and ENFA to RE AST\n\n- DFA, NFA, and ENFA operations\n\n  * Construction from other FA, the intersection of two FA, or a finite set of words\n  * Print graph in [DOT](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) format or a human-readable form\n  * Test whether a word is accepted\n  * Test whether the accepted language is the empty set/a finite set\n  * Accept all prefixes/suffixes of a language\n\n- DFA specific operations\n\n  * Minimization\n  * Complement\n  * Structural equality\n\n- NFA and ENFA specific operations\n\n  * Union and Concatenation with other FA\n  * Quantification\n  * Reverse\n\n- JavaScript RegExp\n\n  * RegExp to RE AST and RE AST to RegExp\n    * All flags are fully supported\n    * Unicode properties\n    * Change flags\n    * Limited support for simple backreferences\n\nSee the [API documentation](https://rundevelopment.github.io/refa/docs/latest/) for a complete list of all currently implemented operations.\n\n### RE AST format\n\nrefa uses its own AST format to represent regular expressions. The RE AST format is language agnostic and relatively simple.\n\nIt supports:\n\n- Concatenation (e.g. `ab`)\n- Alternation (e.g. `a|b`)\n- Quantifiers (greedy and lazy) (e.g. `a{4,6}`, `a{2,}?`, `a?`, `a*`)\n- Assertions (e.g. `(?=a)`, `(?<!a)`)\n- Characters/character sets (represented by interval sets)\n- Unknowns (elements that cannot be represented otherwise. E.g. backreferences)\n\nSome features like atomic groups and capturing groups are not supported (but might be added in the future).\n\nFor information on how to parse JS RegExp and convert RE AST to JS RegExp, see the [`JS` namespace](https://rundevelopment.github.io/refa/docs/latest/modules/JS.html).\n\n### Universal characters\n\nrefa does not use JavaScript strings represent characters or a sequences of characters. Instead it uses integers to represent characters (see the [`Char` type](https://rundevelopment.github.io/refa/docs/latest/modules.html#Char)) and arrays of numbers to represent words/strings (see the [`Word` type](https://rundevelopment.github.io/refa/docs/latest/modules.html#Word)).\n\nThis means that any text encoding can be used.\n\nThe [`Words` namespace](https://rundevelopment.github.io/refa/docs/latest/modules/Words.html) contains functions to convert JavaScript data into refa-compatible words and characters.\n\nFor the sets of characters, the [`CharSet` class](https://rundevelopment.github.io/refa/docs/latest/classes/CharSet.html) is used.\n\n### General limitations\n\nThis library will never be able to support some modern features of regex engines such as [backreferences](https://www.rexegg.com/regex-capture.html) and [recursion](https://www.rexegg.com/regex-recursion.html) because these features, generally, cannot be be represented by a DFA or NFA.\n\n\n## Usage examples\n\nrefa is a relatively low-level library. It only provides the basic building blocks. In the following examples, JS RegExps are used a lot so we will define a few useful helper function beforehand.\n\n```ts\nimport { DFA, FiniteAutomaton, JS, NFA } from \"refa\";\n\nfunction toNFA(regex: RegExp): NFA {\n\tconst { expression, maxCharacter } = JS.Parser.fromLiteral(regex).parse();\n\treturn NFA.fromRegex(expression, { maxCharacter });\n}\nfunction toDFA(regex: RegExp): DFA {\n\treturn DFA.fromFA(toNFA(regex));\n}\nfunction toRegExp(fa: FiniteAutomaton): RegExp {\n\tconst literal = JS.toLiteral(fa.toRegex());\n\treturn new RegExp(literal.source, literal.flags);\n}\n```\n\n- `toNFA` parses the given RegExp and constructs a new NFA from the parsed AST.\n- `toDFA` constructs a new NFA from the RegExp first and then converts that NFA into a new DFA.\n- `toRegex` takes an FA (= NFA or DFA) and converts it into a RegExp.\n\n### Testing whether a word is accepted\n\n```ts\nimport { Words } from \"refa\";\n\nconst regex = /\\w+\\d+/;\nconst nfa = toNFA(regex);\n\nconsole.log(nfa.test(Words.fromStringToUTF16(\"abc\")));\n// => false\nconsole.log(nfa.test(Words.fromStringToUTF16(\"123\")));\n// => true\nconsole.log(nfa.test(Words.fromStringToUTF16(\"abc123\")));\n// => true\nconsole.log(nfa.test(Words.fromStringToUTF16(\"123abc\")));\n// => false\n```\n\n### Finding the intersection of two JS RegExps\n\n```ts\nconst regex1 = /a+B+c+/i;\nconst regex2 = /Ab*C\\d?/;\n\nconst intersection = NFA.fromIntersection(toNFA(regex1), toNFA(regex2));\n\nconsole.log(toRegExp(intersection));\n// => /Ab+C/\n```\n\n### Finding the complement of a JS RegExp\n\n```ts\nconst regex = /a+b*/i;\n\nconst dfa = toDFA(regex);\ndfa.complement();\n\nconsole.log(toRegExp(dfa));\n// => /(?:(?:[^A]|A+(?:[^AB]|B+[^B]))[^]*)?/i\n```\n\n### Converting a JS RegExp to an NFA\n\nIn the above examples, we have been using the `toNFA` helper function to parse and convert RegExps. This function assumes that the given RegExp is a pure regular expression without assertions and backreferences and will throw an error if the assumption is not met.\n\nHowever, the JS parser and `NFA.fromRegex` provide some options to work around and even solve this problem.\n\n#### Backreferences\n\nFirstly, the parser will automatically resolve simple backreferences. Even `toNFA` will do this since it's on by default:\n\n```ts\nconsole.log(toRegExp(toNFA(/(\"|').*?\\1/)));\n// => /\".*\"|'.*'/i\n```\n\nBut it will throw an error for non-trivial backreferences that cannot be resolved:\n\n```ts\ntoNFA(/(#+).*\\1|foo/);\n// Error: Backreferences are not supported.\n```\n\nThe only way to parse the RegExp despite unresolvable backreferences is to remove the backreferences. This means that the result will be imperfect but it might still be useful.\n\n```ts\nconst regex = /(#+).*\\1|foo/;\nconst { expression } =\n\tJS.Parser.fromLiteral(regex).parse({ backreferences: \"disable\" });\n\nconsole.log(JS.toLiteral(expression));\n// => { source: 'foo', flags: '' }\n```\n\nNote that the `foo` alternative is kept because it is completely unaffected by the unresolvable backreferences.\n\n#### Assertions\n\nWhile the parser and AST format can handle assertions, the NFA construction cannot.\n\n```ts\nconst regex = /\\b(?!\\d)\\w+\\b|->/;\nconst { expression, maxCharacter } = JS.Parser.fromLiteral(regex).parse();\n\nconsole.log(JS.toLiteral(expression));\n// => { source: '\\\\b(?!\\\\d)\\\\w+\\\\b|->', flags: 'i' }\n\nNFA.fromRegex(expression, { maxCharacter });\n// Error: Assertions are not supported yet.\n```\n\nSimilarly to backreferences, we can let the parser remove them:\n\n```ts\nconst regex = /\\b(?!\\d)\\w+\\b|->/;\nconst { expression, maxCharacter } =\n\tJS.Parser.fromLiteral(regex).parse({ assertions: \"disable\" });\n\nconsole.log(JS.toLiteral(expression));\n// => { source: '->', flags: 'i' }\n\nconst nfa = NFA.fromRegex(expression, { maxCharacter });\nconsole.log(toRegExp(nfa));\n// => /->/i\n```\n\n<details>\n\nOr we can let the NFA construction method remove them:\n\n```ts\nconst regex = /\\b(?!\\d)\\w+\\b|->/;\nconst { expression, maxCharacter } = JS.Parser.fromLiteral(regex).parse();\n\nconsole.log(JS.toLiteral(expression));\n// => { source: '\\\\b(?!\\\\d)\\\\w+\\\\b|->', flags: 'i' }\n\nconst nfa = NFA.fromRegex(expression, { maxCharacter }, { assertions: \"disable\" });\nconsole.log(toRegExp(nfa));\n// => /->/i\n```\n\nPrefer using the parser to remove assertions if possible. The parser is quite clever and will optimize based on that assertions can be removed resulting in faster parse times.\n\n</details>\n\nHowever, simply removing assertions is not ideal since they are a lot more common than backreferences. To work around this, refa has AST transformers. AST transformers can make changes to a given AST. While each transformer is rather simple, they can also work together to accomplish more complex tasks. Applying and removing assertions is one such task.\n\nThe details about the transformers used in this example can be found in their documentation.\n\n```ts\nimport { combineTransformers, JS, NFA, transform, Transformers } from \"refa\";\n\nconst regex = /\\b(?!\\d)\\w+\\b|->/;\nconst { expression, maxCharacter } = JS.Parser.fromLiteral(regex).parse();\n\nconsole.log(JS.toLiteral(expression));\n// => { source: '\\\\b(?!\\\\d)\\\\w+\\\\b|->', flags: 'i' }\n\nconst applyTransformer = combineTransformers([\n\tTransformers.inline(),\n\tTransformers.removeDeadBranches(),\n\tTransformers.removeUnnecessaryAssertions(),\n\tTransformers.sortAssertions(),\n\tTransformers.applyAssertions(),\n\tTransformers.removeUnnecessaryAssertions(),\n]);\nconst modifiedExpression = transform(applyTransformer, expression);\n\nconsole.log(JS.toLiteral(modifiedExpression));\n// => { source: '(?<!\\\\w)[A-Z_]\\\\w*(?!\\\\w)|->', flags: 'i' }\n\n// Most assertions have been removed but the patterns are still equivalent.\n// The only assertions left assert characters beyond the edge of the pattern.\n// Removing those assertions is easy but slightly changes the pattern.\n\nconst finalExpression = transform(\n\tTransformers.patternEdgeAssertions({ remove: true }),\n\tmodifiedExpression\n);\n\nconsole.log(JS.toLiteral(finalExpression));\n// => { source: '[A-Z_]\\\\w*|->', flags: 'i' }\n\nconst nfa = NFA.fromRegex(finalExpression, { maxCharacter });\n\nconsole.log(JS.toLiteral(nfa.toRegex()));\n// => { source: '->|[A-Z_]\\\\w*', flags: 'i' }\n```\n\nAST transformers can handle a lot of assertions but there are limitations. Transformers cannot handle assertions that are too complex or require large-scale changes to the AST.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Michael Schmidt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/refa/-/refa-0.9.1.tgz#12731fce378d235731b1f73182b20083c8a75ca8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/refa/-/refa-0.9.1.tgz",
    "hash": "12731fce378d235731b1f73182b20083c8a75ca8",
    "integrity": "sha512-egU8LgFq2VXlAfUi8Jcbr5X38wEOadMFf8tCbshgcpVCYlE7k84pJOSlnvXF+muDB4igkdVMq7Z/kiNPqDT9TA==",
    "registry": "npm",
    "packageName": "refa",
    "cacheIntegrity": "sha512-egU8LgFq2VXlAfUi8Jcbr5X38wEOadMFf8tCbshgcpVCYlE7k84pJOSlnvXF+muDB4igkdVMq7Z/kiNPqDT9TA== sha1-EnMfzjeNI1cxsfcxgrIAg8inXKg="
  },
  "registry": "npm",
  "hash": "12731fce378d235731b1f73182b20083c8a75ca8"
}