{
  "manifest": {
    "name": "babel-plugin-transform-typescript-metadata",
    "version": "0.3.2",
    "description": "Babel plugin to emit decorator metadata like typescript compiler",
    "main": "lib/plugin.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/leonardfactory/babel-plugin-transform-typescript-metadata.git"
    },
    "author": {
      "name": "Leonardo Ascione",
      "email": "leonardo.ascione@gmail.com"
    },
    "license": "MIT",
    "files": [
      "lib/"
    ],
    "keywords": [
      "babel",
      "babel-plugin",
      "babel-typescript",
      "decorators",
      "reflect-metadata"
    ],
    "scripts": {
      "dev": "babel src -w -d lib -x '.ts,.tsx'",
      "build": "yarn build:lib && yarn build:types",
      "prebuild:lib": "rm -rf lib",
      "build:lib": "babel src -d lib -x '.ts,.tsx'",
      "build:types": "tsc --emitDeclarationOnly",
      "check-types": "tsc --noEmit",
      "release": "yarn test && yarn build && release-it",
      "test": "jest",
      "test:dev": "jest --watch",
      "test:ci": "jest --ci --runInBand --coverage"
    },
    "husky": {
      "hooks": {
        "commit-msg": "emoji-commit-lint"
      }
    },
    "release-it": {
      "git": {
        "tagName": "v${version}",
        "commitMessage": "ðŸ”– v${version}"
      },
      "github": {
        "release": true
      },
      "plugins": {
        "@release-it/conventional-changelog": {
          "preset": "@favoloso/emoji",
          "infile": "CHANGELOG.md"
        }
      }
    },
    "publishConfig": {
      "registry": "https://registry.npmjs.org/"
    },
    "devDependencies": {
      "@babel/cli": "^7.6.4",
      "@babel/core": "^7.6.4",
      "@babel/plugin-proposal-class-properties": "^7.5.5",
      "@babel/plugin-proposal-decorators": "^7.6.0",
      "@babel/plugin-transform-modules-commonjs": "^7.10.4",
      "@babel/preset-env": "^7.6.3",
      "@babel/preset-typescript": "^7.6.0",
      "@babel/template": "^7.6.0",
      "@babel/types": "^7.6.3",
      "@favoloso/conventional-changelog-emoji": "^0.10.0",
      "@release-it/conventional-changelog": "^1.1.0",
      "@types/jest": "^24.0.19",
      "babel-test": "^0.2.3",
      "conventional-changelog-cli": "^2.0.25",
      "husky": "^4.2.3",
      "jest": "^24.9.0",
      "jest-file-snapshot": "^0.3.7",
      "release-it": "13.7.1",
      "typescript": "^3.6.4"
    },
    "dependencies": {
      "@babel/helper-plugin-utils": "^7.0.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-babel-plugin-transform-typescript-metadata-0.3.2-7a327842d8c36ffe07ee1b5276434e56c297c9b7-integrity/node_modules/babel-plugin-transform-typescript-metadata/package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-plugin-transform-typescript-metadata\n\n[![Travis (.com)](https://img.shields.io/travis/com/leonardfactory/babel-plugin-transform-typescript-metadata.svg)](https://travis-ci.com/leonardfactory/babel-plugin-transform-typescript-metadata)\n[![Codecov](https://img.shields.io/codecov/c/github/leonardfactory/babel-plugin-transform-typescript-metadata.svg)](https://codecov.io/gh/leonardfactory/babel-plugin-transform-typescript-metadata)\n[![npm](https://img.shields.io/npm/v/babel-plugin-transform-typescript-metadata.svg?style=popout)](https://www.npmjs.com/package/babel-plugin-transform-typescript-metadata)\n\nBabel plugin to emit decorator metadata like typescript compiler\n\n## Motivation\n\nTypeScript _Decorators_ allows advanced reflection patterns when combined\nwith [`Reflect.metadata`](https://rbuckton.github.io/reflect-metadata/) output.\n\nCurrent `@babel/preset-typescript` implementation however just strips all types and\n_does not_ emit the relative Metadata in the output code.\n\nSince this kind of information is used extensively in libraries like\n[Nest](https://docs.nestjs.com/providers) and [TypeORM](https://typeorm.io/#/)\nto implement advanced features like **Dependency Injection**, I've thought it would\nbe awesome to be able to provide the same functionality that [TypeScript\ncompiler `experimentalDecorators` and `emitDecoratorMetadata`\nflags](https://www.typescriptlang.org/docs/handbook/decorators.html) provide.\n\nThis means that code like:\n\n```ts\nimport { Injectable, Inject } from 'some-di-library'; // Just an example\nimport { MyService } from './MyService';\nimport { Configuration } from './Configuration';\n\n@Injectable()\nclass AnotherService {\n  @Inject()\n  config: Configuration;\n\n  constructor(private service: MyService) {}\n}\n```\n\nwill be interpreted like:\n\n```ts\nimport { MyService } from './MyService';\nimport { Configuration } from './Configuration';\n\n@Injectable()\n@Reflect.metadata('design:paramtypes', [MyService])\nclass AnotherService {\n  @Inject()\n  @Reflect.metadata('design:type', Configuration)\n  config: Configuration;\n\n  constructor(private service: MyService) {}\n}\n```\n\n### Parameter decorators\n\nSince decorators in typescript supports also _Parameters_, this plugin\nalso provides support for them, enabling the following syntax:\n\n```ts\n@Injectable()\nclass Some {\n  constructor(@Inject() private: SomeService);\n}\n```\n\nThis will be roughly translated to:\n\n```js\n// ...\nInject()(Some.prototype, undefined, 0);\n```\n\n## Installation\n\nWith npm:\n\n```sh\nnpm install --dev --save babel-plugin-transform-typescript-metadata\n```\n\nor with Yarn:\n\n```sh\nyarn add --dev babel-plugin-transform-typescript-metadata\n```\n\n## Usage\n\nWith `.babelrc`:\n\n> **Note:** should be placed **before** `@babel/plugin-proposal-decorators`.\n\n```js\n{\n  \"plugins\": [\n    \"babel-plugin-transform-typescript-metadata\",\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }],\n  ],\n  \"presets\": [\n    \"@babel/preset-typescript\"\n  ]\n}\n```\n\n### Usage with [InversifyJS](http://inversify.io)\n\nIf you are using normal dependency injection letting Inversify **create your instances**, you should be fine with all kind of decorators.\n\nInstead, if you are using **property injection**, when [the container does not\ncreate the instances](https://github.com/inversify/InversifyJS/blob/master/wiki/property_injection.md#when-we-cannot-use-inversifyjs-to-create-an-instance-of-a-class),\nyou would likely encounter errors since babel\ndecorators are not exactly the same as TypeScript.\n\nYou can fix it by _enhancing property decorators_ with the following function:\n\n```ts\nimport getDecorators from 'inversify-inject-decorators';\n// setup the container...\nlet { lazyInject: originalLazyInject } = getDecorators(container);\n\n// Additional function to make properties decorators compatible with babel.\nfunction fixPropertyDecorator<T extends Function>(decorator: T): T {\n  return ((...args: any[]) => (\n    target: any,\n    propertyName: any,\n    ...decoratorArgs: any[]\n  ) => {\n    decorator(...args)(target, propertyName, ...decoratorArgs);\n    return Object.getOwnPropertyDescriptor(target, propertyName);\n  }) as any;\n}\n\nexport const lazyInject = fixPropertyDecorator(originalLazyInject);\n```\n\n## Current Pitfalls\n\n- If you are using webpack and it complains about missing exports due to types\n  not being removed, you can switch from `import { MyType } from ...` to \n  `import type { MyType } from ...`. See [#46](https://github.com/leonardfactory/babel-plugin-transform-typescript-metadata/issues/46) for details and \n  examples.\n\n- We cannot know if type annotations are just types (i.e. `IMyInterface`) or\n  concrete values (like classes, etc.). In order to resolve this, we emit the\n  following: `typeof Type === 'undefined' ? Object : Type`. The code has the\n  advantage of not throwing. If you know a better way to do this, let me know!\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Leonardo Ascione\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-plugin-transform-typescript-metadata/-/babel-plugin-transform-typescript-metadata-0.3.2.tgz#7a327842d8c36ffe07ee1b5276434e56c297c9b7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-plugin-transform-typescript-metadata/-/babel-plugin-transform-typescript-metadata-0.3.2.tgz",
    "hash": "7a327842d8c36ffe07ee1b5276434e56c297c9b7",
    "integrity": "sha512-mWEvCQTgXQf48yDqgN7CH50waTyYBeP2Lpqx4nNWab9sxEpdXVeKgfj1qYI2/TgUPQtNFZ85i3PemRtnXVYYJg==",
    "registry": "npm",
    "packageName": "babel-plugin-transform-typescript-metadata",
    "cacheIntegrity": "sha512-mWEvCQTgXQf48yDqgN7CH50waTyYBeP2Lpqx4nNWab9sxEpdXVeKgfj1qYI2/TgUPQtNFZ85i3PemRtnXVYYJg== sha1-ejJ4QtjDb/4H7htSdkNOVsKXybc="
  },
  "registry": "npm",
  "hash": "7a327842d8c36ffe07ee1b5276434e56c297c9b7"
}