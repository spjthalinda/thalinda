{
  "manifest": {
    "name": "hast-util-raw",
    "version": "7.2.3",
    "description": "hast utility to reparse a tree",
    "license": "MIT",
    "keywords": [
      "unist",
      "hast",
      "hast-util",
      "util",
      "utility",
      "parse",
      "raw",
      "html"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/hast-util-raw.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/hast-util-raw/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "Christian Murphy",
        "email": "christian.murphy.42@gmail.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "complex-types.d.ts",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/hast": "^2.0.0",
      "@types/parse5": "^6.0.0",
      "hast-util-from-parse5": "^7.0.0",
      "hast-util-to-parse5": "^7.0.0",
      "html-void-elements": "^2.0.0",
      "parse5": "^6.0.0",
      "unist-util-position": "^4.0.0",
      "unist-util-visit": "^4.0.0",
      "vfile": "^5.0.0",
      "web-namespaces": "^2.0.0",
      "zwitch": "^2.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "hastscript": "^7.0.0",
      "prettier": "^2.0.0",
      "rehype-stringify": "^9.0.0",
      "remark-cli": "^11.0.0",
      "remark-parse": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "remark-rehype": "^10.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "unified": "^10.0.0",
      "unist-builder": "^3.0.0",
      "xo": "^0.52.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"lib/**/*.d.ts\" \"{index,test}.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-hast-util-raw-7.2.3-dcb5b22a22073436dbdc4aa09660a644f4991d99-integrity/node_modules/hast-util-raw/package.json",
    "readmeFilename": "readme.md",
    "readme": "# hast-util-raw\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[hast][] utility to parse the tree and semistandard `raw` nodes (strings of\nHTML) again, keeping positional info okay.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`raw(tree[, file][, options])`](#rawtree-file-options)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a utility to parse a document again.\nIt passes each node and embedded raw HTML through an HTML parser\n([`parse5`][parse5]), to recreate a tree exactly as how a browser would parse\nit, while keeping the original data and positional info intact.\n\n## When should I use this?\n\nThis utility is particularly useful when coming from markdown and wanting to\nsupport HTML embedded inside that markdown (which requires passing\n`allowDangerousHtml: true` to `mdast-util-to-hast`).\nMarkdown dictates how, say, a list item or emphasis can be parsed.\nWe can use that to turn the markdown syntax tree into an HTML syntax tree.\nBut markdown also dictates that things that look like HTML, are passed through\nuntouched, even when it just looks like XML but doesn‚Äôt really make sense, so we\ncan‚Äôt normally use these strings of ‚ÄúHTML‚Äù to create an HTML syntax tree.\nThis utility can.\nIt can be used to take those strings of HTML and include them into the syntax\ntree as actual nodes.\n\nIf your final result is HTML and you trust content, then ‚Äústrings‚Äù are fine\n(you can pass `allowDangerousHtml: true` to `hast-util-to-html`, which passes\nHTML through untouched).\nBut there are two main cases where a proper syntax tree is preferred:\n\n*   hast utilities need a proper syntax tree as they operate on actual nodes to\n    inspect or transform things, they can‚Äôt operate on strings of HTML\n*   other output formats (React, MDX, etc) need actual nodes and can‚Äôt handle\n    strings of HTML\n\nThe plugin [`rehype-raw`][rehype-raw] wraps this utility at a higher-level\n(easier) abstraction.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, 16.0+, or 18.0+), install with [npm][]:\n\n```sh\nnpm install hast-util-raw\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {raw} from 'https://esm.sh/hast-util-raw@7'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {raw} from 'https://esm.sh/hast-util-raw@7?bundle'\n</script>\n```\n\n## Use\n\n```js\nimport {h} from 'hastscript'\nimport {raw} from 'hast-util-raw'\n\nconst tree = h('div', [h('h1', ['Foo ', h('h2', 'Bar'), ' Baz'])])\n\nconst reformatted = raw(tree)\n\nconsole.log(reformatted)\n```\n\nYields:\n\n```js\n{ type: 'element',\n  tagName: 'div',\n  properties: {},\n  children:\n   [ { type: 'element',\n       tagName: 'h1',\n       properties: {},\n       children: [Object] },\n     { type: 'element',\n       tagName: 'h2',\n       properties: {},\n       children: [Object] },\n     { type: 'text', value: ' Baz' } ] }\n```\n\n## API\n\nThis package exports the identifier `raw`.\nThere is no default export.\n\n### `raw(tree[, file][, options])`\n\nParse the tree and raw nodes (strings of HTML) again, keeping positional info\nokay.\n\n> üëâ **Note**: `tree` should have positional info and `file`, when given, must\n> be a [vfile][] corresponding to `tree`.\n\n##### `options`\n\nConfiguration (optional).\n\n###### `options.passThrough`\n\nList of custom hast node types to pass through (keep) in hast (`Array<string>`,\ndefault: `[]`).\nIf the passed through nodes have children, those children are expected to be\nhast and will be handled by this utility.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the additional type `Options`.\n\nIt also registers the `Raw` node type with `@types/hast`.\nIf you‚Äôre working with the syntax tree, make sure to import this utility\nsomewhere in your types, as that registers the new node types in the tree.\n\n```js\n/**\n * @typedef {import('hast-util-raw')}\n */\n\nimport {visit} from 'unist-util-visit'\n\n/** @type {import('hast').Root} */\nconst tree = getHastNodeSomeHow()\n\nvisit(tree, (node) => {\n  // `node` can now be a `raw` node.\n})\n```\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, 16.0+, and 18.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\n## Security\n\nUse of `hast-util-raw` can open you up to a [cross-site scripting (XSS)][xss]\nattack as `raw` nodes are unsafe.\nThe following example shows how a raw node is used to inject a script that runs\nwhen loaded in a browser.\n\n```js\nraw(u('root', [u('raw', '<script>alert(1)</script>')]))\n```\n\nYields:\n\n```html\n<script>alert(1)</script>\n```\n\nEither do not use this utility in combination with user input, or use\n[`hast-util-santize`][hast-util-sanitize].\n\n## Related\n\n*   [`mdast-util-to-hast`](https://github.com/syntax-tree/mdast-util-to-hast)\n    ‚Äî transform mdast to hast\n*   [`rehype-raw`](https://github.com/rehypejs/rehype-raw)\n    ‚Äî rehype plugin\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`syntax-tree/.github`][health] for\nways to get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] ¬© [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/hast-util-raw/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/hast-util-raw/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/hast-util-raw.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/hast-util-raw\n\n[downloads-badge]: https://img.shields.io/npm/dm/hast-util-raw.svg\n\n[downloads]: https://www.npmjs.com/package/hast-util-raw\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/hast-util-raw.svg\n\n[size]: https://bundlephobia.com/result?p=hast-util-raw\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/syntax-tree/.github\n\n[contributing]: https://github.com/syntax-tree/.github/blob/main/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/main/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/main/code-of-conduct.md\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[hast]: https://github.com/syntax-tree/hast\n\n[hast-util-sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[vfile]: https://github.com/vfile/vfile\n\n[rehype-raw]: https://github.com/rehypejs/rehype-raw\n\n[parse5]: https://github.com/inikulin/parse5\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hast-util-raw/-/hast-util-raw-7.2.3.tgz#dcb5b22a22073436dbdc4aa09660a644f4991d99",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hast-util-raw/-/hast-util-raw-7.2.3.tgz",
    "hash": "dcb5b22a22073436dbdc4aa09660a644f4991d99",
    "integrity": "sha512-RujVQfVsOrxzPOPSzZFiwofMArbQke6DJjnFfceiEbFh7S05CbPt0cYN+A5YeD3pso0JQk6O1aHBnx9+Pm2uqg==",
    "registry": "npm",
    "packageName": "hast-util-raw",
    "cacheIntegrity": "sha512-RujVQfVsOrxzPOPSzZFiwofMArbQke6DJjnFfceiEbFh7S05CbPt0cYN+A5YeD3pso0JQk6O1aHBnx9+Pm2uqg== sha1-3LWyKiIHNDbb3EqglmCmRPSZHZk="
  },
  "registry": "npm",
  "hash": "dcb5b22a22073436dbdc4aa09660a644f4991d99"
}