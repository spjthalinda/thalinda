"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parser_utils_1 = require("@markuplint/parser-utils");
const reAttrsInStartTag = 
// eslint-disable-next-line no-control-regex
/(\s*)([^\x00-\x1f\x7f-\x9f "'>/=]+)(?:(\s*)(=)(\s*)(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s]*)))?/;
function attrTokenizer(raw, line, col, startOffset) {
    const attrMatchedMap = raw.match(reAttrsInStartTag);
    if (!attrMatchedMap) {
        throw new SyntaxError('Illegal attribute token');
    }
    const spacesBeforeAttrString = attrMatchedMap[1];
    const nameChars = attrMatchedMap[2];
    const spacesBeforeEqualChars = attrMatchedMap[3] || '';
    const equalChars = attrMatchedMap[4] || null;
    const spacesAfterEqualChars = attrMatchedMap[5] || '';
    const quoteChars = attrMatchedMap[6] != null ? '"' : attrMatchedMap[7] != null ? "'" : null;
    const valueChars = attrMatchedMap[6] || attrMatchedMap[7] || attrMatchedMap[8] || (quoteChars ? '' : null);
    let offset = startOffset;
    const attrToken = (0, parser_utils_1.tokenizer)(raw, line, col, offset);
    line = attrToken.startLine;
    col = attrToken.startCol;
    offset = attrToken.startOffset;
    const spacesBeforeName = (0, parser_utils_1.tokenizer)(spacesBeforeAttrString, line, col, offset);
    line = spacesBeforeName.endLine;
    col = spacesBeforeName.endCol;
    offset = spacesBeforeName.endOffset;
    const name = (0, parser_utils_1.tokenizer)(nameChars, line, col, offset);
    line = name.endLine;
    col = name.endCol;
    offset = name.endOffset;
    const spacesBeforeEqual = (0, parser_utils_1.tokenizer)(spacesBeforeEqualChars, line, col, offset);
    line = spacesBeforeEqual.endLine;
    col = spacesBeforeEqual.endCol;
    offset = spacesBeforeEqual.endOffset;
    const equal = (0, parser_utils_1.tokenizer)(equalChars, line, col, offset);
    line = equal.endLine;
    col = equal.endCol;
    offset = equal.endOffset;
    const spacesAfterEqual = (0, parser_utils_1.tokenizer)(spacesAfterEqualChars, line, col, offset);
    line = spacesAfterEqual.endLine;
    col = spacesAfterEqual.endCol;
    offset = spacesAfterEqual.endOffset;
    const startQuote = (0, parser_utils_1.tokenizer)(quoteChars, line, col, offset);
    line = startQuote.endLine;
    col = startQuote.endCol;
    offset = startQuote.endOffset;
    const value = (0, parser_utils_1.tokenizer)(valueChars, line, col, offset);
    line = value.endLine;
    col = value.endCol;
    offset = value.endOffset;
    const endQuote = (0, parser_utils_1.tokenizer)(quoteChars, line, col, offset);
    return {
        type: 'html-attr',
        uuid: (0, parser_utils_1.uuid)(),
        raw: attrToken.raw,
        startOffset: attrToken.startOffset,
        endOffset: attrToken.endOffset,
        startLine: attrToken.startLine,
        endLine: attrToken.endLine,
        startCol: attrToken.startCol,
        endCol: attrToken.endCol,
        spacesBeforeName,
        name,
        spacesBeforeEqual,
        equal,
        spacesAfterEqual,
        startQuote,
        value,
        endQuote,
        isDuplicatable: false,
    };
}
exports.default = attrTokenizer;
