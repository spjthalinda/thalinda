"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optimizeStartsHeadTagOrBodyTagResume = exports.optimizeStartsHeadTagOrBodyTagSetup = exports.isStartsHeadTagOrBodyTag = void 0;
const UNDUPLICATED_CHAR = '\uFFFD';
function isStartsHeadTagOrBodyTag(rawCode) {
    return /^\s*<(?:head|body)>/i.test(rawCode);
}
exports.isStartsHeadTagOrBodyTag = isStartsHeadTagOrBodyTag;
function optimizeStartsHeadTagOrBodyTagSetup(rawCode) {
    const heads = [];
    const bodies = [];
    const code = rawCode.replace(
    // eslint-disable-next-line no-control-regex
    /(?<=<\/?)(?:head|body)(?=\u0009|\u000A|\u000C|\u0020|\/|>|\u0000)/gi, tag => {
        const prefix = `x-${UNDUPLICATED_CHAR}`;
        let name;
        if (/^head$/i.test(tag)) {
            name = `${prefix}h`;
            heads.push(tag);
        }
        else if (/^body/i.test(tag)) {
            name = `${prefix}b`;
            bodies.push(tag);
        }
        else {
            throw new Error('Never error');
        }
        return name;
    });
    return {
        code,
        heads,
        bodies,
    };
}
exports.optimizeStartsHeadTagOrBodyTagSetup = optimizeStartsHeadTagOrBodyTagSetup;
function optimizeStartsHeadTagOrBodyTagResume(nodeList, replacements) {
    nodeList.forEach(node => {
        if (!node.nodeName.startsWith(`x-${UNDUPLICATED_CHAR}`)) {
            return;
        }
        const realName = node.nodeName === `x-${UNDUPLICATED_CHAR}h` ? replacements.heads.shift() : replacements.bodies.shift();
        if (!realName) {
            return;
        }
        node.raw = node.raw.replace(node.nodeName, realName);
        node.nodeName = realName;
        if (node.type === 'starttag') {
            node.isCustomElement = false;
        }
    });
}
exports.optimizeStartsHeadTagOrBodyTagResume = optimizeStartsHeadTagOrBodyTagResume;
