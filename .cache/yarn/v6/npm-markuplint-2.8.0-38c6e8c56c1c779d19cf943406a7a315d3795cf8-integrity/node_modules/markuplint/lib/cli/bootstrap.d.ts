import meow from 'meow';
export declare const help = "\nUsage\n\t$ markuplint <HTML file pathes (glob format)>\n\t$ <stdout> | markuplint\n\nOptions\n\t--config,                -c FILE_PATH  A configuration file path.\n\t--fix,                                 Fix HTML.\n\t--format,                -f FORMAT     Output format. Support \"JSON\", \"Simple\" and \"Standard\". Default: \"Standard\".\n\t--no-search-config                     No search a configure file automatically.\n\t--ignore-ext                           Evaluate files that are received even though the type of extension.\n\t--no-import-preset-rules               No import preset rules.\n\t--locale                               Locale of the message of violation. Default is an OS setting.\n\t--no-color,                            Output no color.\n\t--problem-only,          -p            Output only problems, without passeds.\n\t--verbose                              Output with detailed information.\n\n\t--init                                 Initialize settings interactively.\n\t--create-rule                          Add the scaffold of a custom rule.\n\t--search                               Search lines of codes that include the target element by selectors.\n\n\t--help,                  -h            Show help.\n\t--version,               -v            Show version.\n\nExamples\n\t$ markuplint verifyee.html --config path/to/.markuplintrc\n\t$ cat verifyee.html | markuplint\n";
export declare const cli: meow.Result<{
    config: {
        type: "string";
        alias: string;
    };
    fix: {
        type: "boolean";
        default: false;
    };
    format: {
        type: "string";
        alias: string;
    };
    searchConfig: {
        type: "boolean";
        default: true;
    };
    ignoreExt: {
        type: "boolean";
        default: false;
    };
    importPresetRules: {
        type: "boolean";
        default: true;
    };
    locale: {
        type: "string";
    };
    color: {
        type: "boolean";
        default: true;
    };
    problemOnly: {
        type: "boolean";
        alias: string;
        default: false;
    };
    verbose: {
        type: "boolean";
        default: false;
    };
    init: {
        type: "boolean";
        default: false;
    };
    createRule: {
        type: "boolean";
        default: false;
    };
    search: {
        type: "string";
    };
}>;
export declare type CLIOptions = typeof cli.flags;
