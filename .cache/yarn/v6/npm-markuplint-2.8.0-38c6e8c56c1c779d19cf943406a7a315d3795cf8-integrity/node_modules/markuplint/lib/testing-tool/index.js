"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mlTestFile = exports.mlRuleTest = exports.mlTest = void 0;
const ml_core_1 = require("@markuplint/ml-core");
const api_1 = require("../api");
const global_settings_1 = require("../global-settings");
async function mlTest(sourceCode, config, rules, locale = 'en', fix = false) {
    var _a, _b;
    const global = (0, global_settings_1.getGlobal)();
    const results = await (0, api_1.lint)([{ sourceCode }], {
        config,
        rules,
        locale: locale !== null && locale !== void 0 ? locale : global.locale,
        fix,
        ignoreExt: true,
        autoLoad: true,
        importPresetRules: !rules,
    });
    const result = results[0];
    return {
        violations: (_a = result === null || result === void 0 ? void 0 : result.violations) !== null && _a !== void 0 ? _a : [],
        fixedCode: (_b = result === null || result === void 0 ? void 0 : result.fixedCode) !== null && _b !== void 0 ? _b : sourceCode,
    };
}
exports.mlTest = mlTest;
async function mlRuleTest(rule, sourceCode, config = { rule: true }, fix = false, locale = 'en') {
    const _config = {
        ...config,
        rules: config.rule !== undefined
            ? {
                '<current-rule>': config.rule,
            }
            : config.rule === undefined && config.nodeRule === undefined && config.childNodeRule === undefined
                ? {
                    '<current-rule>': true,
                }
                : undefined,
        nodeRules: config.nodeRule !== undefined
            ? config.nodeRule.map(nodeConfig => ({
                ...nodeConfig,
                rules: nodeConfig.rule !== undefined
                    ? {
                        '<current-rule>': nodeConfig.rule,
                    }
                    : undefined,
            }))
            : undefined,
        childNodeRules: config.childNodeRule !== undefined
            ? config.childNodeRule.map(childNodeConfig => ({
                ...childNodeConfig,
                rules: childNodeConfig.rule !== undefined
                    ? {
                        '<current-rule>': childNodeConfig.rule,
                    }
                    : undefined,
            }))
            : undefined,
    };
    const res = await mlTest(sourceCode, _config, [
        new ml_core_1.MLRule({
            name: '<current-rule>',
            ...rule,
        }),
    ], locale, fix);
    res.violations.map(v => {
        // @ts-ignore
        delete v.ruleId;
    });
    return res;
}
exports.mlRuleTest = mlRuleTest;
async function mlTestFile(target, config, rules, locale, fix = false) {
    var _a, _b;
    const global = (0, global_settings_1.getGlobal)();
    const results = await (0, api_1.lint)([target], {
        config,
        rules,
        locale: locale !== null && locale !== void 0 ? locale : global.locale,
        fix,
        ignoreExt: true,
        noSearchConfig: !!config,
        autoLoad: true,
        importPresetRules: !rules,
    });
    const result = results[0];
    return {
        violations: (_a = result === null || result === void 0 ? void 0 : result.violations) !== null && _a !== void 0 ? _a : [],
        fixedCode: (_b = result === null || result === void 0 ? void 0 : result.fixedCode) !== null && _b !== void 0 ? _b : result === null || result === void 0 ? void 0 : result.sourceCode,
    };
}
exports.mlTestFile = mlTestFile;
