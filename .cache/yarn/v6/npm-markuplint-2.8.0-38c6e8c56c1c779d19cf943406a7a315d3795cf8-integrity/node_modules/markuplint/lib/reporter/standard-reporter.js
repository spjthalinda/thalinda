"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.standardReporter = void 0;
const tslib_1 = require("tslib");
const cli_color_1 = tslib_1.__importDefault(require("cli-color"));
const util_1 = require("../util");
const loggerError = cli_color_1.default.red;
const loggerWarning = cli_color_1.default.xterm(208);
function standardReporter(results, options) {
    const sizes = {
        line: 0,
        col: 0,
        meg: 0,
    };
    for (const violation of results.violations) {
        sizes.line = Math.max(sizes.line, violation.line.toString(10).length);
        sizes.col = Math.max(sizes.col, violation.col.toString(10).length);
        const meg = (0, util_1.messageToString)(violation.message, violation.reason);
        sizes.meg = Math.max(sizes.meg, (0, util_1.w)(meg));
    }
    const out = [];
    if (results.violations.length) {
        const lines = results.sourceCode.split(/\r?\n/g);
        for (const violation of results.violations) {
            const prev = lines[violation.line - 2] || '';
            const line = lines[violation.line - 1] || '';
            const next = lines[violation.line - 0] || '';
            const before = line.substring(0, violation.col - 1);
            const after = line.substring(violation.col - 1 + violation.raw.length);
            const logger = violation.severity === 'error' ? loggerError : loggerWarning;
            const meg = (0, util_1.messageToString)(violation.message, violation.reason);
            out.push(`<${util_1.markuplint}> ${logger(`${violation.severity}: ${meg} (${violation.ruleId}) ${cli_color_1.default.underline(`${results.filePath}:${violation.line}:${violation.col}`)}`)}`);
            if (violation.line - 1 > 0) {
                out.push(`  ${cli_color_1.default.cyan((0, util_1.p)(violation.line - 1, sizes.col, true))}: ${(0, util_1.space)(prev)}`);
            }
            out.push(`  ${cli_color_1.default.cyan((0, util_1.p)(violation.line, sizes.col, true))}: ${(0, util_1.space)(before)}${cli_color_1.default.bgRed(violation.raw)}${(0, util_1.space)(after)}`);
            if (!options.color) {
                out.push(`         ${(0, util_1.invisibleSpace)(before)}${'^'.repeat(violation.raw.length)}${(0, util_1.invisibleSpace)(after)}`);
            }
            out.push(`  ${cli_color_1.default.cyan((0, util_1.p)(violation.line + 1, sizes.col, true))}: ${(0, util_1.space)(next)}`);
        }
    }
    else if (!options.problemOnly) {
        out.push(`<${util_1.markuplint}> ${cli_color_1.default.green('passed')} ${cli_color_1.default.underline(results.filePath)}`);
    }
    return out;
}
exports.standardReporter = standardReporter;
