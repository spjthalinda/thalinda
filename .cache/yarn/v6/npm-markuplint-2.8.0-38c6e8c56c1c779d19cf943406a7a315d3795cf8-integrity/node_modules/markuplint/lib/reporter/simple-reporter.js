"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simpleReporter = void 0;
const tslib_1 = require("tslib");
const cli_color_1 = tslib_1.__importDefault(require("cli-color"));
const util_1 = require("../util");
const loggerError = cli_color_1.default.red;
const loggerWarning = cli_color_1.default.xterm(208);
function simpleReporter(results, options) {
    const sizes = {
        line: 0,
        col: 0,
        meg: 0,
    };
    for (const violation of results.violations) {
        sizes.line = Math.max(sizes.line, violation.line.toString(10).length);
        sizes.col = Math.max(sizes.col, violation.col.toString(10).length);
        const meg = (0, util_1.messageToString)(violation.message, violation.reason);
        sizes.meg = Math.max(sizes.meg, (0, util_1.w)(meg));
    }
    const out = [];
    if (results.violations.length) {
        out.push(`<${util_1.markuplint}> ${cli_color_1.default.underline(results.filePath)}: ${loggerError('✗')}`);
        for (const violation of results.violations) {
            const s = violation.severity === 'error' ? loggerError('✖') : loggerWarning('⚠️');
            const meg = (0, util_1.messageToString)(violation.message, violation.reason);
            out.push(`  ${cli_color_1.default.cyan(`${(0, util_1.p)(violation.line, sizes.line, true)}:${(0, util_1.p)(violation.col, sizes.col)}`)} ${s}  ${(0, util_1.p)(meg, sizes.meg)} ${cli_color_1.default.xterm(8)(violation.ruleId)} `);
        }
    }
    else if (!options.problemOnly) {
        out.push(`<${util_1.markuplint}> ${cli_color_1.default.underline(results.filePath)}: ${cli_color_1.default.green('✓')}`);
    }
    return out;
}
exports.simpleReporter = simpleReporter;
