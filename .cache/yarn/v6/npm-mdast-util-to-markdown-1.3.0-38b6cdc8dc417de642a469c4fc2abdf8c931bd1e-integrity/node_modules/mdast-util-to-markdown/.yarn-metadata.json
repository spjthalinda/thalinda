{
  "manifest": {
    "name": "mdast-util-to-markdown",
    "version": "1.3.0",
    "description": "mdast utility to serialize markdown",
    "license": "MIT",
    "keywords": [
      "unist",
      "mdast",
      "mdast-util",
      "util",
      "utility",
      "markdown",
      "markup",
      "serialize",
      "stringify",
      "compile",
      "syntax",
      "tree",
      "ast"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/mdast-util-to-markdown.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/mdast-util-to-markdown/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/mdast": "^3.0.0",
      "@types/unist": "^2.0.0",
      "longest-streak": "^3.0.0",
      "mdast-util-to-string": "^3.0.0",
      "micromark-util-decode-string": "^1.0.0",
      "unist-util-visit": "^4.0.0",
      "zwitch": "^2.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "mdast-util-from-markdown": "^1.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "unist-util-remove-position": "^4.0.0",
      "xo": "^0.47.0"
    },
    "scripts": {
      "build": "rimraf \"lib/**/*.d.ts\" \"test/**/*.d.ts\" \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --conditions development test/index.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node --conditions development test/index.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "complexity": "off",
        "unicorn/prefer-code-point": "off",
        "unicorn/prefer-switch": "off"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "ignoreFiles": [
        "lib/types.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-mdast-util-to-markdown-1.3.0-38b6cdc8dc417de642a469c4fc2abdf8c931bd1e-integrity/node_modules/mdast-util-to-markdown/package.json",
    "readmeFilename": "readme.md",
    "readme": "# mdast-util-to-markdown\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[mdast][]** utility that turns a syntax tree into markdown.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`toMarkdown(tree[, options])`](#tomarkdowntree-options)\n*   [List of extensions](#list-of-extensions)\n*   [Syntax](#syntax)\n*   [Syntax tree](#syntax-tree)\n*   [Types](#types)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a utility that takes an [mdast][] syntax tree as input and turns\nit into serialized markdown.\n\nThis utility is a low level project.\nIt’s used in [`remark-stringify`][remark-stringify], which focusses on making it\neasier to transform content by abstracting these internals away.\n\n## When should I use this?\n\nIf you want to handle syntax trees manually, use this.\nFor an easier time processing content, use the **[remark][]** ecosystem instead.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install mdast-util-to-markdown\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {toMarkdown} from 'https://cdn.skypack.dev/mdast-util-to-markdown@1?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {toMarkdown} from 'https://cdn.skypack.dev/mdast-util-to-markdown@1?min'\n</script>\n```\n\n## Use\n\nSay our module `example.js` looks as follows:\n\n```js\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/** @type {import('mdast').Root} */\nconst tree = {\n  type: 'root',\n  children: [\n    {\n      type: 'blockquote',\n      children: [\n        {type: 'thematicBreak'},\n        {\n          type: 'paragraph',\n          children: [\n            {type: 'text', value: '- a\\nb !'},\n            {\n              type: 'link',\n              url: 'example.com',\n              children: [{type: 'text', value: 'd'}]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\nconsole.log(toMarkdown(tree))\n```\n\n…now running `node example.js` yields:\n\n```markdown\n> ***\n>\n> \\- a\n> b \\![d](example.com)\n```\n\n> 👉 **Note**: observe the properly escaped characters which would otherwise\n> turn into a list and image respectively.\n\n## API\n\nThis package exports the following identifier: `toMarkdown`.\nThere is no default export.\n\n### `toMarkdown(tree[, options])`\n\nTurn an **[mdast][]** syntax tree into markdown.\n\n##### Formatting options\n\n###### `options.bullet`\n\nMarker to use for bullets of items in unordered lists (`'*'`, `'+'`, or `'-'`,\ndefault: `'*'`).\n\n###### `options.bulletOther`\n\nMarker to use in certain cases where the primary bullet doesn’t work (`'*'`,\n`'+'`, or `'-'`, default: depends).\n\nThere are three cases where the primary bullet can’t be used:\n\n*   When three list items are on their own, the last one is empty, and `bullet`\n    is also a valid `rule`: `* - +`.\n    This would turn into a thematic break if serialized with three primary\n    bullets.\n    As this is an edge case unlikely to appear in normal markdown, the last list\n    item will be given a different bullet.\n*   When a thematic break is the first child of one of the list items, and\n    `bullet` is the same character as `rule`: `- ***`.\n    This would turn into a single thematic break if serialized with primary\n    bullets.\n    As this is an edge case unlikely to appear in normal markdown this markup is\n    always fixed, even if `bulletOther` is not passed\n*   When two unordered lists appear next to each other: `* a\\n- b`.\n    CommonMark sees different bullets as different lists, but several markdown\n    parsers parse it as one list.\n    To solve for both, we instead inject an empty comment between the two lists:\n    `* a\\n<!---->\\n* b`, but if `bulletOther` is given explicitly, it will be\n    used instead\n\n###### `options.bulletOrdered`\n\nMarker to use for bullets of items in ordered lists (`'.'` or `')'`, default:\n`'.'`).\n\n###### `options.bulletOrderedOther`\n\nMarker to use in certain cases where the primary bullet for ordered items\ndoesn’t work (`'.'` or `')'`, default: none).\n\nThere is one case where the primary bullet for ordered items can’t be used:\n\n*   When two ordered lists appear next to each other: `1. a\\n2) b`.\n    CommonMark added support for `)` as a marker, but other markdown parsers\n    do not support it.\n    To solve for both, we instead inject an empty comment between the two lists:\n    `1. a\\n<!---->\\n1. b`, but if `bulletOrderedOther` is given explicitly, it\n    will be used instead\n\n###### `options.closeAtx`\n\nWhether to add the same number of number signs (`#`) at the end of an ATX\nheading as the opening sequence (`boolean`, default: `false`).\n\n###### `options.emphasis`\n\nMarker to use for emphasis (`'*'` or `'_'`, default: `'*'`).\n\n###### `options.fence`\n\nMarker to use for fenced code (``'`'`` or `'~'`, default: ``'`'``).\n\n###### `options.fences`\n\nWhether to use fenced code always (`boolean`, default: `false`).\nThe default is to use fenced code if there is a language defined, if the code is\nempty, or if it starts or ends in blank lines.\n\n###### `options.incrementListMarker`\n\nWhether to increment the counter of ordered lists items (`boolean`, default:\n`true`).\n\n###### `options.listItemIndent`\n\nHow to indent the content of list items (`'one'`, `'tab'`, or `'mixed'`,\ndefault: `'tab'`).\nEither with the size of the bullet plus one space (when `'one'`), a tab stop\n(`'tab'`), or depending on the item and its parent list (`'mixed'`, uses `'one'`\nif the item and list are tight and `'tab'` otherwise).\n\n###### `options.quote`\n\nMarker to use for titles (`'\"'` or `\"'\"`, default: `'\"'`).\n\n###### `options.resourceLink`\n\nWhether to always use resource links (`boolean`, default: `false`).\nThe default is to use autolinks (`<https://example.com>`) when possible\nand resource links (`[text](url)`) otherwise.\n\n###### `options.rule`\n\nMarker to use for thematic breaks (`'*'`, `'-'`, or `'_'`, default: `'*'`).\n\n###### `options.ruleRepetition`\n\nNumber of markers to use for thematic breaks (`number`, default: `3`, min: `3`).\n\n###### `options.ruleSpaces`\n\nWhether to add spaces between markers in thematic breaks (`boolean`, default:\n`false`).\n\n###### `options.setext`\n\nWhether to use setext headings when possible (`boolean`, default: `false`).\nThe default is to always use ATX headings (`# heading`) instead of setext\nheadings (`heading\\n=======`).\nSetext headings can’t be used for empty headings or headings with a rank of\nthree or more.\n\n###### `options.strong`\n\nMarker to use for strong (`'*'` or `'_'`, default: `'*'`).\n\n###### `options.tightDefinitions`\n\nWhether to join definitions without a blank line (`boolean`, default: `false`).\nThe default is to add blank lines between any flow (“block”) construct.\nTurning this option on is a shortcut for a join function like so:\n\n```js\nfunction joinTightDefinitions(left, right) {\n  if (left.type === 'definition' && right.type === 'definition') {\n    return 0\n  }\n}\n```\n\n###### `options.handlers`\n\nObject mapping node types to custom handlers (`Record<string, Handle>`, default:\n`{}`).\nUseful for syntax extensions.\n\nThis option is a bit advanced.\nIt’s recommended to look at the code in [`lib/handle/`][handlers] for examples.\n\n###### `options.join`\n\nList of functions used to determine what to place between two flow nodes\n(`Array<Join>`, default: `[]`).\n\n“Blocks” are typically joined by one blank line.\nSometimes it’s nicer to have them flush next to each other, yet other times\nthey can’t occur together at all.\nJoin functions receive two adjacent siblings and their parent and can return\n`number` or `boolean`, to signal how many blank lines to use between them.\nA return value of `true` is as passing `1`.\nA return value of `false` means the nodes cannot be joined by a blank line, such\nas two adjacent block quotes or indented code after a list, in which case a\ncomment will be injected to break them up:\n\n```markdown\n> Quote 1\n\n<!---->\n\n> Quote 2\n```\n\n###### `options.unsafe`\n\nList of patterns to escape (`Array<Unsafe>`).\nUseful for syntax extensions.\n\nThis option is quite advanced.\nIt’s recommended to look at the code in [`lib/unsafe.js`][unsafe] for examples.\n\n##### Extension options\n\n###### `options.extensions`\n\nList of extensions (`Array<ToMarkdownExtension>`, default: `[]`).\nEach `ToMarkdownExtension` is an object with the same interface as `options`\nhere.\n\n##### Returns\n\nSerialized markdown (`string`).\n\n## List of extensions\n\n*   [`syntax-tree/mdast-util-directive`](https://github.com/syntax-tree/mdast-util-directive)\n    — directives\n*   [`syntax-tree/mdast-util-frontmatter`](https://github.com/syntax-tree/mdast-util-frontmatter)\n    — frontmatter (YAML, TOML, more)\n*   [`syntax-tree/mdast-util-gfm`](https://github.com/syntax-tree/mdast-util-gfm)\n    — GFM\n*   [`syntax-tree/mdast-util-gfm-autolink-literal`](https://github.com/syntax-tree/mdast-util-gfm-autolink-literal)\n    — GFM autolink literals\n*   [`syntax-tree/mdast-util-gfm-footnote`](https://github.com/syntax-tree/mdast-util-gfm-footnote)\n    — GFM footnotes\n*   [`syntax-tree/mdast-util-gfm-strikethrough`](https://github.com/syntax-tree/mdast-util-gfm-strikethrough)\n    — GFM strikethrough\n*   [`syntax-tree/mdast-util-gfm-table`](https://github.com/syntax-tree/mdast-util-gfm-table)\n    — GFM tables\n*   [`syntax-tree/mdast-util-gfm-task-list-item`](https://github.com/syntax-tree/mdast-util-gfm-task-list-item)\n    — GFM task list items\n*   [`syntax-tree/mdast-util-math`](https://github.com/syntax-tree/mdast-util-math)\n    — math\n*   [`syntax-tree/mdast-util-mdx`](https://github.com/syntax-tree/mdast-util-mdx)\n    — MDX\n*   [`syntax-tree/mdast-util-mdx-expression`](https://github.com/syntax-tree/mdast-util-mdx-expression)\n    — MDX expressions\n*   [`syntax-tree/mdast-util-mdx-jsx`](https://github.com/syntax-tree/mdast-util-mdx-jsx)\n    — MDX JSX\n*   [`syntax-tree/mdast-util-mdxjs-esm`](https://github.com/syntax-tree/mdast-util-mdxjs-esm)\n    — MDX ESM\n\n## Syntax\n\nMarkdown is serialized according to CommonMark but care is taken to format in\nsuch a way that the resulting markdown should work with most markdown parsers.\nExtensions can add support for custom syntax.\n\n## Syntax tree\n\nThe syntax tree is [mdast][].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the types `Options`, `Map`, `Unsafe`, `Join`, `Handlers`, `Handle`,\n`Context`, `SafeOptions`, which model the interfaces used by options and\nextensions.\n\n## Security\n\n`mdast-util-to-markdown` will do its best to serialize markdown to match the\nsyntax tree, but there are several cases where that is impossible.\nIt’ll do its best, but complete roundtripping is impossible given that any value\ncould be injected into the tree.\n\nAs markdown is sometimes used for HTML, and improper use of HTML can open you up\nto a [cross-site scripting (XSS)][xss] attack, use of `mdast-util-to-markdown`\nand parsing it again later could potentially be unsafe.\nWhen parsing markdown afterwards and then going to HTML, use something like\n[`hast-util-sanitize`][hast-util-sanitize] to make the tree safe.\n\n## Related\n\n*   [`syntax-tree/mdast-util-from-markdown`](https://github.com/syntax-tree/mdast-util-from-markdown)\n    — parse markdown to mdast\n*   [`micromark/micromark`](https://github.com/micromark/micromark)\n    — parse markdown\n*   [`remarkjs/remark`](https://github.com/remarkjs/remark)\n    — process markdown\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-to-markdown/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-to-markdown/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-to-markdown.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-to-markdown\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-to-markdown.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-to-markdown\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-to-markdown.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-to-markdown\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[hast-util-sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[handlers]: lib/handle\n\n[unsafe]: lib/unsafe.js\n\n[remark]: https://github.com/remarkjs/remark\n\n[remark-stringify]: https://github.com/remarkjs/remark/tree/main/packages/remark-stringify\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2020 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mdast-util-to-markdown/-/mdast-util-to-markdown-1.3.0.tgz#38b6cdc8dc417de642a469c4fc2abdf8c931bd1e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mdast-util-to-markdown/-/mdast-util-to-markdown-1.3.0.tgz",
    "hash": "38b6cdc8dc417de642a469c4fc2abdf8c931bd1e",
    "integrity": "sha512-6tUSs4r+KK4JGTTiQ7FfHmVOaDrLQJPmpjD6wPMlHGUVXoG9Vjc3jIeP+uyBWRf8clwB2blM+W7+KrlMYQnftA==",
    "registry": "npm",
    "packageName": "mdast-util-to-markdown",
    "cacheIntegrity": "sha512-6tUSs4r+KK4JGTTiQ7FfHmVOaDrLQJPmpjD6wPMlHGUVXoG9Vjc3jIeP+uyBWRf8clwB2blM+W7+KrlMYQnftA== sha1-OLbNyNxBfeZCpGnE/Cq9+MkxvR4="
  },
  "registry": "npm",
  "hash": "38b6cdc8dc417de642a469c4fc2abdf8c931bd1e"
}