{
  "manifest": {
    "name": "@markuplint/i18n",
    "version": "2.1.1",
    "description": "HTML parser for markuplint",
    "repository": {
      "type": "git",
      "url": "git@github.com:markuplint/markuplint.git"
    },
    "author": {
      "name": "Yusuke Hirao",
      "email": "yusukehirao@me.com"
    },
    "license": "MIT",
    "private": false,
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "publishConfig": {
      "access": "public"
    },
    "scripts": {
      "build": "tsc",
      "clean": "tsc --build --clean"
    },
    "gitHead": "37080ac1442a4b9a35fa05c97495d29a0342dfc6",
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-@markuplint-i18n-2.1.1-32b98135843fd1bfee091f019f439b2c88d55a7c-integrity/node_modules/@markuplint/i18n/package.json",
    "readmeFilename": "README.md",
    "readme": "# @markuplint/i18n\n\n[![npm version](https://badge.fury.io/js/%40markuplint%2Fi18n.svg)](https://www.npmjs.com/package/@markuplint/i18n)\n[![Build Status](https://travis-ci.org/markuplint/markuplint.svg?branch=main)](https://travis-ci.org/markuplint/markuplint)\n[![Coverage Status](https://coveralls.io/repos/github/markuplint/markuplint/badge.svg?branch=main)](https://coveralls.io/github/markuplint/markuplint?branch=main)\n\n## Install\n\n```sh\n$ npm install @markuplint/i18n\n\n$ yarn add @markuplint/i18n\n```\n\n## API\n\n```ts\nimport { translator } from '@markuplint/i18n';\n\nconst t = translator({\n  locale: 'ja',\n  ...require('@markuplint/i18n/locales/ja.json'),\n});\n```\n\nThe `translator` function creates the `t` function.\nIt is an overloading function that accepts kind of arguments below:\n\n### Translate sentence\n\n```ts\ntype T = (template?: string, ...values: string[]) => string;\n```\n\n```ts\nconst message = t(\n  // Template #1\n  '{0} is {1:c}',\n  // The {0} value of template #1\n  t(\n    // Template #2\n    '{0} of {1}',\n    // The {0} value of template #2\n    t(\n      // Template #3\n      'the {0}',\n      // The {0} value of template #3\n      'value',\n    ),\n    // The {1} value of template #2\n    t(\n      // Template #4\n      'the \"{0*}\" {1}',\n      // The {0} value of template #4\n      'id',\n      // The {1} value of template #4\n      'attribute',\n    ),\n  ),\n  // The {1} value of template #1\n  'duplicated',\n);\n\nconsole.log(message);\n// => 属性「id」の値が重複しています\n```\n\n#### Placeholder\n\nThere is a placeholder that the number is surrounded by `{}` on template strings. It is replaced argument as a phrase. It translates the phrase if it matches the keyword defined in the dictionary.\n\n#### Tagged templates syntax\n\n⚠️ It is experimental.\n\n```ts\nimport { taggedTemplateTranslator } from '@markuplint/i18n';\n\nconst _ = taggedTemplateTranslator({\n  locale: 'ja',\n  ...require('path/to/dictionary/ja.json'),\n});\n\nconst message = _`${\n  //\n  _`${\n    //\n    _`the ${'value'}`\n  } of ${\n    //\n    _`the \"${'id'}\" ${'attribute'}`\n  }`\n} is ${\n  //\n  'c:duplicated'\n}`;\n\nconsole.log(message);\n// => 属性「id」の値が重複しています\n```\n\n### Translate a phrase\n\n```ts\ntype T = (phrase: string) => string;\n```\n\n```ts\nconst phrase = t('element');\n\nconsole.log(phrase);\n// => 要素\n```\n\n### Translate listed phrases\n\n```ts\ntype T = (phrases: string[]) => string;\n```\n\n```ts\nconst list = t(['element', 'attribute', 'value']);\n\nconsole.log(list);\n// => 「要素」「属性」「値」\n\n/* If locale is \"en\" */\nconsole.log(list);\n// => \"element\", \"attribute\", \"value\"\n```\n\nIt converts the character-separated list specified in each locale.\n\n| Locale | Separater            | Before Char                | After Char                  |\n| ------ | -------------------- | -------------------------- | --------------------------- |\n| **en** | `, ` (camma + space) | `\"` (double quote)         | `\"` (double quote)          |\n| **ja** | none (empty string)  | `「` (left corner bracket) | `」` (right corner bracket) |\n\n### Avoid translation\n\nThe `autocomplete` is defined as `オートコンプリート` in the **JA** dictionary.\nHowever, It avoids translation if the number placeholder includes `*` (asterisk).\nIt is an effective means if you want a code or a specific name.\n\n```ts\nconst phrase = t('the \"{0}\" {1}', 'autocomplete', 'attribute');\nconsole.log(phrase);\n// => 属性「オートコンプリート」\n\nconst phrase = t('the \"{0*}\" {1}', 'autocomplete', 'attribute');\nconsole.log(phrase);\n// => 属性「autocomplete」\n```\n\nAnother means is that it surrounds `%` (percentage) to a phrase. It is effective when you use listing.\n\n```ts\nconst phrase = t('the \"{0}\" {1}', '%autocomplete%', 'attribute');\nconsole.log(phrase);\n// => 属性「autocomplete」\n\nconst list = t(['element', '%attribute%', 'value']);\nconsole.log(list);\n// => 「要素」「attribute」「値」\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017-2019 Yusuke Hirao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@markuplint/i18n/-/i18n-2.1.1.tgz#32b98135843fd1bfee091f019f439b2c88d55a7c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@markuplint/i18n/-/i18n-2.1.1.tgz",
    "hash": "32b98135843fd1bfee091f019f439b2c88d55a7c",
    "integrity": "sha512-F8L73ElN9XHATBJdUmyxZuPy/pYJcXyn9fguiq6vDWGPiBHjoiXjtMvvhtzajE9SaXH4gSvrJrWfS3jNqN9lAw==",
    "registry": "npm",
    "packageName": "@markuplint/i18n",
    "cacheIntegrity": "sha512-F8L73ElN9XHATBJdUmyxZuPy/pYJcXyn9fguiq6vDWGPiBHjoiXjtMvvhtzajE9SaXH4gSvrJrWfS3jNqN9lAw== sha1-MrmBNYQ/0b/uCR8Bn0ObLIjVWnw="
  },
  "registry": "npm",
  "hash": "32b98135843fd1bfee091f019f439b2c88d55a7c"
}