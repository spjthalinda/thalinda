import { declare } from '@babel/helper-plugin-utils';
import proposalAsyncDoExpressions from '@babel/plugin-proposal-async-do-expressions';
import proposalDoExpressions from '@babel/plugin-proposal-do-expressions';
import proposalFunctionBind from '@babel/plugin-proposal-function-bind';
import proposalFunctionSent from '@babel/plugin-proposal-function-sent';
import proposalJsonStrings from '@babel/plugin-proposal-json-strings';
import proposalPartialApplication from '@babel/plugin-proposal-partial-application';
import proposalPipelineOperator from '@babel/plugin-proposal-pipeline-operator';
import proposalRecordAndTuple from '@babel/plugin-proposal-record-and-tuple';
import proposalThrowExpression from '@babel/plugin-proposal-throw-expressions';
import syntaxDecorators from '@babel/plugin-syntax-decorators';
import syntaxTypeScript from '@babel/plugin-syntax-typescript';
import compareVersions from 'compare-versions';

const NODE_VERSION = process.versions.node;
const IS_RECORD_TUPLE_SUPPORTED = compareVersions.compare(
  NODE_VERSION,
  "14.6",
  ">="
);

var syntaxV8intrinsic = declare((api) => {
  api.assertVersion(7);
  return {
    name: "v8intrinsic",
    manipulateOptions(_opts, parserOpts) {
      parserOpts.plugins.push("v8intrinsic");
    }
  };
});

var index = declare(
  (api, {
    decoratorsBeforeExport,
    decoratorsLegacy = true,
    isTSX,
    pipelineOperator = "minimal",
    recordTuplePolyfill = IS_RECORD_TUPLE_SUPPORTED,
    recordTupleSyntaxType = "hash"
  }) => {
    api.assertVersion(7);
    return {
      plugins: [
        [
          syntaxDecorators,
          {
            decoratorsBeforeExport,
            legacy: decoratorsLegacy
          }
        ],
        [
          syntaxTypeScript,
          {
            isTSX
          }
        ],
        syntaxV8intrinsic,
        proposalAsyncDoExpressions,
        proposalDoExpressions,
        proposalFunctionBind,
        proposalFunctionSent,
        proposalJsonStrings,
        proposalPartialApplication,
        [
          proposalPipelineOperator,
          {
            proposal: pipelineOperator
          }
        ],
        recordTuplePolyfill && [
          proposalRecordAndTuple,
          {
            importPolyfill: !!recordTuplePolyfill,
            polyfillModuleName: typeof recordTuplePolyfill === "string" ? recordTuplePolyfill : void 0,
            syntaxType: recordTupleSyntaxType
          }
        ],
        proposalThrowExpression
      ].filter(Boolean),
      overrides: isTSX ? void 0 : [
        {
          test: /\.[jt]sx$/,
          plugins: [
            [
              syntaxTypeScript,
              {
                isTSX: true
              }
            ]
          ]
        }
      ]
    };
  }
);

export { index as default };
