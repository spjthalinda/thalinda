'use strict';

var helperPluginUtils = require('@babel/helper-plugin-utils');
var proposalAsyncDoExpressions = require('@babel/plugin-proposal-async-do-expressions');
var proposalDoExpressions = require('@babel/plugin-proposal-do-expressions');
var proposalFunctionBind = require('@babel/plugin-proposal-function-bind');
var proposalFunctionSent = require('@babel/plugin-proposal-function-sent');
var proposalJsonStrings = require('@babel/plugin-proposal-json-strings');
var proposalPartialApplication = require('@babel/plugin-proposal-partial-application');
var proposalPipelineOperator = require('@babel/plugin-proposal-pipeline-operator');
var proposalRecordAndTuple = require('@babel/plugin-proposal-record-and-tuple');
var proposalThrowExpression = require('@babel/plugin-proposal-throw-expressions');
var syntaxDecorators = require('@babel/plugin-syntax-decorators');
var syntaxTypeScript = require('@babel/plugin-syntax-typescript');
var compareVersions = require('compare-versions');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var proposalAsyncDoExpressions__default = /*#__PURE__*/_interopDefaultLegacy(proposalAsyncDoExpressions);
var proposalDoExpressions__default = /*#__PURE__*/_interopDefaultLegacy(proposalDoExpressions);
var proposalFunctionBind__default = /*#__PURE__*/_interopDefaultLegacy(proposalFunctionBind);
var proposalFunctionSent__default = /*#__PURE__*/_interopDefaultLegacy(proposalFunctionSent);
var proposalJsonStrings__default = /*#__PURE__*/_interopDefaultLegacy(proposalJsonStrings);
var proposalPartialApplication__default = /*#__PURE__*/_interopDefaultLegacy(proposalPartialApplication);
var proposalPipelineOperator__default = /*#__PURE__*/_interopDefaultLegacy(proposalPipelineOperator);
var proposalRecordAndTuple__default = /*#__PURE__*/_interopDefaultLegacy(proposalRecordAndTuple);
var proposalThrowExpression__default = /*#__PURE__*/_interopDefaultLegacy(proposalThrowExpression);
var syntaxDecorators__default = /*#__PURE__*/_interopDefaultLegacy(syntaxDecorators);
var syntaxTypeScript__default = /*#__PURE__*/_interopDefaultLegacy(syntaxTypeScript);
var compareVersions__default = /*#__PURE__*/_interopDefaultLegacy(compareVersions);

const NODE_VERSION = process.versions.node;
const IS_RECORD_TUPLE_SUPPORTED = compareVersions__default["default"].compare(
  NODE_VERSION,
  "14.6",
  ">="
);

var syntaxV8intrinsic = helperPluginUtils.declare((api) => {
  api.assertVersion(7);
  return {
    name: "v8intrinsic",
    manipulateOptions(_opts, parserOpts) {
      parserOpts.plugins.push("v8intrinsic");
    }
  };
});

var index = helperPluginUtils.declare(
  (api, {
    decoratorsBeforeExport,
    decoratorsLegacy = true,
    isTSX,
    pipelineOperator = "minimal",
    recordTuplePolyfill = IS_RECORD_TUPLE_SUPPORTED,
    recordTupleSyntaxType = "hash"
  }) => {
    api.assertVersion(7);
    return {
      plugins: [
        [
          syntaxDecorators__default["default"],
          {
            decoratorsBeforeExport,
            legacy: decoratorsLegacy
          }
        ],
        [
          syntaxTypeScript__default["default"],
          {
            isTSX
          }
        ],
        syntaxV8intrinsic,
        proposalAsyncDoExpressions__default["default"],
        proposalDoExpressions__default["default"],
        proposalFunctionBind__default["default"],
        proposalFunctionSent__default["default"],
        proposalJsonStrings__default["default"],
        proposalPartialApplication__default["default"],
        [
          proposalPipelineOperator__default["default"],
          {
            proposal: pipelineOperator
          }
        ],
        recordTuplePolyfill && [
          proposalRecordAndTuple__default["default"],
          {
            importPolyfill: !!recordTuplePolyfill,
            polyfillModuleName: typeof recordTuplePolyfill === "string" ? recordTuplePolyfill : void 0,
            syntaxType: recordTupleSyntaxType
          }
        ],
        proposalThrowExpression__default["default"]
      ].filter(Boolean),
      overrides: isTSX ? void 0 : [
        {
          test: /\.[jt]sx$/,
          plugins: [
            [
              syntaxTypeScript__default["default"],
              {
                isTSX: true
              }
            ]
          ]
        }
      ]
    };
  }
);

module.exports = index;
