{
  "manifest": {
    "name": "eslint-formatter-friendly",
    "version": "7.0.0",
    "description": " simple formatter/reporter for eslint that's friendly with Sublime Text and iterm2 'click to open file' functionality",
    "repository": {
      "type": "git",
      "url": "https://github.com/royriojas/eslint-friendly-formatter.git"
    },
    "license": "MIT",
    "author": {
      "name": "Roy Riojas",
      "url": "http://royriojas.com"
    },
    "main": "index.js",
    "files": [
      "index.js",
      "process.js"
    ],
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "beautify": "esbeautifier './index.js' 'test/specs/**/*.js'",
      "beautify-check": "esbeautifier -k './index.js' 'test/specs/**/*.js'",
      "eslint": "eslint --format './index.js' index.js test/specs/ -c './configs/eslint.json'",
      "lint-fix": "npm run beautify && npm run eslint -- --fix",
      "lint": "npm run beautify-check && npm run eslint",
      "test": "npm run lint && FORCE_ITERM_HINT=true mocha-runner 'test/specs/**/*.js'",
      "test:update": "CHAI_JEST_SNAPSHOT_UPDATE_ALL=true npm test",
      "cover": "istanbul cover -x 'test/specs/**/*.js' mocha-runner 'test/specs/**/*.js' html text-summary",
      "watch": "npm run cover && watch-spawn -i -p 'test/specs/**/*.js' istanbul cover test/runner.js html text-summary",
      "check": "npm run beautify-check && npm run eslint",
      "verify": "npm run check && npm test",
      "changelog": "changelogx -f markdown -o ./changelog.md",
      "do-changelog": "npm run changelog && git add ./changelog.md && git commit -m 'DOC: Generate changelog' --no-verify",
      "install-hooks": "prepush install && changelogx install-hook && precommit install",
      "pre-v": "npm run verify",
      "post-v": "npm run do-changelog && git push --no-verify && git push --tags --no-verify",
      "bump-major": "npm run pre-v && npm version major -m 'BLD: Release v%s' && npm run post-v",
      "bump-minor": "npm run pre-v && npm version minor -m 'BLD: Release v%s' && npm run post-v",
      "bump-patch": "npm run pre-v && npm version patch -m 'BLD: Release v%s' && npm run post-v"
    },
    "keywords": [
      "eslint",
      "formatter",
      "reporter",
      "eslint formatter",
      "stylish"
    ],
    "prepush": [
      "npm run verify"
    ],
    "precommit": [
      "npm run verify"
    ],
    "devDependencies": {
      "chai-jest-snapshot": "2.0.0",
      "changelogx": "^1.0.18",
      "esbeautifier": "10.1.1",
      "eslint": "^2.10.2",
      "glob-expand": "0.2.1",
      "istanbul": "^0.3.17",
      "mocha-runner": "2.0.0",
      "precommit": "1.2.2",
      "prepush": "3.1.11",
      "proxyquire": "^1.6.0",
      "read-file": "^0.1.2",
      "read-json-sync": "^1.1.0",
      "snap-shot": "2.17.0",
      "watch-spawn": "^1.0.3",
      "write": "^0.2.0"
    },
    "dependencies": {
      "@babel/code-frame": "7.0.0",
      "chalk": "2.4.2",
      "extend": "3.0.2",
      "strip-ansi": "5.2.0",
      "text-table": "0.2.0"
    },
    "changelogx": {
      "issueIDRegExp": "#(\\d+)",
      "commitURL": "https://github.com/royriojas/eslint-formatter-friendly/commit/{0}",
      "authorURL": "https://github.com/{0}",
      "issueIDURL": "https://github.com/royriojas/eslint-formatter-friendly/issues/{0}",
      "projectName": "eslint-friendly-formatter"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-eslint-formatter-friendly-7.0.0-32a4998ababa0a39994aed629b831fda7dabc864-integrity/node_modules/eslint-formatter-friendly/package.json",
    "readmeFilename": "README.md",
    "readme": "# [eslint](https://github.com/nzakas/eslint/)-formatter-friendly\n> A simple formatter/reporter for [ESLint](https://github.com/nzakas/eslint/) that's friendly with Sublime Text and iterm2 \"click to open file\" functionality\n\n[![NPM Version](http://img.shields.io/npm/v/eslint-formatter-friendly.svg?style=flat)](https://npmjs.org/package/eslint-formatter-friendly)\n[![Build Status](http://img.shields.io/travis/royriojas/eslint-formatter-friendly.svg?style=flat)](https://travis-ci.org/royriojas/eslint-formatter-friendly)\n\n## Motivation for this module\n\nI decided to use [eslint](https://github.com/nzakas/eslint/) to verify my code and sadly the reporter was not terminal\nfriendly. Basically I cannot click on the file to open it with my text editor and go directly to the line where\nthe error was reported. This module fixes that issue, by using the syntax that \"sublime text\" introduced to open files.\n\n> Filenames may be given a :line or :line:column suffix to open at a specific\n> location.\n\nThis module is based on the original `stylish` formatter that is now part of ESLint, it adds the following\n\n- All the errors are reported at the end, so no more search for errors between tons of report lines\n- RuleIds are clickable on terminals like iTerm2 and take you to the ruleId documentation site.\n- A summary is shown at the end with the offended ruleIds, ruleIds are also clickable.\n- It also shows a bit of context where the error happened, Making easier to understand the nature of the error\n- If you use [iTerm2](http://iterm2.com/) or [Guake](http://guake-project.org/)\\* the link for the file becomes clickable **and will open your editor at the given line**.\n  Please make sure you have properly configured the option to open uris that matches files with your editor of choice.\n  Sublime is a great choice!, but this should work as well with other editors that understand the pattern used by sublime\n\n  \\* Note: Until Guake v0.7.3 is released, it may be necessary to compile master from source.\n\n## Example of the output\n\n![screenshot](clickable-rules2.png)\n\n## install\n\n```bash\nnpm i --save-dev eslint-formatter-friendly\n```\n\n## Intellij/Webstorm/PhpStorm integration\n0. Install `eslint` and `eslint-formatter-friendly`.\n\n   ```bash\n   npm i -D eslint eslint-formatter-friendly\n   ```\n\n1. Add a script to your package json like:\n\n   ```javascript\n   {\n     \"scripts\": {\n       \"eslint\": \"eslint --format friendly file1 file2 dir1/ dir2/\",\n     }\n   }\n   ```\n\n   **Note**: In windows you might not need the quotes around the path to the module.\n\n   ```javascript\n   {\n     \"scripts\": {\n       \"eslint\": \"eslint --format friendly file1 file2 dir1/ dir2/\",\n     }\n   }\n   ```\n\n   see [issue #17](https://github.com/royriojas/eslint-formatter-friendly/issues/17)\n\n1. Create a external tool to run eslint using this module as your formatter like this\n   - program: `npm`\n   - parameters: `run eslint`\n   - working directory: `$ProjectFileDir$`\n\n2. Use an output filter like:\n\n   ```bash\n   $FILE_PATH$.*:$LINE$.*:$COLUMN$\n   ```\n3. When launching the tool now the files will be also clickable, see:\n   ![screenshot](screenshot3.png)\n\n## Usage\n\nIn the command line\n\n```bash\n# just make sure you pass the path to the module to the format option of eslint\neslint.js --format './friendly/index.js' index.js test/ -c './eslint.json'\n```\n\nOr as a module\n\n```javascript\nvar eslint = require('eslint');\nvar opts = readJson('./path/to/options');\n\nvar engine = new eslint.CLIEngine( opts );\nvar report = engine.executeOnFiles( ['file1.js', 'file2.js'/*, ...*/] );\nvar results = report.results || [];\n\nvar formatter = require('eslint-formatter-friendly');\nvar output = formatter(results);\n\n// this will print the report if any...\nconsole.log(output);\n\n```\nIt works with `gulp` and `gulp-eslint`\n\n```javascript\nvar friendlyFormatter = require(\"eslint-formatter-friendly\");\n// Your js task\ngulp.task(\"javascript\", function() {\n  return gulp.src([\"src/js/**/*.js\"])\n    // Your eslint pipe\n    .pipe(eslint(\".eslintrc\"))\n    .pipe(eslint.format(friendlyFormatter))\n    // Continue your other tasks\n    .pipe(concat(\"app.js\"))\n    .pipe(gulp.dest(\"dist/js\"))\n});\n```\n\nIt should work well in with eslint-grunt or grunt-eslint\n\n```javascript\ngrunt.initConfig({\n    // when using eslint-grunt:\n    eslint: {\n        options: {\n            formatter: './friendly'\n        }),\n        target1: {\n            //..\n        }\n    },\n    // when using grunt-eslint:\n    eslint: {\n        options: {\n            format: './friendly'\n        }),\n        target2: {\n            //..\n        }\n    }\n});\n```\n\n~~Eslint [does not support passing parameters to formatters from the cli](https://github.com/eslint/eslint/issues/2989) yet.So in order\nto pass parameters to the formatter we will have to rely on **environment variables**~~\n\n### ENV Variables\n\n#### EFF_FILTER=ruleId\n\nOnly shows the `errors`/`warnigs` that match the given `ruleId` filter. This option will only filter the reported rules the error and warning counts will be the same as when all rules are reported same as the exit code.\n\n```bash\nEFF_FILTER=global-require EFF_BY_ISSUE=true eslint -f friendly client/**/*.js server/**/*.js\n```\n\n#### EFF_BY_ISSUE\n\nNormally the reporter will group issues by file, which is handy for normal development. But there are some cases where you might want to fix all the errors of a same kind all at once. For those cases this flag can be used to make the reporter group the issues by ruleId.\n\n```bash\nEFF_BY_ISSUE=true eslint -f friendly client/**/*.js server/**/*.js\n```\n\n#### EFF_NO_SOURCE\n\nBy default the reporter will include a block of code to provide context, but we can omit this if we're only interested in the line where the issue is happening. If this is true it will hide the blocks of code.\n\n```bash\nEFF_NO_SOURCE=true eslint -f friendly client/**/*.js server/**/*.js\n```\n\n\n#### `EFF_NO_GRAY`\n\nDisable the gray color output\n\nWe use the gray color to show some info about the context where the error/warning happens. If for some reason you want to disable the gray color, [in cases like this one ](https://github.com/royriojas/eslint-formatter-friendly/pull/2), you can do it using an environment variable.\n\n```bash\nexport EFF_NO_GRAY=true\n```\n\nAnd the gray color won't be used.\n\n#### `EFF_ABSOLUTE_PATHS`\n\nMake the paths of the files in the reporter be absolute instead of relative as it is by default in the received results.\n\nSome terminals work better with relative paths (like `iTerm2` with `fish`) and other dislike it like `Guake`. So starting in version v.1.1.0 the paths will be relative by deafult. If you need the absolute please export the following variable\n\n```bash\nexport EFF_ABSOLUTE_PATHS=true\n```\n\n#### `EFF_EDITOR_SCHEME`\n\nIf this parameter is set, a url will be output below the filename.\n\nSome terminals only support clicking on urls, and editors can be configured to respond to custom url schemes.\n\n```bash\nexport EFF_EDITOR_SCHEME=editor://open?file={file}&line={line}&column={column}\n```\n\n## [Changelog](./changelog.md)\n\n## License\n\nMIT\n\n\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Roy Riojas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-formatter-friendly/-/eslint-formatter-friendly-7.0.0.tgz#32a4998ababa0a39994aed629b831fda7dabc864",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-formatter-friendly/-/eslint-formatter-friendly-7.0.0.tgz",
    "hash": "32a4998ababa0a39994aed629b831fda7dabc864",
    "integrity": "sha512-WXg2D5kMHcRxIZA3ulxdevi8/BGTXu72pfOO5vXHqcAfClfIWDSlOljROjCSOCcKvilgmHz1jDWbvFCZHjMQ5w==",
    "registry": "npm",
    "packageName": "eslint-formatter-friendly",
    "cacheIntegrity": "sha512-WXg2D5kMHcRxIZA3ulxdevi8/BGTXu72pfOO5vXHqcAfClfIWDSlOljROjCSOCcKvilgmHz1jDWbvFCZHjMQ5w== sha1-MqSZirq6CjmZSu1im4Mf2n2ryGQ="
  },
  "registry": "npm",
  "hash": "32a4998ababa0a39994aed629b831fda7dabc864"
}