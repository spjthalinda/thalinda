import type { Log } from './debug';
import type { Translator } from '@markuplint/i18n';
import type { Element, RuleConfigValue, Document } from '@markuplint/ml-core';
import type { ARIRRoleAttribute, Attribute, MLMLSpec, PermittedRoles } from '@markuplint/ml-spec';
export declare function attrMatches<T extends RuleConfigValue, R>(node: Element<T, R>, condition: Attribute['condition']): boolean;
export declare function match(needle: string, pattern: string): boolean;
/**
 * PotentialCustomElementName
 *
 * @see https://spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
 *
 * > PotentialCustomElementName ::=
 * >   [a-z] (PCENChar)* '-' (PCENChar)*
 * > PCENChar ::=
 * >   "-" | "." | [0-9] | "_" | [a-z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
 * >   [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
 * > This uses the EBNF notation from the XML specification. [XML]
 *
 * ASCII-case-insensitively.
 * Originally, it is not possible to define a name including ASCII upper alphas in the custom element, but it is not treated as illegal by the HTML parser.
 */
export declare const rePCENChar: string;
export declare function htmlSpec(specs: Readonly<MLMLSpec>, nameWithNS: string): import("@markuplint/ml-spec").ElementSpec | null;
export declare function isValidAttr(t: Translator, name: string, value: string, isDynamicValue: boolean, node: Element<any, any>, attrSpecs: Attribute[], log?: Log): false | {
    invalidType: "non-existent" | "invalid-value";
    message: string;
    loc?: {
        raw: string;
        line: number;
        col: number;
    } | undefined;
};
export declare function toNormalizedValue(value: string, spec: Attribute): string;
export declare function ariaSpec(specs: Readonly<MLMLSpec>): {
    roles: ARIRRoleAttribute[];
    ariaAttrs: import("@markuplint/ml-spec").ARIAAttribute[];
};
export declare function getRoleSpec(specs: Readonly<MLMLSpec>, roleName: string): {
    name: string;
    isAbstract: boolean;
    accessibleNameRequired: boolean;
    statesAndProps: import("@markuplint/ml-spec").ARIARoleOwnedPropOrState[];
    superClassRoles: ARIRRoleAttribute[];
} | null;
/**
 * Getting permitted ARIA roles.
 *
 * - If an array, it is role list.
 * - If `true`, this mean is "Any".
 * - If `false`, this mean is "No".
 */
export declare function getPermittedRoles(specs: Readonly<MLMLSpec>, el: Element<any, any>): PermittedRoles;
export declare function getImplicitRole(specs: Readonly<MLMLSpec>, el: Element<any, any>): string | false;
export declare function getComputedRole(specs: Readonly<MLMLSpec>, el: Element<any, any>): {
    name: string;
    isImplicit: boolean;
} | null;
/**
 *
 * @see https://www.w3.org/TR/wai-aria-1.2/#propcharacteristic_value
 *
 * @param type
 * @param value
 * @param tokenEnum
 */
export declare function checkAriaValue(type: string, value: string, tokenEnum: string[]): boolean;
export declare function checkAria(specs: Readonly<MLMLSpec>, attrName: string, currentValue: string, role?: string): {
    currentValue: string;
    isValid: boolean;
} | {
    currentValue: string;
    isValid: boolean;
    name: string;
    type: "property" | "state";
    deprecated?: true | undefined;
    isGlobal?: true | undefined;
    value: import("@markuplint/ml-spec").ARIAAttributeValue;
    conditionalValue?: {
        role: string[];
        value: import("@markuplint/ml-spec").ARIAAttributeValue;
    }[] | undefined;
    enum: string[];
    defaultValue?: string | undefined;
    equivalentHtmlAttrs?: import("@markuplint/ml-spec").EquivalentHtmlAttr[] | undefined;
    valueDescriptions?: Record<string, string> | undefined;
};
export declare function accnameMayBeMutable(el: Element<any, any>, document: Document<any, any>): boolean;
export declare function getOwnedLabel<V extends RuleConfigValue, O>(el: Element<V, O>, docuemnt: Document<V, O>): import("packages/@markuplint/ml-core/lib/ml-dom/tokens/abstract-element").default<V, O, import("packages/@markuplint/ml-ast/src").MLASTElement | import("packages/@markuplint/ml-ast/src").MLASTOmittedElement> | null;
export declare function decodeCharRef(characterReference: string): string;
