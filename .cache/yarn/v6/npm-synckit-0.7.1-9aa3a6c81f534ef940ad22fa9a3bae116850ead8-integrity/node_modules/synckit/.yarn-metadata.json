{
  "manifest": {
    "name": "synckit",
    "version": "0.7.1",
    "type": "module",
    "description": "Perform async work synchronously in Node.js using `worker_threads`, or `child_process` as fallback, with first-class TypeScript support.",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/rx-ts/synckit.git"
    },
    "author": {
      "name": "JounQin",
      "email": "admin@1stg.me"
    },
    "license": "MIT",
    "engines": {
      "node": ">=12.20"
    },
    "main": "./lib/index.cjs",
    "module": "./lib/index.js",
    "exports": {
      "types": "./lib/index.d.ts",
      "import": "./lib/index.js",
      "require": "./lib/index.cjs"
    },
    "types": "./lib/index.d.ts",
    "files": [
      "lib",
      "!**/*.tsbuildinfo"
    ],
    "keywords": [
      "deasync",
      "make-synchronous",
      "sync",
      "sync-exec",
      "sync-rpc",
      "sync-threads",
      "synchronize",
      "synckit"
    ],
    "dependencies": {
      "@pkgr/utils": "^2.1.0",
      "tslib": "^2.4.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-synckit-0.7.1-9aa3a6c81f534ef940ad22fa9a3bae116850ead8-integrity/node_modules/synckit/package.json",
    "readmeFilename": "README.md",
    "readme": "# synckit\n\n[![GitHub Actions](https://github.com/rx-ts/synckit/workflows/CI/badge.svg)](https://github.com/rx-ts/synckit/actions/workflows/ci.yml)\n[![Codecov](https://img.shields.io/codecov/c/github/rx-ts/synckit.svg)](https://codecov.io/gh/rx-ts/synckit)\n[![Codacy Grade](https://img.shields.io/codacy/grade/3eaf9a96ad12491493b712a6a99028c5)](https://www.codacy.com/gh/rx-ts/synckit)\n[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2Frx-ts%2Fsynckit%2Fmain%2Fpackage.json)](https://github.com/plantain-00/type-coverage)\n[![npm](https://img.shields.io/npm/v/synckit.svg)](https://www.npmjs.com/package/synckit)\n[![GitHub Release](https://img.shields.io/github/release/rx-ts/synckit)](https://github.com/rx-ts/synckit/releases)\n\n[![Conventional Commits](https://img.shields.io/badge/conventional%20commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![Renovate enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![Code Style: Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\nPerform async work synchronously in Node.js using `worker_threads` with first-class TypeScript support.\n\n## TOC <!-- omit in toc -->\n\n- [Usage](#usage)\n  - [Install](#install)\n  - [API](#api)\n  - [Envs](#envs)\n  - [TypeScript](#typescript)\n- [Benchmark](#benchmark)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Usage\n\n### Install\n\n```sh\n# yarn\nyarn add synckit\n\n# npm\nnpm i synckit\n```\n\n### API\n\n```js\n// runner.js\nimport { createSyncFn } from 'synckit'\n\n// the worker path must be absolute\nconst syncFn = createSyncFn(require.resolve('./worker'))\n\n// do whatever you want, you will get the result synchronously!\nconst result = syncFn(...args)\n```\n\n```js\n// worker.js\nimport { runAsWorker } from 'synckit'\n\nrunAsWorker(async (...args) => {\n  // do expensive work\n  return result\n})\n```\n\nYou must make sure, the `result` is serialized by [`Structured Clone Algorithm`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)\n\n### Envs\n\n1. `SYNCKIT_BUFFER_SIZE`: `bufferSize` to create `SharedArrayBuffer` for `worker_threads` (default as `1024`)\n2. `SYNCKIT_TIMEOUT`: `timeout` for performing the async job (no default)\n3. `SYNCKIT_EXEC_ARGV`: List of node CLI options passed to the worker, split with comma `,`. (default as `[]`), see also [`node` docs](https://nodejs.org/api/worker_threads.html)\n\n### TypeScript\n\nIf you want to use `ts-node` for worker file (a `.ts` file), it is supported out of box!\n\nIf you want to use a custom tsconfig as project instead of default `tsconfig.json`, use `TS_NODE_PROJECT` env. Please view [ts-node](https://github.com/TypeStrong/ts-node#tsconfig) for more details.\n\nIf you want to integrate with [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths), please view [ts-node](https://github.com/TypeStrong/ts-node#paths-and-baseurl) for more details.\n\n## Benchmark\n\nIt is about 20x faster than [`sync-threads`](https://github.com/lambci/sync-threads) but 3x slower than native for reading the file content itself 1000 times during runtime, and 18x faster than `sync-threads` but 4x slower than native for total time.\n\nAnd it's almost same as [`deasync`](https://github.com/abbr/deasync) but requires no native bindings or `node-gyp`.\n\nSee [benchmark.cjs](./benchmarks/benchmark.cjs.txt) and [benchmark.esm](./benchmarks/benchmark.esm.txt) for more details.\n\nYou can try it with running `yarn benchmark` by yourself. [Here](./benchmarks/benchmark.js) is the benchmark source code.\n\n## Changelog\n\nDetailed changes for each release are documented in [CHANGELOG.md](./CHANGELOG.md).\n\n## License\n\n[MIT][] Â© [JounQin][]@[1stG.me][]\n\n[1stg.me]: https://www.1stg.me\n[jounqin]: https://GitHub.com/JounQin\n[mit]: http://opensource.org/licenses/MIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 RxTS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/synckit/-/synckit-0.7.1.tgz#9aa3a6c81f534ef940ad22fa9a3bae116850ead8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/synckit/-/synckit-0.7.1.tgz",
    "hash": "9aa3a6c81f534ef940ad22fa9a3bae116850ead8",
    "integrity": "sha512-Cvv0Nzgs4Z0V6761qp4CU2+C15HRmnHaDd+sAtisbOnzIZ5wgl3ne076k28cHo+oY6eN/w0RNzRrf7CJz8dWJg==",
    "registry": "npm",
    "packageName": "synckit",
    "cacheIntegrity": "sha512-Cvv0Nzgs4Z0V6761qp4CU2+C15HRmnHaDd+sAtisbOnzIZ5wgl3ne076k28cHo+oY6eN/w0RNzRrf7CJz8dWJg== sha1-mqOmyB9TTvlArSL6mjuuEWhQ6tg="
  },
  "registry": "npm",
  "hash": "9aa3a6c81f534ef940ad22fa9a3bae116850ead8"
}