/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type PermittedContent = PermittedContentRequire | PermittedContentOptional | PermittedContentOneOrMore | PermittedContentZeroOrMore | PermittedContentChoice | PermittedContentInterleave;
export declare type Target = Node | Node[];
export declare type Node = string | '#text' | ContentModel;
export declare type ContentModel = '#phrasing' | '#flow' | '#interactive' | '#heading' | '#sectioning' | '#metadata' | '#transparent' | '#embedded' | '#palpable' | '#script-supporting' | '#SVGAnimation' | '#SVGBasicShapes' | '#SVGContainer' | '#SVGDescriptive' | '#SVGFilterPrimitive' | '#SVGFont' | '#SVGGradient' | '#SVGGraphics' | '#SVGGraphicsReferencing' | '#SVGLightSource' | '#SVGNeverRendered' | '#SVGNone' | '#SVGPaintServer' | '#SVGRenderable' | '#SVGShape' | '#SVGStructural' | '#SVGStructurallyExternal' | '#SVGTextContent' | '#SVGTextContentChild' | '#SVGOtherXMLNamespace';
export declare type PermittedContentSpec = PermittedContent[];
export interface PermittedStructuresSchema {
    summary?: string;
    tag: string;
    conditional?: {
        condition: {
            hasAttr: string;
        } | {
            parent: string;
            /**
             * Not support yet
             */
            hasNotAttr?: string;
            _TODO_?: string;
            _parent?: string;
        };
        contents: PermittedContentSpec | boolean;
    }[];
    contents: PermittedContentSpec | boolean;
    ancestor?: Node;
}
export interface PermittedContentRequire {
    require: Target;
    ignore?: Target;
    notAllowedDescendants?: Node[];
    max?: number;
    min?: number;
    _TODO_?: string;
}
export interface PermittedContentOptional {
    optional: Target;
    ignore?: Target;
    notAllowedDescendants?: Node[];
    max?: number;
    _TODO_?: string;
}
export interface PermittedContentOneOrMore {
    oneOrMore: Target | PermittedContentSpec;
    ignore?: Target;
    notAllowedDescendants?: Node[];
    max?: number;
    _TODO_?: string;
}
export interface PermittedContentZeroOrMore {
    zeroOrMore: Target | PermittedContentSpec;
    ignore?: Target;
    notAllowedDescendants?: Node[];
    max?: number;
    _TODO_?: string;
}
export interface PermittedContentChoice {
    choice: [PermittedContentSpec, PermittedContentSpec] | [PermittedContentSpec, PermittedContentSpec, PermittedContentSpec] | [PermittedContentSpec, PermittedContentSpec, PermittedContentSpec, PermittedContentSpec] | [
        PermittedContentSpec,
        PermittedContentSpec,
        PermittedContentSpec,
        PermittedContentSpec,
        PermittedContentSpec
    ];
    _TODO_?: string;
}
export interface PermittedContentInterleave {
    interleave: [PermittedContentSpec, PermittedContentSpec, ...PermittedContentSpec[]];
    _TODO_?: string;
}
