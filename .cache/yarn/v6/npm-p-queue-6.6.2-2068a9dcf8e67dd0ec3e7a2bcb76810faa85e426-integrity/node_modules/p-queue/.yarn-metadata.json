{
  "manifest": {
    "name": "p-queue",
    "version": "6.6.2",
    "description": "Promise queue with concurrency control",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/p-queue.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "main": "dist/index.js",
    "engines": {
      "node": ">=8"
    },
    "scripts": {
      "build": "del dist && tsc",
      "test": "xo && npm run build && nyc ava",
      "bench": "ts-node bench.ts",
      "prepublishOnly": "npm run build"
    },
    "files": [
      "dist"
    ],
    "types": "dist/index.d.ts",
    "keywords": [
      "promise",
      "queue",
      "enqueue",
      "limit",
      "limited",
      "concurrency",
      "throttle",
      "throat",
      "rate",
      "batch",
      "ratelimit",
      "priority",
      "priorityqueue",
      "fifo",
      "job",
      "task",
      "async",
      "await",
      "promises",
      "bluebird"
    ],
    "dependencies": {
      "eventemitter3": "^4.0.4",
      "p-timeout": "^3.2.0"
    },
    "devDependencies": {
      "@sindresorhus/tsconfig": "^0.7.0",
      "@types/benchmark": "^1.0.33",
      "@types/node": "^14.6.0",
      "ava": "^2.0.0",
      "benchmark": "^2.1.4",
      "codecov": "^3.7.2",
      "del-cli": "^3.0.1",
      "delay": "^4.4.0",
      "in-range": "^2.0.0",
      "nyc": "^15.1.0",
      "random-int": "^2.0.1",
      "time-span": "^4.0.0",
      "ts-node": "^9.0.0",
      "typescript": "^4.0.2",
      "xo": "^0.33.0"
    },
    "ava": {
      "babel": false,
      "compileEnhancements": false,
      "extensions": [
        "ts"
      ],
      "require": [
        "ts-node/register"
      ],
      "files": [
        "test/**"
      ]
    },
    "xo": {
      "rules": {
        "@typescript-eslint/member-ordering": "off",
        "node/no-unsupported-features/es-syntax": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "import/no-named-default": "off",
        "@typescript-eslint/no-invalid-void-type": "off"
      }
    },
    "nyc": {
      "extension": [
        ".ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-p-queue-6.6.2-2068a9dcf8e67dd0ec3e7a2bcb76810faa85e426-integrity/node_modules/p-queue/package.json",
    "readmeFilename": "readme.md",
    "readme": "# p-queue [![Build Status](https://travis-ci.com/sindresorhus/p-queue.svg?branch=master)](https://travis-ci.com/github/sindresorhus/p-queue) [![codecov](https://codecov.io/gh/sindresorhus/p-queue/branch/master/graph/badge.svg)](https://codecov.io/gh/sindresorhus/p-queue)\n\n> Promise queue with concurrency control\n\nUseful for rate-limiting async (or sync) operations. For example, when interacting with a REST API or when doing CPU/memory intensive tasks.\n\n## Install\n\n```\n$ npm install p-queue\n```\n\n## Usage\n\nHere we run only one promise at the time. For example, set `concurrency` to 4 to run four promises at the same time.\n\n```js\nconst {default: PQueue} = require('p-queue');\nconst got = require('got');\n\nconst queue = new PQueue({concurrency: 1});\n\n(async () => {\n\tawait queue.add(() => got('https://sindresorhus.com'));\n\tconsole.log('Done: sindresorhus.com');\n})();\n\n(async () => {\n\tawait queue.add(() => got('https://avajs.dev'));\n\tconsole.log('Done: avajs.dev');\n})();\n\n(async () => {\n\tconst task = await getUnicornTask();\n\tawait queue.add(task);\n\tconsole.log('Done: Unicorn task');\n})();\n```\n\n## API\n\n### PQueue(options?)\n\nReturns a new `queue` instance, which is an [`EventEmitter3`](https://github.com/primus/eventemitter3) subclass.\n\n#### options\n\nType: `object`\n\n##### concurrency\n\nType: `number`\\\nDefault: `Infinity`\\\nMinimum: `1`\n\nConcurrency limit.\n\n##### timeout\n\nType: `number`\n\nPer-operation timeout in milliseconds. Operations fulfill once `timeout` elapses if they haven't already.\n\n##### throwOnTimeout\n\nType: `boolean`\\\nDefault: `false`\n\nWhether or not a timeout is considered an exception.\n\n##### autoStart\n\nType: `boolean`\\\nDefault: `true`\n\nWhether queue tasks within concurrency limit, are auto-executed as soon as they're added.\n\n##### queueClass\n\nType: `Function`\n\nClass with a `enqueue` and `dequeue` method, and a `size` getter. See the [Custom QueueClass](#custom-queueclass) section.\n\n##### intervalCap\n\nType: `number`\\\nDefault: `Infinity`\\\nMinimum: `1`\n\nThe max number of runs in the given interval of time.\n\n##### interval\n\nType: `number`\\\nDefault: `0`\\\nMinimum: `0`\n\nThe length of time in milliseconds before the interval count resets. Must be finite.\n\n##### carryoverConcurrencyCount\n\nType: `boolean`\\\nDefault: `false`\n\nIf `true`, specifies that any [pending](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) Promises, should be carried over into the next interval and counted against the `intervalCap`. If `false`, any of those pending Promises will not count towards the next `intervalCap`.\n\n### queue\n\n`PQueue` instance.\n\n#### .add(fn, options?)\n\nAdds a sync or async task to the queue. Always returns a promise.\n\n##### fn\n\nType: `Function`\n\nPromise-returning/async function.\n\n#### options\n\nType: `object`\n\n##### priority\n\nType: `number`\\\nDefault: `0`\n\nPriority of operation. Operations with greater priority will be scheduled first.\n\n#### .addAll(fns, options?)\n\nSame as `.add()`, but accepts an array of sync or async functions and returns a promise that resolves when all functions are resolved.\n\n#### .pause()\n\nPut queue execution on hold.\n\n#### .start()\n\nStart (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n\nReturns `this` (the instance).\n\n#### .onEmpty()\n\nReturns a promise that settles when the queue becomes empty.\n\nCan be called multiple times. Useful if you for example add additional items at a later time.\n\n#### .onIdle()\n\nReturns a promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n\nThe difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n\n#### .clear()\n\nClear the queue.\n\n#### .size\n\nSize of the queue.\n\n#### .sizeBy(options)\n\nSize of the queue, filtered by the given options.\n\nFor example, this can be used to find the number of items remaining in the queue with a specific priority level.\n\n```js\nconst queue = new PQueue();\n\nqueue.add(async () => '🦄', {priority: 1});\nqueue.add(async () => '🦄', {priority: 0});\nqueue.add(async () => '🦄', {priority: 1});\n\nconsole.log(queue.sizeBy({priority: 1}));\n//=> 2\n\nconsole.log(queue.sizeBy({priority: 0}));\n//=> 1\n```\n\n#### .pending\n\nNumber of pending promises.\n\n#### [.timeout](#timeout)\n\n#### [.concurrency](#concurrency)\n\n#### .isPaused\n\nWhether the queue is currently paused.\n\n## Events\n\n#### active\n\nEmitted as each item is processed in the queue for the purpose of tracking progress.\n\n```js\nconst delay = require('delay');\nconst {default: PQueue} = require('p-queue');\n\nconst queue = new PQueue({concurrency: 2});\n\nlet count = 0;\nqueue.on('active', () => {\n\tconsole.log(`Working on item #${++count}.  Size: ${queue.size}  Pending: ${queue.pending}`);\n});\n\nqueue.add(() => Promise.resolve());\nqueue.add(() => delay(2000));\nqueue.add(() => Promise.resolve());\nqueue.add(() => Promise.resolve());\nqueue.add(() => delay(500));\n```\n#### idle\n\nEmitted every time the queue becomes empty and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n\n```js\nconst delay = require('delay');\nconst {default: PQueue} = require('p-queue');\n\nconst queue = new PQueue();\n\nqueue.on('idle', () => {\n\tconsole.log(`Queue is idle.  Size: ${queue.size}  Pending: ${queue.pending}`);\n});\n\nconst job1 = queue.add(() => delay(2000));\nconst job2 = queue.add(() => delay(500));\n\nawait job1;\nawait job2;\n// => 'Queue is idle.  Size: 0  Pending: 0'\n\nawait queue.add(() => delay(600));\n// => 'Queue is idle.  Size: 0  Pending: 0'\n```\n\nThe `idle` event is emitted every time the queue reaches an idle state. On the other hand, the promise the `onIdle()` function returns resolves once the queue becomes idle instead of every time the queue is idle.\n\n#### add\n\nEmitted every time the add method is called and the number of pending or queued tasks is increased.\n\n#### next\n\nEmitted every time a task is completed and the number of pending or queued tasks is decreased.\n\n```js\nconst delay = require('delay');\nconst {default: PQueue} = require('p-queue');\n\nconst queue = new PQueue();\n\nqueue.on('add', () => {\n\tconsole.log(`Task is added.  Size: ${queue.size}  Pending: ${queue.pending}`);\n});\nqueue.on('next', () => {\n\tconsole.log(`Task is completed.  Size: ${queue.size}  Pending: ${queue.pending}`);\n});\n\nconst job1 = queue.add(() => delay(2000));\nconst job2 = queue.add(() => delay(500));\n\nawait job1;\nawait job2;\n//=> 'Task is added.  Size: 0  Pending: 1'\n//=> 'Task is added.  Size: 0  Pending: 2'\n\nawait queue.add(() => delay(600));\n//=> 'Task is completed.  Size: 0  Pending: 1'\n//=> 'Task is completed.  Size: 0  Pending: 0'\n```\n\n## Advanced example\n\nA more advanced example to help you understand the flow.\n\n```js\nconst delay = require('delay');\nconst {default: PQueue} = require('p-queue');\n\nconst queue = new PQueue({concurrency: 1});\n\n(async () => {\n\tawait delay(200);\n\n\tconsole.log(`8. Pending promises: ${queue.pending}`);\n\t//=> '8. Pending promises: 0'\n\n\t(async () => {\n\t\tawait queue.add(async () => '🐙');\n\t\tconsole.log('11. Resolved')\n\t})();\n\n\tconsole.log('9. Added 🐙');\n\n\tconsole.log(`10. Pending promises: ${queue.pending}`);\n\t//=> '10. Pending promises: 1'\n\n\tawait queue.onIdle();\n\tconsole.log('12. All work is done');\n})();\n\n(async () => {\n\tawait queue.add(async () => '🦄');\n\tconsole.log('5. Resolved')\n})();\nconsole.log('1. Added 🦄');\n\n(async () => {\n\tawait queue.add(async () => '🐴');\n\tconsole.log('6. Resolved')\n})();\nconsole.log('2. Added 🐴');\n\n(async () => {\n\tawait queue.onEmpty();\n\tconsole.log('7. Queue is empty');\n})();\n\nconsole.log(`3. Queue size: ${queue.size}`);\n//=> '3. Queue size: 1`\n\nconsole.log(`4. Pending promises: ${queue.pending}`);\n//=> '4. Pending promises: 1'\n```\n\n```\n$ node example.js\n1. Added 🦄\n2. Added 🐴\n3. Queue size: 1\n4. Pending promises: 1\n5. Resolved 🦄\n6. Resolved 🐴\n7. Queue is empty\n8. Pending promises: 0\n9. Added 🐙\n10. Pending promises: 1\n11. Resolved 🐙\n12. All work is done\n```\n\n## Custom QueueClass\n\nFor implementing more complex scheduling policies, you can provide a QueueClass in the options:\n\n```js\nclass QueueClass {\n\tconstructor() {\n\t\tthis._queue = [];\n\t}\n\n\tenqueue(run, options) {\n\t\tthis._queue.push(run);\n\t}\n\n\tdequeue() {\n\t\treturn this._queue.shift();\n\t}\n\n\tget size() {\n\t\treturn this._queue.length;\n\t}\n\n\tfilter(options) {\n\t\treturn this._queue;\n\t}\n}\n```\n\n`p-queue` will call corresponding methods to put and get operations from this queue.\n\n## Related\n\n- [p-limit](https://github.com/sindresorhus/p-limit) - Run multiple promise-returning & async functions with limited concurrency\n- [p-throttle](https://github.com/sindresorhus/p-throttle) - Throttle promise-returning & async functions\n- [p-debounce](https://github.com/sindresorhus/p-debounce) - Debounce promise-returning & async functions\n- [p-all](https://github.com/sindresorhus/p-all) - Run promise-returning & async functions concurrently with optional limited concurrency\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-p-queue?utm_source=npm-p-queue&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/p-queue/-/p-queue-6.6.2.tgz#2068a9dcf8e67dd0ec3e7a2bcb76810faa85e426",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/p-queue/-/p-queue-6.6.2.tgz",
    "hash": "2068a9dcf8e67dd0ec3e7a2bcb76810faa85e426",
    "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
    "registry": "npm",
    "packageName": "p-queue",
    "cacheIntegrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ== sha1-IGip3PjmfdDsPnory3aBD6qF5CY="
  },
  "registry": "npm",
  "hash": "2068a9dcf8e67dd0ec3e7a2bcb76810faa85e426"
}