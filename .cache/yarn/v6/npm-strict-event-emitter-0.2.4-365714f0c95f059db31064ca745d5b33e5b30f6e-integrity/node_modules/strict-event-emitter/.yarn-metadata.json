{
  "manifest": {
    "name": "strict-event-emitter",
    "version": "0.2.4",
    "description": "Type-safe \"EventEmitter\" for everyday use",
    "main": "lib/index.js",
    "typings": "lib/index.js",
    "repository": {
      "type": "git",
      "url": "git@github.com:open-draft/strict-event-emitter.git"
    },
    "author": {
      "name": "Artem Zakharchenko",
      "email": "kettanaito@gmail.com"
    },
    "license": "MIT",
    "scripts": {
      "test": "jest",
      "test:ts": "tsc -p test/typings.tsconfig.json",
      "clean": "rimraf ./lib",
      "build": "yarn clean && tsc",
      "prepublishOnly": "yarn test && yarn test:ts && yarn build"
    },
    "files": [
      "README.md",
      "lib"
    ],
    "devDependencies": {
      "@types/jest": "^26.0.19",
      "@types/node": "^14.14.14",
      "jest": "^26.6.3",
      "rimraf": "^3.0.2",
      "ts-jest": "^26.4.4",
      "ts-node": "^9.1.1",
      "typescript": "^4.1.3"
    },
    "dependencies": {
      "events": "^3.3.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-strict-event-emitter-0.2.4-365714f0c95f059db31064ca745d5b33e5b30f6e-integrity/node_modules/strict-event-emitter/package.json",
    "readmeFilename": "README.md",
    "readme": "# Strict Event Emitter\n\n`EventEmitter` mirror that restricts emitting/handling events other than specified in an interface.\n\n## Features\n\n- Restricts emitting of the unknown event types.\n- Infers emitted data types from the listener's call signature.\n\n## Motivation\n\nThe native `EventEmitter` class uses a generic `string` to describe what type of events can be emitted. In most cases you design a strict set of events that you expect your emitter to emit/listen to. This package helps you to type-annotate an emitter instance to produce type violations if an unknown event is emitted/listened to.\n\n```js\nconst emitter = new EventEmitter()\n\nemitter.addListener('ping', (n: number) => {})\n\n// The \"pong\" event is not expected, but will be emitted anyway.\n// The data passed to the event is incompatible with the expected type.\nemitter.emit('pong', 'not a number')\n```\n\n```ts\nimport { StrictEventEmitter } from 'strict-event-emitter'\n\ninterface EventsMap {\n  ping: (n: number) => void\n}\n\nconst emitter = new StrictEventEmitter<EventsMap>()\nemitter.addListener('ping', (n) => {\n  // \"n\" argument type is inferred as \"number'.\n})\n\nemitter.emit('ping', 10) // OK\nemitter.emit('ping', 'wait, not a number') // TypeError\nemitter.emit('unknown', 10) // TypeError\n```\n\nThis library is a superset class of the native `EventEmitter` with only the type definition logic attached. There's no additional functionality present.\n\n## Getting started\n\n### Install\n\n```bash\nnpm install strict-event-emitter\n```\n\n### Use\n\n```ts\nimport { StrictEventEmitter } from 'strict-event-emitter'\n\n// 1. Define an interface that describes your events.\n// Set event names as the keys, and their listner functions as the values.\ninterface EventsMap {\n  connect: (id: string) => void\n  disconnect: (id: string) => void\n}\n\n// 2. Create a strict emitter and pass the previously defined \"EventsMap\"\n// as its first generic argument.\nconst emitter = new StrictEventEmitter<EventsMap>()\n\n// 3. Use the \"emitter\" the same way you'd use the regular \"EventEmitter\" instance.\nemitter.addListner('connect', (id) => {})\nemitter.emit('connect', 'abc-123')\n```\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/strict-event-emitter/-/strict-event-emitter-0.2.4.tgz#365714f0c95f059db31064ca745d5b33e5b30f6e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/strict-event-emitter/-/strict-event-emitter-0.2.4.tgz",
    "hash": "365714f0c95f059db31064ca745d5b33e5b30f6e",
    "integrity": "sha512-xIqTLS5azUH1djSUsLH9DbP6UnM/nI18vu8d43JigCQEoVsnY+mrlE+qv6kYqs6/1OkMnMIiL6ffedQSZStuoQ==",
    "registry": "npm",
    "packageName": "strict-event-emitter",
    "cacheIntegrity": "sha512-xIqTLS5azUH1djSUsLH9DbP6UnM/nI18vu8d43JigCQEoVsnY+mrlE+qv6kYqs6/1OkMnMIiL6ffedQSZStuoQ== sha1-NlcU8MlfBZ2zEGTKdF1bM+WzD24="
  },
  "registry": "npm",
  "hash": "365714f0c95f059db31064ca745d5b33e5b30f6e"
}