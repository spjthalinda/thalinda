{
  "manifest": {
    "name": "propose",
    "version": "0.0.5",
    "description": "Propse a word when the input word is not in the dictionary",
    "main": "propose.js",
    "scripts": {
      "test": "mocha test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/liushuping/propose"
    },
    "keywords": [
      "word",
      "typo",
      "propose",
      "similar",
      "correction",
      "did you mean"
    ],
    "author": {
      "name": "Shuping LIU"
    },
    "license": "MIT",
    "devDependencies": {
      "mocha": "^2.2.5"
    },
    "dependencies": {
      "levenshtein-edit-distance": "^1.0.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-propose-0.0.5-48a065d9ec7d4c8667f4050b15c4a2d85dbca56b-integrity/node_modules/propose/package.json",
    "readmeFilename": "README.md",
    "readme": "# propose\nPropse a word when the input word is not in the dictionary\n\n[![build status](https://travis-ci.org/liushuping/propose.svg?branch=master)](https://travis-ci.org/liushuping/propose.svg?branch=master)\n\nThis module can be used to propse the right command in the scenario when there is a typo or mis-spell in the command line, it looks up the given dictionary and identifies the most similar word. It can also be used in any case that the string is formed by one or a series of known words, for example URL, directory path etc.\n\n## Example\n```javascript\nvar propose = require('propose');\nvar dictionary = ['hello', 'world'];\nvar word = 'hallo';\npropose(word, dictionary); //hello\n```\n\n## Options\n`threshold` [0~1] specifies only the word with similarity equals to or higher than that value will be returned\n```javascript\nvar propose = require('propose');\nvar dictionary = ['aaaaaaaa', 'baabbbb', 'ccccc'];\nvar word = 'ab';\npropose(word, dictionary, {\n    threshold: 0.5\n}); // null as the most similar word does not meet the threshold value\n```\n\n`ignoreCase` [true, false] specifies whether ignore case when comparing two words\n```javascript\nvar propose = require('propose');\nvar dictionary = ['HELLO', 'hallo'];\nvar word = 'hello';\npropose(word, dictionary, {\n    ignoreCase: true\n}); //'HELLO'\n```\n\n## Test\nMake sure `mocha` is installed globally\n```\nnpm install mocha -g\n```\nRun `npm test` to run unit test\n\n## Dependencies\nlevenshtein-edit-distance\n\n## License\nMIT",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Shuping LIU\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/propose/-/propose-0.0.5.tgz#48a065d9ec7d4c8667f4050b15c4a2d85dbca56b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/propose/-/propose-0.0.5.tgz",
    "hash": "48a065d9ec7d4c8667f4050b15c4a2d85dbca56b",
    "integrity": "sha1-SKBl2ex9TIZn9AULFcSi2F28pWs=",
    "registry": "npm",
    "packageName": "propose",
    "cacheIntegrity": "sha512-Jary1vb+ap2DIwOGfyiadcK4x1Iu3pzpkDBy8tljFPmQvnc9ES3m1PMZOMiWOG50cfoAyYNtGeBzrp+Rlh4G9A== sha1-SKBl2ex9TIZn9AULFcSi2F28pWs="
  },
  "registry": "npm",
  "hash": "48a065d9ec7d4c8667f4050b15c4a2d85dbca56b"
}