{"version":3,"file":"index.js","sources":["../src/configs.ts","../../SonarJS/eslint-bridge/src/utils/simplified-regex-character-class.ts","../../SonarJS/eslint-bridge/src/utils/utils-ast.ts","../../SonarJS/eslint-bridge/src/utils/utils-chai.ts","../../SonarJS/eslint-bridge/src/utils/utils-collection.ts","../../SonarJS/eslint-bridge/src/utils/utils-decorator.ts","../../SonarJS/eslint-bridge/src/utils/utils-file.ts","../../SonarJS/eslint-bridge/src/utils/utils-global.ts","../../SonarJS/eslint-bridge/src/utils/utils-location.ts","../../SonarJS/eslint-bridge/src/utils/utils-mocha.ts","../../SonarJS/eslint-bridge/src/utils/utils-module.ts","../../SonarJS/eslint-bridge/src/utils/utils-parent.ts","../../SonarJS/eslint-bridge/src/utils/utils-string-literal.ts","../../SonarJS/eslint-bridge/src/utils/utils-type.ts","../../SonarJS/eslint-bridge/src/utils/utils-regex.ts","../../SonarJS/eslint-bridge/src/utils/utils-visitor.ts","../../SonarJS/eslint-bridge/src/rules/regex-rule-template.ts","../../SonarJS/eslint-bridge/src/rules/anchor-precedence.ts","../../SonarJS/eslint-bridge/src/rules/argument-type.ts","../../SonarJS/eslint-bridge/src/rules/arguments-order.ts","../../SonarJS/eslint-bridge/src/rules/arguments-usage.ts","../../SonarJS/eslint-bridge/src/rules/array-callback-without-return.ts","../../SonarJS/eslint-bridge/src/rules/array-constructor.ts","../../SonarJS/eslint-bridge/src/rules/arrow-function-convention.ts","../../SonarJS/eslint-bridge/src/rules/assertions-in-tests.ts","../../SonarJS/eslint-bridge/src/rules/bitwise-operators.ts","../../SonarJS/eslint-bridge/src/rules/bool-param-default.ts","../../SonarJS/eslint-bridge/src/rules/call-argument-line.ts","../../SonarJS/eslint-bridge/src/rules/utils-express.ts","../../SonarJS/eslint-bridge/src/rules/certificate-transparency.ts","../../SonarJS/eslint-bridge/src/rules/chai-determinate-assertion.ts","../../SonarJS/eslint-bridge/src/rules/class-name.ts","../../SonarJS/eslint-bridge/src/rules/class-prototype.ts","../../SonarJS/eslint-bridge/src/rules/code-eval.ts","../../SonarJS/eslint-bridge/src/rules/comma-or-logical-or-case.ts","../../SonarJS/eslint-bridge/src/rules/comment-regex.ts","../../SonarJS/eslint-bridge/src/rules/concise-regex.ts","../../SonarJS/eslint-bridge/src/rules/conditional-indentation.ts","../../SonarJS/eslint-bridge/src/rules/confidential-information-logging.ts","../../SonarJS/eslint-bridge/src/rules/constructor-for-side-effects.ts","../../SonarJS/eslint-bridge/src/rules/file-uploads.ts","../../SonarJS/eslint-bridge/src/rules/content-length.ts","../../SonarJS/eslint-bridge/src/rules/content-security-policy.ts","../../SonarJS/eslint-bridge/src/rules/cookie-flag-check.ts","../../SonarJS/eslint-bridge/src/rules/cookie-no-httponly.ts","../../SonarJS/eslint-bridge/src/rules/cookies.ts","../../SonarJS/eslint-bridge/src/rules/cors.ts","../../SonarJS/eslint-bridge/src/rules/csrf.ts","../../SonarJS/eslint-bridge/src/rules/cyclomatic-complexity.ts","../../SonarJS/eslint-bridge/src/rules/declarations-in-global-scope.ts","../../SonarJS/eslint-bridge/src/rules/deprecation.ts","../../SonarJS/eslint-bridge/src/rules/destructuring-assignment-syntax.ts","../../SonarJS/eslint-bridge/src/rules/different-types-comparison.ts","../../SonarJS/eslint-bridge/src/rules/disabled-auto-escaping.ts","../../SonarJS/eslint-bridge/src/rules/disabled-resource-integrity.ts","../../SonarJS/eslint-bridge/src/rules/disabled-timeout.ts","../../SonarJS/eslint-bridge/src/rules/dns-prefetching.ts","../../SonarJS/eslint-bridge/src/rules/duplicates-in-character-class.ts","../../SonarJS/eslint-bridge/src/rules/empty-string-repetition.ts","../../SonarJS/eslint-bridge/src/rules/encryption-secure-mode.ts","../../SonarJS/eslint-bridge/src/rules/encryption.ts","../../SonarJS/eslint-bridge/src/utils/utils-string-replace.ts","../../SonarJS/eslint-bridge/src/rules/existing-groups.ts","../../SonarJS/eslint-bridge/src/rules/expression-complexity.ts","../../SonarJS/eslint-bridge/src/rules/file-header.ts","../../SonarJS/eslint-bridge/src/rules/file-name-differ-from-class.ts","../../SonarJS/eslint-bridge/src/rules/file-permissions.ts","../../SonarJS/eslint-bridge/src/rules/todo-tag.ts","../../SonarJS/eslint-bridge/src/rules/fixme-tag.ts","../../SonarJS/eslint-bridge/src/rules/for-in.ts","../../SonarJS/eslint-bridge/src/rules/for-loop-increment-sign.ts","../../SonarJS/eslint-bridge/src/rules/frame-ancestors.ts","../../SonarJS/eslint-bridge/src/rules/function-inside-loop.ts","../../SonarJS/eslint-bridge/src/rules/function-name.ts","../../SonarJS/eslint-bridge/src/rules/function-return-type.ts","../../SonarJS/eslint-bridge/src/rules/future-reserved-words.ts","../../SonarJS/eslint-bridge/src/rules/generator-without-yield.ts","../../SonarJS/eslint-bridge/src/rules/hashing.ts","../../SonarJS/eslint-bridge/src/rules/hidden-files.ts","../../SonarJS/eslint-bridge/src/rules/in-operator-type-error.ts","../../SonarJS/eslint-bridge/src/rules/inconsistent-function-call.ts","../../SonarJS/eslint-bridge/src/rules/index-of-compare-to-positive-number.ts","../../SonarJS/eslint-bridge/src/rules/insecure-cookie.ts","../../SonarJS/eslint-bridge/src/rules/insecure-jwt-token.ts","../../SonarJS/eslint-bridge/src/rules/inverted-assertion-arguments.ts","../../SonarJS/eslint-bridge/src/rules/label-position.ts","../../SonarJS/eslint-bridge/src/rules/max-union-size.ts","../../SonarJS/eslint-bridge/src/rules/misplaced-loop-counter.ts","../../SonarJS/eslint-bridge/src/rules/nested-control-flow.ts","../../SonarJS/eslint-bridge/src/rules/new-operator-misuse.ts","../../SonarJS/eslint-bridge/src/rules/no-accessor-field-mismatch.ts","../../SonarJS/eslint-bridge/src/rules/no-alphabetical-sort.ts","../../SonarJS/eslint-bridge/src/rules/no-angular-bypass-sanitization.ts","../../SonarJS/eslint-bridge/src/rules/no-array-delete.ts","../../SonarJS/eslint-bridge/src/rules/no-associative-arrays.ts","../../SonarJS/eslint-bridge/src/rules/no-built-in-override.ts","../../SonarJS/eslint-bridge/src/rules/no-case-label-in-switch.ts","../../SonarJS/eslint-bridge/src/rules/no-clear-text-protocols.ts","../../SonarJS/eslint-bridge/src/rules/reachingDefinitions.ts","../../SonarJS/eslint-bridge/src/rules/no-code-after-done.ts","../../SonarJS/eslint-bridge/src/programManager.ts","../../SonarJS/eslint-bridge/src/parser.ts","../../SonarJS/eslint-bridge/src/rules/no-commented-code.ts","../../SonarJS/eslint-bridge/src/rules/lva.ts","../../SonarJS/eslint-bridge/src/rules/no-dead-store.ts","../../SonarJS/eslint-bridge/src/rules/no-delete-var.ts","../../SonarJS/eslint-bridge/src/rules/no-duplicate-in-composite.ts","../../SonarJS/eslint-bridge/src/rules/no-empty-after-reluctant.ts","../../SonarJS/eslint-bridge/src/rules/no-empty-alternatives.ts","../../SonarJS/eslint-bridge/src/rules/no-empty-group.ts","../../SonarJS/eslint-bridge/src/rules/no-equals-in-for-termination.ts","../../SonarJS/eslint-bridge/src/rules/no-for-in-iterable.ts","../../SonarJS/eslint-bridge/src/rules/no-function-declaration-in-block.ts","../../SonarJS/eslint-bridge/src/rules/no-global-this.ts","../../SonarJS/eslint-bridge/src/rules/no-globals-shadowing.ts","../../SonarJS/eslint-bridge/src/rules/no-hardcoded-credentials.ts","../../SonarJS/eslint-bridge/src/rules/no-hardcoded-ip.ts","../../SonarJS/eslint-bridge/src/rules/no-implicit-dependencies.ts","../../SonarJS/eslint-bridge/src/rules/no-implicit-global.ts","../../SonarJS/eslint-bridge/src/rules/no-in-misuse.ts","../../SonarJS/eslint-bridge/src/rules/no-incomplete-assertions.ts","../../SonarJS/eslint-bridge/src/rules/no-inconsistent-returns.ts","../../SonarJS/eslint-bridge/src/rules/no-incorrect-string-concat.ts","../../SonarJS/eslint-bridge/src/rules/no-infinite-loop.ts","../../SonarJS/eslint-bridge/src/rules/no-intrusive-permissions.ts","../../SonarJS/eslint-bridge/src/rules/no-invalid-await.ts","../../SonarJS/eslint-bridge/src/rules/no-invariant-returns.ts","../../SonarJS/eslint-bridge/src/rules/no-ip-forward.ts","../../SonarJS/eslint-bridge/src/rules/no-labels.ts","../../SonarJS/eslint-bridge/src/rules/no-mime-sniff.ts","../../SonarJS/eslint-bridge/src/rules/no-misleading-array-reverse.ts","../../SonarJS/eslint-bridge/src/rules/no-mixed-content.ts","../../SonarJS/eslint-bridge/src/rules/no-nested-assignment.ts","../../SonarJS/eslint-bridge/src/rules/no-nested-conditional.ts","../../SonarJS/eslint-bridge/src/rules/no-nested-incdec.ts","../../SonarJS/eslint-bridge/src/rules/no-nested-template-literals.ts","../../SonarJS/eslint-bridge/src/rules/no-new-symbol.ts","../../SonarJS/eslint-bridge/src/rules/no-parameter-reassignment.ts","../../SonarJS/eslint-bridge/src/rules/no-primitive-wrappers.ts","../../SonarJS/eslint-bridge/src/rules/no-redundant-assignments.ts","../../SonarJS/eslint-bridge/src/rules/no-redundant-optional.ts","../../SonarJS/eslint-bridge/src/rules/no-redundant-parentheses.ts","../../SonarJS/eslint-bridge/src/rules/no-reference-error.ts","../../SonarJS/eslint-bridge/src/rules/no-referrer-policy.ts","../../SonarJS/eslint-bridge/src/rules/no-require-or-define.ts","../../SonarJS/eslint-bridge/src/rules/no-return-type-any.ts","../../SonarJS/eslint-bridge/src/rules/no-same-argument-assert.ts","../../SonarJS/eslint-bridge/src/rules/no-tab.ts","../../SonarJS/eslint-bridge/src/rules/no-try-promise.ts","../../SonarJS/eslint-bridge/src/rules/no-undefined-argument.ts","../../SonarJS/eslint-bridge/src/rules/no-undefined-assignment.ts","../../SonarJS/eslint-bridge/src/rules/no-unenclosed-multiline-block.ts","../../SonarJS/eslint-bridge/src/rules/no-unsafe-unzip.ts","../../SonarJS/eslint-bridge/src/rules/no-unthrown-error.ts","../../SonarJS/eslint-bridge/src/rules/no-unused-function-argument.ts","../../SonarJS/eslint-bridge/src/rules/no-useless-increment.ts","../../SonarJS/eslint-bridge/src/rules/no-useless-intersection.ts","../../SonarJS/eslint-bridge/src/rules/no-variable-usage-before-declaration.ts","../../SonarJS/eslint-bridge/src/rules/no-vue-bypass-sanitization.ts","../../SonarJS/eslint-bridge/src/rules/no-weak-cipher.ts","../../SonarJS/eslint-bridge/src/rules/no-weak-keys.ts","../../SonarJS/eslint-bridge/src/rules/no-wildcard-import.ts","../../SonarJS/eslint-bridge/src/rules/non-number-in-arithmetic-expression.ts","../../SonarJS/eslint-bridge/src/rules/null-dereference.ts","../../SonarJS/eslint-bridge/src/rules/operation-returning-nan.ts","../../SonarJS/eslint-bridge/src/rules/os-command.ts","../../SonarJS/eslint-bridge/src/rules/post-message.ts","../../SonarJS/eslint-bridge/src/rules/prefer-default-last.ts","../../SonarJS/eslint-bridge/src/rules/prefer-promise-shorthand.ts","../../SonarJS/eslint-bridge/src/rules/prefer-type-guard.ts","../../SonarJS/eslint-bridge/src/rules/process-argv.ts","../../SonarJS/eslint-bridge/src/rules/production-debug.ts","../../SonarJS/eslint-bridge/src/rules/pseudo-random.ts","../../SonarJS/eslint-bridge/src/rules/publicly-writable-directories.ts","../../SonarJS/eslint-bridge/src/rules/regex-complexity.ts","../../SonarJS/eslint-bridge/src/rules/regular-expr.ts","../../SonarJS/eslint-bridge/src/rules/session-regeneration.ts","../../SonarJS/eslint-bridge/src/rules/shorthand-property-grouping.ts","../../SonarJS/eslint-bridge/src/rules/single-character-alternation.ts","../../SonarJS/eslint-bridge/src/rules/slow-regex.ts","../../SonarJS/eslint-bridge/src/rules/sockets.ts","../../SonarJS/eslint-bridge/src/rules/sonar-block-scoped-var.ts","../../SonarJS/eslint-bridge/src/rules/sonar-max-lines-per-function.ts","../../SonarJS/eslint-bridge/src/rules/sonar-max-lines.ts","../../SonarJS/eslint-bridge/src/rules/sonar-no-control-regex.ts","../../SonarJS/eslint-bridge/src/rules/sonar-no-fallthrough.ts","../../SonarJS/eslint-bridge/src/rules/sonar-no-invalid-regexp.ts","../../SonarJS/eslint-bridge/src/rules/sonar-no-misleading-character-class.ts","../../SonarJS/eslint-bridge/src/rules/sonar-no-regex-spaces.ts","../../SonarJS/eslint-bridge/src/rules/sonar-no-unused-vars.ts","../../SonarJS/eslint-bridge/src/rules/sql-queries.ts","../../SonarJS/eslint-bridge/src/rules/standard-input.ts","../../SonarJS/eslint-bridge/src/rules/stateful-regex.ts","../../SonarJS/eslint-bridge/src/rules/strict-transport-security.ts","../../SonarJS/eslint-bridge/src/rules/strings-comparison.ts","../../SonarJS/eslint-bridge/src/rules/super-invocation.ts","../../SonarJS/eslint-bridge/src/rules/switch-without-default.ts","../../SonarJS/eslint-bridge/src/rules/test-check-exception.ts","../../SonarJS/eslint-bridge/src/rules/too-many-break-or-continue-in-loop.ts","../../SonarJS/eslint-bridge/src/rules/unicode-aware-regex.ts","../../SonarJS/eslint-bridge/src/utils/utils-quick-fix.ts","../../SonarJS/eslint-bridge/src/rules/unused-import.ts","../../SonarJS/eslint-bridge/src/rules/unused-named-groups.ts","../../SonarJS/eslint-bridge/src/rules/unverified-certificate.ts","../../SonarJS/eslint-bridge/src/rules/unverified-hostname.ts","../../SonarJS/eslint-bridge/src/rules/updated-const-var.ts","../../SonarJS/eslint-bridge/src/rules/updated-loop-counter.ts","../../SonarJS/eslint-bridge/src/rules/use-type-alias.ts","../../SonarJS/eslint-bridge/src/rules/useless-string-operation.ts","../../SonarJS/eslint-bridge/src/rules/values-not-convertible-to-numbers.ts","../../SonarJS/eslint-bridge/src/rules/variable-name.ts","../../SonarJS/eslint-bridge/src/rules/void-use.ts","../../SonarJS/eslint-bridge/src/rules/weak-ssl.ts","../../SonarJS/eslint-bridge/src/rules/web-sql-database.ts","../../SonarJS/eslint-bridge/src/rules/x-powered-by.ts","../../SonarJS/eslint-bridge/src/rules/xml-parser-xxe.ts","../../SonarJS/eslint-bridge/src/rules/xpath.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { Linter } from 'eslint'\n\nexport const base: Linter.Config = {\n  plugins: ['sonar'],\n  rules: {\n    'no-labels': 0,\n    'sonar/argument-type': 2,\n    'sonar/arguments-order': 2,\n    'sonar/array-callback-without-return': 2,\n    'sonar/bitwise-operators': 2,\n    'sonar/call-argument-line': 2,\n    'sonar/comma-or-logical-or-case': 2,\n    'sonar/code-eval': 2,\n    'sonar/deprecation': 1,\n    'sonar/different-types-comparison': 2,\n    'sonar/for-in': 2,\n    'sonar/for-loop-increment-sign': 2,\n    'sonar/function-inside-loop': 2,\n    'sonar/future-reserved-words': 1,\n    'sonar/generator-without-yield': 2,\n    'sonar/in-operator-type-error': 2,\n    'sonar/inconsistent-function-call': 2,\n    'sonar/label-position': 2,\n    'sonar/new-operator-misuse': [2, { considerJSDoc: false }],\n    'sonar/no-accessor-field-mismatch': 2,\n    'sonar/no-alphabetical-sort': 2,\n    'sonar/no-array-delete': 2,\n    'sonar/no-associative-arrays': 2,\n    // https://community.sonarsource.com/t/incorrect-no-built-in-override-report-from-imports/40053\n    // 'sonar/no-built-in-override': 2,\n    'sonar/no-case-label-in-switch': 2,\n    'sonar/no-dead-store': 2,\n    'sonar/no-delete-var': 2,\n    'sonar/no-duplicate-in-composite': 2,\n    'sonar/no-equals-in-for-termination': 1,\n    'sonar/no-function-declaration-in-block': 1,\n    'sonar/no-global-this': 1,\n    'sonar/no-globals-shadowing': 1,\n    'sonar/no-implicit-global': 2,\n    'sonar/no-in-misuse': 2,\n    'sonar/no-infinite-loop': 2,\n    'sonar/no-invalid-await': 2,\n    'sonar/no-labels': 1,\n    // 'sonar/no-misleading-array-reverse': 1,\n    'sonar/no-new-symbol': 2,\n    'sonar/no-parameter-reassignment': 1,\n    'sonar/no-primitive-wrappers': 1,\n    'sonar/no-redundant-assignments': 1,\n    'sonar/no-redundant-optional': 1,\n    'sonar/no-try-promise': 2,\n    'sonar/no-undefined-argument': 1,\n    'sonar/no-unthrown-error': 2,\n    'sonar/no-useless-increment': 2,\n    'sonar/operation-returning-nan': 2,\n    'sonar/post-message': 1,\n    'sonar/sonar-block-scoped-var': 1,\n    'sonar/sonar-no-fallthrough': 1,\n    'sonar/sonar-no-unused-vars': 2,\n    'sonar/strings-comparison': 2,\n    'sonar/super-invocation': 2,\n    'sonar/unused-import': 2,\n    'sonar/updated-loop-counter': 1,\n    'sonar/useless-string-operation': 2,\n    'sonar/values-not-convertible-to-numbers': 1,\n  },\n  overrides: [\n    {\n      files: '*.{ts,tsx}',\n      rules: {\n        'sonar/argument-type': 0,\n        'sonar/arguments-order': 0,\n        'sonar/array-callback-without-return': 0,\n        'sonar/call-argument-line': 0,\n        'sonar/different-types-comparison': 0,\n        'sonar/inconsistent-function-call': 0,\n        'sonar/new-operator-misuse': 0,\n        'sonar/no-associative-arrays': 0,\n        'sonar/no-gratuitous-expressions': 0,\n        'sonar/no-implicit-global': 0,\n        'sonar/no-invalid-await': 0,\n        'sonar/no-new-symbol': 0,\n        'sonar/no-primitive-wrappers': 0,\n        'sonar/operation-returning-nan': 0,\n        'sonar/sonar-block-scoped-var': 0,\n        'sonar/sonar-no-fallthrough': 0,\n        'sonar/sonar-no-unused-vars': 0,\n        'sonar/strings-comparison': 0,\n        'sonar/super-invocation': 0,\n        'sonar/unused-import': 0,\n        'sonar/values-not-convertible-to-numbers': 0,\n      },\n    },\n  ],\n}\n\nexport const recommended: Linter.Config = {\n  ...base,\n  rules: {\n    ...base.rules,\n    'sonar/array-constructor': 2,\n    'sonar/class-prototype': 2,\n    'sonar/destructuring-assignment-syntax': 2,\n    'sonar/function-name': [2, { format: '^_?[a-zA-Z][a-zA-Z0-9]*\\\\$?$' }],\n    'sonar/future-reserved-words': 2,\n    'sonar/max-union-size': [1, 5],\n    'sonar/misplaced-loop-counter': 2,\n    'sonar/no-equals-in-for-termination': 2,\n    'sonar/no-for-in-iterable': 2,\n    'sonar/no-labels': 2,\n    // https://jira.sonarsource.com/browse/RSPEC-4043?focusedCommentId=245770&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-245770\n    // 'sonar/no-misleading-array-reverse': 2,\n    'sonar/no-parameter-reassignment': 2,\n    'sonar/no-primitive-wrappers': 2,\n    'sonar/no-redundant-assignments': 2,\n    'sonar/no-redundant-optional': 2,\n    'sonar/no-return-type-any': 1,\n    'sonar/no-undefined-argument': 2,\n    'sonar/no-unused-function-argument': 1,\n    'sonar/no-useless-intersection': 2,\n    'sonar/no-variable-usage-before-declaration': 2,\n    'sonar/non-number-in-arithmetic-expression': 1,\n    'sonar/null-dereference': 2,\n    'sonar/prefer-default-last': 1,\n    'sonar/prefer-promise-shorthand': 2,\n    'sonar/sonar-block-scoped-var': 2,\n    'sonar/sonar-no-fallthrough': 2,\n    'sonar/updated-loop-counter': 2,\n    'sonar/values-not-convertible-to-numbers': 2,\n  },\n  overrides: [\n    ...base.overrides!,\n    {\n      files: '*.{ts,tsx}',\n      rules: {\n        'sonar/array-constructor': 0,\n        // doesn't work with constructor with accessibility\n        'sonar/no-unused-function-argument': 0,\n        'sonar/class-prototype': 0,\n        'sonar/no-for-in-iterable': 0,\n        'sonar/no-variable-usage-before-declaration': 0,\n        'sonar/non-number-in-arithmetic-expression': 0,\n        'sonar/null-dereference': 0,\n        'sonar/sonar-block-scoped-var': 0,\n      },\n    },\n  ],\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport {\n  Character,\n  CharacterClassElement,\n  CharacterClassRange,\n  CharacterSet,\n  Flags,\n  Node,\n} from 'regexpp/ast';\nimport * as regexpp from 'regexpp';\nimport createTree from 'functional-red-black-tree';\n\nconst MAX_CODE_POINT = 0x10ffff;\n\nexport class SimplifiedRegexCharacterClass {\n  /**\n   * This map defines the contents of the character class in the following way:<br>\n   * For any entry {@code codepoint -> tree}, all the codepoints from {@code codepoint} up to (and excluding) the next\n   * entry are in the character class and belong to the given tree.<br>\n   * For any entry {@code codepoint -> null}, all the codepoints from {@code codepoint} up to (and excluding) the next\n   * entry are not part of the character class.<br>\n   * So a codepoint is contained in this class if and only if {@code contents.le(codePoint).value} is\n   * non-null and the tree returned by {@code value} will be the element of the character class which matches that\n   * code point.\n   */\n  private contents = createTree<number, Node | undefined>();\n\n  constructor(private readonly flags: Flags, element?: CharacterClassElement) {\n    if (element) {\n      this.add(element);\n    }\n  }\n\n  public add(element: CharacterClassElement) {\n    new SimplifiedRegexCharacterClass.Builder(this).visit(element);\n  }\n\n  public findIntersections(that: SimplifiedRegexCharacterClass) {\n    const iter = that.contents.begin;\n    const intersections: Node[] = [];\n    if (iter.key === undefined) {\n      return intersections;\n    }\n    while (iter.hasNext) {\n      const { key, value } = iter;\n      iter.next();\n      const to = iter.value ? iter.key : iter.key - 1;\n      if (value && this.hasEntryBetween(key, to)) {\n        intersections.push(value);\n      }\n    }\n    if (iter.value && this.hasEntryBetween(iter.key, MAX_CODE_POINT)) {\n      intersections.push(iter.value);\n    }\n    return intersections;\n  }\n\n  hasEntryBetween(from: number, to: number) {\n    const before = this.contents.le(from);\n    return (before.key !== undefined && before.value) || !this.isRangeEmpty(from + 1, to + 1);\n  }\n\n  isRangeEmpty(from: number, to: number) {\n    let isEmpty = true;\n    this.contents.forEach(() => (isEmpty = false), from, to);\n    return isEmpty;\n  }\n\n  addRange(from: number, to: number, element: CharacterClassElement) {\n    const oldEntry = this.contents.le(to);\n    const oldEnd = oldEntry.key === undefined ? undefined : this.contents.gt(oldEntry.key).key;\n    this.contents = this.put(from, element, this.contents);\n    const iterator = this.contents.begin;\n    while (iterator.key !== undefined) {\n      if (iterator.key > from && iterator.key <= to && iterator.value === undefined) {\n        this.contents = iterator.update(element);\n      }\n      iterator.next();\n    }\n    const next = to + 1;\n    if (next <= MAX_CODE_POINT) {\n      if (oldEntry.key !== undefined && oldEntry.value && (oldEnd === undefined || oldEnd > next)) {\n        this.contents = this.put(next, oldEntry.value, this.contents);\n      } else if (this.contents.find(next).key === undefined) {\n        this.contents = this.put(next, undefined, this.contents);\n      }\n    }\n  }\n\n  put(\n    key: number,\n    value: Node | undefined,\n    tree: createTree.Tree<number, regexpp.AST.Node | undefined>,\n  ) {\n    const entry = tree.find(key);\n    if (entry.valid) {\n      return entry.update(value);\n    }\n    return tree.insert(key, value);\n  }\n\n  private static readonly Builder = class {\n    constructor(private readonly characters: SimplifiedRegexCharacterClass) {}\n\n    public visit(element: CharacterClassElement) {\n      switch (element.type) {\n        case 'Character':\n          this.visitCharacter(element);\n          break;\n        case 'CharacterClassRange':\n          this.visitCharacterClassRange(element);\n          break;\n        case 'CharacterSet':\n          this.visitCharacterSet(element);\n          break;\n      }\n    }\n\n    visitCharacter(character: Character) {\n      this.addRange(character.value, character.value, character);\n    }\n\n    visitCharacterClassRange(characterRange: CharacterClassRange) {\n      this.addRange(characterRange.min.value, characterRange.max.value, characterRange);\n    }\n\n    visitCharacterSet(characterSet: CharacterSet) {\n      switch (characterSet.kind) {\n        case 'digit':\n          if (characterSet.negate) {\n            this.characters.addRange(0x00, this.codePoint('0') - 1, characterSet);\n            if (this.characters.flags.unicode) {\n              this.characters.addRange(this.codePoint('9') + 1, 0xff, characterSet);\n            } else {\n              this.characters.addRange(this.codePoint('9') + 1, MAX_CODE_POINT, characterSet);\n            }\n          } else {\n            this.characters.addRange(this.codePoint('0'), this.codePoint('9'), characterSet);\n          }\n          break;\n        case 'space':\n          if (characterSet.negate) {\n            this.characters.addRange(0x00, this.codePoint('\\t') - 1, characterSet);\n            this.characters.addRange(\n              this.codePoint('\\r') + 1,\n              this.codePoint(' ') - 1,\n              characterSet,\n            );\n            if (this.characters.flags.unicode) {\n              this.characters.addRange(this.codePoint(' ') + 1, 0x84, characterSet);\n              this.characters.addRange(0x86, 0x9f, characterSet);\n              this.characters.addRange(0xa1, 0x167f, characterSet);\n              this.characters.addRange(0x1681, 0x1fff, characterSet);\n              this.characters.addRange(0x200b, 0x2027, characterSet);\n              this.characters.addRange(0x202a, 0x202e, characterSet);\n              this.characters.addRange(0x2030, 0x205e, characterSet);\n              this.characters.addRange(0x2060, 0x2fff, characterSet);\n              this.characters.addRange(0x3001, MAX_CODE_POINT, characterSet);\n            } else {\n              this.characters.addRange(this.codePoint(' ') + 1, MAX_CODE_POINT, characterSet);\n            }\n          } else {\n            this.characters.addRange(this.codePoint('\\t'), this.codePoint('\\r'), characterSet);\n            this.characters.addRange(this.codePoint(' '), this.codePoint(' '), characterSet);\n            if (this.characters.flags.unicode) {\n              this.characters.addRange(0x85, 0x85, characterSet);\n              this.characters.addRange(0xa0, 0xa0, characterSet);\n              this.characters.addRange(0x1680, 0x1680, characterSet);\n              this.characters.addRange(0x2000, 0x200a, characterSet);\n              this.characters.addRange(0x2028, 0x2029, characterSet);\n              this.characters.addRange(0x202f, 0x202f, characterSet);\n              this.characters.addRange(0x205f, 0x205f, characterSet);\n              this.characters.addRange(0x3000, 0x3000, characterSet);\n            }\n          }\n          break;\n        case 'word':\n          if (characterSet.negate) {\n            this.characters.addRange(0x00, this.codePoint('0') - 1, characterSet);\n            this.characters.addRange(\n              this.codePoint('9') + 1,\n              this.codePoint('A') - 1,\n              characterSet,\n            );\n            this.characters.addRange(\n              this.codePoint('Z') + 1,\n              this.codePoint('_') - 1,\n              characterSet,\n            );\n            this.characters.addRange(this.codePoint('`'), this.codePoint('`'), characterSet);\n            if (this.characters.flags.unicode) {\n              this.characters.addRange(\n                this.codePoint('z') + 1,\n                this.codePoint('µ') - 1,\n                characterSet,\n              );\n            } else {\n              this.characters.addRange(this.codePoint('z') + 1, MAX_CODE_POINT, characterSet);\n            }\n          } else {\n            this.characters.addRange(this.codePoint('0'), this.codePoint('9'), characterSet);\n            this.characters.addRange(this.codePoint('A'), this.codePoint('Z'), characterSet);\n            this.characters.addRange(this.codePoint('_'), this.codePoint('_'), characterSet);\n            this.characters.addRange(this.codePoint('a'), this.codePoint('z'), characterSet);\n          }\n          break;\n      }\n    }\n\n    addRange(from: number, to: number, element: CharacterClassElement) {\n      const upperCaseFrom = this.codePoint(String.fromCodePoint(from).toUpperCase());\n      const upperCaseTo = this.codePoint(String.fromCodePoint(to).toUpperCase());\n      const lowerCaseFrom = this.codePoint(String.fromCodePoint(upperCaseFrom).toLowerCase());\n      const lowerCaseTo = this.codePoint(String.fromCodePoint(upperCaseTo).toLowerCase());\n      if (\n        this.characters.flags.ignoreCase &&\n        lowerCaseFrom !== upperCaseFrom &&\n        lowerCaseTo !== upperCaseTo &&\n        ((this.isAscii(from) && this.isAscii(to)) || this.characters.flags.unicode)\n      ) {\n        this.characters.addRange(upperCaseFrom, upperCaseTo, element);\n        this.characters.addRange(lowerCaseFrom, lowerCaseTo, element);\n      } else {\n        this.characters.addRange(from, to, element);\n      }\n    }\n\n    isAscii(c: number) {\n      return c < 128;\n    }\n\n    codePoint(c: string) {\n      const cp = c.codePointAt(0);\n      if (cp === undefined) {\n        throw new Error(`failed to compute code point for: ${c}`);\n      }\n      return cp;\n    }\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { flatMap, toEncodedMessage } from '.';\n\nexport type LoopLike =\n  | estree.WhileStatement\n  | estree.DoWhileStatement\n  | estree.ForStatement\n  | estree.ForOfStatement\n  | estree.ForInStatement;\n\nexport type FunctionNodeType =\n  | estree.FunctionDeclaration\n  | estree.FunctionExpression\n  | estree.ArrowFunctionExpression;\n\nexport const FUNCTION_NODES = [\n  'FunctionDeclaration',\n  'FunctionExpression',\n  'ArrowFunctionExpression',\n];\n\nexport const functionLike = new Set([\n  'FunctionDeclaration',\n  'FunctionExpression',\n  'ArrowFunctionExpression',\n  'MethodDefinition',\n]);\n\nexport function isIdentifier(\n  node: estree.Node | undefined,\n  ...values: string[]\n): node is estree.Identifier {\n  return (\n    node?.type === 'Identifier' &&\n    (values.length === 0 || values.some(value => value === node.name))\n  );\n}\n\nexport function isMemberWithProperty(node: estree.Node, ...values: string[]) {\n  return node.type === 'MemberExpression' && isIdentifier(node.property, ...values);\n}\n\nexport function isMemberExpression(\n  node: estree.Node,\n  objectValue: string,\n  ...propertyValue: string[]\n) {\n  if (node.type === 'MemberExpression') {\n    const { object, property } = node;\n    if (isIdentifier(object, objectValue) && isIdentifier(property, ...propertyValue)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function isBinaryPlus(\n  node: estree.Node,\n): node is estree.BinaryExpression & { operator: '+' } {\n  return node.type === 'BinaryExpression' && node.operator === '+';\n}\n\nexport function isUnaryExpression(node: estree.Node | undefined): node is estree.UnaryExpression {\n  return node !== undefined && node.type === 'UnaryExpression';\n}\n\nexport function isArrayExpression(node: estree.Node | undefined): node is estree.ArrayExpression {\n  return node !== undefined && node.type === 'ArrayExpression';\n}\n\nexport function isRequireModule(node: estree.CallExpression, ...moduleNames: string[]) {\n  if (isIdentifier(node.callee, 'require') && node.arguments.length === 1) {\n    const argument = node.arguments[0];\n    if (argument.type === 'Literal') {\n      return moduleNames.includes(String(argument.value));\n    }\n  }\n\n  return false;\n}\n\nexport function isMethodInvocation(\n  callExpression: estree.CallExpression,\n  objectIdentifierName: string,\n  methodName: string,\n  minArgs: number,\n): boolean {\n  return (\n    callExpression.callee.type === 'MemberExpression' &&\n    isIdentifier(callExpression.callee.object, objectIdentifierName) &&\n    isIdentifier(callExpression.callee.property, methodName) &&\n    callExpression.callee.property.type === 'Identifier' &&\n    callExpression.arguments.length >= minArgs\n  );\n}\n\nexport function isFunctionInvocation(\n  callExpression: estree.CallExpression,\n  functionName: string,\n  minArgs: number,\n): boolean {\n  return (\n    callExpression.callee.type === 'Identifier' &&\n    isIdentifier(callExpression.callee, functionName) &&\n    callExpression.arguments.length >= minArgs\n  );\n}\n\nexport function isFunctionCall(\n  node: estree.Node,\n): node is estree.CallExpression & { callee: estree.Identifier } {\n  return node.type === 'CallExpression' && node.callee.type === 'Identifier';\n}\n\nexport function isMethodCall(callExpr: estree.CallExpression): callExpr is estree.CallExpression & {\n  callee: estree.MemberExpression & { property: estree.Identifier };\n} {\n  return (\n    callExpr.callee.type === 'MemberExpression' &&\n    !callExpr.callee.computed &&\n    callExpr.callee.property.type === 'Identifier'\n  );\n}\n\nexport function isCallingMethod(\n  callExpr: estree.CallExpression,\n  arity: number,\n  ...methodNames: string[]\n): callExpr is estree.CallExpression & {\n  callee: estree.MemberExpression & { property: estree.Identifier };\n} {\n  return (\n    isMethodCall(callExpr) &&\n    callExpr.arguments.length === arity &&\n    methodNames.includes(callExpr.callee.property.name)\n  );\n}\n\nexport function isNamespaceSpecifier(importDeclaration: estree.ImportDeclaration, name: string) {\n  return importDeclaration.specifiers.some(\n    ({ type, local }) => type === 'ImportNamespaceSpecifier' && local.name === name,\n  );\n}\n\nexport function isDefaultSpecifier(importDeclaration: estree.ImportDeclaration, name: string) {\n  return importDeclaration.specifiers.some(\n    ({ type, local }) => type === 'ImportDefaultSpecifier' && local.name === name,\n  );\n}\n\nexport function isModuleExports(node: estree.Node): boolean {\n  return (\n    node.type === 'MemberExpression' &&\n    node.object.type === 'Identifier' &&\n    node.object.name === 'module' &&\n    node.property.type === 'Identifier' &&\n    node.property.name === 'exports'\n  );\n}\n\nexport function isFunctionNode(node: estree.Node): node is FunctionNodeType {\n  return FUNCTION_NODES.includes(node.type);\n}\n\n// we have similar function in eslint-plugin-sonarjs, however this one accepts null\n// eventually we should update eslint-plugin-sonarjs\nexport function isLiteral(n: estree.Node | null): n is estree.Literal {\n  return n != null && n.type === 'Literal';\n}\n\nexport function isNullLiteral(n: estree.Node): boolean {\n  return isLiteral(n) && n.value === null;\n}\n\n/**\n * Detect expression statements like the following:\n *  myArray[1] = 42;\n *  myArray[1] += 42;\n *  myObj.prop1 = 3;\n *  myObj.prop1 += 3;\n */\nexport function isElementWrite(statement: estree.ExpressionStatement, ref: Scope.Reference) {\n  if (statement.expression.type === 'AssignmentExpression') {\n    const assignmentExpression = statement.expression;\n    const lhs = assignmentExpression.left;\n    return isMemberExpressionReference(lhs, ref);\n  }\n  return false;\n}\n\nfunction isMemberExpressionReference(lhs: estree.Node, ref: Scope.Reference): boolean {\n  return (\n    lhs.type === 'MemberExpression' &&\n    (isReferenceTo(ref, lhs.object) || isMemberExpressionReference(lhs.object, ref))\n  );\n}\n\nexport function isReferenceTo(ref: Scope.Reference, node: estree.Node) {\n  return node.type === 'Identifier' && node === ref.identifier;\n}\n\nexport function getUniqueWriteUsage(context: Rule.RuleContext, name: string) {\n  const variable = getVariableFromName(context, name);\n  if (variable) {\n    const writeReferences = variable.references.filter(reference => reference.isWrite());\n    if (writeReferences.length === 1 && writeReferences[0].writeExpr) {\n      return writeReferences[0].writeExpr;\n    }\n  }\n  return undefined;\n}\n\nexport function getUniqueWriteUsageOrNode(\n  context: Rule.RuleContext,\n  node: estree.Node,\n): estree.Node {\n  if (node.type === 'Identifier') {\n    return getUniqueWriteUsage(context, node.name) || node;\n  } else {\n    return node;\n  }\n}\n\nexport function getValueOfExpression<T extends estree.Node['type']>(\n  context: Rule.RuleContext,\n  expr: estree.Node | undefined | null,\n  type: T,\n) {\n  if (!expr) {\n    return undefined;\n  }\n  if (expr.type === 'Identifier') {\n    const usage = getUniqueWriteUsage(context, expr.name);\n    if (usage && isNodeType(usage, type)) {\n      return usage;\n    }\n  }\n\n  if (isNodeType(expr, type)) {\n    return expr;\n  }\n  return undefined;\n}\n\n// see https://stackoverflow.com/questions/64262105/narrowing-return-value-of-function-based-on-argument\nfunction isNodeType<T extends estree.Node['type']>(\n  node: estree.Node,\n  type: T,\n): node is Extract<estree.Node, { type: T }> {\n  return node.type === type;\n}\n\n/**\n * for `x = 42` or `let x = 42` when visiting '42' returns 'x' variable\n */\nexport function getLhsVariable(context: Rule.RuleContext): Scope.Variable | undefined {\n  const parent = context.getAncestors()[context.getAncestors().length - 1];\n  let formIdentifier: estree.Identifier | undefined;\n  if (parent.type === 'VariableDeclarator' && parent.id.type === 'Identifier') {\n    formIdentifier = parent.id;\n  } else if (parent.type === 'AssignmentExpression' && parent.left.type === 'Identifier') {\n    formIdentifier = parent.left;\n  }\n  if (formIdentifier) {\n    return getVariableFromName(context, formIdentifier.name);\n  }\n\n  return undefined;\n}\n\nexport function getVariableFromName(context: Rule.RuleContext, name: string) {\n  let scope: Scope.Scope | null = context.getScope();\n  let variable;\n  while (variable == null && scope != null) {\n    variable = scope.variables.find(value => value.name === name);\n    scope = scope.upper;\n  }\n  return variable;\n}\n\n/**\n * Takes array of arguments. Keeps following variable definitions\n * and unpacking arrays as long as possible. Returns flattened\n * array with all collected nodes.\n *\n * A usage example should clarify why this might be useful.\n * According to ExpressJs `app.use` spec, the arguments can be:\n *\n * - A middleware function.\n * - A series of middleware functions (separated by commas).\n * - An array of middleware functions.\n * - A combination of all of the above.\n *\n * This means that methods like `app.use` accept variable arguments,\n * but also arrays, or combinations thereof. This methods helps\n * to flatten out such complicated composed argument lists.\n */\nexport function flattenArgs(context: Rule.RuleContext, args: estree.Node[]): estree.Node[] {\n  // Invokes `getUniqueWriteUsageOrNode` at most once, from then on\n  // only flattens arrays.\n  function recHelper(nodePossiblyIdentifier: estree.Node): estree.Node[] {\n    const n = getUniqueWriteUsageOrNode(context, nodePossiblyIdentifier);\n    if (n.type === 'ArrayExpression') {\n      return flatMap(n.elements as estree.Node[], recHelper);\n    } else {\n      return [n];\n    }\n  }\n\n  return flatMap(args, recHelper);\n}\n\nexport function resolveIdentifiers(\n  node: TSESTree.Node,\n  acceptShorthand = false,\n): TSESTree.Identifier[] {\n  const identifiers: TSESTree.Identifier[] = [];\n  resolveIdentifiersAcc(node, identifiers, acceptShorthand);\n  return identifiers;\n}\n\nfunction resolveIdentifiersAcc(\n  node: TSESTree.Node,\n  identifiers: TSESTree.Identifier[],\n  acceptShorthand: boolean,\n): void {\n  if (!node) {\n    return;\n  }\n  switch (node.type) {\n    case 'Identifier':\n      identifiers.push(node);\n      break;\n    case 'ObjectPattern':\n      node.properties.forEach(prop => resolveIdentifiersAcc(prop, identifiers, acceptShorthand));\n      break;\n    case 'ArrayPattern':\n      node.elements.forEach(\n        elem => elem && resolveIdentifiersAcc(elem, identifiers, acceptShorthand),\n      );\n      break;\n    case 'Property':\n      if (acceptShorthand || !node.shorthand) {\n        resolveIdentifiersAcc(node.value, identifiers, acceptShorthand);\n      }\n      break;\n    case 'RestElement':\n      resolveIdentifiersAcc(node.argument, identifiers, acceptShorthand);\n      break;\n    case 'AssignmentPattern':\n      resolveIdentifiersAcc(node.left, identifiers, acceptShorthand);\n      break;\n    case 'TSParameterProperty':\n      resolveIdentifiersAcc(node.parameter, identifiers, acceptShorthand);\n      break;\n  }\n}\n\nexport function getObjectExpressionProperty(\n  node: estree.Node | undefined | null,\n  propertyKey: string,\n): estree.Property | undefined {\n  if (node?.type === 'ObjectExpression') {\n    const properties = node.properties.filter(\n      p =>\n        p.type === 'Property' &&\n        (isIdentifier(p.key, propertyKey) || (isLiteral(p.key) && p.key.value === propertyKey)),\n    ) as estree.Property[];\n    // if property is duplicated, we return the last defined\n    return properties[properties.length - 1];\n  }\n  return undefined;\n}\n\nexport function getPropertyWithValue(\n  context: Rule.RuleContext,\n  objectExpression: estree.ObjectExpression,\n  propertyName: string,\n  propertyValue: estree.Literal['value'],\n): estree.Property | undefined {\n  const maybeProperty = getObjectExpressionProperty(objectExpression, propertyName);\n  if (maybeProperty) {\n    const maybePropertyValue = getValueOfExpression(context, maybeProperty.value, 'Literal');\n    if (maybePropertyValue?.value === propertyValue) {\n      return maybeProperty;\n    }\n  }\n  return undefined;\n}\n\nexport function resolveFromFunctionReference(\n  context: Rule.RuleContext,\n  functionIdentifier: estree.Identifier,\n) {\n  const { scopeManager } = context.getSourceCode();\n  for (const scope of scopeManager.scopes) {\n    const reference = scope.references.find(r => r.identifier === functionIdentifier);\n    if (\n      reference?.resolved &&\n      reference.resolved.defs.length === 1 &&\n      reference.resolved.defs[0].type === 'FunctionName'\n    ) {\n      return reference.resolved.defs[0].node;\n    }\n  }\n  return null;\n}\n\nexport function resolveFunction(\n  context: Rule.RuleContext,\n  node: estree.Node,\n): estree.Function | null {\n  if (isFunctionNode(node)) {\n    return node;\n  } else if (node.type === 'Identifier') {\n    return resolveFromFunctionReference(context, node);\n  } else {\n    return null;\n  }\n}\n\nexport function checkSensitiveCall(\n  context: Rule.RuleContext,\n  callExpression: estree.CallExpression,\n  sensitiveArgumentIndex: number,\n  sensitiveProperty: string,\n  sensitivePropertyValue: boolean,\n  message: string,\n) {\n  if (callExpression.arguments.length < sensitiveArgumentIndex + 1) {\n    return;\n  }\n  const sensitiveArgument = callExpression.arguments[sensitiveArgumentIndex];\n  const options = getValueOfExpression(context, sensitiveArgument, 'ObjectExpression');\n  if (!options) {\n    return;\n  }\n  const unsafeProperty = getPropertyWithValue(\n    context,\n    options,\n    sensitiveProperty,\n    sensitivePropertyValue,\n  );\n  if (unsafeProperty) {\n    context.report({\n      node: callExpression.callee,\n      message: toEncodedMessage(message, [unsafeProperty]),\n    });\n  }\n}\n\nexport function isStringLiteral(node: estree.Node): node is estree.Literal & { value: string } {\n  return node && node.type === 'Literal' && typeof node.value === 'string';\n}\n\nexport function isNumberLiteral(node: estree.Node): node is estree.Literal & { value: number } {\n  return node && node.type === 'Literal' && typeof node.value === 'number';\n}\n\nexport function isRegexLiteral(node: estree.Node): node is estree.RegExpLiteral {\n  return node.type === 'Literal' && node.value instanceof RegExp;\n}\n\nexport function isDotNotation(\n  node: estree.Node,\n): node is estree.MemberExpression & { property: estree.Identifier } {\n  return node.type === 'MemberExpression' && !node.computed && node.property.type === 'Identifier';\n}\n\nexport function isObjectDestructuring(\n  node: estree.Node,\n): node is\n  | (estree.VariableDeclarator & { id: estree.ObjectPattern })\n  | (estree.AssignmentExpression & { left: estree.ObjectPattern }) {\n  return (\n    (node.type === 'VariableDeclarator' && node.id.type === 'ObjectPattern') ||\n    (node.type === 'AssignmentExpression' && node.left.type === 'ObjectPattern')\n  );\n}\n\nexport function isStaticTemplateLiteral(node: estree.Node): node is estree.TemplateLiteral {\n  return (\n    node.type === 'TemplateLiteral' && node.expressions.length === 0 && node.quasis.length === 1\n  );\n}\n\nexport function isThisExpression(node: estree.Node): node is estree.ThisExpression {\n  return node.type === 'ThisExpression';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getImportDeclarations,\n  getRequireCalls,\n  isFunctionInvocation,\n  isIdentifier,\n  isMethodCall,\n  isMethodInvocation,\n} from '.';\n\nexport namespace Chai {\n  export function isImported(context: Rule.RuleContext): boolean {\n    return (\n      getRequireCalls(context).some(\n        r => r.arguments[0].type === 'Literal' && r.arguments[0].value === 'chai',\n      ) || getImportDeclarations(context).some(i => i.source.value === 'chai')\n    );\n  }\n\n  export function isAssertion(node: estree.Node): boolean {\n    return isAssertUsage(node) || isExpectUsage(node) || isShouldUsage(node);\n  }\n\n  function isAssertUsage(node: estree.Node) {\n    // assert(), assert.<expr>(), chai.assert(), chai.assert.<expr>()\n    return (\n      node.type === 'CallExpression' &&\n      (isMethodInvocation(node, 'chai', 'assert', 1) ||\n        isFunctionInvocation(node, 'assert', 1) ||\n        (isMethodCall(node) && isIdentifier(node.callee.object, 'assert')) ||\n        (isMethodCall(node) &&\n          node.callee.object.type === 'MemberExpression' &&\n          isIdentifier(node.callee.object.object, 'chai') &&\n          isIdentifier(node.callee.object.property, 'assert')))\n    );\n  }\n\n  function isExpectUsage(node: estree.Node) {\n    // expect(), chai.expect()\n    return (\n      node.type === 'CallExpression' &&\n      (isMethodInvocation(node, 'chai', 'expect', 1) || isFunctionInvocation(node, 'expect', 1))\n    );\n  }\n\n  function isShouldUsage(node: estree.Node) {\n    // <expr>.should.<expr>\n    return node.type === 'MemberExpression' && isIdentifier(node.property, 'should');\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const collectionConstructor = ['Array', 'Map', 'Set', 'WeakSet', 'WeakMap'];\n\nexport const writingMethods = [\n  // array methods\n  'copyWithin',\n  'fill',\n  'pop',\n  'push',\n  'reverse',\n  'set',\n  'shift',\n  'sort',\n  'splice',\n  'unshift',\n  // map, set methods\n  'add',\n  'clear',\n  'delete',\n];\n\nexport const sortLike = ['sort', '\"sort\"', \"'sort'\"];\n\nexport function flatMap<A, B>(xs: A[], f: (e: A) => B[]): B[] {\n  const acc: B[] = [];\n  for (const x of xs) {\n    acc.push(...f(x));\n  }\n  return acc;\n}\n\nexport function last<T>(arr: Array<T>) {\n  return arr[arr.length - 1];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nconst NUM_ARGS_NODE_MESSAGE = 2;\n\n/**\n * Modifies the behavior of `context.report(descriptor)` for a given rule.\n *\n * Useful for performing additional checks before reporting an issue.\n *\n * @param rule the original rule\n * @param onReport replacement for `context.report(descr)`\n *                 invocations used inside of the rule\n */\nexport function interceptReport(\n  rule: Rule.RuleModule,\n  onReport: (context: Rule.RuleContext, reportDescriptor: Rule.ReportDescriptor) => void,\n): Rule.RuleModule {\n  return {\n    // meta should be defined only when it's defined on original rule, otherwise RuleTester will fail\n    ...(!!rule.meta && { meta: rule.meta }),\n    create(originalContext: Rule.RuleContext) {\n      const interceptingContext: Rule.RuleContext = {\n        id: originalContext.id,\n        options: originalContext.options,\n        settings: originalContext.settings,\n        parserPath: originalContext.parserPath,\n        parserOptions: originalContext.parserOptions,\n        parserServices: originalContext.parserServices,\n\n        getCwd(): string {\n          return originalContext.getCwd();\n        },\n\n        getPhysicalFilename(): string {\n          return originalContext.getPhysicalFilename();\n        },\n\n        getAncestors() {\n          return originalContext.getAncestors();\n        },\n\n        getDeclaredVariables(node: estree.Node) {\n          return originalContext.getDeclaredVariables(node);\n        },\n\n        getFilename() {\n          return originalContext.getFilename();\n        },\n\n        getScope() {\n          return originalContext.getScope();\n        },\n\n        getSourceCode() {\n          return originalContext.getSourceCode();\n        },\n\n        markVariableAsUsed(name: string) {\n          return originalContext.markVariableAsUsed(name);\n        },\n\n        report(...args: any[]): void {\n          let descr: Rule.ReportDescriptor | undefined = undefined;\n          if (args.length === 1) {\n            descr = args[0] as Rule.ReportDescriptor;\n          } else if (args.length === NUM_ARGS_NODE_MESSAGE && typeof args[1] === 'string') {\n            // not declared in the `.d.ts`, but used in practice by rules written in JS\n            descr = {\n              node: args[0] as estree.Node,\n              message: args[1],\n            };\n          }\n          if (descr) {\n            onReport(originalContext, descr);\n          }\n        },\n      };\n      return rule.create(interceptingContext);\n    },\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\n\nexport enum FileType {\n  MAIN = 'MAIN',\n  TEST = 'TEST',\n}\n\nexport function isMainCode(context: Rule.RuleContext) {\n  return !isTestCode(context);\n}\n\nexport function isTestCode(context: Rule.RuleContext) {\n  return getFileType(context) === FileType.TEST;\n}\n\nfunction getFileType(context: Rule.RuleContext) {\n  return context.settings['fileType'];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// copied from javascript-frontend/src/main/resources/org/sonar/javascript/tree/symbols/globals.json ,\n// which should be deleted once the frontend migration is over\nexport const globalsByLibraries = {\n  builtin: [\n    'Array',\n    'ArrayBuffer',\n    'Boolean',\n    'DataView',\n    'Date',\n    'Error',\n    'EvalError',\n    'Float32Array',\n    'Float64Array',\n    'Function',\n    'Infinity',\n    'Int16Array',\n    'Int32Array',\n    'Int8Array',\n    'JSON',\n    'Map',\n    'Math',\n    'NaN',\n    'Number',\n    'Object',\n    'Promise',\n    'Proxy',\n    'RangeError',\n    'ReferenceError',\n    'Reflect',\n    'RegExp',\n    'Set',\n    'String',\n    'Symbol',\n    'SyntaxError',\n    'System',\n    'TypeError',\n    'URIError',\n    'Uint16Array',\n    'Uint32Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'WeakMap',\n    'WeakSet',\n    'constructor',\n    'decodeURI',\n    'decodeURIComponent',\n    'encodeURI',\n    'encodeURIComponent',\n    'escape',\n    'eval',\n    'hasOwnProperty',\n    'isFinite',\n    'isNaN',\n    'isPrototypeOf',\n    'parseFloat',\n    'parseInt',\n    'propertyIsEnumerable',\n    'toLocaleString',\n    'toString',\n    'unescape',\n    'valueOf',\n  ],\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Window\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\n  browser: [\n    'addEventListener',\n    'alert',\n    'AnalyserNode',\n    'Animation',\n    'AnimationEffectReadOnly',\n    'AnimationEffectTiming',\n    'AnimationEffectTimingReadOnly',\n    'AnimationEvent',\n    'AnimationPlaybackEvent',\n    'AnimationTimeline',\n    'applicationCache',\n    'ApplicationCache',\n    'ApplicationCacheErrorEvent',\n    'atob',\n    'Attr',\n    'Audio',\n    'AudioBuffer',\n    'AudioBufferSourceNode',\n    'AudioContext',\n    'AudioDestinationNode',\n    'AudioListener',\n    'AudioNode',\n    'AudioParam',\n    'AudioProcessingEvent',\n    'AutocompleteErrorEvent',\n    'BarProp',\n    'BatteryManager',\n    'BeforeUnloadEvent',\n    'BiquadFilterNode',\n    'Blob',\n    'blur',\n    'btoa',\n    'Cache',\n    'caches',\n    'CacheStorage',\n    'cancelAnimationFrame',\n    'CanvasGradient',\n    'CanvasPattern',\n    'CanvasRenderingContext2D',\n    'CDATASection',\n    'ChannelMergerNode',\n    'ChannelSplitterNode',\n    'CharacterData',\n    'clearInterval',\n    'clearTimeout',\n    'clientInformation',\n    'ClientRect',\n    'ClientRectList',\n    'ClipboardEvent',\n    'close',\n    'closed',\n    'CloseEvent',\n    'Comment',\n    'CompositionEvent',\n    'confirm',\n    'console',\n    'ConvolverNode',\n    'Credential',\n    'CredentialsContainer',\n    'crypto',\n    'Crypto',\n    'CryptoKey',\n    'CSS',\n    'CSSAnimation',\n    'CSSFontFaceRule',\n    'CSSImportRule',\n    'CSSKeyframeRule',\n    'CSSKeyframesRule',\n    'CSSMediaRule',\n    'CSSPageRule',\n    'CSSRule',\n    'CSSRuleList',\n    'CSSStyleDeclaration',\n    'CSSStyleRule',\n    'CSSStyleSheet',\n    'CSSSupportsRule',\n    'CSSTransition',\n    'CSSUnknownRule',\n    'CSSViewportRule',\n    'customElements',\n    'CustomEvent',\n    'DataTransfer',\n    'DataTransferItem',\n    'DataTransferItemList',\n    'Debug',\n    'defaultStatus',\n    'defaultstatus',\n    'DelayNode',\n    'DeviceMotionEvent',\n    'DeviceOrientationEvent',\n    'devicePixelRatio',\n    'dispatchEvent',\n    'document',\n    'Document',\n    'DocumentFragment',\n    'DocumentTimeline',\n    'DocumentType',\n    'DOMError',\n    'DOMException',\n    'DOMImplementation',\n    'DOMParser',\n    'DOMSettableTokenList',\n    'DOMStringList',\n    'DOMStringMap',\n    'DOMTokenList',\n    'DragEvent',\n    'DynamicsCompressorNode',\n    'Element',\n    'ElementTimeControl',\n    'ErrorEvent',\n    'event',\n    'Event',\n    'EventSource',\n    'EventTarget',\n    'external',\n    'FederatedCredential',\n    'fetch',\n    'File',\n    'FileError',\n    'FileList',\n    'FileReader',\n    'find',\n    'focus',\n    'FocusEvent',\n    'FontFace',\n    'FormData',\n    'frameElement',\n    'frames',\n    'GainNode',\n    'Gamepad',\n    'GamepadButton',\n    'GamepadEvent',\n    'getComputedStyle',\n    'getSelection',\n    'HashChangeEvent',\n    'Headers',\n    'history',\n    'History',\n    'HTMLAllCollection',\n    'HTMLAnchorElement',\n    'HTMLAppletElement',\n    'HTMLAreaElement',\n    'HTMLAudioElement',\n    'HTMLBaseElement',\n    'HTMLBlockquoteElement',\n    'HTMLBodyElement',\n    'HTMLBRElement',\n    'HTMLButtonElement',\n    'HTMLCanvasElement',\n    'HTMLCollection',\n    'HTMLContentElement',\n    'HTMLDataListElement',\n    'HTMLDetailsElement',\n    'HTMLDialogElement',\n    'HTMLDirectoryElement',\n    'HTMLDivElement',\n    'HTMLDListElement',\n    'HTMLDocument',\n    'HTMLElement',\n    'HTMLEmbedElement',\n    'HTMLFieldSetElement',\n    'HTMLFontElement',\n    'HTMLFormControlsCollection',\n    'HTMLFormElement',\n    'HTMLFrameElement',\n    'HTMLFrameSetElement',\n    'HTMLHeadElement',\n    'HTMLHeadingElement',\n    'HTMLHRElement',\n    'HTMLHtmlElement',\n    'HTMLIFrameElement',\n    'HTMLImageElement',\n    'HTMLInputElement',\n    'HTMLIsIndexElement',\n    'HTMLKeygenElement',\n    'HTMLLabelElement',\n    'HTMLLayerElement',\n    'HTMLLegendElement',\n    'HTMLLIElement',\n    'HTMLLinkElement',\n    'HTMLMapElement',\n    'HTMLMarqueeElement',\n    'HTMLMediaElement',\n    'HTMLMenuElement',\n    'HTMLMetaElement',\n    'HTMLMeterElement',\n    'HTMLModElement',\n    'HTMLObjectElement',\n    'HTMLOListElement',\n    'HTMLOptGroupElement',\n    'HTMLOptionElement',\n    'HTMLOptionsCollection',\n    'HTMLOutputElement',\n    'HTMLParagraphElement',\n    'HTMLParamElement',\n    'HTMLPictureElement',\n    'HTMLPreElement',\n    'HTMLProgressElement',\n    'HTMLQuoteElement',\n    'HTMLScriptElement',\n    'HTMLSelectElement',\n    'HTMLShadowElement',\n    'HTMLSourceElement',\n    'HTMLSpanElement',\n    'HTMLStyleElement',\n    'HTMLTableCaptionElement',\n    'HTMLTableCellElement',\n    'HTMLTableColElement',\n    'HTMLTableElement',\n    'HTMLTableRowElement',\n    'HTMLTableSectionElement',\n    'HTMLTemplateElement',\n    'HTMLTextAreaElement',\n    'HTMLTitleElement',\n    'HTMLTrackElement',\n    'HTMLUListElement',\n    'HTMLUnknownElement',\n    'HTMLVideoElement',\n    'IDBCursor',\n    'IDBCursorWithValue',\n    'IDBDatabase',\n    'IDBEnvironment',\n    'IDBFactory',\n    'IDBIndex',\n    'IDBKeyRange',\n    'IDBObjectStore',\n    'IDBOpenDBRequest',\n    'IDBRequest',\n    'IDBTransaction',\n    'IDBVersionChangeEvent',\n    'Image',\n    'ImageBitmap',\n    'ImageData',\n    'indexedDB',\n    'innerHeight',\n    'innerWidth',\n    'InputEvent',\n    'InputMethodContext',\n    'IntersectionObserver',\n    'IntersectionObserverEntry',\n    'Intl',\n    'KeyboardEvent',\n    'KeyframeEffect',\n    'KeyframeEffectReadOnly',\n    'length',\n    'localStorage',\n    'location',\n    'Location',\n    'locationbar',\n    'matchMedia',\n    'MediaElementAudioSourceNode',\n    'MediaEncryptedEvent',\n    'MediaError',\n    'MediaKeyError',\n    'MediaKeyEvent',\n    'MediaKeyMessageEvent',\n    'MediaKeys',\n    'MediaKeySession',\n    'MediaKeyStatusMap',\n    'MediaKeySystemAccess',\n    'MediaList',\n    'MediaQueryList',\n    'MediaQueryListEvent',\n    'MediaSource',\n    'MediaStream',\n    'MediaStreamAudioDestinationNode',\n    'MediaStreamAudioSourceNode',\n    'MediaStreamEvent',\n    'MediaStreamTrack',\n    'menubar',\n    'MessageChannel',\n    'MessageEvent',\n    'MessagePort',\n    'MIDIAccess',\n    'MIDIConnectionEvent',\n    'MIDIInput',\n    'MIDIInputMap',\n    'MIDIMessageEvent',\n    'MIDIOutput',\n    'MIDIOutputMap',\n    'MIDIPort',\n    'MimeType',\n    'MimeTypeArray',\n    'MouseEvent',\n    'moveBy',\n    'moveTo',\n    'MutationEvent',\n    'MutationObserver',\n    'MutationRecord',\n    'name',\n    'NamedNodeMap',\n    'navigator',\n    'Navigator',\n    'Node',\n    'NodeFilter',\n    'NodeIterator',\n    'NodeList',\n    'Notification',\n    'OfflineAudioCompletionEvent',\n    'OfflineAudioContext',\n    'offscreenBuffering',\n    'onbeforeunload',\n    'onblur',\n    'onerror',\n    'onfocus',\n    'onload',\n    'onresize',\n    'onunload',\n    'open',\n    'openDatabase',\n    'opener',\n    'opera',\n    'Option',\n    'OscillatorNode',\n    'outerHeight',\n    'outerWidth',\n    'PageTransitionEvent',\n    'pageXOffset',\n    'pageYOffset',\n    'parent',\n    'PasswordCredential',\n    'Path2D',\n    'performance',\n    'Performance',\n    'PerformanceEntry',\n    'PerformanceMark',\n    'PerformanceMeasure',\n    'PerformanceNavigation',\n    'PerformanceResourceTiming',\n    'PerformanceTiming',\n    'PeriodicWave',\n    'Permissions',\n    'PermissionStatus',\n    'personalbar',\n    'Plugin',\n    'PluginArray',\n    'PopStateEvent',\n    'postMessage',\n    'print',\n    'ProcessingInstruction',\n    'ProgressEvent',\n    'PromiseRejectionEvent',\n    'prompt',\n    'PushManager',\n    'PushSubscription',\n    'RadioNodeList',\n    'Range',\n    'ReadableByteStream',\n    'ReadableStream',\n    'removeEventListener',\n    'Request',\n    'requestAnimationFrame',\n    'requestIdleCallback',\n    'resizeBy',\n    'resizeTo',\n    'Response',\n    'RTCIceCandidate',\n    'RTCSessionDescription',\n    'RTCPeerConnection',\n    'screen',\n    'Screen',\n    'screenLeft',\n    'ScreenOrientation',\n    'screenTop',\n    'screenX',\n    'screenY',\n    'ScriptProcessorNode',\n    'scroll',\n    'scrollbars',\n    'scrollBy',\n    'scrollTo',\n    'scrollX',\n    'scrollY',\n    'SecurityPolicyViolationEvent',\n    'Selection',\n    'self',\n    'ServiceWorker',\n    'ServiceWorkerContainer',\n    'ServiceWorkerRegistration',\n    'sessionStorage',\n    'setInterval',\n    'setTimeout',\n    'ShadowRoot',\n    'SharedKeyframeList',\n    'SharedWorker',\n    'showModalDialog',\n    'SiteBoundCredential',\n    'speechSynthesis',\n    'SpeechSynthesisEvent',\n    'SpeechSynthesisUtterance',\n    'status',\n    'statusbar',\n    'stop',\n    'Storage',\n    'StorageEvent',\n    'styleMedia',\n    'StyleSheet',\n    'StyleSheetList',\n    'SubtleCrypto',\n    'SVGAElement',\n    'SVGAltGlyphDefElement',\n    'SVGAltGlyphElement',\n    'SVGAltGlyphItemElement',\n    'SVGAngle',\n    'SVGAnimateColorElement',\n    'SVGAnimatedAngle',\n    'SVGAnimatedBoolean',\n    'SVGAnimatedEnumeration',\n    'SVGAnimatedInteger',\n    'SVGAnimatedLength',\n    'SVGAnimatedLengthList',\n    'SVGAnimatedNumber',\n    'SVGAnimatedNumberList',\n    'SVGAnimatedPathData',\n    'SVGAnimatedPoints',\n    'SVGAnimatedPreserveAspectRatio',\n    'SVGAnimatedRect',\n    'SVGAnimatedString',\n    'SVGAnimatedTransformList',\n    'SVGAnimateElement',\n    'SVGAnimateMotionElement',\n    'SVGAnimateTransformElement',\n    'SVGAnimationElement',\n    'SVGCircleElement',\n    'SVGClipPathElement',\n    'SVGColor',\n    'SVGColorProfileElement',\n    'SVGColorProfileRule',\n    'SVGComponentTransferFunctionElement',\n    'SVGCSSRule',\n    'SVGCursorElement',\n    'SVGDefsElement',\n    'SVGDescElement',\n    'SVGDiscardElement',\n    'SVGDocument',\n    'SVGElement',\n    'SVGElementInstance',\n    'SVGElementInstanceList',\n    'SVGEllipseElement',\n    'SVGEvent',\n    'SVGExternalResourcesRequired',\n    'SVGFEBlendElement',\n    'SVGFEColorMatrixElement',\n    'SVGFEComponentTransferElement',\n    'SVGFECompositeElement',\n    'SVGFEConvolveMatrixElement',\n    'SVGFEDiffuseLightingElement',\n    'SVGFEDisplacementMapElement',\n    'SVGFEDistantLightElement',\n    'SVGFEDropShadowElement',\n    'SVGFEFloodElement',\n    'SVGFEFuncAElement',\n    'SVGFEFuncBElement',\n    'SVGFEFuncGElement',\n    'SVGFEFuncRElement',\n    'SVGFEGaussianBlurElement',\n    'SVGFEImageElement',\n    'SVGFEMergeElement',\n    'SVGFEMergeNodeElement',\n    'SVGFEMorphologyElement',\n    'SVGFEOffsetElement',\n    'SVGFEPointLightElement',\n    'SVGFESpecularLightingElement',\n    'SVGFESpotLightElement',\n    'SVGFETileElement',\n    'SVGFETurbulenceElement',\n    'SVGFilterElement',\n    'SVGFilterPrimitiveStandardAttributes',\n    'SVGFitToViewBox',\n    'SVGFontElement',\n    'SVGFontFaceElement',\n    'SVGFontFaceFormatElement',\n    'SVGFontFaceNameElement',\n    'SVGFontFaceSrcElement',\n    'SVGFontFaceUriElement',\n    'SVGForeignObjectElement',\n    'SVGGElement',\n    'SVGGeometryElement',\n    'SVGGlyphElement',\n    'SVGGlyphRefElement',\n    'SVGGradientElement',\n    'SVGGraphicsElement',\n    'SVGHKernElement',\n    'SVGICCColor',\n    'SVGImageElement',\n    'SVGLangSpace',\n    'SVGLength',\n    'SVGLengthList',\n    'SVGLinearGradientElement',\n    'SVGLineElement',\n    'SVGLocatable',\n    'SVGMarkerElement',\n    'SVGMaskElement',\n    'SVGMatrix',\n    'SVGMetadataElement',\n    'SVGMissingGlyphElement',\n    'SVGMPathElement',\n    'SVGNumber',\n    'SVGNumberList',\n    'SVGPaint',\n    'SVGPathElement',\n    'SVGPathSeg',\n    'SVGPathSegArcAbs',\n    'SVGPathSegArcRel',\n    'SVGPathSegClosePath',\n    'SVGPathSegCurvetoCubicAbs',\n    'SVGPathSegCurvetoCubicRel',\n    'SVGPathSegCurvetoCubicSmoothAbs',\n    'SVGPathSegCurvetoCubicSmoothRel',\n    'SVGPathSegCurvetoQuadraticAbs',\n    'SVGPathSegCurvetoQuadraticRel',\n    'SVGPathSegCurvetoQuadraticSmoothAbs',\n    'SVGPathSegCurvetoQuadraticSmoothRel',\n    'SVGPathSegLinetoAbs',\n    'SVGPathSegLinetoHorizontalAbs',\n    'SVGPathSegLinetoHorizontalRel',\n    'SVGPathSegLinetoRel',\n    'SVGPathSegLinetoVerticalAbs',\n    'SVGPathSegLinetoVerticalRel',\n    'SVGPathSegList',\n    'SVGPathSegMovetoAbs',\n    'SVGPathSegMovetoRel',\n    'SVGPatternElement',\n    'SVGPoint',\n    'SVGPointList',\n    'SVGPolygonElement',\n    'SVGPolylineElement',\n    'SVGPreserveAspectRatio',\n    'SVGRadialGradientElement',\n    'SVGRect',\n    'SVGRectElement',\n    'SVGRenderingIntent',\n    'SVGScriptElement',\n    'SVGSetElement',\n    'SVGStopElement',\n    'SVGStringList',\n    'SVGStylable',\n    'SVGStyleElement',\n    'SVGSVGElement',\n    'SVGSwitchElement',\n    'SVGSymbolElement',\n    'SVGTests',\n    'SVGTextContentElement',\n    'SVGTextElement',\n    'SVGTextPathElement',\n    'SVGTextPositioningElement',\n    'SVGTitleElement',\n    'SVGTransform',\n    'SVGTransformable',\n    'SVGTransformList',\n    'SVGTRefElement',\n    'SVGTSpanElement',\n    'SVGUnitTypes',\n    'SVGURIReference',\n    'SVGUseElement',\n    'SVGViewElement',\n    'SVGViewSpec',\n    'SVGVKernElement',\n    'SVGZoomAndPan',\n    'SVGZoomEvent',\n    'Text',\n    'TextDecoder',\n    'TextEncoder',\n    'TextEvent',\n    'TextMetrics',\n    'TextTrack',\n    'TextTrackCue',\n    'TextTrackCueList',\n    'TextTrackList',\n    'TimeEvent',\n    'TimeRanges',\n    'toolbar',\n    'top',\n    'Touch',\n    'TouchEvent',\n    'TouchList',\n    'TrackEvent',\n    'TransitionEvent',\n    'TreeWalker',\n    'UIEvent',\n    'URL',\n    'URLSearchParams',\n    'ValidityState',\n    'VTTCue',\n    'WaveShaperNode',\n    'WebGLActiveInfo',\n    'WebGLBuffer',\n    'WebGLContextEvent',\n    'WebGLFramebuffer',\n    'WebGLProgram',\n    'WebGLRenderbuffer',\n    'WebGLRenderingContext',\n    'WebGLShader',\n    'WebGLShaderPrecisionFormat',\n    'WebGLTexture',\n    'WebGLUniformLocation',\n    'WebSocket',\n    'WheelEvent',\n    'window',\n    'Window',\n    'Worker',\n    'XDomainRequest',\n    'XMLDocument',\n    'XMLHttpRequest',\n    'XMLHttpRequestEventTarget',\n    'XMLHttpRequestProgressEvent',\n    'XMLHttpRequestUpload',\n    'XMLSerializer',\n    'XPathEvaluator',\n    'XPathException',\n    'XPathExpression',\n    'XPathNamespace',\n    'XPathNSResolver',\n    'XPathResult',\n    'XSLTProcessor',\n  ],\n  worker: [\n    'applicationCache',\n    'atob',\n    'Blob',\n    'BroadcastChannel',\n    'btoa',\n    'Cache',\n    'caches',\n    'clearInterval',\n    'clearTimeout',\n    'close',\n    'console',\n    'fetch',\n    'FileReaderSync',\n    'FormData',\n    'Headers',\n    'IDBCursor',\n    'IDBCursorWithValue',\n    'IDBDatabase',\n    'IDBFactory',\n    'IDBIndex',\n    'IDBKeyRange',\n    'IDBObjectStore',\n    'IDBOpenDBRequest',\n    'IDBRequest',\n    'IDBTransaction',\n    'IDBVersionChangeEvent',\n    'ImageData',\n    'importScripts',\n    'indexedDB',\n    'location',\n    'MessageChannel',\n    'MessagePort',\n    'name',\n    'navigator',\n    'Notification',\n    'onclose',\n    'onconnect',\n    'onerror',\n    'onlanguagechange',\n    'onmessage',\n    'onoffline',\n    'ononline',\n    'onrejectionhandled',\n    'onunhandledrejection',\n    'performance',\n    'Performance',\n    'PerformanceEntry',\n    'PerformanceMark',\n    'PerformanceMeasure',\n    'PerformanceNavigation',\n    'PerformanceResourceTiming',\n    'PerformanceTiming',\n    'postMessage',\n    'Promise',\n    'Request',\n    'Response',\n    'self',\n    'ServiceWorkerRegistration',\n    'setInterval',\n    'setTimeout',\n    'TextDecoder',\n    'TextEncoder',\n    'URL',\n    'URLSearchParams',\n    'WebSocket',\n    'Worker',\n    'XMLHttpRequest',\n  ],\n\n  // https://nodejs.org/api/globals.html\n  node: [\n    '__dirname',\n    '__filename',\n    'Buffer',\n    'clearImmediate',\n    'clearInterval',\n    'clearTimeout',\n    'console',\n    'exports',\n    'global',\n    'module',\n    'process',\n    'require',\n    'setImmediate',\n    'setInterval',\n    'setTimeout',\n  ],\n  commonjs: ['exports', 'module', 'require', 'global'],\n  amd: ['define', 'require'],\n\n  // https://mochajs.org/\n  mocha: [\n    'after',\n    'afterEach',\n    'before',\n    'beforeEach',\n    'context',\n    'describe',\n    'it',\n    'mocha',\n    'run',\n    'setup',\n    'specify',\n    'suite',\n    'suiteSetup',\n    'suiteTeardown',\n    'teardown',\n    'test',\n    'xcontext',\n    'xdescribe',\n    'xit',\n    'xspecify',\n  ],\n\n  // https://jasmine.github.io/2.0/introduction.html\n  jasmine: [\n    'afterAll',\n    'afterEach',\n    'beforeAll',\n    'beforeEach',\n    'describe',\n    'expect',\n    'fail',\n    'fdescribe',\n    'fit',\n    'it',\n    'jasmine',\n    'pending',\n    'runs',\n    'spyOn',\n    'waits',\n    'waitsFor',\n    'xdescribe',\n    'xit',\n  ],\n  jest: [\n    'afterAll',\n    'afterEach',\n    'beforeAll',\n    'beforeEach',\n    'check',\n    'describe',\n    'expect',\n    'gen',\n    'it',\n    'fit',\n    'jest',\n    'pit',\n    'require',\n    'test',\n    'xdescribe',\n    'xit',\n    'xtest',\n  ],\n  qunit: [\n    'asyncTest',\n    'deepEqual',\n    'equal',\n    'expect',\n    'module',\n    'notDeepEqual',\n    'notEqual',\n    'notOk',\n    'notPropEqual',\n    'notStrictEqual',\n    'ok',\n    'propEqual',\n    'QUnit',\n    'raises',\n    'start',\n    'stop',\n    'strictEqual',\n    'test',\n    'throws',\n  ],\n  phantomjs: ['console', 'exports', 'phantom', 'require', 'WebPage'],\n  couch: [\n    'emit',\n    'exports',\n    'getRow',\n    'log',\n    'module',\n    'provides',\n    'require',\n    'respond',\n    'send',\n    'start',\n    'sum',\n  ],\n  rhino: [\n    'defineClass',\n    'deserialize',\n    'gc',\n    'help',\n    'importClass',\n    'importPackage',\n    'java',\n    'load',\n    'loadClass',\n    'Packages',\n    'print',\n    'quit',\n    'readFile',\n    'readUrl',\n    'runCommand',\n    'seal',\n    'serialize',\n    'spawn',\n    'sync',\n    'toint32',\n    'version',\n  ],\n  nashorn: [\n    '__DIR__',\n    '__FILE__',\n    '__LINE__',\n    'com',\n    'edu',\n    'exit',\n    'Java',\n    'java',\n    'javafx',\n    'JavaImporter',\n    'javax',\n    'JSAdapter',\n    'load',\n    'loadWithNewGlobal',\n    'org',\n    'Packages',\n    'print',\n    'quit',\n  ],\n  wsh: [\n    'ActiveXObject',\n    'Enumerator',\n    'GetObject',\n    'ScriptEngine',\n    'ScriptEngineBuildVersion',\n    'ScriptEngineMajorVersion',\n    'ScriptEngineMinorVersion',\n    'VBArray',\n    'WScript',\n    'WSH',\n    'XDomainRequest',\n  ],\n  jquery: ['$', 'jQuery'],\n  yui: ['Y', 'YUI', 'YUI_config'],\n  shelljs: [\n    'cat',\n    'cd',\n    'chmod',\n    'config',\n    'cp',\n    'dirs',\n    'echo',\n    'env',\n    'error',\n    'exec',\n    'exit',\n    'find',\n    'grep',\n    'ls',\n    'ln',\n    'mkdir',\n    'mv',\n    'popd',\n    'pushd',\n    'pwd',\n    'rm',\n    'sed',\n    'set',\n    'target',\n    'tempdir',\n    'test',\n    'touch',\n    'which',\n  ],\n  prototypejs: [\n    '$',\n    '$$',\n    '$A',\n    '$break',\n    '$continue',\n    '$F',\n    '$H',\n    '$R',\n    '$w',\n    'Abstract',\n    'Ajax',\n    'Autocompleter',\n    'Builder',\n    'Class',\n    'Control',\n    'Draggable',\n    'Draggables',\n    'Droppables',\n    'Effect',\n    'Element',\n    'Enumerable',\n    'Event',\n    'Field',\n    'Form',\n    'Hash',\n    'Insertion',\n    'ObjectRange',\n    'PeriodicalExecuter',\n    'Position',\n    'Prototype',\n    'Scriptaculous',\n    'Selector',\n    'Sortable',\n    'SortableObserver',\n    'Sound',\n    'Template',\n    'Toggle',\n    'Try',\n  ],\n  meteor: [\n    '$',\n    '_',\n    'Accounts',\n    'AccountsClient',\n    'AccountsServer',\n    'AccountsCommon',\n    'App',\n    'Assets',\n    'Blaze',\n    'check',\n    'Cordova',\n    'DDP',\n    'DDPServer',\n    'DDPRateLimiter',\n    'Deps',\n    'EJSON',\n    'Email',\n    'HTTP',\n    'Log',\n    'Match',\n    'Meteor',\n    'Mongo',\n    'MongoInternals',\n    'Npm',\n    'Package',\n    'Plugin',\n    'process',\n    'Random',\n    'ReactiveDict',\n    'ReactiveVar',\n    'Router',\n    'ServiceConfiguration',\n    'Session',\n    'share',\n    'Spacebars',\n    'Template',\n    'Tinytest',\n    'Tracker',\n    'UI',\n    'Utils',\n    'WebApp',\n    'WebAppInternals',\n  ],\n  mongo: [\n    '_isWindows',\n    '_rand',\n    'BulkWriteResult',\n    'cat',\n    'cd',\n    'connect',\n    'db',\n    'getHostName',\n    'getMemInfo',\n    'hostname',\n    'ISODate',\n    'listFiles',\n    'load',\n    'ls',\n    'md5sumFile',\n    'mkdir',\n    'Mongo',\n    'NumberInt',\n    'NumberLong',\n    'ObjectId',\n    'PlanCache',\n    'print',\n    'printjson',\n    'pwd',\n    'quit',\n    'removeFile',\n    'rs',\n    'sh',\n    'UUID',\n    'version',\n    'WriteResult',\n  ],\n  applescript: [\n    '$',\n    'Application',\n    'Automation',\n    'console',\n    'delay',\n    'Library',\n    'ObjC',\n    'ObjectSpecifier',\n    'Path',\n    'Progress',\n    'Ref',\n  ],\n  serviceworker: [\n    'caches',\n    'Cache',\n    'CacheStorage',\n    'Client',\n    'clients',\n    'Clients',\n    'ExtendableEvent',\n    'ExtendableMessageEvent',\n    'FetchEvent',\n    'importScripts',\n    'registration',\n    'self',\n    'ServiceWorker',\n    'ServiceWorkerContainer',\n    'ServiceWorkerGlobalScope',\n    'ServiceWorkerMessageEvent',\n    'ServiceWorkerRegistration',\n    'skipWaiting',\n    'WindowClient',\n  ],\n  atomtest: [\n    'advanceClock',\n    'fakeClearInterval',\n    'fakeClearTimeout',\n    'fakeSetInterval',\n    'fakeSetTimeout',\n    'resetTimeouts',\n    'waitsForPromise',\n  ],\n\n  // https://guides.emberjs.com/v1.10.0/testing/test-helpers/\n  embertest: [\n    'andThen',\n    'click',\n    'currentPath',\n    'currentRouteName',\n    'currentURL',\n    'fillIn',\n    'find',\n    'findWithAssert',\n    'keyEvent',\n    'pauseTest',\n    'triggerEvent',\n    'visit',\n  ],\n  protractor: ['$', '$$', 'browser', 'By', 'by', 'DartObject', 'element', 'protractor'],\n  'shared-node-browser': ['clearInterval', 'clearTimeout', 'console', 'setInterval', 'setTimeout'],\n  webextensions: ['browser', 'chrome', 'opr'],\n  greasemonkey: [\n    'GM_addStyle',\n    'GM_deleteValue',\n    'GM_getResourceText',\n    'GM_getResourceURL',\n    'GM_getValue',\n    'GM_info',\n    'GM_listValues',\n    'GM_log',\n    'GM_openInTab',\n    'GM_registerMenuCommand',\n    'GM_setClipboard',\n    'GM_setValue',\n    'GM_xmlhttpRequest',\n    'unsafeWindow',\n  ],\n  flow: [\n    'boolean',\n    'number',\n    'string',\n    'null',\n    'void',\n    'mixed',\n    'any',\n    'empty',\n    'Array',\n    'Class',\n    '$Call',\n    '$TupleMap',\n    '$ObjMap',\n    '$ElementType',\n    '$PropertyType',\n    '$Rest',\n    '$Diff',\n    '$Exact',\n    '$ReadOnly',\n    '$ReadOnlyArray',\n    '$Values',\n    '$Keys',\n    '$SuperType',\n    '$Subtype',\n    'RegExp$flags',\n    'stream$Writable',\n    'stream$Readable',\n    'tty$WriteStream',\n    'tty$ReadStream',\n  ],\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport { AST } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { EncodedMessage, IssueLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\n\nexport type LocationHolder = AST.Token | TSESTree.Node | estree.Node | { loc: AST.SourceLocation };\n\nexport function toEncodedMessage(\n  message: string,\n  secondaryLocationsHolder: Array<LocationHolder>,\n  secondaryMessages?: (string | undefined)[],\n  cost?: number,\n): string {\n  const encodedMessage: EncodedMessage = {\n    message,\n    cost,\n    secondaryLocations: secondaryLocationsHolder.map((locationHolder, index) =>\n      toSecondaryLocation(\n        locationHolder,\n        !!secondaryMessages ? secondaryMessages[index] : undefined,\n      ),\n    ),\n  };\n  return JSON.stringify(encodedMessage);\n}\n\nfunction toSecondaryLocation(locationHolder: LocationHolder, message?: string): IssueLocation {\n  if (!locationHolder.loc) {\n    throw new Error('Invalid secondary location');\n  }\n  return {\n    message,\n    column: locationHolder.loc.start.column,\n    line: locationHolder.loc.start.line,\n    endColumn: locationHolder.loc.end.column,\n    endLine: locationHolder.loc.end.line,\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport { FUNCTION_NODES, isIdentifier } from '.';\n\nexport namespace Mocha {\n  const TEST_CONSTRUCTS = [\n    'describe',\n    'context',\n    'it',\n    'specify',\n    'before',\n    'after',\n    'beforeEach',\n    'afterEach',\n  ];\n\n  export interface TestCase {\n    node: estree.Node;\n    callback: estree.Function;\n  }\n\n  export function isTestConstruct(\n    node: estree.Node,\n    constructs: string[] = TEST_CONSTRUCTS,\n  ): boolean {\n    return constructs.some(construct => {\n      return (\n        node.type === 'CallExpression' &&\n        (isIdentifier(node.callee, construct) ||\n          (node.callee.type === 'MemberExpression' &&\n            isIdentifier(node.callee.object, construct) &&\n            isIdentifier(node.callee.property, 'only', 'skip')))\n      );\n    });\n  }\n\n  export function extractTestCase(node: estree.Node): TestCase | null {\n    if (isTestCase(node)) {\n      const callExpr = node as estree.CallExpression;\n      const [, callback] = callExpr.arguments;\n      if (callback && FUNCTION_NODES.includes(callback.type)) {\n        return { node: callExpr.callee, callback: callback as estree.Function };\n      }\n    }\n    return null;\n  }\n\n  export function isTestCase(node: estree.Node): boolean {\n    return isTestConstruct(node, ['it', 'specify']);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isDefaultSpecifier,\n  isIdentifier,\n  isNamespaceSpecifier,\n  getUniqueWriteUsage,\n} from './utils-ast';\n\n/**\n * Returns the module name, when an identifier either represents a namespace for that module,\n * or is an alias for the default exported value.\n *\n * Returns undefined otherwise.\n * example: Given `import * as X from 'module_name'`, `getModuleNameOfIdentifier(X)`\n * returns `module_name`.\n */\nexport function getModuleNameOfIdentifier(\n  context: Rule.RuleContext,\n  identifier: estree.Identifier,\n): estree.Literal | undefined {\n  const { name } = identifier;\n  // check if importing using `import * as X from 'module_name'`\n  const importDeclaration = getImportDeclarations(context).find(\n    importDecl => isNamespaceSpecifier(importDecl, name) || isDefaultSpecifier(importDecl, name),\n  );\n  if (importDeclaration) {\n    return importDeclaration.source;\n  }\n  // check if importing using `const X = require('module_name')`\n  const writeExpression = getUniqueWriteUsage(context, name);\n  if (writeExpression) {\n    return getModuleNameFromRequire(writeExpression);\n  }\n  return undefined;\n}\n\n/**\n * Returns the module name of either a directly `require`d or referenced module in\n * the following cases:\n *\n *  1. If `node` is a `require('m')` call;\n *  2. If `node` is an identifier `i` bound by an import, as in `import i from 'm'`;\n *  3. If `node` is an identifier `i`, and there is a single assignment with a `require`\n *     on the right hand side, i.e. `var i = require('m')`;\n *\n * then, in all three cases, the returned value will be the name of the module `'m'`.\n *\n * @param node the expression that is expected to evaluate to a module\n * @param context the rule context\n * @return literal with the name of the module or `undefined`.\n */\nexport function getModuleNameOfNode(\n  context: Rule.RuleContext,\n  node: estree.Node,\n): estree.Literal | undefined {\n  if (node.type === 'Identifier') {\n    return getModuleNameOfIdentifier(context, node);\n  } else {\n    return getModuleNameFromRequire(node);\n  }\n}\n\n/**\n * Returns the module name, when an identifier represents a binding imported from another module.\n * Returns undefined otherwise.\n * example: Given `import { f } from 'module_name'`, `getModuleNameOfImportedIdentifier(f)` returns `module_name`\n */\nexport function getModuleNameOfImportedIdentifier(\n  context: Rule.RuleContext,\n  identifier: estree.Identifier,\n) {\n  // check if importing using `import { f } from 'module_name'`\n  const importedDeclaration = getImportDeclarations(context).find(({ specifiers }) =>\n    specifiers.some(\n      spec => spec.type === 'ImportSpecifier' && spec.imported.name === identifier.name,\n    ),\n  );\n  if (importedDeclaration) {\n    return importedDeclaration.source;\n  }\n  // check if importing using `const f = require('module_name').f`\n  const writeExpression = getUniqueWriteUsage(context, identifier.name);\n  if (\n    writeExpression &&\n    writeExpression.type === 'MemberExpression' &&\n    isIdentifier(writeExpression.property, identifier.name)\n  ) {\n    return getModuleNameFromRequire(writeExpression.object);\n  }\n\n  return undefined;\n}\n\nexport function getImportDeclarations(context: Rule.RuleContext) {\n  const program = context.getSourceCode().ast;\n  if (program.sourceType === 'module') {\n    return program.body.filter(\n      node => node.type === 'ImportDeclaration',\n    ) as estree.ImportDeclaration[];\n  }\n  return [];\n}\n\nexport function getRequireCalls(context: Rule.RuleContext) {\n  const required: estree.CallExpression[] = [];\n  const { scopeManager } = context.getSourceCode();\n  scopeManager.scopes.forEach(scope =>\n    scope.variables.forEach(variable =>\n      variable.defs.forEach(def => {\n        if (def.type === 'Variable' && def.node.init) {\n          if (isRequire(def.node.init)) {\n            required.push(def.node.init as estree.CallExpression);\n          } else if (def.node.init.type === 'MemberExpression' && isRequire(def.node.init.object)) {\n            required.push(def.node.init.object as estree.CallExpression);\n          }\n        }\n      }),\n    ),\n  );\n  return required;\n}\n\nfunction isRequire(node: estree.Node) {\n  return (\n    node.type === 'CallExpression' &&\n    node.callee.type === 'Identifier' &&\n    node.callee.name === 'require' &&\n    node.arguments.length === 1\n  );\n}\n\nexport function getModuleNameFromRequire(node: estree.Node): estree.Literal | undefined {\n  if (\n    node.type === 'CallExpression' &&\n    isIdentifier(node.callee, 'require') &&\n    node.arguments.length === 1\n  ) {\n    const moduleName = node.arguments[0];\n    if (moduleName.type === 'Literal') {\n      return moduleName;\n    }\n  }\n  return undefined;\n}\n\nexport function isCallToFQN(\n  context: Rule.RuleContext,\n  callExpression: estree.CallExpression,\n  moduleName: string,\n  functionName: string,\n) {\n  const { callee } = callExpression;\n  if (callee.type !== 'MemberExpression') {\n    return false;\n  }\n  const module = getModuleNameOfNode(context, callee.object);\n  return module?.value === moduleName && isIdentifier(callee.property, functionName);\n}\n\nexport function getModuleAndCalledMethod(callee: estree.Node, context: Rule.RuleContext) {\n  let module;\n  let method: estree.Expression | estree.PrivateIdentifier | undefined;\n\n  if (callee.type === 'MemberExpression' && callee.object.type === 'Identifier') {\n    module = getModuleNameOfIdentifier(context, callee.object);\n    method = callee.property;\n  }\n  if (callee.type === 'Identifier') {\n    module = getModuleNameOfImportedIdentifier(context, callee);\n    method = callee;\n  }\n  return { module, method };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { functionLike } from './utils-ast';\n\nexport function findFirstMatchingLocalAncestor(\n  node: TSESTree.Node,\n  predicate: (node: TSESTree.Node) => boolean,\n) {\n  return localAncestorsChain(node).find(predicate);\n}\n\nexport function findFirstMatchingAncestor(\n  node: TSESTree.Node,\n  predicate: (node: TSESTree.Node) => boolean,\n) {\n  return ancestorsChain(node, new Set()).find(predicate);\n}\n\nexport function localAncestorsChain(node: TSESTree.Node) {\n  return ancestorsChain(node, functionLike);\n}\n\nexport function ancestorsChain(node: TSESTree.Node, boundaryTypes: Set<string>) {\n  const chain: TSESTree.Node[] = [];\n\n  let currentNode = node.parent;\n  while (currentNode) {\n    chain.push(currentNode);\n    if (boundaryTypes.has(currentNode.type)) {\n      break;\n    }\n    currentNode = currentNode.parent;\n  }\n  return chain;\n}\n\nexport function getParent(context: Rule.RuleContext) {\n  const ancestors = context.getAncestors();\n  return ancestors.length > 0 ? ancestors[ancestors.length - 1] : undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport interface StringLiteralToken {\n  value: string;\n  range: [number, number];\n}\n\nconst UNICODE_ESCAPE_LENGTH = 4;\nconst HEX_ESCAPE_LENGTH = 2;\n\nconst CP_BACK_SLASH = cp('\\\\');\nconst CP_FORWARD_SLASH = cp('/');\nconst CP_CR = cp('\\r');\nconst CP_LF = cp('\\n');\nconst CP_n = cp('n');\nconst CP_r = cp('r');\nconst CP_t = cp('t');\nconst CP_b = cp('b');\nconst CP_v = cp('v');\nconst CP_f = cp('f');\nconst CP_u = cp('u');\nconst CP_x = cp('x');\n\n/**\n * Parse 's' and return array of tokens with range. We assume 's' is correctly terminated because it was already parsed\n * into AST.\n *\n * Inspired by https://github.com/ota-meshi/eslint-plugin-regexp/blob/61ae9424e0f3bde62569718b597cdc036fec9f71/lib/utils/string-literal-parser/tokenizer.ts\n *\n */\nexport function tokenizeString(s: string): StringLiteralToken[] {\n  const tokens: StringLiteralToken[] = [];\n  let pos = 0;\n\n  function next() {\n    const c = cp(s, pos);\n    pos = inc(pos, c);\n    return c;\n  }\n\n  function readEscape(): string {\n    const c = next();\n    switch (c) {\n      case CP_n:\n        return '\\n';\n      case CP_r:\n        return '\\r';\n      case CP_t:\n        return '\\t';\n      case CP_b:\n        return '\\b';\n      case CP_v:\n        return '\\v';\n      case CP_f:\n        return '\\f';\n      case CP_BACK_SLASH:\n        return '\\\\';\n      case CP_CR:\n        if (cp(s, pos) === CP_LF) {\n          pos++; // \\r\\n\n        }\n        return '';\n      case CP_LF:\n        return '';\n      case CP_u:\n        return String.fromCodePoint(readUnicode());\n      case CP_x:\n        return String.fromCodePoint(readHex());\n      default:\n        if (isOctalDigit(c)) {\n          return readOctal(c);\n        }\n        return String.fromCodePoint(c);\n    }\n  }\n\n  /**\n   * read unicode escape like \\u0061 or \\u{61}\n   */\n  function readUnicode(): number {\n    let u;\n    if (s.charAt(pos) === '{') {\n      pos++;\n      const close = s.indexOf('}', pos);\n      u = s.substring(pos, close);\n      pos = close + 1;\n    } else {\n      u = s.substring(pos, pos + UNICODE_ESCAPE_LENGTH);\n      pos += UNICODE_ESCAPE_LENGTH;\n    }\n    return Number.parseInt(u, 16);\n  }\n\n  /**\n   * read hex escape like \\xA9\n   */\n  function readHex(): number {\n    const x = Number.parseInt(s.substring(pos, pos + HEX_ESCAPE_LENGTH), 16);\n    pos += HEX_ESCAPE_LENGTH;\n    return x;\n  }\n\n  /**\n   * read octal escapes like \\251. Octal escape sequences can have 1 - 3 digits\n   * and can be padded with 0\n   *\n   * @param firstDigit digit on the current 'pos' position\n   */\n  function readOctal(firstDigit: number): string {\n    let octal = String.fromCodePoint(firstDigit);\n    let i = pos;\n    while (isOctalDigit(cp(s, i)) && i - pos < 2) {\n      octal += s.charAt(i);\n      i++;\n    }\n    const res = Number.parseInt(octal, 8);\n    pos = i;\n    return String.fromCodePoint(res);\n  }\n\n  while (pos < s.length) {\n    const start = pos;\n    const c = next();\n    if (c === CP_BACK_SLASH) {\n      const value = readEscape();\n      if (value !== '') {\n        tokens.push({ value, range: [start, pos] });\n      }\n    } else if (c === CP_FORWARD_SLASH) {\n      const forwardSlash: StringLiteralToken = {\n        value: String.fromCodePoint(c),\n        range: [start, pos],\n      };\n      tokens.push(forwardSlash);\n      tokens.push(forwardSlash);\n    } else {\n      tokens.push({ value: String.fromCodePoint(c), range: [start, pos] });\n    }\n  }\n  return tokens;\n}\n\nfunction inc(pos: number, c: number): number {\n  // account for UTF-16 low surrogate\n  return pos + (c >= 0x10000 ? 2 : 1);\n}\n\nfunction isOctalDigit(c: number | undefined): boolean {\n  return c !== undefined && cp('0') <= c && c <= cp('7');\n}\n\nfunction cp(s: string, i = 0): number {\n  return s.codePointAt(i)!;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport ts from 'typescript';\nimport { TSESTree, TSESLint } from '@typescript-eslint/experimental-utils';\nimport { RequiredParserServices } from 'eslint-plugin-sonarjs/lib/utils/parser-services';\n\nexport type RuleContext = TSESLint.RuleContext<string, string[]>;\n\nexport function isArray(node: estree.Node, services: RequiredParserServices) {\n  const type = getTypeFromTreeNode(node, services);\n  return type.symbol && type.symbol.name === 'Array';\n}\n\nexport function isString(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  const typ = checker.getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n  return (typ.getFlags() & ts.TypeFlags.StringLike) !== 0;\n}\n\nexport function isNumber(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  const typ = checker.getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n  return (typ.getFlags() & ts.TypeFlags.NumberLike) !== 0;\n}\n\nexport function isStringType(type: ts.Type) {\n  return (type.flags & ts.TypeFlags.StringLike) > 0 || type.symbol?.name === 'String';\n}\n\nexport function isFunction(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  const type = checker.getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n  return type.symbol && (type.symbol.flags & ts.SymbolFlags.Function) !== 0;\n}\n\nexport function isUndefinedOrNull(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  const typ = checker.getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n  return (\n    (typ.getFlags() & ts.TypeFlags.Undefined) !== 0 || (typ.getFlags() & ts.TypeFlags.Null) !== 0\n  );\n}\n\nexport function isThenable(node: estree.Node, services: RequiredParserServices) {\n  const mapped = services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node);\n  const tp = services.program.getTypeChecker().getTypeAtLocation(mapped);\n  const thenProperty = tp.getProperty('then');\n  return Boolean(thenProperty && thenProperty.flags & ts.SymbolFlags.Method);\n}\n\nexport function isAny(type: ts.Type) {\n  return type.flags === ts.TypeFlags.Any;\n}\n\nexport function getTypeFromTreeNode(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  return checker.getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n}\n\nexport function getTypeAsString(node: estree.Node, services: RequiredParserServices) {\n  const { typeToString, getBaseTypeOfLiteralType } = services.program.getTypeChecker();\n  return typeToString(getBaseTypeOfLiteralType(getTypeFromTreeNode(node, services)));\n}\n\nexport function getSymbolAtLocation(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  return checker.getSymbolAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n}\n\nexport function getSignatureFromCallee(node: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  return checker.getResolvedSignature(\n    services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node) as ts.CallLikeExpression,\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport * as regexpp from 'regexpp';\nimport { CapturingGroup, Group, LookaroundAssertion, Pattern } from 'regexpp/ast';\nimport { AST, Rule } from 'eslint';\nimport {\n  getUniqueWriteUsage,\n  isBinaryPlus,\n  isIdentifier,\n  isRegexLiteral,\n  isStaticTemplateLiteral,\n  isStringLiteral,\n} from './utils-ast';\nimport { ParserServices, TSESTree } from '@typescript-eslint/experimental-utils';\nimport { tokenizeString } from './utils-string-literal';\nimport { isString } from './utils-type';\nimport { last } from './utils-collection';\n\n/**\n * An alternation is a regexpp node that has an `alternatives` field.\n */\nexport type Alternation = Pattern | CapturingGroup | Group | LookaroundAssertion;\n\nexport function getParsedRegex(\n  node: estree.Node,\n  context: Rule.RuleContext,\n): regexpp.AST.RegExpLiteral | null {\n  const patternAndFlags = getPatternFromNode(node, context);\n  if (patternAndFlags) {\n    try {\n      return regexpp.parseRegExpLiteral(new RegExp(patternAndFlags.pattern, patternAndFlags.flags));\n    } catch {\n      // do nothing for invalid regex\n    }\n  }\n\n  return null;\n}\n\nfunction getPatternFromNode(\n  node: estree.Node,\n  context: Rule.RuleContext,\n): { pattern: string; flags: string } | null {\n  if (isRegExpConstructor(node)) {\n    const patternOnly = getPatternFromNode(node.arguments[0], context);\n    const flags = getFlags(node);\n    if (patternOnly && flags !== null) {\n      return { pattern: patternOnly.pattern, flags };\n    }\n  } else if (isRegexLiteral(node)) {\n    return node.regex;\n  } else if (isStringLiteral(node)) {\n    return { pattern: node.value as string, flags: '' };\n  } else if (isStaticTemplateLiteral(node)) {\n    return { pattern: node.quasis[0].value.raw, flags: '' };\n  } else if (isIdentifier(node)) {\n    const assignedExpression = getUniqueWriteUsage(context, node.name);\n    if (\n      assignedExpression &&\n      (assignedExpression as TSESTree.Node).parent?.type === 'VariableDeclarator'\n    ) {\n      return getPatternFromNode(assignedExpression, context);\n    }\n  } else if (isBinaryPlus(node)) {\n    const left = getPatternFromNode(node.left, context);\n    const right = getPatternFromNode(node.right, context);\n    if (left && right) {\n      return { pattern: left.pattern + right.pattern, flags: '' };\n    }\n  }\n\n  return null;\n}\n\nfunction isRegExpWithGlobalThis(node: estree.Node) {\n  return (\n    node.type === 'NewExpression' &&\n    node.callee.type === 'MemberExpression' &&\n    isIdentifier(node.callee.object, 'globalThis') &&\n    isIdentifier(node.callee.property, 'RegExp') &&\n    node.arguments.length > 0\n  );\n}\n\nexport function isRegExpConstructor(node: estree.Node): node is estree.CallExpression {\n  return (\n    ((node.type === 'CallExpression' || node.type === 'NewExpression') &&\n      node.callee.type === 'Identifier' &&\n      node.callee.name === 'RegExp' &&\n      node.arguments.length > 0) ||\n    isRegExpWithGlobalThis(node)\n  );\n}\n\nexport function getFlags(callExpr: estree.CallExpression): string | null {\n  if (callExpr.arguments.length < 2) {\n    return '';\n  }\n  const flags = callExpr.arguments[1];\n  if (flags.type === 'Literal' && typeof flags.value === 'string') {\n    return flags.value;\n  }\n  return null;\n}\n\nexport function getRegexpLocation(\n  node: estree.Node,\n  regexpNode: regexpp.AST.Node,\n  context: Rule.RuleContext,\n  offset = [0, 0],\n): AST.SourceLocation {\n  let loc: AST.SourceLocation;\n  if (isRegexLiteral(node) || isStringLiteral(node)) {\n    const source = context.getSourceCode();\n    const [start] = node.range!;\n    const [reStart, reEnd] = getRegexpRange(node, regexpNode);\n    loc = {\n      start: source.getLocFromIndex(start + reStart + offset[0]),\n      end: source.getLocFromIndex(start + reEnd + offset[1]),\n    };\n  } else {\n    loc = node.loc!;\n  }\n  return loc;\n}\n\n/**\n * Returns the location of regexpNode relative to the node, which is regexp string or literal. If the computation\n * of location fails, it returns the range of the whole node.\n */\nexport function getRegexpRange(node: estree.Node, regexpNode: regexpp.AST.Node): AST.Range {\n  if (isRegexLiteral(node)) {\n    return [regexpNode.start, regexpNode.end];\n  }\n  if (isStringLiteral(node)) {\n    if (node.value === '') {\n      return [0, 2];\n    }\n    const s = node.raw!;\n    const tokens = tokenizeString(unquote(s));\n    if (regexpNode.start === regexpNode.end) {\n      // this happens in case of empty alternative node like '|'\n      if (regexpNode.start - 1 < tokens.length) {\n        // '|' first empty alternative will have start = 1, end = 1\n        // +1 is to account for string quote\n        return [\n          tokens[regexpNode.start - 1].range[0] + 1,\n          tokens[regexpNode.start - 1].range[0] + 1,\n        ];\n      } else {\n        // '|' second empty alternative regex node will have start = 2, end = 2\n        // +1 is to account for string quote\n        return [last(tokens).range[1] + 1, last(tokens).range[1] + 1];\n      }\n    }\n    // regexpNode positions are 1 - based, we need to -1 to report as 0 - based\n    // it's possible for node start to be outside of range, e.g. `a` in new RegExp('//a')\n    const startToken = regexpNode.start - 1;\n    if (tokens[startToken] === undefined) {\n      // fallback when something is broken\n      return nodeRange(node);\n    }\n    const start = tokens[startToken].range[0];\n    // it's possible for node end to be outside of range, e.g. new RegExp('\\n(|)')\n    const endToken = Math.min(regexpNode.end - 2, tokens.length - 1);\n    if (tokens[endToken] === undefined) {\n      // fallback when something is broken\n      return nodeRange(node);\n    }\n    const end = tokens[endToken].range[1];\n    // +1 is needed to account for string quotes\n    return [start + 1, end + 1];\n  }\n  if (node.type === 'TemplateLiteral') {\n    // we don't support these properly\n    return nodeRange(node);\n  }\n  throw new Error(`Expected regexp or string literal, got ${node.type}`);\n}\n\nfunction nodeRange(node: estree.Node): [number, number] {\n  return [0, node.range![1] - node.range![0]];\n}\n\nfunction unquote(s: string): string {\n  if (s.charAt(0) !== \"'\" && s.charAt(0) !== '\"') {\n    throw new Error(`invalid string to unquote: ${s}`);\n  }\n  return s.substring(1, s.length - 1);\n}\n\nexport function isStringRegexMethodCall(call: estree.CallExpression, services: ParserServices) {\n  return (\n    call.callee.type === 'MemberExpression' &&\n    call.callee.property.type === 'Identifier' &&\n    !call.callee.computed &&\n    ['match', 'matchAll', 'search'].includes(call.callee.property.name) &&\n    call.arguments.length > 0 &&\n    isString(call.callee.object, services) &&\n    isString(call.arguments[0], services)\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport { SourceCode } from 'eslint';\n\nexport function visit(sourceCode: SourceCode, callback: (node: estree.Node) => void): void {\n  const stack: estree.Node[] = [sourceCode.ast];\n  while (stack.length) {\n    const node = stack.pop() as estree.Node;\n    callback(node);\n    stack.push(...childrenOf(node, sourceCode.visitorKeys).reverse());\n  }\n}\n\nexport function childrenOf(node: estree.Node, visitorKeys: SourceCode.VisitorKeys): estree.Node[] {\n  const keys = visitorKeys[node.type];\n  const children = [];\n  if (keys) {\n    for (const key of keys) {\n      const child = (node as any)[key];\n      if (Array.isArray(child)) {\n        children.push(...child);\n      } else {\n        children.push(child);\n      }\n    }\n  }\n  return children.filter(Boolean);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as regexpp from 'regexpp';\nimport type { RegExpVisitor } from 'regexpp/visitor';\nimport {\n  getParsedRegex,\n  getRegexpLocation,\n  isRequiredParserServices,\n  isStringRegexMethodCall,\n} from '../utils';\n\n/**\n * Rule context for regex rules that also includes the original ESLint node\n * denoting the regular expression (string) literal.\n */\nexport type RegexRuleContext = Rule.RuleContext & {\n  node: estree.Node;\n  reportRegExpNode: (descriptor: RegexReportDescriptor) => void;\n};\n\ntype RegexReportDescriptor = {\n  message: string;\n  regexpNode: regexpp.AST.Node;\n  node: estree.Node;\n  offset?: [number, number];\n};\n\n/**\n * Rule template to create regex rules.\n * @param handlers - the regexpp node handlers\n * @param meta - the (optional) rule metadata\n * @returns the resulting rule module\n */\nexport function createRegExpRule(\n  handlers: (context: RegexRuleContext) => RegExpVisitor.Handlers,\n  metadata: { meta: Rule.RuleMetaData } = { meta: {} },\n): Rule.RuleModule {\n  return {\n    ...metadata,\n    create(context: Rule.RuleContext) {\n      const services = isRequiredParserServices(context.parserServices)\n        ? context.parserServices\n        : null;\n\n      function checkRegex(node: estree.Node, regExpAST: regexpp.AST.Node | null) {\n        if (!regExpAST) {\n          return;\n        }\n        const ctx = Object.create(context) as RegexRuleContext;\n        ctx.node = node;\n        ctx.reportRegExpNode = reportRegExpNode;\n        regexpp.visitRegExpAST(regExpAST, handlers(ctx));\n      }\n\n      function reportRegExpNode(descriptor: RegexReportDescriptor) {\n        const { node, regexpNode, message, offset = [0, 0] } = descriptor;\n        const loc = getRegexpLocation(node, regexpNode, context, offset);\n        context.report({ message, loc });\n      }\n\n      function checkLiteral(literal: estree.Literal) {\n        checkRegex(literal, getParsedRegex(literal, context));\n      }\n\n      function checkCallExpression(callExpr: estree.CallExpression) {\n        let parsedRegex = getParsedRegex(callExpr, context);\n        if (!parsedRegex && services && isStringRegexMethodCall(callExpr, services)) {\n          const [implicitRegex] = callExpr.arguments;\n          parsedRegex = getParsedRegex(implicitRegex, context);\n        }\n        checkRegex(callExpr.arguments[0], parsedRegex);\n      }\n\n      return {\n        'Literal[regex]': checkLiteral,\n        NewExpression: checkCallExpression,\n        CallExpression: checkCallExpression,\n      };\n    },\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5850\n\nimport { Rule } from 'eslint';\nimport { AST } from 'regexpp';\nimport { createRegExpRule } from './regex-rule-template';\n\nenum Position {\n  BEGINNING,\n  END,\n}\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  return {\n    onPatternEnter: (pattern: AST.Pattern) => {\n      const { alternatives } = pattern;\n      if (\n        alternatives.length > 1 &&\n        (anchoredAt(alternatives, Position.BEGINNING) || anchoredAt(alternatives, Position.END)) &&\n        notAnchoredElseWhere(alternatives)\n      ) {\n        context.reportRegExpNode({\n          message:\n            'Group parts of the regex together to make the intended operator precedence explicit.',\n          node: context.node,\n          regexpNode: pattern,\n        });\n      }\n    },\n  };\n});\n\nfunction anchoredAt(alternatives: AST.Alternative[], position: Position): boolean {\n  const itemIndex = position === Position.BEGINNING ? 0 : alternatives.length - 1;\n  const firstOrLast = alternatives[itemIndex];\n  return isAnchored(firstOrLast, position);\n}\n\nfunction notAnchoredElseWhere(alternatives: AST.Alternative[]): boolean {\n  if (\n    isAnchored(alternatives[0], Position.END) ||\n    isAnchored(alternatives[alternatives.length - 1], Position.BEGINNING)\n  ) {\n    return false;\n  }\n  for (const alternative of alternatives.slice(1, alternatives.length - 1)) {\n    if (isAnchored(alternative, Position.BEGINNING) || isAnchored(alternative, Position.END)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isAnchored(alternative: AST.Alternative, position: Position): boolean {\n  const { elements } = alternative;\n  if (elements.length === 0) {\n    return false;\n  }\n  const index = position === Position.BEGINNING ? 0 : elements.length - 1;\n  const firstOrLast = elements[index];\n  return isAnchor(firstOrLast);\n}\n\nfunction isAnchor(element: AST.Element) {\n  return element.type === 'Assertion' && (element.kind === 'start' || element.kind === 'end');\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3782\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getTypeFromTreeNode, isRequiredParserServices } from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport ts, { SyntaxKind } from 'typescript';\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    const tc = services.program.getTypeChecker();\n\n    function isBuiltInMethod(symbol: ts.Symbol) {\n      const parent = symbol.valueDeclaration?.parent;\n      if (!parent || parent.kind !== SyntaxKind.InterfaceDeclaration) {\n        return false;\n      }\n      const parentSymbol = tc.getSymbolAtLocation((parent as ts.InterfaceDeclaration).name);\n      if (!parentSymbol) {\n        return false;\n      }\n      const fqn = tc.getFullyQualifiedName(parentSymbol);\n      // some of the built-in objects are deliberately excluded, because they generate many FPs\n      // and no relevant TP, e.g. RegExp, Function\n      return ['String', 'Math', 'Array', 'Number', 'Date'].includes(fqn);\n    }\n\n    function isVarArg(param: ts.ParameterDeclaration) {\n      return !!param.dotDotDotToken;\n    }\n\n    function isTypeParameter(type: ts.Type) {\n      return type.getFlags() & ts.TypeFlags.TypeParameter;\n    }\n\n    function declarationMismatch(\n      declaration: ts.SignatureDeclaration,\n      callExpression: estree.CallExpression,\n    ) {\n      const parameters = declaration.parameters;\n      for (let i = 0; i < Math.min(parameters.length, callExpression.arguments.length); i++) {\n        const parameterType = parameters[i].type;\n        if (!parameterType) {\n          return null;\n        }\n        const declaredType = tc.getTypeFromTypeNode(parameterType);\n        const actualType = getTypeFromTreeNode(callExpression.arguments[i], services);\n        if (\n          // @ts-ignore private API, see https://github.com/microsoft/TypeScript/issues/9879\n          !tc.isTypeAssignableTo(actualType, declaredType) &&\n          !isTypeParameter(declaredType) &&\n          !ts.isFunctionTypeNode(parameterType) &&\n          !isVarArg(parameters[i])\n        ) {\n          return { actualType, declaredType, node: callExpression.arguments[i] };\n        }\n      }\n      return null;\n    }\n\n    function typeToString(type: ts.Type) {\n      return tc.typeToString(tc.getBaseTypeOfLiteralType(type));\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        const tsCallExpr = services.esTreeNodeToTSNodeMap.get(\n          callExpression.callee as TSESTree.Node,\n        );\n        const symbol = tc.getSymbolAtLocation(tsCallExpr);\n\n        if (symbol && symbol.declarations && isBuiltInMethod(symbol)) {\n          let mismatch: {\n            actualType: ts.Type;\n            declaredType: ts.Type;\n            node: estree.Node;\n          } | null = null;\n          for (const declaration of symbol.declarations) {\n            mismatch = declarationMismatch(declaration as ts.SignatureDeclaration, callExpression);\n            if (!mismatch) {\n              return;\n            }\n          }\n          if (mismatch) {\n            context.report({\n              node: mismatch.node,\n              message: `Verify that argument is of correct type: expected '${typeToString(\n                mismatch.declaredType,\n              )}' instead of '${typeToString(mismatch.actualType)}'.`,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2234\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { EncodedMessage } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { isIdentifier } from 'eslint-plugin-sonarjs/lib/utils/nodes';\nimport {\n  FunctionNodeType,\n  isRequiredParserServices,\n  isFunctionNode,\n  resolveFromFunctionReference,\n  getSignatureFromCallee,\n  getTypeAsString,\n  resolveIdentifiers,\n} from '../utils';\n\ninterface FunctionSignature {\n  params: Array<string | undefined>;\n  declaration?: FunctionNodeType;\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    const canResolveType = isRequiredParserServices(services);\n\n    function checkArguments(functionCall: estree.CallExpression) {\n      const resolvedFunction = resolveFunctionDeclaration(functionCall);\n      if (!resolvedFunction) {\n        return;\n      }\n\n      const { params: functionParameters, declaration: functionDeclaration } = resolvedFunction;\n      const argumentNames = functionCall.arguments.map(arg => {\n        const argument = arg as TSESTree.Node;\n        return isIdentifier(argument) ? argument.name : undefined;\n      });\n\n      for (let argumentIndex = 0; argumentIndex < argumentNames.length; argumentIndex++) {\n        const argumentName = argumentNames[argumentIndex];\n        if (argumentName) {\n          const swappedArgumentName = getSwappedArgumentName(\n            argumentNames,\n            functionParameters,\n            argumentName,\n            argumentIndex,\n            functionCall,\n          );\n          if (swappedArgumentName && !areComparedArguments([argumentName, swappedArgumentName])) {\n            raiseIssue(argumentName, swappedArgumentName, functionDeclaration, functionCall);\n            return;\n          }\n        }\n      }\n    }\n\n    function areComparedArguments(argumentNames: string[]): boolean {\n      function getName(node: estree.Node): string | undefined {\n        switch (node.type) {\n          case 'Identifier':\n            return node.name;\n          case 'CallExpression':\n            return getName(node.callee);\n          case 'MemberExpression':\n            return getName(node.object);\n          default:\n            return undefined;\n        }\n      }\n      function checkComparedArguments(lhs: estree.Node, rhs: estree.Node): boolean {\n        return (\n          [lhs, rhs].map(getName).filter(name => name && argumentNames.includes(name)).length ===\n          argumentNames.length\n        );\n      }\n      const maybeIfStmt = context\n        .getAncestors()\n        .reverse()\n        .find(ancestor => ancestor.type === 'IfStatement');\n      if (maybeIfStmt) {\n        const { test } = maybeIfStmt as estree.IfStatement;\n        switch (test.type) {\n          case 'BinaryExpression':\n            const binExpr = test;\n            if (['==', '!=', '===', '!==', '<', '<=', '>', '>='].includes(binExpr.operator)) {\n              const { left: lhs, right: rhs } = binExpr;\n              return checkComparedArguments(lhs, rhs);\n            }\n            break;\n          case 'CallExpression':\n            const callExpr = test;\n            if (callExpr.arguments.length === 1 && callExpr.callee.type === 'MemberExpression') {\n              const [lhs, rhs] = [callExpr.callee.object, callExpr.arguments[0]];\n              return checkComparedArguments(lhs, rhs);\n            }\n            break;\n        }\n      }\n      return false;\n    }\n\n    function resolveFunctionDeclaration(node: estree.CallExpression): FunctionSignature | null {\n      if (canResolveType) {\n        return resolveFromTSSignature(node);\n      }\n\n      let functionDeclaration: FunctionNodeType | null = null;\n\n      if (isFunctionNode(node.callee)) {\n        functionDeclaration = node.callee;\n      } else if (node.callee.type === 'Identifier') {\n        functionDeclaration = resolveFromFunctionReference(context, node.callee);\n      }\n\n      if (!functionDeclaration) {\n        return null;\n      }\n\n      return {\n        params: extractFunctionParameters(functionDeclaration),\n        declaration: functionDeclaration,\n      };\n    }\n\n    function resolveFromTSSignature(node: estree.CallExpression) {\n      const signature = getSignatureFromCallee(node, services);\n      if (signature && signature.declaration) {\n        return {\n          params: signature.parameters.map(param => param.name),\n          declaration: services.tsNodeToESTreeNodeMap.get(signature.declaration),\n        };\n      }\n      return null;\n    }\n\n    function getSwappedArgumentName(\n      argumentNames: Array<string | undefined>,\n      functionParameters: Array<string | undefined>,\n      argumentName: string,\n      argumentIndex: number,\n      node: estree.CallExpression,\n    ) {\n      const indexInFunctionDeclaration = functionParameters.findIndex(\n        functionParameterName => functionParameterName === argumentName,\n      );\n      if (indexInFunctionDeclaration >= 0 && indexInFunctionDeclaration !== argumentIndex) {\n        const potentiallySwappedArgument = argumentNames[indexInFunctionDeclaration];\n        if (\n          potentiallySwappedArgument &&\n          potentiallySwappedArgument === functionParameters[argumentIndex] &&\n          haveCompatibleTypes(\n            node.arguments[argumentIndex],\n            node.arguments[indexInFunctionDeclaration],\n          )\n        ) {\n          return potentiallySwappedArgument;\n        }\n      }\n      return null;\n    }\n\n    function haveCompatibleTypes(arg1: estree.Node, arg2: estree.Node) {\n      if (canResolveType) {\n        const type1 = normalizeType(getTypeAsString(arg1, services));\n        const type2 = normalizeType(getTypeAsString(arg2, services));\n        return type1 === type2;\n      }\n      return true;\n    }\n\n    function raiseIssue(\n      arg1: string,\n      arg2: string,\n      functionDeclaration: FunctionNodeType | undefined,\n      node: estree.CallExpression,\n    ) {\n      const primaryMessage = `Arguments '${arg1}' and '${arg2}' have the same names but not the same order as the function parameters.`;\n      const encodedMessage: EncodedMessage = {\n        message: primaryMessage,\n        secondaryLocations: getSecondaryLocations(functionDeclaration),\n      };\n\n      context.report({\n        message: JSON.stringify(encodedMessage),\n        loc: getParametersClauseLocation(node.arguments),\n      });\n    }\n\n    return {\n      NewExpression: (node: estree.Node) => {\n        checkArguments(node as estree.NewExpression);\n      },\n      CallExpression: (node: estree.Node) => {\n        checkArguments(node as estree.CallExpression);\n      },\n    };\n  },\n};\n\nfunction extractFunctionParameters(functionDeclaration: FunctionNodeType) {\n  return functionDeclaration.params.map(param => {\n    const identifiers = resolveIdentifiers(param as TSESTree.Node);\n    if (identifiers.length === 1 && identifiers[0]) {\n      return identifiers[0].name;\n    }\n    return undefined;\n  });\n}\n\nfunction getSecondaryLocations(functionDeclaration: FunctionNodeType | undefined) {\n  if (functionDeclaration && functionDeclaration.params && functionDeclaration.params.length > 0) {\n    const { start, end } = getParametersClauseLocation(functionDeclaration.params);\n    return [\n      {\n        message: 'Formal parameters',\n        line: start.line,\n        column: start.column,\n        endLine: end.line,\n        endColumn: end.column,\n      },\n    ];\n  }\n  return [];\n}\n\nfunction getParametersClauseLocation(parameters: Array<estree.Node>) {\n  const firstParam = parameters[0] as TSESTree.Node;\n  const lastParam = parameters[parameters.length - 1] as TSESTree.Node;\n  return { start: firstParam.loc.start, end: lastParam.loc.end };\n}\n\nfunction normalizeType(typeAsString: string) {\n  switch (typeAsString) {\n    case 'String':\n      return 'string';\n    case 'Boolean':\n      return 'boolean';\n    case 'Number':\n      return 'number';\n    default:\n      return typeAsString;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3513\n\nimport { Rule, Scope } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nconst MESSAGE = \"Use the rest syntax to declare this function's arguments.\";\nconst SECONDARY_MESSAGE = 'Replace this reference to \"arguments\".';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      // Ignore root scope containing global variables\n      'Program:exit': () =>\n        context\n          .getScope()\n          .childScopes.forEach(child => checkArgumentsUsageInScopeRecursively(context, child)),\n    };\n  },\n};\n\nfunction checkArgumentsUsageInScopeRecursively(\n  context: Rule.RuleContext,\n  scope: Scope.Scope,\n): void {\n  scope.variables\n    .filter(variable => variable.name === 'arguments')\n    .forEach(variable => checkArgumentsVariableWithoutDefinition(context, variable));\n  scope.childScopes.forEach(child => checkArgumentsUsageInScopeRecursively(context, child));\n}\n\nfunction checkArgumentsVariableWithoutDefinition(\n  context: Rule.RuleContext,\n  variable: Scope.Variable,\n): void {\n  // if variable is a parameter, variable.defs contains one ParameterDefinition with a type: 'Parameter'\n  // if variable is a local variable, variable.defs contains one Definition with a type: 'Variable'\n  // but if variable is the function arguments, variable.defs is just empty without other hint\n  const isLocalVariableOrParameter = variable.defs.length > 0;\n  const references = variable.references.filter(ref => !isFollowedByLengthProperty(ref));\n  if (!isLocalVariableOrParameter && references.length > 0) {\n    const firstReference = references[0];\n    const secondaryLocations = references.slice(1).map(ref => ref.identifier) as TSESTree.Node[];\n    context.report({\n      node: firstReference.identifier,\n      message: toEncodedMessage(\n        MESSAGE,\n        secondaryLocations,\n        Array(secondaryLocations.length).fill(SECONDARY_MESSAGE),\n      ),\n    });\n  }\n}\n\nfunction isFollowedByLengthProperty(reference: Scope.Reference): boolean {\n  const parent = (reference.identifier as TSESTree.Node).parent;\n  return (\n    !!parent &&\n    parent.type === 'MemberExpression' &&\n    parent.property.type === 'Identifier' &&\n    parent.property.name === 'length'\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3796\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport {\n  isArray,\n  RequiredParserServices,\n  isRequiredParserServices,\n  isMemberExpression,\n  RuleContext,\n} from '../utils';\n\nconst message = `Add a \"return\" statement to this callback.`;\n\nconst methodsWithCallback = [\n  'every',\n  'filter',\n  'find',\n  'findIndex',\n  'map',\n  'reduce',\n  'reduceRight',\n  'some',\n  'sort',\n];\n\nfunction hasCallBackWithoutReturn(argument: estree.Node, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  const type = checker.getTypeAtLocation(\n    services.esTreeNodeToTSNodeMap.get(argument as TSESTree.Node),\n  );\n  const signatures = type.getCallSignatures();\n  return (\n    signatures.length > 0 &&\n    signatures.every(sig => checker.typeToString(sig.getReturnType()) === 'void')\n  );\n}\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    return {\n      'CallExpression[callee.type=\"MemberExpression\"]'(node: estree.Node) {\n        const callExpression = node as estree.CallExpression;\n        const args = callExpression.arguments;\n        const memberExpression = callExpression.callee as estree.MemberExpression;\n        const { property, object } = memberExpression;\n        if (memberExpression.computed || property.type !== 'Identifier' || args.length === 0) {\n          return;\n        }\n        if (\n          methodsWithCallback.includes(property.name) &&\n          isArray(object, services) &&\n          hasCallBackWithoutReturn(args[0], services)\n        ) {\n          context.report({\n            message,\n            ...getNodeToReport(args[0], node, context),\n          });\n        } else if (\n          isMemberExpression(callExpression.callee, 'Array', 'from') &&\n          args.length > 1 &&\n          hasCallBackWithoutReturn(args[1], services)\n        ) {\n          context.report({\n            message,\n            ...getNodeToReport(args[1], node, context),\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction getNodeToReport(node: estree.Node, parent: estree.Node, context: Rule.RuleContext) {\n  if (\n    node.type === 'FunctionDeclaration' ||\n    node.type === 'FunctionExpression' ||\n    node.type === 'ArrowFunctionExpression'\n  ) {\n    return {\n      loc: getMainFunctionTokenLocation(\n        node as TSESTree.FunctionLike,\n        parent as TSESTree.Node,\n        context as unknown as RuleContext,\n      ),\n    };\n  }\n  return {\n    node,\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    function checkNewExpression(node: estree.Node) {\n      const newExpression = node as estree.NewExpression;\n      if (newExpression.callee.type === 'Identifier' && newExpression.callee.name === 'Array') {\n        let message = 'Use either a literal or \"Array.from()\" instead of the \"Array\" constructor.';\n        if (\n          newExpression.arguments.length === 1 &&\n          newExpression.arguments[0].type === 'Literal' &&\n          typeof newExpression.arguments[0].value === 'number'\n        ) {\n          message = 'Use \"Array.from()\" instead of the \"Array\" constructor.';\n        }\n        context.report({ node, message });\n      }\n    }\n\n    return {\n      NewExpression: checkNewExpression,\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3524\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nconst MESSAGE_ADD_PARAMETER = 'Add parentheses around the parameter of this arrow function.';\nconst MESSAGE_REMOVE_PARAMETER = 'Remove parentheses around the parameter of this arrow function.';\nconst MESSAGE_ADD_BODY = 'Add curly braces and \"return\" to this arrow function body.';\nconst MESSAGE_REMOVE_BODY = 'Remove curly braces and \"return\" from this arrow function body.';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          requireParameterParentheses: {\n            type: 'boolean',\n          },\n          requireBodyBraces: {\n            type: 'boolean',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const options = context.options[0] || {};\n    const requireParameterParentheses = !!options.requireParameterParentheses;\n    const requireBodyBraces = !!options.requireBodyBraces;\n    return {\n      ArrowFunctionExpression(node: estree.Node) {\n        const arrowFunction = node as estree.ArrowFunctionExpression;\n        checkParameters(context, requireParameterParentheses, arrowFunction);\n        checkBody(context, requireBodyBraces, arrowFunction);\n      },\n    };\n  },\n};\n\nfunction checkParameters(\n  context: Rule.RuleContext,\n  requireParameterParentheses: boolean,\n  arrowFunction: estree.ArrowFunctionExpression,\n) {\n  if (arrowFunction.params.length !== 1) {\n    return;\n  }\n  const parameter = arrowFunction.params[0];\n  // Looking at the closing parenthesis after the parameter to avoid problems with cases like\n  // `functionTakingCallbacks(x => {...})` where the opening parenthesis before `x` isn't part\n  // of the function literal\n  const tokenAfterParameter = context.getSourceCode().getTokenAfter(parameter);\n  const hasParameterParentheses = tokenAfterParameter && tokenAfterParameter.value === ')';\n\n  if (requireParameterParentheses && !hasParameterParentheses) {\n    context.report({ node: parameter, message: MESSAGE_ADD_PARAMETER });\n  } else if (\n    !requireParameterParentheses &&\n    !hasGeneric(context, arrowFunction) &&\n    hasParameterParentheses\n  ) {\n    const arrowFunctionComments = context.getSourceCode().getCommentsInside(arrowFunction);\n    const arrowFunctionBodyComments = context.getSourceCode().getCommentsInside(arrowFunction.body);\n    // parameters comments inside parentheses are not available, so use the following subtraction:\n    const hasArrowFunctionParamsComments =\n      arrowFunctionComments.filter(comment => !arrowFunctionBodyComments.includes(comment)).length >\n      0;\n    if (\n      parameter.type === 'Identifier' &&\n      !hasArrowFunctionParamsComments &&\n      !(parameter as TSESTree.Identifier).typeAnnotation &&\n      !(arrowFunction as TSESTree.ArrowFunctionExpression).returnType\n    ) {\n      context.report({ node: parameter, message: MESSAGE_REMOVE_PARAMETER });\n    }\n  }\n}\n\nfunction hasGeneric(context: Rule.RuleContext, arrowFunction: estree.ArrowFunctionExpression) {\n  const offset = arrowFunction.async ? 1 : 0;\n  const firstTokenIgnoreAsync = context.getSourceCode().getFirstToken(arrowFunction, offset);\n  return firstTokenIgnoreAsync && firstTokenIgnoreAsync.value === '<';\n}\n\nfunction checkBody(\n  context: Rule.RuleContext,\n  requireBodyBraces: boolean,\n  arrowFunction: estree.ArrowFunctionExpression,\n) {\n  const hasBodyBraces = arrowFunction.body.type === 'BlockStatement';\n  if (requireBodyBraces && !hasBodyBraces) {\n    context.report({ node: arrowFunction.body, message: MESSAGE_ADD_BODY });\n  } else if (!requireBodyBraces && hasBodyBraces) {\n    const statements = (arrowFunction.body as estree.BlockStatement).body;\n    if (statements.length === 1) {\n      const statement = statements[0];\n      if (isRemovableReturn(statement)) {\n        context.report({ node: arrowFunction.body, message: MESSAGE_REMOVE_BODY });\n      }\n    }\n  }\n}\n\nfunction isRemovableReturn(statement: estree.Statement) {\n  if (statement.type === 'ReturnStatement') {\n    const returnStatement = statement;\n    const returnExpression = returnStatement.argument;\n    if (returnExpression && returnExpression.type !== 'ObjectExpression') {\n      const location = returnExpression.loc;\n      return location && location.start.line === location.end.line;\n    }\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule, SourceCode } from 'eslint';\nimport * as estree from 'estree';\nimport { Chai, childrenOf, isFunctionCall, Mocha, resolveFunction } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    const testCases: Mocha.TestCase[] = [];\n    return {\n      'CallExpression:exit': (node: estree.Node) => {\n        const testCase = Mocha.extractTestCase(node);\n        if (testCase !== null) {\n          testCases.push(testCase);\n        }\n      },\n      'Program:exit': () => {\n        if (Chai.isImported(context)) {\n          testCases.forEach(testCase => checkAssertions(testCase, context));\n        }\n      },\n    };\n  },\n};\n\nfunction checkAssertions(testCase: Mocha.TestCase, context: Rule.RuleContext) {\n  const { node, callback } = testCase;\n  const visitor = new TestCaseAssertionVisitor(context);\n  visitor.visit(callback.body);\n  if (visitor.missingAssertions()) {\n    context.report({ node, message: 'Add at least one assertion to this test case.' });\n  }\n}\n\nclass TestCaseAssertionVisitor {\n  private readonly visitorKeys: SourceCode.VisitorKeys;\n  private hasAssertions: boolean;\n\n  constructor(private readonly context: Rule.RuleContext) {\n    this.visitorKeys = context.getSourceCode().visitorKeys;\n    this.hasAssertions = false;\n  }\n\n  visit(node: estree.Node) {\n    if (this.hasAssertions) {\n      return;\n    }\n    if (Chai.isAssertion(node)) {\n      this.hasAssertions = true;\n      return;\n    }\n    if (isFunctionCall(node)) {\n      const functionDef = resolveFunction(this.context, node.callee);\n      if (functionDef) {\n        this.visit(functionDef.body);\n      }\n    }\n    for (const child of childrenOf(node, this.visitorKeys)) {\n      this.visit(child);\n    }\n  }\n\n  missingAssertions() {\n    return !this.hasAssertions;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1529\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { getTypeFromTreeNode } from '../utils';\n\nconst BITWISE_AND_OR = ['&', '|'];\nconst BITWISE_OPERATORS = [\n  '&',\n  '|',\n  '^',\n  '~',\n  '<<',\n  '>>',\n  '>>>',\n  '&=',\n  '|=',\n  '^=',\n  '<<=',\n  '>>=',\n  '>>>=',\n];\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    const isNumeric = getNumericTypeChecker(context);\n    let lonelyBitwiseAndOr: null | estree.BinaryExpression = null;\n    let lonelyBitwiseAndOrAncestors: estree.Node[] = [];\n    let fileContainsSeveralBitwiseOperations = false;\n    return {\n      BinaryExpression(node: estree.Node) {\n        const expression = node as estree.BinaryExpression;\n        if (\n          !lonelyBitwiseAndOr &&\n          BITWISE_AND_OR.includes(expression.operator) &&\n          !isNumeric(expression.left) &&\n          !isNumeric(expression.right)\n        ) {\n          lonelyBitwiseAndOr = expression;\n          lonelyBitwiseAndOrAncestors = [...context.getAncestors()];\n        } else if (BITWISE_OPERATORS.includes(expression.operator)) {\n          fileContainsSeveralBitwiseOperations = true;\n        }\n      },\n      'Program:exit': function () {\n        if (\n          !fileContainsSeveralBitwiseOperations &&\n          lonelyBitwiseAndOr &&\n          insideCondition(lonelyBitwiseAndOr, lonelyBitwiseAndOrAncestors)\n        ) {\n          const op = lonelyBitwiseAndOr.operator;\n          const operatorToken = context.getSourceCode().getTokenAfter(lonelyBitwiseAndOr.left);\n          if (operatorToken) {\n            context.report({\n              loc: operatorToken.loc,\n              message: `Review this use of bitwise \"${op}\" operator; conditional \"${op}${op}\" might have been intended.`,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction insideCondition(node: estree.Node, ancestors: estree.Node[]) {\n  let child = node;\n  for (let i = ancestors.length - 1; i >= 0; i--) {\n    const parent = ancestors[i];\n    if (\n      parent.type === 'IfStatement' ||\n      parent.type === 'ForStatement' ||\n      parent.type === 'WhileStatement' ||\n      parent.type === 'DoWhileStatement' ||\n      parent.type === 'ConditionalExpression'\n    ) {\n      return parent.test === child;\n    }\n    child = parent;\n  }\n  return false;\n}\n\ntype NumericTypeChecker = (node: estree.Node) => boolean;\n\nfunction getNumericTypeChecker(context: Rule.RuleContext): NumericTypeChecker {\n  const services = context.parserServices;\n  if (!!services && !!services.program && !!services.esTreeNodeToTSNodeMap) {\n    return (node: estree.Node) => isNumericType(getTypeFromTreeNode(node, services));\n  } else {\n    const numericTypes = ['number', 'bigint'];\n    return (node: estree.Node) =>\n      node.type === 'Literal' ? numericTypes.includes(typeof node.value) : false;\n  }\n\n  function isNumericType(type: ts.Type): boolean {\n    return (\n      (type.getFlags() & (ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike)) !== 0 ||\n      (type.isUnionOrIntersection() && !!type.types.find(isNumericType))\n    );\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4798\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\ntype FunctionLike =\n  | TSESTree.FunctionDeclaration\n  | TSESTree.FunctionExpression\n  | TSESTree.ArrowFunctionExpression;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      provideDefault:\n        \"Provide a default value for '{{parameter}}' so that \" +\n        'the logic of the function is more evident when this parameter is missing. ' +\n        'Consider defining another function if providing default value is not possible.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'FunctionDeclaration, FunctionExpression, ArrowFunctionExpression': (node: estree.Node) => {\n        const functionLike = node as FunctionLike;\n        for (const param of functionLike.params) {\n          if (param.type === 'Identifier' && isOptionalBoolean(param)) {\n            context.report({\n              messageId: 'provideDefault',\n              data: {\n                parameter: param.name,\n              },\n              node: param as estree.Node,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction isOptionalBoolean(node: TSESTree.Identifier): boolean {\n  return usesQuestionOptionalSyntax(node) || usesUnionUndefinedOptionalSyntax(node);\n}\n\n/**\n * Matches \"param?: boolean\"\n */\nfunction usesQuestionOptionalSyntax(node: TSESTree.Identifier): boolean {\n  return (\n    !!node.optional &&\n    !!node.typeAnnotation &&\n    node.typeAnnotation.typeAnnotation.type === 'TSBooleanKeyword'\n  );\n}\n\n/**\n * Matches \"boolean | undefined\"\n */\nfunction usesUnionUndefinedOptionalSyntax(node: TSESTree.Identifier): boolean {\n  if (!!node.typeAnnotation && node.typeAnnotation.typeAnnotation.type === 'TSUnionType') {\n    const types = node.typeAnnotation.typeAnnotation.types;\n    return (\n      types.length === 2 &&\n      types.some(tp => tp.type === 'TSBooleanKeyword') &&\n      types.some(tp => tp.type === 'TSUndefinedKeyword')\n    );\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1472\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      moveArguments: 'Make those call arguments start on line {{line}}.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) => {\n        const call = node as estree.CallExpression;\n        if (call.callee.type !== 'CallExpression' && call.arguments.length === 1) {\n          const sourceCode = context.getSourceCode();\n          const parenthesis = sourceCode.getLastTokenBetween(\n            call.callee,\n            call.arguments[0],\n            token => token.type === 'Punctuator' && token.value === ')',\n          );\n          const calleeLastLine = (parenthesis ? parenthesis : sourceCode.getLastToken(call.callee))!\n            .loc.end.line;\n          const { start } = sourceCode.getTokenAfter(call.callee)!.loc;\n          if (calleeLastLine !== start.line) {\n            const { end } = sourceCode.getLastToken(call)!.loc;\n            if (end.line !== start.line) {\n              //If arguments span multiple lines, we only report the first one\n              reportIssue(start, calleeLastLine, context);\n            } else {\n              reportIssue({ start, end }, calleeLastLine, context);\n            }\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction reportIssue(\n  loc: { start: estree.Position; end: estree.Position } | estree.Position,\n  line: number,\n  context: Rule.RuleContext,\n) {\n  context.report({\n    messageId: 'moveArguments',\n    data: {\n      line: line.toString(),\n    },\n    loc,\n  });\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { toEncodedMessage } from '../utils';\nimport * as estree from 'estree';\nimport {\n  getModuleNameOfNode,\n  isModuleExports,\n  isMethodInvocation,\n  flattenArgs,\n  getParent,\n} from '../utils';\n\n/**\n * This modules provides utilities for writing rules about Express.js.\n */\nexport namespace Express {\n  const EXPRESS = 'express';\n\n  /**\n   * Checks whether the declaration looks somewhat like `<id> = express()`\n   * and returns `<id>` if it matches.\n   */\n  export function attemptFindAppInstantiation(\n    varDecl: estree.VariableDeclarator,\n    context: Rule.RuleContext,\n  ): estree.Identifier | undefined {\n    const rhs = varDecl.init;\n    if (rhs && rhs.type === 'CallExpression') {\n      const { callee } = rhs as estree.CallExpression;\n      if (getModuleNameOfNode(context, callee)?.value === EXPRESS) {\n        const pattern = varDecl.id;\n        return pattern.type === 'Identifier' ? pattern : undefined;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks whether the function injects an instantiated app and is exported like `module.exports = function(app) {}`\n   * or `module.exports.property = function(app) {}`, and returns app if it matches.\n   */\n  export function attemptFindAppInjection(\n    functionDef: estree.Function,\n    context: Rule.RuleContext,\n  ): estree.Identifier | undefined {\n    const app = functionDef.params.find(\n      param => param.type === 'Identifier' && param.name === 'app',\n    ) as estree.Identifier | undefined;\n    if (app) {\n      const parent = getParent(context);\n      if (parent?.type === 'AssignmentExpression') {\n        const { left } = parent;\n        if (\n          left.type === 'MemberExpression' &&\n          (isModuleExports(left) || isModuleExports(left.object))\n        ) {\n          return app;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks whether the expression looks somewhat like `app.use(m1, [m2, m3], ..., mN)`,\n   * where one of `mK`-nodes satisfies the given predicate.\n   */\n  export function isUsingMiddleware(\n    context: Rule.RuleContext,\n    callExpression: estree.CallExpression,\n    app: estree.Identifier,\n    middlewareNodePredicate: (n: estree.Node) => boolean,\n  ): boolean {\n    if (isMethodInvocation(callExpression, app.name, 'use', 1)) {\n      const flattenedArgs = flattenArgs(context, callExpression.arguments);\n      return Boolean(flattenedArgs.find(middlewareNodePredicate));\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether a node looks somewhat like `require('m')()` for\n   * some middleware `m` from the list of middlewares.\n   */\n  export function isMiddlewareInstance(\n    context: Rule.RuleContext,\n    middlewares: string[],\n    n: estree.Node,\n  ): boolean {\n    if (n.type === 'CallExpression') {\n      const usedMiddleware = getModuleNameOfNode(context, n.callee)?.value;\n      if (usedMiddleware) {\n        return middlewares.includes(String(usedMiddleware));\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Rule factory for detecting sensitive settings that are passed to\n   * middlewares eventually used by Express.js applications:\n   *\n   * app.use(\n   *   middleware(settings)\n   * )\n   *\n   * or\n   *\n   * app.use(\n   *   middleware.method(settings)\n   * )\n   *\n   * @param sensitivePropertyFinder - a function looking for a sensitive setting on a middleware call\n   * @param message - the reported message when an issue is raised\n   * @returns a rule module that raises issues when a sensitive property is found\n   */\n  export function SensitiveMiddlewarePropertyRule(\n    sensitivePropertyFinder: (\n      context: Rule.RuleContext,\n      middlewareCall: estree.CallExpression,\n    ) => estree.Property[],\n    message: string,\n  ): Rule.RuleModule {\n    return {\n      meta: {\n        schema: [\n          {\n            // internal parameter for rules having secondary locations\n            enum: ['sonar-runtime'],\n          },\n        ],\n      },\n      create(context: Rule.RuleContext) {\n        let app: estree.Identifier | null;\n        let sensitiveProperties: estree.Property[];\n\n        function isExposing(middlewareNode: estree.Node): boolean {\n          return Boolean(sensitiveProperties.push(...findSensitiveProperty(middlewareNode)));\n        }\n\n        function findSensitiveProperty(middlewareNode: estree.Node): estree.Property[] {\n          if (middlewareNode.type === 'CallExpression') {\n            return sensitivePropertyFinder(context, middlewareNode);\n          }\n          return [];\n        }\n\n        return {\n          Program: () => {\n            app = null;\n            sensitiveProperties = [];\n          },\n          CallExpression: (node: estree.Node) => {\n            if (app) {\n              const callExpr = node as estree.CallExpression;\n              const isSafe = !isUsingMiddleware(context, callExpr, app, isExposing);\n              if (!isSafe) {\n                for (const sensitive of sensitiveProperties) {\n                  context.report({\n                    node: callExpr,\n                    message: toEncodedMessage(message, [sensitive as TSESTree.Property]),\n                  });\n                }\n                sensitiveProperties = [];\n              }\n            }\n          },\n          VariableDeclarator: (node: estree.Node) => {\n            if (!app) {\n              const varDecl = node as estree.VariableDeclarator;\n              const instantiatedApp = attemptFindAppInstantiation(varDecl, context);\n              if (instantiatedApp) {\n                app = instantiatedApp;\n              }\n            }\n          },\n          ':function': (node: estree.Node) => {\n            if (!app) {\n              const functionDef = node as estree.Function;\n              const injectedApp = attemptFindAppInjection(functionDef, context);\n              if (injectedApp) {\n                app = injectedApp;\n              }\n            }\n          },\n        };\n      },\n    };\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5742\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfNode, getPropertyWithValue } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst EXPECT_CERTIFICATE_TRANSPARENCY = 'expectCt';\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findFalseCertificateTransparencyPropertyFromHelmet,\n  `Make sure disabling Certificate Transparency monitoring is safe here.`,\n);\n\n/**\n * Looks for property `expectCt: false` in node looking\n * somewhat similar to `helmet(<options>?)`, and returns it.\n */\nfunction findFalseCertificateTransparencyPropertyFromHelmet(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  let sensitive: estree.Property | undefined;\n  const { callee, arguments: args } = node;\n  if (\n    callee.type === 'Identifier' &&\n    getModuleNameOfNode(context, callee)?.value === HELMET &&\n    args.length === 1 &&\n    args[0].type === 'ObjectExpression'\n  ) {\n    sensitive = getPropertyWithValue(context, args[0], EXPECT_CERTIFICATE_TRANSPARENCY, false);\n  }\n  return sensitive ? [sensitive] : [];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6092/javascript\n\nimport { Rule } from 'eslint';\nimport { Chai, isDotNotation, isIdentifier } from '../utils';\nimport * as estree from 'estree';\n\nconst message = 'Refactor this uncertain assertion; it can succeed for multiple reasons.';\n\ntype ChainElement = {\n  identifier: estree.Identifier;\n  arguments?: estree.Node[];\n};\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    if (!Chai.isImported(context)) {\n      return {};\n    }\n    return {\n      ExpressionStatement: (node: estree.ExpressionStatement) => {\n        const elements: ChainElement[] = retrieveAssertionChainElements(node.expression);\n\n        if (\n          elements.length > 1 &&\n          (isIdentifier(elements[0].identifier, 'expect') ||\n            getElementIndex(elements, 'should') >= 0)\n        ) {\n          checkNotThrow(context, elements);\n          checkNotInclude(context, elements);\n          checkNotHaveProperty(context, elements);\n          checkNotHaveOwnPropertyDescriptor(context, elements);\n          checkNotHaveMembers(context, elements);\n          checkChangeBy(context, elements);\n          checkNotIncDec(context, elements);\n          checkNotBy(context, elements);\n          checkNotFinite(context, elements);\n        }\n      },\n    };\n  },\n};\n\nfunction checkNotThrow(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'not', 'throw', args => !!args && args.length > 0);\n}\n\nfunction checkNotInclude(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(\n    context,\n    elements,\n    'not',\n    'include',\n    args => !!args && args.length > 0 && args[0].type === 'ObjectExpression',\n  );\n}\n\nfunction checkNotHaveProperty(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'not', 'property', args => !!args && args.length > 1);\n}\n\nfunction checkNotHaveOwnPropertyDescriptor(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(\n    context,\n    elements,\n    'not',\n    'ownPropertyDescriptor',\n    args => !!args && args.length > 1,\n  );\n}\n\nfunction checkNotHaveMembers(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'not', 'members');\n}\n\nfunction checkChangeBy(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'change', 'by');\n}\n\nfunction checkNotIncDec(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'not', 'increase');\n  checkWithCondition(context, elements, 'not', 'decrease');\n}\n\nfunction checkNotBy(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'not', 'by');\n}\n\nfunction checkNotFinite(context: Rule.RuleContext, elements: ChainElement[]) {\n  checkWithCondition(context, elements, 'not', 'finite');\n}\n\nfunction checkWithCondition(\n  context: Rule.RuleContext,\n  elements: ChainElement[],\n  first: string,\n  second: string,\n  condition: (args?: estree.Node[]) => boolean = () => true,\n) {\n  const firstIndex = getElementIndex(elements, first);\n  const firstElement = elements[firstIndex];\n\n  const secondIndex = getElementIndex(elements, second);\n  const secondElement = elements[secondIndex];\n\n  if (\n    firstElement &&\n    secondElement &&\n    neighborIndexes(firstIndex, secondIndex, elements) &&\n    condition(secondElement.arguments)\n  ) {\n    context.report({\n      message,\n      loc: locFromTwoNodes(firstElement.identifier, secondElement.identifier),\n    });\n  }\n}\n\n// first element is not applied to second if between them function call (e.g. fist.foo().second())\nfunction neighborIndexes(firstIndex: number, secondIndex: number, elements: ChainElement[]) {\n  if (firstIndex === secondIndex - 2) {\n    return !elements[firstIndex + 1].arguments;\n  }\n\n  return firstIndex === secondIndex - 1;\n}\n\nfunction retrieveAssertionChainElements(node: estree.Expression) {\n  let currentNode: estree.Node = node;\n  const result: ChainElement[] = [];\n  let currentArguments: estree.Node[] | undefined = undefined;\n\n  while (true) {\n    if (isDotNotation(currentNode)) {\n      result.push({ identifier: currentNode.property, arguments: currentArguments });\n      currentNode = currentNode.object;\n      currentArguments = undefined;\n    } else if (currentNode.type === 'CallExpression') {\n      currentArguments = currentNode.arguments;\n      currentNode = currentNode.callee;\n    } else if (isIdentifier(currentNode)) {\n      result.push({ identifier: currentNode, arguments: currentArguments });\n      break;\n    } else {\n      break;\n    }\n  }\n\n  return result.reverse();\n}\n\nfunction getElementIndex(elements: ChainElement[], name: string) {\n  return elements.findIndex(element => isIdentifier(element.identifier, name));\n}\n\nfunction locFromTwoNodes(start: estree.Node, end: estree.Node) {\n  return {\n    start: start.loc!.start,\n    end: end.loc!.end,\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-101\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\ntype ClassOrInterfaceDeclaration = TSESTree.ClassDeclaration | TSESTree.TSInterfaceDeclaration;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      renameClass: 'Rename {{symbolType}} \"{{symbol}}\" to match the regular expression {{format}}.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      ClassDeclaration: (node: estree.Node) =>\n        checkName(node as ClassOrInterfaceDeclaration, 'class', context),\n      TSInterfaceDeclaration: (node: estree.Node) =>\n        checkName(node as ClassOrInterfaceDeclaration, 'interface', context),\n    };\n  },\n};\n\nfunction checkName(\n  node: ClassOrInterfaceDeclaration,\n  declarationType: string,\n  context: Rule.RuleContext,\n) {\n  const [{ format }] = context.options;\n  if (node.id) {\n    const name = node.id.name;\n    if (!name.match(format)) {\n      context.report({\n        messageId: 'renameClass',\n        data: {\n          symbol: name,\n          symbolType: declarationType,\n          format,\n        },\n        node: node.id,\n      });\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3525\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { getTypeFromTreeNode, isRequiredParserServices, RequiredParserServices } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      declareClass:\n        'Declare a \"{{class}}\" class and move this declaration of \"{{declaration}}\" into it.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    const isFunction = isRequiredParserServices(services) ? isFunctionType : isFunctionLike;\n    return {\n      AssignmentExpression: (node: estree.Node) => {\n        const { left, right } = node as estree.AssignmentExpression;\n        if (left.type === 'MemberExpression' && isFunction(right, services)) {\n          const [member, prototype] = [left.object, left.property];\n          if (member.type === 'MemberExpression' && prototype.type === 'Identifier') {\n            const [klass, property] = [member.object, member.property];\n            if (\n              klass.type === 'Identifier' &&\n              property.type === 'Identifier' &&\n              property.name === 'prototype'\n            ) {\n              context.report({\n                messageId: 'declareClass',\n                data: {\n                  class: klass.name,\n                  declaration: prototype.name,\n                },\n                node: left,\n              });\n            }\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction isFunctionType(node: estree.Node, services: RequiredParserServices) {\n  const type = getTypeFromTreeNode(node, services);\n  return type.symbol && (type.symbol.flags & ts.SymbolFlags.Function) !== 0;\n}\n\nfunction isFunctionLike(node: estree.Node, _services: RequiredParserServices) {\n  return ['FunctionDeclaration', 'FunctionExpression', 'ArrowFunctionExpression'].includes(\n    node.type,\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1523\n// SQ key 'eval'\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeCode: 'Make sure that this dynamic injection or execution of code is safe.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) =>\n        checkCallExpression(node as estree.CallExpression, context),\n      NewExpression: (node: estree.Node) =>\n        checkCallExpression(node as estree.CallExpression, context),\n    };\n  },\n};\n\nfunction checkCallExpression(node: estree.CallExpression, context: Rule.RuleContext) {\n  if (node.callee.type === 'Identifier') {\n    const { name } = node.callee;\n    if ((name === 'eval' || name === 'Function') && hasAtLeastOneVariableArgument(node.arguments)) {\n      context.report({\n        messageId: 'safeCode',\n        node: node.callee,\n      });\n    }\n  }\n}\n\nfunction hasAtLeastOneVariableArgument(args: Array<estree.Node>) {\n  return !!args.find(arg => !isLiteral(arg));\n}\n\nfunction isLiteral(node: estree.Node) {\n  if (node.type === 'Literal') {\n    return true;\n  }\n\n  if (node.type === 'TemplateLiteral') {\n    return node.expressions.length === 0;\n  }\n\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3616\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      specifyCase: `Explicitly specify {{nesting}} separate cases that fall through; currently this case clause only works for \"{{expression}}\".`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function reportIssue(node: estree.Node, clause: estree.Node, nestingLvl: number) {\n      context.report({\n        messageId: 'specifyCase',\n        data: {\n          nesting: nestingLvl.toString(),\n          expression: String(getTextFromNode(clause)),\n        },\n        node,\n      });\n    }\n\n    function getTextFromNode(node: estree.Node) {\n      if (node.type === 'Literal') {\n        return node.value;\n      } else {\n        return context.getSourceCode().getText(node);\n      }\n    }\n\n    return {\n      'SwitchCase > SequenceExpression': function (node: estree.Node) {\n        const expressions = (node as estree.SequenceExpression).expressions;\n        reportIssue(node, expressions[expressions.length - 1], expressions.length);\n      },\n      'SwitchCase > LogicalExpression': function (node: estree.Node) {\n        const firstElemAndNesting = getFirstElementAndNestingLevel(\n          node as estree.LogicalExpression,\n          0,\n        );\n        if (firstElemAndNesting) {\n          reportIssue(node, firstElemAndNesting[0], firstElemAndNesting[1] + 1);\n        }\n      },\n    };\n  },\n};\n\nfunction getFirstElementAndNestingLevel(\n  logicalExpression: estree.LogicalExpression,\n  currentLvl: number,\n): [estree.Node, number] | undefined {\n  if (logicalExpression.operator === '||') {\n    if (logicalExpression.left.type === 'LogicalExpression') {\n      return getFirstElementAndNestingLevel(logicalExpression.left, currentLvl + 1);\n    } else {\n      return [logicalExpression.left, currentLvl + 1];\n    }\n  }\n  return undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-124\n\nimport { Rule } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          regularExpression: {\n            type: 'string',\n          },\n          message: {\n            type: 'string',\n          },\n          flags: {\n            type: 'string',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const options = context.options[0] || {};\n    const flags = options.flags || '';\n    const cleanedFlags = 'gimusy'\n      .split('')\n      .filter(c => flags.includes(c))\n      .join('');\n    const pattern = options.regularExpression\n      ? new RegExp(options.regularExpression, cleanedFlags)\n      : undefined;\n    const message = options.message || 'The regular expression matches this comment.';\n\n    return {\n      'Program:exit': () => {\n        (context.getSourceCode().getAllComments() as TSESTree.Comment[]).forEach(comment => {\n          const rawTextTrimmed = comment.value.trim();\n          if (pattern && pattern.test(rawTextTrimmed)) {\n            context.report({\n              message,\n              loc: comment.loc,\n            });\n          }\n        });\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6353\n\nimport { Rule } from 'eslint';\nimport { CharacterClass, Flags, Quantifier, RegExpLiteral } from 'regexpp/ast';\nimport { createRegExpRule, RegexRuleContext } from './regex-rule-template';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  let flags: Flags;\n  return {\n    onRegExpLiteralEnter: (node: RegExpLiteral) => {\n      ({ flags } = node);\n    },\n    onCharacterClassEnter: (node: CharacterClass) => {\n      checkBulkyAnyCharacterClass(node, flags, context);\n      checkBulkyNumericCharacterClass(node, context);\n      checkBulkyAlphaNumericCharacterClass(node, context);\n    },\n    onQuantifierEnter: (node: Quantifier) => {\n      checkBulkyQuantifier(node, context);\n    },\n  };\n});\n\nfunction checkBulkyAnyCharacterClass(\n  node: CharacterClass,\n  flags: Flags,\n  context: RegexRuleContext,\n) {\n  if (node.negate || node.elements.length !== 2) {\n    return;\n  }\n  let hasLowerEscapeW = false;\n  let hasUpperEscapeW = false;\n  let hasLowerEscapeD = false;\n  let hasUpperEscapeD = false;\n  let hasLowerEscapeS = false;\n  let hasUpperEscapeS = false;\n  node.elements.forEach(element => {\n    hasLowerEscapeW ||=\n      element.type === 'CharacterSet' && element.kind === 'word' && !element.negate;\n    hasUpperEscapeW ||=\n      element.type === 'CharacterSet' && element.kind === 'word' && element.negate;\n    hasLowerEscapeD ||=\n      element.type === 'CharacterSet' && element.kind === 'digit' && !element.negate;\n    hasUpperEscapeD ||=\n      element.type === 'CharacterSet' && element.kind === 'digit' && element.negate;\n    hasLowerEscapeS ||=\n      element.type === 'CharacterSet' && element.kind === 'space' && !element.negate;\n    hasUpperEscapeS ||=\n      element.type === 'CharacterSet' && element.kind === 'space' && element.negate;\n  });\n  const isBulkyAnyCharacterClass =\n    (hasLowerEscapeW && hasUpperEscapeW) ||\n    (hasLowerEscapeD && hasUpperEscapeD) ||\n    (hasLowerEscapeS && hasUpperEscapeS && flags.dotAll);\n  if (isBulkyAnyCharacterClass) {\n    context.reportRegExpNode({\n      message: `Use concise character class syntax '.' instead of '${node.raw}'.`,\n      node: context.node,\n      regexpNode: node,\n    });\n  }\n}\n\nfunction checkBulkyNumericCharacterClass(node: CharacterClass, context: RegexRuleContext) {\n  if (node.elements.length === 1) {\n    const [element] = node.elements;\n    const hasDigit = element.type === 'CharacterClassRange' && element.raw === '0-9';\n    if (hasDigit) {\n      const expected = node.negate ? '\\\\D' : '\\\\d';\n      const actual = node.raw;\n      context.reportRegExpNode({\n        message: `Use concise character class syntax '${expected}' instead of '${actual}'.`,\n        node: context.node,\n        regexpNode: node,\n      });\n    }\n  }\n}\n\nfunction checkBulkyAlphaNumericCharacterClass(node: CharacterClass, context: RegexRuleContext) {\n  if (node.elements.length === 4) {\n    let hasDigit = false,\n      hasLowerCase = false,\n      hasUpperCase = false,\n      hasUnderscore = false;\n    for (const element of node.elements) {\n      hasDigit ||= element.type === 'CharacterClassRange' && element.raw === '0-9';\n      hasLowerCase ||= element.type === 'CharacterClassRange' && element.raw === 'a-z';\n      hasUpperCase ||= element.type === 'CharacterClassRange' && element.raw === 'A-Z';\n      hasUnderscore ||= element.type === 'Character' && element.raw === '_';\n    }\n    if (hasDigit && hasLowerCase && hasUpperCase && hasUnderscore) {\n      const expected = node.negate ? '\\\\W' : '\\\\w';\n      const actual = node.raw;\n      context.reportRegExpNode({\n        message: `Use concise character class syntax '${expected}' instead of '${actual}'.`,\n        node: context.node,\n        regexpNode: node,\n      });\n    }\n  }\n}\n\nfunction checkBulkyQuantifier(node: Quantifier, context: RegexRuleContext) {\n  const { raw } = node;\n  let bulkyQuantifier: { concise: string; verbose: string } | undefined;\n  if (/\\{0,1\\}\\??$/.test(raw)) {\n    bulkyQuantifier = { concise: '?', verbose: '{0,1}' };\n  } else if (/\\{0,\\}\\??$/.test(raw)) {\n    bulkyQuantifier = { concise: '*', verbose: '{0,}' };\n  } else if (/\\{1,\\}\\??$/.test(raw)) {\n    bulkyQuantifier = { concise: '+', verbose: '{1,}' };\n  } else if (/\\{(\\d+),\\1\\}\\??$/.test(raw)) {\n    bulkyQuantifier = { concise: `{${node.min}}`, verbose: `{${node.min},${node.min}}` };\n  }\n  if (bulkyQuantifier) {\n    context.reportRegExpNode({\n      message: `Use concise quantifier syntax '${bulkyQuantifier.concise}' instead of '${bulkyQuantifier.verbose}'.`,\n      node: context.node,\n      regexpNode: node,\n    });\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3973\n\nimport { Rule, AST, SourceCode } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\nimport { getParent, LoopLike } from '../utils';\nimport { TSESLint } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const sourceCode = context.getSourceCode();\n    return {\n      IfStatement: (node: estree.Node) => {\n        const ifStatement = node as estree.IfStatement;\n        const parent = getParent(context);\n        if (parent && parent.type !== 'IfStatement') {\n          const firstToken = sourceCode.getFirstToken(node);\n          checkIndentation(firstToken, ifStatement.consequent, context);\n        }\n\n        if (ifStatement.alternate) {\n          const elseToken = sourceCode.getTokenBefore(\n            ifStatement.alternate,\n            token => token.type === 'Keyword' && token.value === 'else',\n          );\n          const alternate = ifStatement.alternate;\n          if (alternate.type === 'IfStatement') {\n            //case with \"else if\", we have to check the consequent of the next if\n            checkIndentation(elseToken, alternate.consequent, context);\n          } else {\n            checkIndentation(\n              getPrecedingBrace(elseToken, sourceCode) || elseToken,\n              alternate,\n              context,\n              elseToken,\n            );\n          }\n        }\n      },\n      'WhileStatement, ForStatement, ForInStatement, ForOfStatement': (node: estree.Node) => {\n        const firstToken = sourceCode.getFirstToken(node);\n        checkIndentation(firstToken, (node as LoopLike).body, context);\n      },\n    };\n  },\n};\n\nfunction checkIndentation(\n  firstToken: AST.Token | null,\n  statement: estree.Statement,\n  context: Rule.RuleContext,\n  tokenToReport = firstToken,\n) {\n  if (firstToken && tokenToReport && statement.type !== 'BlockStatement') {\n    const firstStatementToken = context.getSourceCode().getFirstToken(statement);\n    if (\n      firstStatementToken &&\n      firstToken.loc.start.column >= firstStatementToken.loc.start.column\n    ) {\n      const message =\n        `Use curly braces or indentation to denote the code conditionally ` +\n        `executed by this \"${tokenToReport.value}\".`;\n      context.report({\n        message: toEncodedMessage(message, [firstStatementToken as TSESLint.AST.Token]),\n        loc: tokenToReport.loc,\n      });\n    }\n  }\n}\n\nfunction getPrecedingBrace(elseToken: AST.Token | null, sourceCode: SourceCode) {\n  if (elseToken) {\n    const tokenBeforeElse = sourceCode.getTokenBefore(elseToken);\n    if (\n      tokenBeforeElse?.value === '}' &&\n      tokenBeforeElse.loc.start.line === elseToken.loc.start.line\n    ) {\n      return tokenBeforeElse;\n    }\n  }\n  return undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5757\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\nimport {\n  isIdentifier,\n  getModuleNameOfNode,\n  getValueOfExpression,\n  getObjectExpressionProperty,\n} from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nconst MESSAGE = 'Make sure confidential information is not logged here.';\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      NewExpression: (node: estree.Node) => {\n        const newExpression = node as estree.NewExpression;\n        const { callee } = newExpression;\n        let isSignaleCall = false;\n        if (callee.type !== 'MemberExpression') {\n          isSignaleCall =\n            getModuleNameOfNode(context, callee)?.value === 'signale' &&\n            isIdentifier(callee, 'Signale');\n        } else {\n          isSignaleCall =\n            getModuleNameOfNode(context, callee.object)?.value === 'signale' &&\n            isIdentifier(callee.property, 'Signale');\n        }\n        if (!isSignaleCall) {\n          return;\n        }\n        if (newExpression.arguments.length === 0) {\n          context.report({ node: callee, message: toEncodedMessage(MESSAGE, []) });\n          return;\n        }\n        const firstArgument = getValueOfExpression(\n          context,\n          newExpression.arguments[0],\n          'ObjectExpression',\n        );\n        if (!firstArgument) {\n          // Argument exists but its value is unknown\n          return;\n        }\n        const secrets = getObjectExpressionProperty(firstArgument, 'secrets');\n        if (\n          secrets &&\n          secrets.value.type === 'ArrayExpression' &&\n          secrets.value.elements.length === 0\n        ) {\n          context.report({\n            node: callee,\n            message: toEncodedMessage(MESSAGE, [secrets as TSESTree.Node]),\n          });\n        } else if (!secrets) {\n          context.report({\n            node: callee,\n            message: toEncodedMessage(MESSAGE, [firstArgument as TSESTree.Node]),\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1848\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isTestCode } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeInstantiationOf:\n        'Either remove this useless object instantiation of \"{{constructor}}\" or use it.',\n      removeInstantiation: 'Either remove this useless object instantiation or use it.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const sourceCode = context.getSourceCode();\n    return {\n      'ExpressionStatement > NewExpression': (node: estree.Node) => {\n        if (isTestCode(context) || isTryable(node, context)) {\n          return;\n        }\n        const callee = (node as estree.NewExpression).callee;\n        if (callee.type === 'Identifier' || callee.type === 'MemberExpression') {\n          const calleeText = sourceCode.getText(callee);\n          const reportLocation = {\n            start: node.loc!.start,\n            end: callee.loc!.end,\n          };\n          reportIssue(reportLocation, `${calleeText}`, 'removeInstantiationOf', context);\n        } else {\n          const newToken = sourceCode.getFirstToken(node);\n          reportIssue(newToken!.loc, '', 'removeInstantiation', context);\n        }\n      },\n    };\n  },\n};\n\nfunction isTryable(node: estree.Node, context: Rule.RuleContext) {\n  const ancestors = context.getAncestors();\n  let parent = undefined;\n  let child = node;\n  while ((parent = ancestors.pop()) !== undefined) {\n    if (parent.type === 'TryStatement' && parent.block === child) {\n      return true;\n    }\n    child = parent;\n  }\n  return false;\n}\n\nfunction reportIssue(\n  loc: { start: estree.Position; end: estree.Position },\n  objectText: string,\n  messageId: string,\n  context: Rule.RuleContext,\n) {\n  context.report({\n    messageId,\n    data: {\n      constructor: objectText,\n    },\n    loc,\n  });\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2598\n\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule, Scope } from 'eslint';\nimport { toEncodedMessage } from '../utils';\nimport * as estree from 'estree';\nimport {\n  getModuleNameOfImportedIdentifier,\n  getModuleNameOfIdentifier,\n  getLhsVariable,\n  getValueOfExpression,\n  getObjectExpressionProperty,\n  getVariableFromName,\n} from '../utils';\n\nconst FORMIDABLE_MODULE = 'formidable';\nconst KEEP_EXTENSIONS = 'keepExtensions';\nconst UPLOAD_DIR = 'uploadDir';\n\nconst MULTER_MODULE = 'multer';\nconst STORAGE_OPTION = 'storage';\nconst DESTINATION_OPTION = 'destination';\n\nconst formidableObjects: Map<\n  Scope.Variable,\n  { uploadDirSet: boolean; keepExtensions: boolean; callExpression: estree.CallExpression }\n> = new Map();\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      NewExpression(node: estree.Node) {\n        checkCallExpression(context, node as estree.NewExpression);\n      },\n      CallExpression(node: estree.Node) {\n        checkCallExpression(context, node as estree.CallExpression);\n      },\n      AssignmentExpression(node: estree.Node) {\n        visitAssignment(context, node as estree.AssignmentExpression);\n      },\n      Program() {\n        formidableObjects.clear();\n      },\n      'Program:exit'() {\n        formidableObjects.forEach(value =>\n          report(context, value.uploadDirSet, value.keepExtensions, value.callExpression),\n        );\n      },\n    };\n  },\n};\n\nfunction checkCallExpression(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  const { callee } = callExpression;\n\n  if (callee.type !== 'Identifier') {\n    return;\n  }\n\n  const moduleName =\n    getModuleNameOfImportedIdentifier(context, callee) ||\n    getModuleNameOfIdentifier(context, callee);\n\n  if (moduleName?.value === FORMIDABLE_MODULE) {\n    checkFormidable(context, callExpression);\n  }\n\n  if (moduleName?.value === MULTER_MODULE) {\n    checkMulter(context, callExpression);\n  }\n}\n\nfunction checkFormidable(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  if (callExpression.arguments.length === 0) {\n    const formVariable = getLhsVariable(context);\n    if (formVariable) {\n      formidableObjects.set(formVariable, {\n        uploadDirSet: false,\n        keepExtensions: false,\n        callExpression,\n      });\n    }\n    return;\n  }\n\n  const options = getValueOfExpression(context, callExpression.arguments[0], 'ObjectExpression');\n  if (options) {\n    report(\n      context,\n      !!getObjectExpressionProperty(options, UPLOAD_DIR),\n      keepExtensionsValue(getObjectExpressionProperty(options, KEEP_EXTENSIONS)?.value),\n      callExpression,\n    );\n  }\n}\n\nfunction checkMulter(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  if (callExpression.arguments.length === 0) {\n    return;\n  }\n  const multerOptions = getValueOfExpression(\n    context,\n    callExpression.arguments[0],\n    'ObjectExpression',\n  );\n\n  if (!multerOptions) {\n    return;\n  }\n\n  const storagePropertyValue = getObjectExpressionProperty(multerOptions, STORAGE_OPTION)?.value;\n  if (storagePropertyValue) {\n    const storageValue = getValueOfExpression(context, storagePropertyValue, 'CallExpression');\n\n    if (storageValue) {\n      const diskStorageCallee = getDiskStorageCalleeIfUnsafeStorage(context, storageValue);\n      if (diskStorageCallee) {\n        report(context, false, false, callExpression, {\n          node: diskStorageCallee,\n          message: 'no destination specified',\n        });\n      }\n    }\n  }\n}\n\nfunction getDiskStorageCalleeIfUnsafeStorage(\n  context: Rule.RuleContext,\n  storageCreation: estree.CallExpression,\n) {\n  const { arguments: args, callee } = storageCreation;\n  if (args.length > 0 && isMemberWithProperty(callee, 'diskStorage')) {\n    const storageOptions = getValueOfExpression(context, args[0], 'ObjectExpression');\n    if (storageOptions && !getObjectExpressionProperty(storageOptions, DESTINATION_OPTION)) {\n      return callee;\n    }\n  }\n\n  return false;\n}\n\nfunction isMemberWithProperty(expr: estree.Node, property: string) {\n  return (\n    expr.type === 'MemberExpression' &&\n    expr.property.type === 'Identifier' &&\n    expr.property.name === property\n  );\n}\n\nfunction keepExtensionsValue(extensionValue?: estree.Node): boolean {\n  if (\n    extensionValue &&\n    extensionValue.type === 'Literal' &&\n    typeof extensionValue.value === 'boolean'\n  ) {\n    return extensionValue.value;\n  }\n\n  return false;\n}\n\nfunction visitAssignment(context: Rule.RuleContext, assignment: estree.AssignmentExpression) {\n  const variableProperty = getVariablePropertyFromAssignment(context, assignment);\n  if (!variableProperty) {\n    return;\n  }\n\n  const { objectVariable, property } = variableProperty;\n\n  if (formidableObjects.has(objectVariable)) {\n    const formOptions = formidableObjects.get(objectVariable)!;\n    if (property === UPLOAD_DIR) {\n      formOptions.uploadDirSet = true;\n    }\n\n    if (property === KEEP_EXTENSIONS) {\n      formOptions.keepExtensions = keepExtensionsValue(assignment.right);\n    }\n  }\n}\n\n/**\n * for `x.foo = 42` returns 'x' variable and 'foo' property string\n */\nexport function getVariablePropertyFromAssignment(\n  context: Rule.RuleContext,\n  assignment: estree.AssignmentExpression,\n): { objectVariable: Scope.Variable; property: string } | undefined {\n  if (assignment.left.type !== 'MemberExpression') {\n    return undefined;\n  }\n\n  const memberExpr = assignment.left;\n  if (memberExpr.object.type === 'Identifier' && memberExpr.property.type === 'Identifier') {\n    const objectVariable = getVariableFromName(context, memberExpr.object.name);\n    if (objectVariable) {\n      return { objectVariable, property: memberExpr.property.name };\n    }\n  }\n\n  return undefined;\n}\n\nfunction report(\n  context: Rule.RuleContext,\n  uploadDirSet: boolean,\n  keepExtensions: boolean,\n  callExpression: estree.CallExpression,\n  secondaryLocation?: { node: estree.Node; message: string },\n) {\n  let message;\n\n  if (keepExtensions && uploadDirSet) {\n    message = 'Restrict the extension of uploaded files.';\n  } else if (!keepExtensions && !uploadDirSet) {\n    message = 'Restrict folder destination of uploaded files.';\n  } else if (keepExtensions && !uploadDirSet) {\n    message = 'Restrict the extension and folder destination of uploaded files.';\n  }\n\n  if (message) {\n    if (secondaryLocation) {\n      message = toEncodedMessage(\n        message,\n        [secondaryLocation.node as TSESTree.Node],\n        [secondaryLocation.message],\n      );\n    } else {\n      message = toEncodedMessage(message, []);\n    }\n\n    context.report({\n      message,\n      node: callExpression.callee,\n    });\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5693\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { getVariablePropertyFromAssignment } from './file-uploads';\nimport { parse } from 'bytes';\nimport {\n  getModuleNameOfImportedIdentifier,\n  getModuleNameOfIdentifier,\n  getLhsVariable,\n  getValueOfExpression,\n  getObjectExpressionProperty,\n} from '../utils';\n\nconst FORMIDABLE_MODULE = 'formidable';\nconst MAX_FILE_SIZE = 'maxFileSize';\nconst FORMIDABLE_DEFAULT_SIZE = 200 * 1024 * 1024;\n\nconst MULTER_MODULE = 'multer';\nconst LIMITS_OPTION = 'limits';\nconst FILE_SIZE_OPTION = 'fileSize';\n\nconst BODY_PARSER_MODULE = 'body-parser';\nconst BODY_PARSER_DEFAULT_SIZE = parse('100kb');\n\nconst formidableObjects: Map<Scope.Variable, { maxFileSize: number; nodeToReport: estree.Node }> =\n  new Map();\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeLimit: 'Make sure the content length limit is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      NewExpression(node: estree.Node) {\n        checkCallExpression(context, node as estree.NewExpression);\n      },\n      CallExpression(node: estree.Node) {\n        checkCallExpression(context, node as estree.CallExpression);\n      },\n      AssignmentExpression(node: estree.Node) {\n        visitAssignment(context, node as estree.AssignmentExpression);\n      },\n      Program() {\n        formidableObjects.clear();\n      },\n      'Program:exit'() {\n        formidableObjects.forEach(value => report(context, value.nodeToReport, value.maxFileSize));\n      },\n    };\n  },\n};\n\nfunction checkCallExpression(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  const { callee } = callExpression;\n  let identifierFromModule: estree.Identifier;\n  if (callee.type === 'MemberExpression' && callee.object.type === 'Identifier') {\n    identifierFromModule = callee.object;\n  } else if (callee.type === 'Identifier') {\n    identifierFromModule = callee;\n  } else {\n    return;\n  }\n\n  const moduleName =\n    getModuleNameOfImportedIdentifier(context, identifierFromModule) ||\n    getModuleNameOfIdentifier(context, identifierFromModule);\n\n  if (!moduleName) {\n    return;\n  }\n\n  if (moduleName.value === FORMIDABLE_MODULE) {\n    checkFormidable(context, callExpression);\n  }\n\n  if (moduleName.value === MULTER_MODULE) {\n    checkMulter(context, callExpression);\n  }\n\n  if (moduleName.value === BODY_PARSER_MODULE) {\n    checkBodyParser(context, callExpression);\n  }\n}\n\nfunction checkFormidable(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  if (callExpression.arguments.length === 0) {\n    // options will be set later through member assignment\n    const formVariable = getLhsVariable(context);\n    if (formVariable) {\n      formidableObjects.set(formVariable, {\n        maxFileSize: FORMIDABLE_DEFAULT_SIZE,\n        nodeToReport: callExpression,\n      });\n    }\n    return;\n  }\n\n  const options = getValueOfExpression(context, callExpression.arguments[0], 'ObjectExpression');\n  if (options) {\n    const property = getObjectExpressionProperty(options, MAX_FILE_SIZE);\n    checkSize(context, callExpression, property, FORMIDABLE_DEFAULT_SIZE);\n  }\n}\n\nfunction checkMulter(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  if (callExpression.arguments.length === 0) {\n    report(context, callExpression.callee);\n    return;\n  }\n  const multerOptions = getValueOfExpression(\n    context,\n    callExpression.arguments[0],\n    'ObjectExpression',\n  );\n\n  if (!multerOptions) {\n    return;\n  }\n\n  const limitsPropertyValue = getObjectExpressionProperty(multerOptions, LIMITS_OPTION)?.value;\n  if (limitsPropertyValue && limitsPropertyValue.type === 'ObjectExpression') {\n    const fileSizeProperty = getObjectExpressionProperty(limitsPropertyValue, FILE_SIZE_OPTION);\n    checkSize(context, callExpression, fileSizeProperty);\n  }\n\n  if (!limitsPropertyValue) {\n    report(context, callExpression.callee);\n  }\n}\n\nfunction checkBodyParser(context: Rule.RuleContext, callExpression: estree.CallExpression) {\n  if (callExpression.arguments.length === 0) {\n    checkSize(context, callExpression, undefined, BODY_PARSER_DEFAULT_SIZE, true);\n    return;\n  }\n  const options = getValueOfExpression(context, callExpression.arguments[0], 'ObjectExpression');\n\n  if (!options) {\n    return;\n  }\n\n  const limitsProperty = getObjectExpressionProperty(options, LIMITS_OPTION);\n  checkSize(context, callExpression, limitsProperty, BODY_PARSER_DEFAULT_SIZE, true);\n}\n\nfunction checkSize(\n  context: Rule.RuleContext,\n  callExpr: estree.CallExpression,\n  property?: estree.Property,\n  defaultLimit?: number,\n  useStandardSizeLimit = false,\n) {\n  if (property) {\n    const maxFileSizeValue = getSizeValue(context, property.value);\n    if (maxFileSizeValue) {\n      report(context, property, maxFileSizeValue, useStandardSizeLimit);\n    }\n  } else {\n    report(context, callExpr, defaultLimit, useStandardSizeLimit);\n  }\n}\n\nfunction visitAssignment(context: Rule.RuleContext, assignment: estree.AssignmentExpression) {\n  const variableProperty = getVariablePropertyFromAssignment(context, assignment);\n  if (!variableProperty) {\n    return;\n  }\n\n  const { objectVariable, property } = variableProperty;\n\n  if (formidableObjects.has(objectVariable) && property === MAX_FILE_SIZE) {\n    const formOptions = formidableObjects.get(objectVariable)!;\n    const rhsValue = getSizeValue(context, assignment.right);\n    if (rhsValue !== undefined) {\n      formOptions.maxFileSize = rhsValue;\n      formOptions.nodeToReport = assignment;\n    } else {\n      formidableObjects.delete(objectVariable);\n    }\n  }\n}\n\nfunction getSizeValue(context: Rule.RuleContext, node: estree.Node): number | undefined {\n  const literal = getValueOfExpression(context, node, 'Literal');\n  if (literal) {\n    if (typeof literal.value === 'number') {\n      return literal.value;\n    } else if (typeof literal.value === 'string') {\n      return parse(literal.value);\n    }\n  }\n  return undefined;\n}\n\nfunction report(\n  context: Rule.RuleContext,\n  nodeToReport: estree.Node,\n  size?: number,\n  useStandardSizeLimit = false,\n) {\n  const [fileUploadSizeLimit, standardSizeLimit] = context.options;\n  const limitToCompare = useStandardSizeLimit ? standardSizeLimit : fileUploadSizeLimit;\n  if (!size || size > limitToCompare) {\n    context.report({\n      messageId: 'safeLimit',\n      node: nodeToReport,\n    });\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5728\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfNode, getPropertyWithValue } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst CONTENT_SECURITY_POLICY = 'contentSecurityPolicy';\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findFalseContentSecurityPolicyPropertyFromHelmet,\n  `Make sure not enabling content security policy fetch directives is safe here.`,\n);\n\n/**\n * Looks for property `contentSecurityPolicy: false` in node looking\n * somewhat similar to `helmet(<options>?)`, and returns it.\n */\nfunction findFalseContentSecurityPolicyPropertyFromHelmet(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  let sensitive: estree.Property | undefined;\n  const { callee, arguments: args } = node;\n  if (\n    callee.type === 'Identifier' &&\n    getModuleNameOfNode(context, callee)?.value === HELMET &&\n    args.length === 1 &&\n    args[0].type === 'ObjectExpression'\n  ) {\n    sensitive = getPropertyWithValue(context, args[0], CONTENT_SECURITY_POLICY, false);\n  }\n  return sensitive ? [sensitive] : [];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { toEncodedMessage } from '../utils';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  getValueOfExpression,\n  getObjectExpressionProperty,\n  getModuleNameOfNode,\n} from '../utils';\n\nexport class CookieFlagCheck {\n  issueMessage: string;\n\n  constructor(readonly context: Rule.RuleContext, readonly flag: 'httpOnly' | 'secure') {\n    this.issueMessage = `Make sure creating this cookie without the \"${flag}\" flag is safe.`;\n  }\n\n  private checkCookieSession(callExpression: estree.CallExpression) {\n    // Sensitive argument for cookie session is first one\n    this.checkSensitiveCookieArgument(callExpression, 0);\n  }\n\n  private checkCookiesMethodCall(callExpression: estree.CallExpression) {\n    if (!isIdentifier((callExpression.callee as estree.MemberExpression).property, 'set')) {\n      return;\n    }\n    // Sensitive argument is third argument for \"cookies.set\" calls\n    this.checkSensitiveCookieArgument(callExpression, 2);\n  }\n\n  private checkCsurf(callExpression: estree.CallExpression) {\n    // Sensitive argument is first for csurf\n    const cookieProperty = this.checkSensitiveObjectArgument(callExpression, 0);\n    if (cookieProperty) {\n      // csurf cookie property can be passed as a boolean literal,\n      // in which case neither \"secure\" nor \"httponly\" are enabled by default\n      const cookiePropertyLiteral = getValueOfExpression(\n        this.context,\n        cookieProperty.value,\n        'Literal',\n      );\n      if (cookiePropertyLiteral?.value === true) {\n        this.context.report({\n          node: callExpression.callee,\n          message: toEncodedMessage(this.issueMessage, [cookiePropertyLiteral as TSESTree.Node]),\n        });\n      }\n    }\n  }\n\n  private checkExpressSession(callExpression: estree.CallExpression) {\n    // Sensitive argument is first for express-session\n    this.checkSensitiveObjectArgument(callExpression, 0);\n  }\n\n  private checkSensitiveCookieArgument(\n    callExpression: estree.CallExpression,\n    sensitiveArgumentIndex: number,\n  ) {\n    if (callExpression.arguments.length < sensitiveArgumentIndex + 1) {\n      return;\n    }\n    const sensitiveArgument = callExpression.arguments[sensitiveArgumentIndex];\n    const cookieObjectExpression = getValueOfExpression(\n      this.context,\n      sensitiveArgument,\n      'ObjectExpression',\n    );\n    if (!cookieObjectExpression) {\n      return;\n    }\n    this.checkFlagOnCookieExpression(\n      cookieObjectExpression,\n      sensitiveArgument,\n      cookieObjectExpression,\n      callExpression,\n    );\n  }\n\n  private checkSensitiveObjectArgument(\n    callExpression: estree.CallExpression,\n    argumentIndex: number,\n  ): estree.Property | undefined {\n    if (callExpression.arguments.length < argumentIndex + 1) {\n      return;\n    }\n    const firstArgument = callExpression.arguments[argumentIndex];\n    const objectExpression = getValueOfExpression(this.context, firstArgument, 'ObjectExpression');\n    if (!objectExpression) {\n      return;\n    }\n    const cookieProperty = getObjectExpressionProperty(objectExpression, 'cookie');\n    if (!cookieProperty) {\n      return;\n    }\n    const cookiePropertyValue = getValueOfExpression(\n      this.context,\n      cookieProperty.value,\n      'ObjectExpression',\n    );\n    if (cookiePropertyValue) {\n      this.checkFlagOnCookieExpression(\n        cookiePropertyValue,\n        firstArgument,\n        objectExpression,\n        callExpression,\n      );\n      return;\n    }\n    return cookieProperty;\n  }\n\n  private checkFlagOnCookieExpression(\n    cookiePropertyValue: estree.ObjectExpression,\n    firstArgument: estree.Node,\n    objectExpression: estree.ObjectExpression,\n    callExpression: estree.CallExpression,\n  ) {\n    const flagProperty = getObjectExpressionProperty(cookiePropertyValue, this.flag);\n    if (flagProperty) {\n      const flagPropertyValue = getValueOfExpression(this.context, flagProperty.value, 'Literal');\n      if (flagPropertyValue?.value === false) {\n        const secondaryLocations: estree.Node[] = [flagPropertyValue];\n        if (firstArgument !== objectExpression) {\n          secondaryLocations.push(objectExpression);\n        }\n        this.context.report({\n          node: callExpression.callee,\n          message: toEncodedMessage(this.issueMessage, secondaryLocations as TSESTree.Node[]),\n        });\n      }\n    }\n  }\n\n  public checkCookiesFromCallExpression(node: estree.Node) {\n    const callExpression = node as estree.CallExpression;\n    const { callee } = callExpression;\n    const moduleName = getModuleNameOfNode(this.context, callee);\n    if (moduleName?.value === 'cookie-session') {\n      this.checkCookieSession(callExpression);\n      return;\n    }\n    if (moduleName?.value === 'csurf') {\n      this.checkCsurf(callExpression);\n      return;\n    }\n    if (moduleName?.value === 'express-session') {\n      this.checkExpressSession(callExpression);\n      return;\n    }\n    if (callee.type === 'MemberExpression') {\n      const objectValue = getValueOfExpression(this.context, callee.object, 'NewExpression');\n      if (objectValue) {\n        const module = getModuleNameOfNode(this.context, objectValue.callee);\n        if (module?.value === 'cookies') {\n          this.checkCookiesMethodCall(callExpression);\n        }\n      }\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { CookieFlagCheck } from './cookie-flag-check';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) =>\n        new CookieFlagCheck(context, 'httpOnly').checkCookiesFromCallExpression(node),\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2255\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeCookie: 'Make sure that cookie is written safely here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let usingExpressFramework = false;\n\n    return {\n      Program() {\n        // init flag for each file\n        usingExpressFramework = false;\n      },\n\n      Literal(node: estree.Node) {\n        if ((node as estree.Literal).value === 'express') {\n          usingExpressFramework = true;\n        }\n      },\n\n      AssignmentExpression(node: estree.Node) {\n        const { left } = node as estree.AssignmentExpression;\n        if (left.type === 'MemberExpression') {\n          const { object, property } = left;\n          if (isIdentifier(object, 'document') && isIdentifier(property, 'cookie')) {\n            context.report({\n              messageId: 'safeCookie',\n              node: left,\n            });\n          }\n        }\n      },\n\n      CallExpression(node: estree.Node) {\n        const { callee, arguments: args } = node as estree.CallExpression;\n        if (\n          callee.type === 'MemberExpression' &&\n          usingExpressFramework &&\n          isIdentifier(callee.property, 'cookie', 'cookies')\n        ) {\n          context.report({\n            messageId: 'safeCookie',\n            node,\n          });\n        }\n\n        if (\n          callee.type === 'MemberExpression' &&\n          isIdentifier(callee.property, 'setHeader') &&\n          isLiteral(args[0], 'Set-Cookie')\n        ) {\n          context.report({\n            messageId: 'safeCookie',\n            node: callee,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isLiteral(node: estree.Node | undefined, value: string) {\n  return node && node.type === 'Literal' && node.value === value;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5122\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\nimport { getModuleNameOfNode, getUniqueWriteUsage, getObjectExpressionProperty } from '../utils';\nimport { isLiteral } from 'eslint-plugin-sonarjs/lib/utils/nodes';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nconst MESSAGE = `Make sure that enabling CORS is safe here.`;\n\nconst CORS_HEADER = 'Access-Control-Allow-Origin';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    function report(node: estree.Node, ...secondaryLocations: estree.Node[]) {\n      const message = toEncodedMessage(MESSAGE, secondaryLocations as TSESTree.Node[]);\n      context.report({ message, node });\n    }\n\n    function isCorsCall(callee: estree.Node) {\n      return getModuleNameOfNode(context, callee)?.value === 'cors';\n    }\n\n    return {\n      CallExpression(node: estree.Node) {\n        const call = node as estree.CallExpression;\n        const { callee } = call;\n\n        if (isCorsCall(callee)) {\n          if (call.arguments.length === 0) {\n            report(call);\n            return;\n          }\n          const [arg] = call.arguments;\n          let sensitiveCorsProperty = getSensitiveCorsProperty(arg);\n          if (sensitiveCorsProperty) {\n            report(sensitiveCorsProperty);\n          }\n          if (arg?.type === 'Identifier') {\n            const usage = getUniqueWriteUsage(context, arg.name);\n            sensitiveCorsProperty = getSensitiveCorsProperty(usage);\n            if (sensitiveCorsProperty) {\n              report(sensitiveCorsProperty, arg);\n            }\n          }\n        }\n\n        if (isSettingCorsHeader(call)) {\n          report(call);\n        }\n      },\n\n      ObjectExpression(node: estree.Node) {\n        const objProperty = getObjectExpressionProperty(node, CORS_HEADER);\n        if (objProperty && isAnyDomain(objProperty.value)) {\n          report(objProperty);\n        }\n      },\n    };\n  },\n};\n\nfunction isCorsHeader(node: estree.Node) {\n  const header = node as TSESTree.Node;\n  return isLiteral(header) && header.value === CORS_HEADER;\n}\n\nfunction isAnyDomain(node: estree.Node) {\n  const domain = node as TSESTree.Node;\n  return isLiteral(domain) && domain.value === '*';\n}\n\nfunction getSensitiveCorsProperty(\n  node: estree.Node | undefined | null,\n): estree.Property | undefined {\n  const originProperty = getObjectExpressionProperty(node, 'origin');\n  if (originProperty && isAnyDomain(originProperty.value)) {\n    return originProperty;\n  }\n  return undefined;\n}\n\nfunction isSettingCorsHeader(call: estree.CallExpression) {\n  return isCorsHeader(call.arguments[0]) && isAnyDomain(call.arguments[1]);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4502\n\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { toEncodedMessage } from '../utils';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  isLiteral,\n  getUniqueWriteUsage,\n  getModuleNameOfIdentifier,\n  getModuleNameFromRequire,\n  getObjectExpressionProperty,\n  flattenArgs,\n} from '../utils';\n\nconst CSURF_MODULE = 'csurf';\nconst SAFE_METHODS = ['GET', 'HEAD', 'OPTIONS'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    let globalCsrfProtection = false;\n    let importedCsrfMiddleware = false;\n\n    function checkIgnoredMethods(node: estree.Property) {\n      if (node.value.type === 'ArrayExpression') {\n        const arrayExpr = node.value;\n        const unsafeMethods = arrayExpr.elements\n          .filter(isLiteral)\n          .filter(e => typeof e.value === 'string' && !SAFE_METHODS.includes(e.value));\n        if (unsafeMethods.length > 0) {\n          const [first, ...rest] = unsafeMethods;\n          context.report({\n            message: toEncodedMessage(\n              'Make sure disabling CSRF protection is safe here.',\n              rest as TSESTree.Node[],\n            ),\n            node: first,\n          });\n        }\n      }\n    }\n\n    function isCsurfMiddleware(node: estree.Node | undefined) {\n      if (node?.type === 'Identifier') {\n        node = getUniqueWriteUsage(context, node.name);\n      }\n\n      if (node && node.type === 'CallExpression' && node.callee.type === 'Identifier') {\n        const module = getModuleNameOfIdentifier(context, node.callee);\n        return module?.value === CSURF_MODULE;\n      }\n      return false;\n    }\n\n    function checkCallExpression(callExpression: estree.CallExpression) {\n      const { callee } = callExpression;\n\n      // require('csurf')\n      const requiredModule = getModuleNameFromRequire(callExpression);\n      if (requiredModule?.value === CSURF_MODULE) {\n        importedCsrfMiddleware = true;\n      }\n\n      // csurf(...)\n      if (callee.type === 'Identifier') {\n        const moduleName = getModuleNameOfIdentifier(context, callee);\n\n        if (moduleName?.value === CSURF_MODULE) {\n          const [args] = callExpression.arguments;\n          const ignoredMethods = getObjectExpressionProperty(args, 'ignoreMethods');\n          if (ignoredMethods) {\n            checkIgnoredMethods(ignoredMethods);\n          }\n        }\n      }\n\n      // app.use(csurf(...))\n      if (callee.type === 'MemberExpression') {\n        if (\n          isIdentifier(callee.property, 'use') &&\n          flattenArgs(context, callExpression.arguments).find(isCsurfMiddleware)\n        ) {\n          globalCsrfProtection = true;\n        }\n        if (\n          isIdentifier(callee.property, 'post', 'put', 'delete', 'patch') &&\n          !globalCsrfProtection &&\n          importedCsrfMiddleware &&\n          !callExpression.arguments.some(arg => isCsurfMiddleware(arg))\n        ) {\n          context.report({\n            message: toEncodedMessage('Make sure not using CSRF protection is safe here.', []),\n            node: callee,\n          });\n        }\n      }\n    }\n\n    return {\n      Program() {\n        globalCsrfProtection = false;\n      },\n      CallExpression(node: estree.Node) {\n        checkCallExpression(node as estree.CallExpression);\n      },\n      ImportDeclaration(node: estree.Node) {\n        if ((node as estree.ImportDeclaration).source.value === CSURF_MODULE) {\n          importedCsrfMiddleware = true;\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1541\n\nimport { Rule, AST } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  EncodedMessage,\n  IssueLocation,\n  getMainFunctionTokenLocation,\n} from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { FunctionNodeType, isFunctionNode, childrenOf, getParent, RuleContext } from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      { type: 'integer' },\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const [threshold] = context.options;\n    let functionsWithParent: Map<estree.Node, estree.Node | undefined>;\n    let functionsDefiningModule: estree.Node[];\n    let functionsImmediatelyInvoked: estree.Node[];\n    return {\n      Program: () => {\n        functionsWithParent = new Map<estree.Node, estree.Node>();\n        functionsDefiningModule = [];\n        functionsImmediatelyInvoked = [];\n      },\n      'Program:exit': () => {\n        functionsWithParent.forEach((parent, func) => {\n          if (\n            !functionsDefiningModule.includes(func) &&\n            !functionsImmediatelyInvoked.includes(func)\n          ) {\n            raiseOnUnauthorizedComplexity(func as FunctionNodeType, parent, threshold, context);\n          }\n        });\n      },\n      'FunctionDeclaration, FunctionExpression, ArrowFunctionExpression': (node: estree.Node) =>\n        functionsWithParent.set(node, getParent(context)),\n      \"CallExpression[callee.type='Identifier'][callee.name='define'] FunctionExpression\": (\n        node: estree.Node,\n      ) => functionsDefiningModule.push(node),\n      \"NewExpression[callee.type='FunctionExpression'], CallExpression[callee.type='FunctionExpression']\":\n        (node: estree.Node) =>\n          functionsImmediatelyInvoked.push((node as estree.NewExpression).callee),\n    };\n  },\n};\n\nfunction raiseOnUnauthorizedComplexity(\n  node: FunctionNodeType,\n  parent: estree.Node | undefined,\n  threshold: number,\n  context: Rule.RuleContext,\n): void {\n  const tokens = computeCyclomaticComplexity(node, parent, context);\n  const complexity = tokens.length;\n  if (complexity > threshold) {\n    context.report({\n      message: toEncodedMessage(complexity, threshold, tokens),\n      loc: getMainFunctionTokenLocation(\n        node as TSESTree.FunctionLike,\n        parent as TSESTree.Node,\n        context as unknown as RuleContext,\n      ),\n    });\n  }\n}\n\nfunction toEncodedMessage(\n  complexity: number,\n  threshold: number,\n  tokens: ComplexityToken[],\n): string {\n  const encodedMessage: EncodedMessage = {\n    message: `Function has a complexity of ${complexity} which is greater than ${threshold} authorized.`,\n    cost: complexity - threshold,\n    secondaryLocations: tokens.map(toSecondaryLocation),\n  };\n  return JSON.stringify(encodedMessage);\n}\n\nfunction toSecondaryLocation(token: ComplexityToken): IssueLocation {\n  return {\n    line: token.loc.start.line,\n    column: token.loc.start.column,\n    endLine: token.loc.end.line,\n    endColumn: token.loc.end.column,\n    message: '+1',\n  };\n}\n\nfunction computeCyclomaticComplexity(\n  node: estree.Node,\n  parent: estree.Node | undefined,\n  context: Rule.RuleContext,\n): ComplexityToken[] {\n  const visitor = new FunctionComplexityVisitor(node, parent, context);\n  visitor.visit();\n  return visitor.getComplexityTokens();\n}\n\ninterface ComplexityToken {\n  loc: AST.SourceLocation;\n}\n\nclass FunctionComplexityVisitor {\n  private readonly tokens: ComplexityToken[] = [];\n\n  constructor(\n    private readonly root: estree.Node,\n    private readonly parent: estree.Node | undefined,\n    private readonly context: Rule.RuleContext,\n  ) {}\n\n  visit() {\n    const visitNode = (node: estree.Node) => {\n      let token: ComplexityToken | undefined | null;\n\n      if (isFunctionNode(node)) {\n        if (node !== this.root) {\n          return;\n        } else {\n          token = {\n            loc: getMainFunctionTokenLocation(\n              node as TSESTree.FunctionLike,\n              this.parent as TSESTree.Node,\n              this.context as unknown as RuleContext,\n            ),\n          };\n        }\n      } else {\n        switch (node.type) {\n          case 'ConditionalExpression':\n            token = this.context\n              .getSourceCode()\n              .getFirstTokenBetween(node.test, node.consequent, token => token.value === '?');\n            break;\n          case 'SwitchCase':\n            // ignore default case\n            if (!node.test) {\n              break;\n            }\n          case 'IfStatement':\n          case 'ForStatement':\n          case 'ForInStatement':\n          case 'ForOfStatement':\n          case 'WhileStatement':\n          case 'DoWhileStatement':\n            token = this.context.getSourceCode().getFirstToken(node);\n            break;\n          case 'LogicalExpression':\n            token = this.context\n              .getSourceCode()\n              .getTokenAfter(\n                node.left,\n                token => ['||', '&&'].includes(token.value) && token.type === 'Punctuator',\n              );\n            break;\n        }\n      }\n\n      if (token) {\n        this.tokens.push(token);\n      }\n\n      childrenOf(node, this.context.getSourceCode().visitorKeys).forEach(visitNode);\n    };\n\n    visitNode(this.root);\n  }\n\n  getComplexityTokens() {\n    return this.tokens;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3798\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      defineLocally:\n        'Define this declaration in a local scope or bind explicitly the property to the global object.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      Program() {\n        const scope = context.getScope();\n        // As we parse every file with \"module\" source type, we find user defined global variables in the module scope\n        const moduleScope = findModuleScope(context);\n        moduleScope?.variables.forEach(variable => {\n          if (scope.variables.find(global => global.name === variable.name)) {\n            // Avoid reporting on redefinitions of actual global variables\n            return;\n          }\n          for (const def of variable.defs) {\n            const defNode = def.node;\n            if (\n              def.type === 'FunctionName' ||\n              (def.type === 'Variable' && def.parent?.kind === 'var' && !isRequire(def.node.init))\n            ) {\n              context.report({\n                node: defNode,\n                messageId: 'defineLocally',\n              });\n              return;\n            }\n          }\n        });\n      },\n    };\n  },\n};\n\nfunction findModuleScope(context: Rule.RuleContext) {\n  return context.getSourceCode().scopeManager.scopes.find(s => s.type === 'module');\n}\n\nfunction isRequire(node: estree.Node | null | undefined) {\n  return (\n    node?.type === 'CallExpression' &&\n    node.arguments.length === 1 &&\n    isIdentifier(node.callee, 'require')\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1874\n\nimport { Rule } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as estree from 'estree';\nimport { getParent, isRequiredParserServices, RequiredParserServices } from '../utils';\nimport * as ts from 'typescript';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      deprecation: \"'{{symbol}}' is deprecated. {{reason}}\",\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      Identifier: (node: estree.Node) => {\n        const parent = getParent(context);\n        if (isShortHandProperty(parent) && parent.key === node) {\n          // to not report twice\n          return;\n        }\n        if (isObjectExpressionProperty(node, context)) {\n          return;\n        }\n        const id = node as estree.Identifier;\n        const insideImportExport = context.getAncestors().some(anc => anc.type.includes('Import'));\n        if (insideImportExport || isDeclaration(id, context)) {\n          return;\n        }\n\n        const deprecation = getDeprecation(id, services, context);\n        if (deprecation) {\n          context.report({\n            node,\n            messageId: 'deprecation',\n            data: {\n              symbol: id.name,\n              reason: deprecation.reason,\n            },\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isDeclaration(id: estree.Identifier, context: Rule.RuleContext) {\n  const parent = getParent(context);\n  if (isShortHandProperty(parent) && parent.value === id) {\n    return false;\n  }\n\n  const variable = context.getScope().variables.find(v => v.name === id.name);\n  if (variable) {\n    return variable.defs.some(def => def.name === id);\n  }\n\n  const declarationTypes = [\n    'PropertyDefinition',\n    'TSPropertySignature',\n    'TSDeclareFunction',\n    'FunctionDeclaration',\n    'MethodDefinition',\n    'TSMethodSignature',\n  ];\n  return parent && declarationTypes.includes(parent.type);\n}\n\nfunction getDeprecation(\n  id: estree.Identifier,\n  services: RequiredParserServices,\n  context: Rule.RuleContext,\n): Deprecation | undefined {\n  const tc = services.program.getTypeChecker();\n  const callExpression = getCallExpression(context, id);\n\n  if (callExpression) {\n    const tsCallExpression = services.esTreeNodeToTSNodeMap.get(callExpression as TSESTree.Node);\n    const signature = tc.getResolvedSignature(tsCallExpression as ts.CallLikeExpression);\n    if (signature) {\n      const deprecation = getJsDocDeprecation(signature.getJsDocTags());\n      if (deprecation) {\n        return deprecation;\n      }\n    }\n  }\n  const symbol = getSymbol(id, services, context, tc);\n\n  if (!symbol) {\n    return undefined;\n  }\n  if (callExpression && isFunction(symbol)) {\n    return undefined;\n  }\n\n  return getJsDocDeprecation(symbol.getJsDocTags());\n}\n\nfunction getSymbol(\n  id: estree.Identifier,\n  services: RequiredParserServices,\n  context: Rule.RuleContext,\n  tc: ts.TypeChecker,\n) {\n  let symbol: ts.Symbol | undefined;\n  const tsId = services.esTreeNodeToTSNodeMap.get(id as TSESTree.Node) as ts.Identifier;\n  const parent = services.esTreeNodeToTSNodeMap.get(getParent(context) as TSESTree.Node) as ts.Node;\n  if (parent.kind === ts.SyntaxKind.BindingElement) {\n    symbol = tc.getTypeAtLocation(parent.parent).getProperty(tsId.text);\n  } else if (\n    (isPropertyAssignment(parent) && parent.name === tsId) ||\n    (isShorthandPropertyAssignment(parent) && parent.name === tsId)\n  ) {\n    try {\n      symbol = tc.getPropertySymbolOfDestructuringAssignment(tsId);\n    } catch (e) {\n      // do nothing, we are in object literal, not destructuring\n      // no obvious easy way to check that in advance\n    }\n  } else {\n    symbol = tc.getSymbolAtLocation(tsId);\n  }\n\n  if (symbol && (symbol.flags & ts.SymbolFlags.Alias) !== 0) {\n    return tc.getAliasedSymbol(symbol);\n  }\n  return symbol;\n}\n\nfunction getCallExpression(\n  context: Rule.RuleContext,\n  id: estree.Node,\n): estree.CallExpression | estree.TaggedTemplateExpression | undefined {\n  const ancestors = context.getAncestors();\n  let callee = id;\n  let parent = ancestors.length > 0 ? ancestors[ancestors.length - 1] : undefined;\n\n  if (parent && parent.type === 'MemberExpression' && parent.property === id) {\n    callee = parent;\n    parent = ancestors.length > 1 ? ancestors[ancestors.length - 2] : undefined;\n  }\n\n  if (isCallExpression(parent, callee)) {\n    return parent;\n  }\n}\n\nfunction isCallExpression(\n  node: estree.Node | undefined,\n  callee: estree.Node,\n): node is estree.CallExpression | estree.TaggedTemplateExpression {\n  if (node) {\n    if (node.type === 'NewExpression' || node.type === 'CallExpression') {\n      return node.callee === callee;\n    } else if (node.type === 'TaggedTemplateExpression') {\n      return node.tag === callee;\n    }\n  }\n  return false;\n}\n\nfunction getJsDocDeprecation(tags: ts.JSDocTagInfo[]): Deprecation | undefined {\n  for (const tag of tags) {\n    if (tag.name === 'deprecated') {\n      return tag.text ? { reason: tag.text.map(e => e.text).join(' ') } : new Deprecation();\n    }\n  }\n  return undefined;\n}\n\nfunction isFunction(symbol: ts.Symbol) {\n  const { declarations } = symbol;\n  if (declarations === undefined || declarations.length === 0) {\n    return false;\n  }\n  switch (declarations[0].kind) {\n    case ts.SyntaxKind.MethodDeclaration:\n    case ts.SyntaxKind.FunctionDeclaration:\n    case ts.SyntaxKind.FunctionExpression:\n    case ts.SyntaxKind.MethodSignature:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isPropertyAssignment(node: ts.Node): node is ts.PropertyAssignment {\n  return node.kind === ts.SyntaxKind.PropertyAssignment;\n}\n\nfunction isShorthandPropertyAssignment(node: ts.Node): node is ts.ShorthandPropertyAssignment {\n  return node.kind === ts.SyntaxKind.ShorthandPropertyAssignment;\n}\n\nfunction isShortHandProperty(parent: estree.Node | undefined): parent is estree.Property {\n  return !!parent && parent.type === 'Property' && parent.shorthand;\n}\n\nfunction isObjectExpressionProperty(node: estree.Node, context: Rule.RuleContext) {\n  const ancestors = context.getAncestors();\n  const parent = ancestors.pop();\n  const grandparent = ancestors.pop();\n  return (\n    parent?.type === 'Property' &&\n    !parent.computed &&\n    !parent.shorthand &&\n    parent.key === node &&\n    grandparent?.type === 'ObjectExpression'\n  );\n}\n\nclass Deprecation {\n  reason = '';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3514\n\nimport { Rule } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as estree from 'estree';\nimport { findFirstMatchingAncestor, toEncodedMessage } from '../utils';\n\nconst MAX_INDEX = 4;\nconst isAllowedIndex = (idx: number) => idx >= 0 && idx <= MAX_INDEX;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    function visitStatements(statements: Array<estree.Statement | estree.ModuleDeclaration>) {\n      const declarationsByObject: Map<string, estree.VariableDeclarator[]> = new Map();\n\n      for (const statement of statements) {\n        if (statement.type === 'VariableDeclaration') {\n          visitDeclarations(declarationsByObject, statement.declarations);\n        } else {\n          checkDeclarationsBlock(declarationsByObject);\n          declarationsByObject.clear();\n        }\n      }\n      checkDeclarationsBlock(declarationsByObject);\n    }\n\n    function visitDeclarations(\n      declarationsByObject: Map<string, estree.VariableDeclarator[]>,\n      declarations: Array<estree.VariableDeclarator>,\n    ) {\n      for (const declaration of declarations) {\n        const id = declaration.id;\n        if (declaration.init && id.type === 'Identifier') {\n          const varName = id.name;\n          const expression = declaration.init;\n          if (expression.type !== 'MemberExpression') {\n            continue;\n          }\n          const property = expression.property;\n          if (property.type === 'Identifier' && property.name === varName) {\n            addDeclaration(declarationsByObject, expression.object, declaration);\n          } else if (\n            property.type === 'Literal' &&\n            typeof property.value === 'number' &&\n            isAllowedIndex(property.value)\n          ) {\n            addDeclaration(declarationsByObject, expression.object, declaration);\n          }\n        }\n      }\n    }\n\n    function addDeclaration(\n      declarationsByObject: Map<string, estree.VariableDeclarator[]>,\n      object: estree.Node,\n      declaration: estree.VariableDeclarator,\n    ) {\n      const key = context.getSourceCode().getText(object);\n      const value = declarationsByObject.get(key);\n      if (value) {\n        value.push(declaration);\n      } else {\n        declarationsByObject.set(key, [declaration]);\n      }\n    }\n\n    function checkDeclarationsBlock(\n      declarationsByObject: Map<string, estree.VariableDeclarator[]>,\n    ) {\n      declarationsByObject.forEach((declarations: estree.VariableDeclarator[], key: string) => {\n        if (declarations.length > 1) {\n          const firstKind = getKind(declarations[0]);\n          const tail = declarations.slice(1);\n          if (tail.every(decl => getKind(decl) === firstKind)) {\n            context.report({\n              node: declarations[0],\n              message: toEncodedMessage(\n                `Use destructuring syntax for these assignments from \"${key}\".`,\n                tail as TSESTree.Node[],\n                Array(tail.length).fill('Replace this assignment.'),\n              ),\n            });\n          }\n        }\n      });\n    }\n\n    return {\n      BlockStatement: (node: estree.Node) => {\n        visitStatements((node as estree.BlockStatement).body);\n      },\n      SwitchCase: (node: estree.Node) => {\n        visitStatements((node as estree.SwitchCase).consequent);\n      },\n      Program: (node: estree.Node) => {\n        visitStatements((node as estree.Program).body);\n      },\n    };\n  },\n};\n\nfunction getKind(declarator: estree.VariableDeclarator) {\n  const declaration = findFirstMatchingAncestor(\n    declarator as TSESTree.Node,\n    n => n.type === 'VariableDeclaration',\n  ) as estree.VariableDeclaration | undefined;\n  return declaration && declaration.kind;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3403\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { isRequiredParserServices, getTypeFromTreeNode, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    function isSameSymbol(s: ts.Type, t: ts.Type) {\n      return s.symbol && t.symbol && s.symbol.name === t.symbol.name;\n    }\n\n    function isSubType(s: ts.Type, t: ts.Type): boolean {\n      return (\n        (s.flags & t.flags) !== 0 ||\n        (t.isUnionOrIntersection() && t.types.some(tp => isSubType(s, tp)))\n      );\n    }\n\n    function isAny(type: ts.Type) {\n      return type.flags === ts.TypeFlags.Any;\n    }\n\n    function isUndefinedOrNull(type: ts.Type) {\n      return type.flags === ts.TypeFlags.Null || type.flags === ts.TypeFlags.Undefined;\n    }\n\n    function isThis(node: estree.Node) {\n      return node.type === 'ThisExpression';\n    }\n\n    function haveDissimilarTypes(lhs: estree.Node, rhs: estree.Node) {\n      const { getBaseTypeOfLiteralType } = services.program.getTypeChecker();\n      const lhsType = getBaseTypeOfLiteralType(getTypeFromTreeNode(lhs, services));\n      const rhsType = getBaseTypeOfLiteralType(getTypeFromTreeNode(rhs, services));\n      return (\n        !isSameSymbol(lhsType, rhsType) &&\n        !isSubType(lhsType, rhsType) &&\n        !isSubType(rhsType, lhsType) &&\n        !isAny(lhsType) &&\n        !isAny(rhsType) &&\n        !isUndefinedOrNull(lhsType) &&\n        !isUndefinedOrNull(rhsType) &&\n        !isThis(lhs) &&\n        !isThis(rhs)\n      );\n    }\n\n    return {\n      BinaryExpression: (node: estree.Node) => {\n        const { left, operator, right } = node as estree.BinaryExpression;\n        if (['===', '!=='].includes(operator) && haveDissimilarTypes(left, right)) {\n          const [actual, expected, outcome] =\n            operator === '===' ? ['===', '==', 'false'] : ['!==', '!=', 'true'];\n          const operatorToken = context\n            .getSourceCode()\n            .getTokensBetween(left, right)\n            .find(token => token.type === 'Punctuator' && token.value === operator)!;\n          context.report({\n            message: toEncodedMessage(\n              `Remove this \"${actual}\" check; it will always be ${outcome}. Did you mean to use \"${expected}\"?`,\n              [left, right],\n            ),\n            loc: operatorToken.loc,\n            suggest: [\n              {\n                desc: `Replace \"${actual}\" with \"${expected}\"`,\n                fix: fixer => fixer.replaceText(operatorToken, expected),\n              },\n            ],\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5247\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  getValueOfExpression,\n  isRequiredParserServices,\n  resolveFromFunctionReference,\n  isCallToFQN,\n  checkSensitiveCall,\n  getModuleNameOfNode,\n} from '../utils';\n\nconst MESSAGE = 'Make sure disabling auto-escaping feature is safe here.';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n\n    function isEmptySanitizerFunction(\n      sanitizerFunction:\n        | estree.FunctionExpression\n        | estree.FunctionDeclaration\n        | estree.ArrowFunctionExpression,\n    ) {\n      if (sanitizerFunction.params.length !== 1) {\n        return false;\n      }\n      const firstParam = sanitizerFunction.params[0];\n      if (firstParam.type !== 'Identifier') {\n        return false;\n      }\n      const firstParamName = firstParam.name;\n      if (sanitizerFunction.body.type !== 'BlockStatement') {\n        return (\n          sanitizerFunction.body.type === 'Identifier' &&\n          sanitizerFunction.body.name === firstParamName\n        );\n      }\n      const { body } = sanitizerFunction.body;\n      if (body.length !== 1) {\n        return false;\n      }\n      const onlyStatement = body[0];\n      if (\n        onlyStatement.type === 'ReturnStatement' &&\n        onlyStatement.argument &&\n        isIdentifier(onlyStatement.argument, firstParamName)\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    function isInvalidSanitizerFunction(node: estree.Node) {\n      type AssignedFunction =\n        | estree.FunctionDeclaration\n        | estree.FunctionExpression\n        | estree.ArrowFunctionExpression\n        | undefined\n        | null;\n      let assignedFunction: AssignedFunction =\n        getValueOfExpression(context, node, 'FunctionExpression') ??\n        getValueOfExpression(context, node, 'ArrowFunctionExpression');\n      if (!assignedFunction && node.type === 'Identifier' && isRequiredParserServices(services)) {\n        assignedFunction = resolveFromFunctionReference(context, node);\n      }\n      if (!!assignedFunction) {\n        return isEmptySanitizerFunction(assignedFunction);\n      }\n      return false;\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (isCallToFQN(context, callExpression, 'handlebars', 'compile')) {\n          checkSensitiveCall(context, callExpression, 1, 'noEscape', true, MESSAGE);\n        }\n        if (isCallToFQN(context, callExpression, 'marked', 'setOptions')) {\n          checkSensitiveCall(context, callExpression, 0, 'sanitize', false, MESSAGE);\n        }\n        const calleeModule = getModuleNameOfNode(context, callExpression.callee);\n        if (calleeModule?.value === 'markdown-it') {\n          checkSensitiveCall(context, callExpression, 0, 'html', true, MESSAGE);\n        }\n      },\n      NewExpression: (node: estree.Node) => {\n        const newExpression = node as estree.NewExpression;\n        const { callee } = newExpression;\n        if (callee.type !== 'MemberExpression') {\n          return;\n        }\n        const module = getModuleNameOfNode(context, callee.object);\n        if (module?.value === 'kramed' && isIdentifier(callee.property, 'Renderer')) {\n          checkSensitiveCall(context, newExpression, 0, 'sanitize', false, MESSAGE);\n        }\n      },\n      AssignmentExpression: (node: estree.Node) => {\n        const assignmentExpression = node as estree.AssignmentExpression;\n        const { left, right } = assignmentExpression;\n        if (left.type !== 'MemberExpression') {\n          return;\n        }\n        const module = getModuleNameOfNode(context, left.object);\n        if (module?.value !== 'mustache' || !isIdentifier(left.property, 'escape')) {\n          return;\n        }\n        if (isInvalidSanitizerFunction(right)) {\n          context.report({ node: left, message: MESSAGE });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5725\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Variable } from 'eslint-scope';\nimport { isIdentifier, isRequiredParserServices, getTypeAsString } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeResource: 'Make sure not using resource integrity feature is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    function shouldReport(assignedVariable: Variable) {\n      let nbSrcAssignment = 0;\n      let hasUnsafeSrcAssignment = false;\n      let hasIntegrityAssignment = false;\n      assignedVariable.references.forEach(ref => {\n        const parentNode = (ref.identifier as TSESTree.Node).parent;\n        if (!parentNode) {\n          return;\n        }\n        nbSrcAssignment += isSrcAssignment(parentNode) ? 1 : 0;\n        hasUnsafeSrcAssignment = hasUnsafeSrcAssignment || isUnsafeSrcAssignment(parentNode);\n        hasIntegrityAssignment = hasIntegrityAssignment || isIntegrityAssignment(parentNode);\n      });\n      return nbSrcAssignment === 1 && hasUnsafeSrcAssignment && !hasIntegrityAssignment;\n    }\n\n    function isIntegrityAssignment(memberExpression: TSESTree.Node): boolean {\n      if (memberExpression.type !== 'MemberExpression') {\n        return false;\n      }\n      return (\n        memberExpression.property.type === 'Identifier' &&\n        memberExpression.property.name === 'integrity'\n      );\n    }\n\n    function isSrcAssignment(memberExpression: TSESTree.Node): boolean {\n      if (memberExpression.type !== 'MemberExpression') {\n        return false;\n      }\n      if (\n        memberExpression.property.type !== 'Identifier' ||\n        memberExpression.property.name !== 'src'\n      ) {\n        return false;\n      }\n      const assignmentExpression = memberExpression.parent;\n      if (assignmentExpression?.type !== 'AssignmentExpression') {\n        return false;\n      }\n      return true;\n    }\n\n    function isUnsafeSrcAssignment(memberExpression: TSESTree.Node): boolean {\n      if (!isSrcAssignment(memberExpression)) {\n        return false;\n      }\n      const right = (memberExpression.parent as estree.AssignmentExpression).right;\n      if (right.type !== 'Literal') {\n        return false;\n      }\n      return !!right.raw && (!!right.raw.match('^\"http') || !!right.raw.match('^\"//'));\n    }\n\n    return {\n      'VariableDeclarator[init.type=\"CallExpression\"]': (node: estree.Node) => {\n        const variableDeclarator = node as estree.VariableDeclarator;\n        const callExpression = variableDeclarator.init as estree.CallExpression;\n        const left = variableDeclarator.id;\n        const { callee } = callExpression;\n        if (left.type !== 'Identifier') {\n          return;\n        }\n        if (callee.type !== 'MemberExpression') {\n          return;\n        }\n        const typeName = getTypeAsString(left, services);\n        if (\n          !isIdentifier(callee.object, 'document') ||\n          !isIdentifier(callee.property, 'createElement') ||\n          typeName !== 'HTMLScriptElement'\n        ) {\n          return;\n        }\n        const scope = context.getScope();\n        const assignedVariable = scope.variables.find(v => v.name === left.name);\n        if (!assignedVariable) {\n          return;\n        }\n        if (shouldReport(assignedVariable)) {\n          context.report({\n            node: variableDeclarator,\n            messageId: 'safeResource',\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6080\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  Chai,\n  getUniqueWriteUsageOrNode,\n  isIdentifier,\n  isMethodCall,\n  isNumberLiteral,\n  isThisExpression,\n  Mocha,\n} from '../utils';\n\nconst MESSAGE =\n  'Set this timeout to 0 if you want to disable it, otherwise use a value lower than 2147483648.';\nconst MAX_DELAY_VALUE = 2_147_483_647;\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    if (!Chai.isImported(context)) {\n      return {};\n    }\n    const constructs: estree.Node[] = [];\n    return {\n      CallExpression: (node: estree.Node) => {\n        if (Mocha.isTestConstruct(node)) {\n          constructs.push(node);\n          return;\n        }\n        if (constructs.length > 0) {\n          checkTimeoutDisabling(node as estree.CallExpression, context);\n        }\n      },\n      'CallExpression:exit': (node: estree.Node) => {\n        if (Mocha.isTestConstruct(node)) {\n          constructs.pop();\n        }\n      },\n    };\n  },\n};\n\nfunction checkTimeoutDisabling(node: estree.CallExpression, context: Rule.RuleContext) {\n  if (isMethodCall(node) && node.arguments.length > 0) {\n    const {\n      callee: { object, property },\n      arguments: [value],\n    } = node;\n    if (\n      isThisExpression(object) &&\n      isIdentifier(property, 'timeout') &&\n      isDisablingTimeout(value, context)\n    ) {\n      context.report({\n        message: MESSAGE,\n        node: value,\n      });\n    }\n  }\n}\n\nfunction isDisablingTimeout(timeout: estree.Node, context: Rule.RuleContext) {\n  const usage = getUniqueWriteUsageOrNode(context, timeout);\n  return isNumberLiteral(usage) && usage.value > MAX_DELAY_VALUE;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5743\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { checkSensitiveCall, isCallToFQN, getModuleNameOfNode } from '../utils';\n\nconst MESSAGE = 'Make sure allowing browsers to perform DNS prefetching is safe here.';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        const { callee } = callExpression;\n        if (isCallToFQN(context, callExpression, 'helmet', 'dnsPrefetchControl')) {\n          checkSensitiveCall(context, callExpression, 0, 'allow', true, MESSAGE);\n        }\n        const calledModule = getModuleNameOfNode(context, callee);\n        if (calledModule?.value === 'helmet') {\n          checkSensitiveCall(context, callExpression, 0, 'dnsPrefetchControl', false, MESSAGE);\n        }\n        if (calledModule?.value === 'dns-prefetch-control') {\n          checkSensitiveCall(context, callExpression, 0, 'allow', true, MESSAGE);\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5869\n\nimport { Rule } from 'eslint';\nimport { CharacterClass, Flags, Node, RegExpLiteral } from 'regexpp/ast';\nimport { getRegexpLocation, SimplifiedRegexCharacterClass, toEncodedMessage } from '../utils';\nimport { createRegExpRule } from './regex-rule-template';\n\nexport const rule: Rule.RuleModule = createRegExpRule(\n  context => {\n    let flags: Flags;\n    return {\n      onRegExpLiteralEnter: (node: RegExpLiteral) => {\n        flags = node.flags;\n      },\n      onCharacterClassEnter: (node: CharacterClass) => {\n        const duplicates = new Set<Node>();\n        const characterClass = new SimplifiedRegexCharacterClass(flags);\n        node.elements.forEach(element => {\n          const intersections = new SimplifiedRegexCharacterClass(flags, element).findIntersections(\n            characterClass,\n          );\n          if (intersections.length > 0) {\n            intersections.forEach(intersection => duplicates.add(intersection));\n            duplicates.add(element);\n          }\n          characterClass.add(element);\n        });\n        if (duplicates.size > 0) {\n          const [primary, ...secondaries] = duplicates;\n          context.reportRegExpNode({\n            message: toEncodedMessage(\n              'Remove duplicates in this character class.',\n              secondaries.map(snd => ({ loc: getRegexpLocation(context.node, snd, context) })),\n              secondaries.map(_ => 'Additional duplicate'),\n            ),\n            node: context.node,\n            regexpNode: primary,\n          });\n        }\n      },\n    };\n  },\n  {\n    meta: {\n      schema: [\n        {\n          // internal parameter for rules having secondary locations\n          enum: ['sonar-runtime'],\n        },\n      ],\n    },\n  },\n);\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5842\n\nimport { Rule } from 'eslint';\nimport { Node, Quantifier } from 'regexpp/ast';\nimport { createRegExpRule } from './regex-rule-template';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  return {\n    onQuantifierEnter: (node: Quantifier) => {\n      const { element } = node;\n      if (matchEmptyString(element)) {\n        context.reportRegExpNode({\n          message: `Rework this part of the regex to not match the empty string.`,\n          node: context.node,\n          regexpNode: element,\n        });\n      }\n    },\n  };\n});\n\nfunction matchEmptyString(node: Node): boolean {\n  switch (node.type) {\n    case 'Alternative':\n      return node.elements.every(matchEmptyString);\n    case 'Assertion':\n      return true;\n    case 'CapturingGroup':\n    case 'Group':\n    case 'Pattern':\n      return node.alternatives.some(matchEmptyString);\n    case 'Quantifier':\n      return node.min === 0;\n    default:\n      return false;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getValueOfExpression, isCallToFQN } from '../utils';\n\nconst aliases: string[] = [\n  'AES128',\n  'AES192',\n  'AES256',\n  'BF',\n  'blowfish',\n  'CAMELLIA128',\n  'CAMELLIA192',\n  'CAMELLIA256',\n  'CAST',\n  'DES',\n  'DES-EDE',\n  'DES-EDE3',\n  'DES3',\n  'DESX',\n  'RC2',\n  'RC2-40',\n  'RC2-64',\n  'RC2-128',\n  'SEED',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      useSecureMode: 'Use a secure mode and padding scheme.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const patterns: RegExp[] = [new RegExp('CBC', 'i'), new RegExp('ECB', 'i')];\n    aliases.forEach(alias => patterns.push(new RegExp(`^${alias}$`, 'i')));\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (!isCallToFQN(context, callExpression, 'crypto', 'createCipheriv')) {\n          return;\n        }\n        const sensitiveArgument = callExpression.arguments[0];\n        const sensitiveArgumentValue = getValueOfExpression(context, sensitiveArgument, 'Literal');\n        if (!sensitiveArgumentValue) {\n          return;\n        }\n        const { value } = sensitiveArgumentValue;\n        if (typeof value !== 'string') {\n          return;\n        }\n        if (patterns.some(pattern => pattern.test(value))) {\n          context.report({\n            messageId: 'useSecureMode',\n            node: sensitiveArgument,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4787\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  isMemberWithProperty,\n  getModuleNameOfIdentifier,\n  getModuleNameOfImportedIdentifier,\n} from '../utils';\n\nconst getEncryptionRuleModule = (\n  clientSideMethods: string[],\n  serverSideMethods: string[],\n): Rule.RuleModule => ({\n  meta: {\n    messages: {\n      safeEncryption: 'Make sure that encrypting data is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    // for client side\n    let usingCryptoInFile = false;\n\n    return {\n      Program() {\n        // init flag for each file\n        usingCryptoInFile = false;\n      },\n\n      MemberExpression(node: estree.Node) {\n        // detect 'SubtleCrypto' object\n        // which can be retrieved by 'crypto.subtle' or 'window.crypto.subtle'\n        const { object, property } = node as estree.MemberExpression;\n        if (\n          isIdentifier(property, 'subtle') &&\n          (isIdentifier(object, 'crypto') || isMemberWithProperty(object, 'crypto'))\n        ) {\n          usingCryptoInFile = true;\n        }\n      },\n\n      'CallExpression:exit'(node: estree.Node) {\n        const { callee } = node as estree.CallExpression;\n\n        if (usingCryptoInFile) {\n          // e.g.: crypto.subtle.encrypt()\n          checkForClientSide(callee, context, clientSideMethods);\n        }\n\n        // e.g.\n        // const crypto = require(\"crypto\");\n        // const cipher = crypto.createCipher(alg, key);\n        checkForServerSide(callee, context, serverSideMethods);\n      },\n    };\n  },\n});\n\nfunction checkForServerSide(\n  callee: estree.Node,\n  context: Rule.RuleContext,\n  serverSideMethods: string[],\n) {\n  let moduleName: estree.Literal | undefined;\n\n  if (\n    callee.type === 'MemberExpression' &&\n    isMemberWithProperty(callee, ...serverSideMethods) &&\n    callee.object.type === 'Identifier'\n  ) {\n    moduleName = getModuleNameOfIdentifier(context, callee.object);\n  } else if (isIdentifier(callee, ...serverSideMethods)) {\n    moduleName = getModuleNameOfImportedIdentifier(context, callee);\n  }\n  if (moduleName && moduleName.value === 'crypto') {\n    context.report({\n      messageId: 'safeEncryption',\n      node: callee,\n    });\n  }\n}\n\nfunction checkForClientSide(\n  callee: estree.Node,\n  context: Rule.RuleContext,\n  clientSideMethods: string[],\n) {\n  if (\n    isIdentifier(callee, ...clientSideMethods) ||\n    isMemberWithProperty(callee, ...clientSideMethods)\n  ) {\n    context.report({\n      messageId: 'safeEncryption',\n      node: callee,\n    });\n  }\n}\n\nconst clientSideEncryptMethods = ['encrypt', 'decrypt'];\nconst serverSideEncryptMethods = [\n  'createCipher',\n  'createCipheriv',\n  'createDecipher',\n  'createDecipheriv',\n  'publicEncrypt',\n  'publicDecrypt',\n  'privateEncrypt',\n  'privateDecrypt',\n];\n\nexport const rule: Rule.RuleModule = getEncryptionRuleModule(\n  clientSideEncryptMethods,\n  serverSideEncryptMethods,\n);\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport { ParserServices } from '@typescript-eslint/parser';\nimport { isString } from './utils-type';\nimport { isStringLiteral } from './utils-ast';\n\nexport interface GroupReference {\n  raw: string;\n  value: string;\n}\n\nexport function isStringReplaceCall(call: estree.CallExpression, services: ParserServices) {\n  return (\n    call.callee.type === 'MemberExpression' &&\n    call.callee.property.type === 'Identifier' &&\n    !call.callee.computed &&\n    ['replace', 'replaceAll'].includes(call.callee.property.name) &&\n    call.arguments.length > 1 &&\n    isString(call.callee.object, services)\n  );\n}\n\nexport function extractReferences(node: estree.Node) {\n  const references: GroupReference[] = [];\n  if (isStringLiteral(node)) {\n    const str = node.value as string;\n    const reg = /\\$(\\d+)|\\$\\<([a-zA-Z][a-zA-Z0-9_]*)\\>/g;\n    let match: RegExpExecArray | null;\n    while ((match = reg.exec(str)) !== null) {\n      const [raw, index, name] = match;\n      const value = index || name;\n      references.push({ raw, value });\n    }\n  }\n  return references;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6328\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as regexpp from 'regexpp';\nimport { RegExpLiteral } from 'regexpp/ast';\nimport { getParsedRegex, isRequiredParserServices } from '../utils';\nimport {\n  extractReferences,\n  GroupReference,\n  isStringReplaceCall,\n} from '../utils/utils-string-replace';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      nonExistingGroup: 'Referencing non-existing group{{groups}}.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      CallExpression: (call: estree.CallExpression) => {\n        if (isStringReplaceCall(call, services)) {\n          const [pattern, substr] = call.arguments;\n          const regex = getParsedRegex(pattern, context);\n          if (regex !== null) {\n            const groups = extractGroups(regex);\n            const references = extractReferences(substr);\n            const invalidReferences = references.filter(\n              ref => !isReferencingExistingGroup(ref, groups),\n            );\n            if (invalidReferences.length > 0) {\n              const groups = `${invalidReferences.length > 1 ? 's' : ''}: ${invalidReferences\n                .map(ref => ref.raw)\n                .join(', ')}`;\n              context.report({\n                node: substr,\n                messageId: 'nonExistingGroup',\n                data: {\n                  groups,\n                },\n              });\n            }\n          }\n        }\n      },\n    };\n  },\n};\n\nclass CapturingGroups {\n  private readonly names = new Set<string>();\n  private groups = 0;\n\n  public add(name: string | null): void {\n    if (name !== null) {\n      this.names.add(name);\n    }\n    this.groups++;\n  }\n\n  public has(name: string): boolean {\n    return this.names.has(name);\n  }\n\n  public count(): number {\n    return this.groups;\n  }\n}\n\nfunction extractGroups(regex: RegExpLiteral) {\n  const groups = new CapturingGroups();\n  regexpp.visitRegExpAST(regex, {\n    onCapturingGroupEnter: group => groups.add(group.name),\n  });\n  return groups;\n}\n\nfunction isReferencingExistingGroup(reference: GroupReference, groups: CapturingGroups) {\n  if (!isNaN(Number(reference.value))) {\n    const index = Number(reference.value);\n    return index >= 1 && index <= groups.count();\n  } else {\n    const name = reference.value;\n    return groups.has(name);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1067\n\nimport { Rule, AST } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      { type: 'integer' },\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const [max] = context.options;\n    const statementLevel: ExpressionComplexity[] = [new ExpressionComplexity()];\n    return {\n      '*': (node: estree.Node) => {\n        const tree = node as TSESTree.Node;\n        if (isConditionalLike(tree)) {\n          const expr = statementLevel[statementLevel.length - 1];\n          expr.incrementNestedExprLevel();\n          expr.addOperator(getOperatorToken(tree, context));\n        } else if (isScopeLike(tree)) {\n          statementLevel.push(new ExpressionComplexity());\n        }\n      },\n      '*:exit': (node: estree.Node) => {\n        const tree = node as TSESTree.Node;\n        if (isConditionalLike(tree)) {\n          const expr = statementLevel[statementLevel.length - 1];\n          expr.decrementNestedExprLevel();\n          if (expr.isOnFirstExprLevel()) {\n            const operators = expr.getComplexityOperators();\n            if (operators.length > max) {\n              reportIssue(tree, operators, max, context);\n            }\n            expr.resetExpressionComplexityOperators();\n          }\n        } else if (isScopeLike(tree)) {\n          statementLevel.pop();\n        }\n      },\n    };\n  },\n};\n\nclass ExpressionComplexity {\n  nestedLevel = 0;\n  operators: AST.Token[] = [];\n\n  addOperator(operator: AST.Token) {\n    this.operators.push(operator);\n  }\n\n  incrementNestedExprLevel() {\n    this.nestedLevel++;\n  }\n\n  decrementNestedExprLevel() {\n    this.nestedLevel--;\n  }\n\n  isOnFirstExprLevel() {\n    return this.nestedLevel === 0;\n  }\n\n  getComplexityOperators() {\n    return this.operators;\n  }\n\n  resetExpressionComplexityOperators() {\n    this.operators = [];\n  }\n}\n\nfunction isScopeLike(node: TSESTree.Node) {\n  return (\n    node.type === 'FunctionExpression' ||\n    (node.type === 'FunctionDeclaration' && node.generator) ||\n    node.type === 'ObjectExpression' ||\n    node.type === 'CallExpression' ||\n    node.type === 'JSXElement'\n  );\n}\n\nfunction isConditionalLike(node: TSESTree.Node) {\n  return node.type === 'ConditionalExpression' || node.type === 'LogicalExpression';\n}\n\nfunction getOperatorToken(node: TSESTree.Node, context: Rule.RuleContext) {\n  const sourceCode = context.getSourceCode();\n  if (node.type === 'ConditionalExpression') {\n    return sourceCode.getTokenAfter(\n      node.test as estree.Node,\n      token => token.type === 'Punctuator' && token.value === '?',\n    )!;\n  } else {\n    const expr = node as estree.LogicalExpression;\n    return sourceCode.getTokenAfter(\n      expr.left,\n      token => token.type === 'Punctuator' && token.value === expr.operator,\n    )!;\n  }\n}\n\nfunction reportIssue(\n  node: TSESTree.Node,\n  operators: AST.Token[],\n  max: number,\n  context: Rule.RuleContext,\n) {\n  const complexity = operators.length;\n  const message = `Reduce the number of conditional operators (${complexity}) used in the expression (maximum allowed ${max}).`;\n  const secondaryLocationsHolder = operators;\n  const secondaryMessages = Array(complexity).fill('+1');\n  const cost = complexity - max;\n  context.report({\n    node: node as estree.Node,\n    message: toEncodedMessage(message, secondaryLocationsHolder, secondaryMessages, cost),\n  });\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1451\n\nimport { Rule } from 'eslint';\n\nlet cached: {\n  headerFormat: string;\n  isRegularExpression: boolean;\n  expectedLines?: string[];\n  searchPattern?: RegExp;\n  failedToCompile?: boolean;\n};\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      fixHeader: 'Add or update the header of this file.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    updateCache(context.options);\n\n    if (cached.failedToCompile) {\n      // don't visit anything\n      return {};\n    }\n\n    return {\n      'Program:exit': function () {\n        if (cached.isRegularExpression) {\n          checkRegularExpression(cached.searchPattern!, context);\n        } else {\n          checkPlainText(cached.expectedLines!, context);\n        }\n      },\n    };\n  },\n};\n\nfunction checkPlainText(expectedLines: string[], context: Rule.RuleContext) {\n  let matches = false;\n  const lines = context.getSourceCode().lines;\n\n  if (expectedLines.length <= lines.length) {\n    matches = true;\n\n    let i = 0;\n    for (const expectedLine of expectedLines) {\n      const line = lines[i];\n      i++;\n      if (line !== expectedLine) {\n        matches = false;\n        break;\n      }\n    }\n  }\n\n  if (!matches) {\n    addFileIssue(context);\n  }\n}\n\nfunction checkRegularExpression(searchPattern: RegExp, context: Rule.RuleContext) {\n  const fileContent = context.getSourceCode().getText();\n  const match = searchPattern.exec(fileContent);\n  if (!match || match.index !== 0) {\n    addFileIssue(context);\n  }\n}\n\nfunction addFileIssue(context: Rule.RuleContext) {\n  context.report({\n    messageId: 'fixHeader',\n    loc: { line: 0, column: 0 },\n  });\n}\n\nfunction updateCache(options: any[]) {\n  const [{ headerFormat, isRegularExpression }] = options;\n\n  if (\n    !cached ||\n    cached.headerFormat !== headerFormat ||\n    cached.isRegularExpression !== isRegularExpression\n  ) {\n    cached = {\n      headerFormat,\n      isRegularExpression,\n    };\n\n    if (isRegularExpression) {\n      try {\n        cached.searchPattern = new RegExp(headerFormat, 's');\n        cached.failedToCompile = false;\n      } catch (e) {\n        console.error(`Failed to compile regular expression for rule S1451 (${e.message})`);\n        cached.failedToCompile = true;\n      }\n    } else {\n      cached.expectedLines = headerFormat.split(/(?:\\r)?\\n|\\r/);\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3317\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport path from 'path';\nimport { getVariableFromName } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      renameFile: 'Rename this file to \"{{exported}}\"',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let isOnlyExport = true;\n    let nameOfExported: string | undefined = undefined;\n\n    return {\n      ExportDefaultDeclaration: (node: estree.Node) => {\n        const declaration = (node as estree.ExportDefaultDeclaration).declaration;\n        if (declaration.type === 'Identifier') {\n          const variable = getVariableFromName(context, declaration.name);\n          if (variable && variable.defs.length === 1) {\n            const def = variable.defs[0];\n            if (def.type === 'ClassName' || def.type === 'FunctionName' || isConst(def)) {\n              nameOfExported = declaration.name;\n            }\n          }\n        } else if (\n          declaration.type === 'ClassDeclaration' ||\n          declaration.type === 'FunctionDeclaration'\n        ) {\n          if (declaration.id) {\n            nameOfExported = declaration.id.name;\n          }\n        }\n      },\n      'ExportAllDeclaration, ExportNamedDeclaration': () => {\n        isOnlyExport = false;\n      },\n      'Program:exit': () => {\n        if (isOnlyExport && nameOfExported) {\n          const fileName = path.parse(context.getFilename()).name;\n          if (\n            'index' !== fileName &&\n            !sameName(nameOfExported, fileName) &&\n            !sameName(nameOfExported, sliceOffPostfix(fileName))\n          ) {\n            context.report({\n              messageId: 'renameFile',\n              data: {\n                exported: nameOfExported,\n              },\n              loc: { line: 0, column: 0 },\n            });\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction sameName(nameOfExported: string, fileName: string) {\n  const normalizedFileName = fileName.replace(/_/g, '').replace(/-/g, '').replace(/\\./g, '');\n  const normalizedNameOfExported = nameOfExported.replace(/_/g, '').replace(/-/g, '');\n  return normalizedNameOfExported.toLowerCase() === normalizedFileName.toLowerCase();\n}\n\nfunction isConst(def: Scope.Definition) {\n  return def.type === 'Variable' && def.parent && def.parent.kind === 'const';\n}\n\nfunction sliceOffPostfix(fileName: string) {\n  return fileName.slice(0, fileName.lastIndexOf('.'));\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2612\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, isMemberExpression, getUniqueWriteUsage, isCallToFQN } from '../utils';\n\nconst chmodLikeFunction = ['chmod', 'chmodSync', 'fchmod', 'fchmodSync', 'lchmod', 'lchmodSync'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safePermission: 'Make sure this permission is safe.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function isChmodLikeFunction(node: estree.CallExpression) {\n      const { callee } = node;\n      if (callee.type !== 'MemberExpression') {\n        return false;\n      }\n      // to support fs promises we are only checking the name of the function\n      return isIdentifier(callee.property, ...chmodLikeFunction);\n    }\n\n    function modeFromLiteral(modeExpr: estree.Literal) {\n      const modeValue = modeExpr.value;\n      let mode = null;\n      if (typeof modeValue === 'string') {\n        mode = Number.parseInt(modeValue, 8);\n      } else if (typeof modeValue === 'number') {\n        const raw = modeExpr.raw;\n        // ts parser interprets number starting with 0 as decimal, we need to parse it as octal value\n        if (raw && raw.startsWith('0') && !raw.startsWith('0o')) {\n          mode = Number.parseInt(raw, 8);\n        } else {\n          mode = modeValue;\n        }\n      }\n      return mode;\n    }\n\n    // fs.constants have these value only when running on linux, we need to hardcode them to be able to test on win\n    const FS_CONST: Record<string, number> = {\n      S_IRWXU: 0o700,\n      S_IRUSR: 0o400,\n      S_IWUSR: 0o200,\n      S_IXUSR: 0o100,\n      S_IRWXG: 0o70,\n      S_IRGRP: 0o40,\n      S_IWGRP: 0o20,\n      S_IXGRP: 0o10,\n      S_IRWXO: 0o7,\n      S_IROTH: 0o4,\n      S_IWOTH: 0o2,\n      S_IXOTH: 0o1,\n    };\n\n    function modeFromMemberExpression(modeExpr: estree.MemberExpression): number | null {\n      const { object, property } = modeExpr;\n      if (isMemberExpression(object, 'fs', 'constants') && property.type === 'Identifier') {\n        return FS_CONST[property.name];\n      }\n      return null;\n    }\n\n    function modeFromExpression(\n      expr: estree.Node | undefined,\n      visited: Set<estree.Node>,\n    ): number | null {\n      if (!expr) {\n        return null;\n      }\n      if (expr.type === 'MemberExpression') {\n        return modeFromMemberExpression(expr);\n      } else if (expr.type === 'Literal') {\n        return modeFromLiteral(expr);\n      } else if (expr.type === 'Identifier') {\n        const usage = getUniqueWriteUsage(context, expr.name);\n        if (usage && !visited.has(usage)) {\n          visited.add(usage);\n          return modeFromExpression(usage, visited);\n        }\n      } else if (expr.type === 'BinaryExpression') {\n        const { left, operator, right } = expr;\n        if (operator === '|') {\n          const leftValue = modeFromExpression(left, visited);\n          const rightValue = modeFromExpression(right, visited);\n          if (leftValue && rightValue) {\n            return leftValue | rightValue;\n          }\n        }\n      }\n      return null;\n    }\n\n    function checkModeArgument(node: estree.Node, moduloTest: number) {\n      const visited = new Set<estree.Node>();\n      const mode = modeFromExpression(node, visited);\n      if (mode !== null && !isNaN(mode) && mode % 8 !== moduloTest) {\n        context.report({\n          node,\n          messageId: 'safePermission',\n        });\n      }\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (isChmodLikeFunction(callExpression)) {\n          checkModeArgument(callExpression.arguments[0], 0);\n          checkModeArgument(callExpression.arguments[1], 0);\n        } else if (isCallToFQN(context, callExpression, 'process', 'umask')) {\n          checkModeArgument(callExpression.arguments[0], 7);\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1135\n\nimport { Rule } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nconst todoPattern = 'todo';\nconst letterPattern = /[\\p{Letter}]/u;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      completeTODO: 'Complete the task associated to this \"TODO\" comment.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'Program:exit': () => {\n        reportPatternInComment(context, todoPattern, 'completeTODO');\n      },\n    };\n  },\n};\n\nexport function reportPatternInComment(\n  context: Rule.RuleContext,\n  pattern: string,\n  messageId: string,\n) {\n  const sourceCode = context.getSourceCode();\n  (sourceCode.getAllComments() as TSESTree.Comment[]).forEach(comment => {\n    const rawText = comment.value.toLowerCase();\n\n    if (rawText.includes(pattern)) {\n      const lines = rawText.split(/\\r\\n?|\\n/);\n\n      for (let i = 0; i < lines.length; i++) {\n        const index = lines[i].indexOf(pattern);\n        if (index >= 0 && !isLetterAround(lines[i], index, pattern)) {\n          context.report({\n            messageId,\n            loc: getPatternPosition(i, index, comment, pattern),\n          });\n        }\n      }\n    }\n  });\n}\n\nfunction isLetterAround(line: string, start: number, pattern: string) {\n  const end = start + pattern.length;\n\n  const pre = start > 0 && letterPattern.test(line.charAt(start - 1));\n  const post = end < line.length - 1 && letterPattern.test(line.charAt(end));\n\n  return pre || post;\n}\n\nfunction getPatternPosition(\n  lineIdx: number,\n  index: number,\n  comment: TSESTree.Comment,\n  pattern: string,\n) {\n  const line = comment.loc.start.line + lineIdx;\n  const columnStart = lineIdx === 0 ? comment.loc.start.column + 2 : 0;\n  const patternStart = columnStart + index;\n\n  return {\n    start: { line, column: patternStart },\n    end: { line, column: patternStart + pattern.length },\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1134\n\nimport { Rule } from 'eslint';\nimport { reportPatternInComment } from './todo-tag';\n\nconst fixmePattern = 'fixme';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      fixme: 'Take the required action to fix the issue indicated by this comment.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'Program:exit': () => {\n        reportPatternInComment(context, fixmePattern, 'fixme');\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1535\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      restrictLoop: 'Restrict what this loop acts on by testing each property.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function isAttrCopy(statement: estree.Node) {\n      if (statement.type !== 'ExpressionStatement') {\n        return false;\n      }\n      const expression = statement.expression;\n      return (\n        expression.type === 'AssignmentExpression' &&\n        expression.left.type === 'MemberExpression' &&\n        expression.left.computed\n      );\n    }\n\n    return {\n      ForInStatement(node) {\n        const forInStatement = node as estree.ForInStatement;\n        const body = forInStatement.body;\n\n        if (body.type === 'BlockStatement') {\n          if (body.body.length === 0) {\n            return;\n          }\n          const firstStatement = body.body[0];\n          if (firstStatement.type === 'IfStatement' || isAttrCopy(firstStatement)) {\n            return;\n          }\n        }\n\n        if (body.type === 'EmptyStatement' || body.type === 'IfStatement' || isAttrCopy(body)) {\n          return;\n        }\n\n        context.report({\n          node: forInStatement,\n          messageId: 'restrictLoop',\n        });\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      ForStatement: (node: estree.Node) => {\n        const forStatement: estree.ForStatement = node as estree.ForStatement;\n        const test = forStatement.test;\n        const loopIncrement: ForLoopIncrement | null =\n          ForLoopIncrement.findInLoopUpdate(forStatement);\n        if (test == null || loopIncrement == null || forStatement.update == null) {\n          return;\n        }\n        const wrongDirection = getWrongDirection(test, loopIncrement);\n        if (wrongDirection !== 0 && wrongDirection === loopIncrement.direction) {\n          const movement: string = wrongDirection > 0 ? 'incremented' : 'decremented';\n          const message = toEncodedMessage(\n            `\"${loopIncrement.identifier.name}\" is ${movement} and will never reach its stop condition.`,\n            [test as TSESTree.Node],\n          );\n          context.report({\n            message,\n            node: forStatement.update,\n          });\n        }\n      },\n    };\n  },\n};\n\nclass ForLoopIncrement {\n  increment: estree.Expression;\n  identifier: estree.Identifier;\n  direction: number;\n\n  constructor(increment: estree.Expression, identifier: estree.Identifier, direction: number) {\n    this.increment = increment;\n    this.identifier = identifier;\n    this.direction = direction;\n  }\n\n  static findInLoopUpdate(forStatement: estree.ForStatement) {\n    let result = null;\n    const expression = forStatement.update;\n    if (!expression) {\n      return null;\n    }\n    if (expression.type === 'UpdateExpression') {\n      const updateExpression: estree.UpdateExpression = expression;\n      const direction: number = updateExpression.operator === '++' ? 1 : -1;\n      result = ForLoopIncrement.increment(updateExpression, updateExpression.argument, direction);\n    }\n    if (expression.type === 'AssignmentExpression') {\n      const assignmentExpression: estree.AssignmentExpression = expression;\n      if (\n        assignmentExpression.operator === '+=' &&\n        assignmentExpression.left.type === 'Identifier'\n      ) {\n        result = ForLoopIncrement.increment(\n          expression,\n          assignmentExpression.left,\n          directionFromValue(assignmentExpression.right),\n        );\n      }\n      if (\n        assignmentExpression.operator === '-=' &&\n        assignmentExpression.left.type === 'Identifier'\n      ) {\n        result = ForLoopIncrement.increment(\n          expression,\n          assignmentExpression.left,\n          -directionFromValue(assignmentExpression.right),\n        );\n      }\n      if (assignmentExpression.operator === '=') {\n        result = ForLoopIncrement.assignmentIncrement(assignmentExpression);\n      }\n    }\n    return result;\n  }\n\n  private static increment(\n    increment: estree.Expression,\n    expression: estree.Expression,\n    direction: number,\n  ) {\n    if (expression.type === 'Identifier') {\n      return new ForLoopIncrement(increment, expression, direction);\n    }\n    return null;\n  }\n\n  private static assignmentIncrement(assignmentExpression: estree.AssignmentExpression) {\n    const lhs = assignmentExpression.left;\n    const rhs = assignmentExpression.right;\n    if (\n      lhs.type === 'Identifier' &&\n      rhs.type === 'BinaryExpression' &&\n      (rhs.operator === '+' || rhs.operator === '-')\n    ) {\n      let incrementDirection = directionFromValue(rhs.right);\n      if (incrementDirection !== null && isSameIdentifier(rhs.left, lhs)) {\n        incrementDirection = rhs.operator === '-' ? -incrementDirection : incrementDirection;\n        return ForLoopIncrement.increment(assignmentExpression, lhs, incrementDirection);\n      }\n    }\n    return null;\n  }\n}\n\nfunction directionFromValue(expression: estree.Expression): number {\n  if (expression.type === 'Literal') {\n    const value = Number(expression.raw);\n    if (isNaN(value) || value === 0) {\n      return 0;\n    }\n    return value > 0 ? 1 : -1;\n  }\n  if (expression.type === 'UnaryExpression') {\n    const unaryExpression: estree.UnaryExpression = expression;\n    if (unaryExpression.operator === '+') {\n      return directionFromValue(unaryExpression.argument);\n    }\n    if (unaryExpression.operator === '-') {\n      return -directionFromValue(unaryExpression.argument);\n    }\n  }\n  return 0;\n}\n\nfunction getWrongDirection(\n  condition: estree.Expression,\n  forLoopIncrement: ForLoopIncrement,\n): number {\n  if (condition.type !== 'BinaryExpression') {\n    return 0;\n  }\n  if (isSameIdentifier(condition.left, forLoopIncrement.identifier)) {\n    if (condition.operator === '<' || condition.operator === '<=') {\n      return -1;\n    }\n    if (condition.operator === '>' || condition.operator === '>=') {\n      return +1;\n    }\n  } else if (isSameIdentifier(condition.right, forLoopIncrement.identifier)) {\n    if (condition.operator === '<' || condition.operator === '<=') {\n      return +1;\n    }\n    if (condition.operator === '>' || condition.operator === '>=') {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nfunction isSameIdentifier(expression: estree.Expression, identifier: estree.Identifier) {\n  return expression.type === 'Identifier' && expression.name === identifier.name;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5732\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfNode, getObjectExpressionProperty } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst HELMET_CSP = 'helmet-csp';\nconst DIRECTIVES = 'directives';\nconst NONE = \"'none'\";\nconst CONTENT_SECURITY_POLICY = 'contentSecurityPolicy';\nconst FRAME_ANCESTORS_CAMEL = 'frameAncestors';\nconst FRAME_ANCESTORS_HYPHEN = 'frame-ancestors';\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findDirectivesWithSensitiveFrameAncestorsPropertyFromHelmet,\n  `Make sure disabling content security policy frame-ancestors directive is safe here.`,\n);\n\nfunction findDirectivesWithSensitiveFrameAncestorsPropertyFromHelmet(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  const { arguments: args } = node;\n  if (isValidHelmetModuleCall(context, node) && args.length === 1) {\n    const [options] = args;\n    const maybeDirectives = getObjectExpressionProperty(options, DIRECTIVES);\n    if (maybeDirectives) {\n      const maybeFrameAncestors = getFrameAncestorsProperty(maybeDirectives);\n      if (!maybeFrameAncestors) {\n        return [maybeDirectives];\n      }\n      if (isSetNoneFrameAncestorsProperty(maybeFrameAncestors)) {\n        return [maybeFrameAncestors];\n      }\n    }\n  }\n  return [];\n}\n\nfunction isValidHelmetModuleCall(context: Rule.RuleContext, callExpr: estree.CallExpression) {\n  const { callee } = callExpr;\n\n  /* csp(options) */\n  if (callee.type === 'Identifier' && getModuleNameOfNode(context, callee)?.value === HELMET_CSP) {\n    return true;\n  }\n\n  /* helmet.contentSecurityPolicy(options) */\n  if (\n    callee.type === 'MemberExpression' &&\n    getModuleNameOfNode(context, callee.object)?.value === HELMET &&\n    callee.property.type === 'Identifier' &&\n    callee.property.name === CONTENT_SECURITY_POLICY\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isSetNoneFrameAncestorsProperty(frameAncestors: estree.Property): boolean {\n  const { value } = frameAncestors;\n  return (\n    value.type === 'ArrayExpression' &&\n    Boolean(\n      value.elements.find(\n        v => v?.type === 'Literal' && typeof v.value === 'string' && v.value === NONE,\n      ),\n    )\n  );\n}\n\nfunction getFrameAncestorsProperty(directives: estree.Property): estree.Property | undefined {\n  const propertyKeys = [FRAME_ANCESTORS_CAMEL, FRAME_ANCESTORS_HYPHEN];\n  for (const propertyKey of propertyKeys) {\n    const maybeProperty = getObjectExpressionProperty(directives.value, propertyKey);\n    if (maybeProperty) {\n      return maybeProperty;\n    }\n  }\n  return undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1515\n\nimport { AST, Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport {\n  findFirstMatchingAncestor,\n  getParent,\n  LoopLike,\n  RuleContext,\n  toEncodedMessage,\n} from '../utils';\n\nconst message = 'Make sure this function is not called after the loop completes.';\n\nconst loopLike = 'WhileStatement,DoWhileStatement,ForStatement,ForOfStatement,ForInStatement';\n\nconst functionLike = 'FunctionDeclaration,FunctionExpression,ArrowFunctionExpression';\n\nconst allowedCallbacks = [\n  'replace',\n  'forEach',\n  'filter',\n  'map',\n  'find',\n  'findIndex',\n  'every',\n  'some',\n  'reduce',\n  'reduceRight',\n  'sort',\n  'each',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    function getLocalEnclosingLoop(node: estree.Node) {\n      return findFirstMatchingAncestor(node as TSESTree.Node, n => loopLike.includes(n.type));\n    }\n\n    return {\n      [functionLike]: (node: estree.Node) => {\n        const loopNode = getLocalEnclosingLoop(node) as LoopLike;\n        if (loopNode) {\n          if (\n            !isIIEF(node, context) &&\n            !isAllowedCallbacks(context) &&\n            context.getScope().through.some(ref => !isSafe(ref, loopNode))\n          ) {\n            context.report({\n              message: toEncodedMessage(message, [getMainLoopToken(loopNode, context)]),\n              loc: getMainFunctionTokenLocation(\n                node as TSESTree.FunctionLike,\n                getParent(context) as TSESTree.Node,\n                context as unknown as RuleContext,\n              ),\n            });\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction isIIEF(node: estree.Node, context: Rule.RuleContext) {\n  const parent = getParent(context);\n  return (\n    parent &&\n    ((parent.type === 'CallExpression' && parent.callee === node) ||\n      (parent.type === 'MemberExpression' && parent.object === node))\n  );\n}\n\nfunction isAllowedCallbacks(context: Rule.RuleContext) {\n  const parent = getParent(context);\n  if (parent && parent.type === 'CallExpression') {\n    const callee = parent.callee;\n    if (callee.type === 'MemberExpression') {\n      return (\n        callee.property.type === 'Identifier' && allowedCallbacks.includes(callee.property.name)\n      );\n    }\n  }\n  return false;\n}\n\nfunction isSafe(ref: Scope.Reference, loopNode: LoopLike) {\n  const variable = ref.resolved;\n  if (variable) {\n    const definition = variable.defs[0];\n    const declaration = definition && definition.parent;\n    const kind = declaration && declaration.type === 'VariableDeclaration' ? declaration.kind : '';\n\n    if (kind !== 'let' && kind !== 'const') {\n      return hasConstValue(variable, loopNode);\n    }\n  }\n\n  return true;\n}\n\nfunction hasConstValue(variable: Scope.Variable, loopNode: LoopLike): boolean {\n  for (const ref of variable.references) {\n    if (ref.isWrite()) {\n      //Check if write is in the scope of the loop\n      if (ref.from.type === 'block' && ref.from.block === loopNode.body) {\n        return false;\n      }\n\n      const refRange = ref.identifier.range;\n      const range = getLoopTestRange(loopNode);\n      //Check if value change in the header of the loop\n      if (refRange && range && refRange[0] >= range[0] && refRange[1] <= range[1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction getLoopTestRange(loopNode: LoopLike) {\n  const bodyRange = loopNode.body.range;\n  if (bodyRange) {\n    switch (loopNode.type) {\n      case 'ForStatement':\n        if (loopNode.test && loopNode.test.range) {\n          return [loopNode.test.range[0], bodyRange[0]];\n        }\n        break;\n      case 'WhileStatement':\n      case 'DoWhileStatement':\n        return loopNode.test.range;\n      case 'ForOfStatement':\n      case 'ForInStatement':\n        const leftRange = loopNode.range;\n        if (leftRange) {\n          return [leftRange[0], bodyRange[0]];\n        }\n    }\n  }\n}\n\nfunction getMainLoopToken(loop: LoopLike, context: Rule.RuleContext): AST.Token {\n  const sourceCode = context.getSourceCode();\n  let token: AST.Token | null;\n  switch (loop.type) {\n    case 'WhileStatement':\n    case 'DoWhileStatement':\n      token = sourceCode.getTokenBefore(\n        loop.test,\n        t => t.type === 'Keyword' && t.value === 'while',\n      );\n      break;\n    case 'ForStatement':\n    case 'ForOfStatement':\n    default:\n      token = sourceCode.getFirstToken(loop, t => t.type === 'Keyword' && t.value === 'for');\n  }\n  return token!;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-100\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      renameFunction:\n        \"Rename this '{{function}}' function to match the regular expression '{{format}}'.\",\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      Property: (node: estree.Node) => {\n        const prop = node as TSESTree.Property;\n        if (isFunctionExpression(prop.value)) {\n          checkName(prop.key);\n        }\n      },\n      VariableDeclarator: (node: estree.Node) => {\n        const variable = node as TSESTree.VariableDeclarator;\n        if (isFunctionExpression(variable.init)) {\n          checkName(variable.id);\n        }\n      },\n      FunctionDeclaration: (node: estree.Node) =>\n        checkName((node as TSESTree.FunctionDeclaration).id),\n      MethodDefinition: (node: estree.Node) => {\n        const key = (node as TSESTree.MethodDefinition).key;\n        checkName(key);\n      },\n    };\n\n    function checkName(id: TSESTree.Node | null) {\n      const [{ format }] = context.options;\n      if (id && id.type === 'Identifier' && !id.name.match(format)) {\n        context.report({\n          messageId: 'renameFunction',\n          data: {\n            function: id.name,\n            format,\n          },\n          node: id,\n        });\n      }\n    }\n  },\n};\n\nfunction isFunctionExpression(node: TSESTree.Node | null) {\n  return node && (node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression');\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3800\n\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport {\n  isRequiredParserServices,\n  getTypeFromTreeNode,\n  toEncodedMessage,\n  isAny,\n  getParent,\n  RuleContext,\n} from '../utils';\n\nclass FunctionScope {\n  private readonly returnStatements: estree.ReturnStatement[] = [];\n\n  getReturnStatements() {\n    return this.returnStatements.slice();\n  }\n\n  addReturnStatement(node: estree.ReturnStatement) {\n    this.returnStatements.push(node);\n  }\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    let scopes: FunctionScope[] = [];\n\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    const checker = services.program.getTypeChecker();\n\n    function onFunctionExit(node: estree.Node) {\n      const returnStatements = scopes.pop()!.getReturnStatements();\n      if (returnStatements.every(retStmt => retStmt.argument?.type === 'ThisExpression')) {\n        return;\n      }\n      const signature = checker.getSignatureFromDeclaration(\n        services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node) as ts.SignatureDeclaration,\n      );\n      if (signature && hasMultipleReturnTypes(signature, checker)) {\n        const stmts = returnStatements.filter(\n          retStmt => !isNullLike(getTypeFromTreeNode(retStmt.argument!, services)),\n        );\n        const stmtsTypes = stmts.map(retStmt => getTypeFromTreeNode(retStmt.argument!, services));\n        if (stmtsTypes.every(isAny)) {\n          return;\n        }\n        context.report({\n          message: toEncodedMessage(\n            'Refactor this function to always return the same type.',\n            stmts,\n            stmtsTypes.map(stmtType => `Returns ${prettyPrint(stmtType, checker)}`),\n          ),\n          loc: getMainFunctionTokenLocation(\n            node as TSESTree.FunctionLike,\n            getParent(context) as TSESTree.Node,\n            context as unknown as RuleContext,\n          ),\n        });\n      }\n    }\n\n    return {\n      ReturnStatement: (node: estree.Node) => {\n        const retStmt = node as estree.ReturnStatement;\n        if (scopes.length > 0 && retStmt.argument) {\n          scopes[scopes.length - 1].addReturnStatement(retStmt);\n        }\n      },\n      ':function': () => {\n        scopes.push(new FunctionScope());\n      },\n      ':function:exit': onFunctionExit,\n      'Program:exit': () => {\n        scopes = [];\n      },\n    };\n  },\n};\n\nfunction hasMultipleReturnTypes(signature: ts.Signature, checker: ts.TypeChecker) {\n  const returnType = checker.getBaseTypeOfLiteralType(checker.getReturnTypeOfSignature(signature));\n  return isUnion(returnType, checker) && !hasReturnTypeJSDoc(signature);\n}\n\nfunction isUnion(type: ts.Type, checker: ts.TypeChecker): boolean {\n  const distinct = (value: string, index: number, self: string[]) => self.indexOf(value) === index;\n  const stringify = (tp: ts.Type) => prettyPrint(tp, checker);\n  const isNotNullLike = (tp: ts.Type) => !isNullLike(tp);\n  return (\n    type.isUnion() && type.types.filter(isNotNullLike).map(stringify).filter(distinct).length > 1\n  );\n}\n\nfunction hasReturnTypeJSDoc(signature: ts.Signature) {\n  return signature.getJsDocTags().some(tag => ['return', 'returns'].includes(tag.name));\n}\n\nfunction prettyPrint(type: ts.Type, checker: ts.TypeChecker): string {\n  const distinct = (value: string, index: number, self: string[]) => self.indexOf(value) === index;\n  if (type.symbol && (type.symbol.flags & ts.SymbolFlags.ObjectLiteral) !== 0) {\n    return 'object';\n  }\n  if (type.isUnionOrIntersection()) {\n    const delimiter = type.isUnion() ? ' | ' : ' & ';\n    return type.types\n      .map(tp => prettyPrint(tp, checker))\n      .filter(distinct)\n      .join(delimiter);\n  }\n  const typeNode = checker.typeToTypeNode(type, undefined, undefined);\n  if (typeNode !== undefined) {\n    if (ts.isFunctionTypeNode(typeNode)) {\n      return 'function';\n    }\n    if (ts.isArrayTypeNode(typeNode)) {\n      return arrayTypeToString(typeNode, checker);\n    }\n  }\n  return checker.typeToString(checker.getBaseTypeOfLiteralType(type));\n}\n\nfunction arrayTypeToString(type: ts.ArrayTypeNode, checker: ts.TypeChecker) {\n  let elementType = prettyPrint(checker.getTypeFromTypeNode(type.elementType), checker);\n  // TypeScript seems to fail resolving the element type of arrays. When this happens, we\n  // manually resolve it for straightforward cases.\n  if (elementType === 'any' && type.elementType.kind !== ts.SyntaxKind.AnyKeyword) {\n    switch (type.elementType.kind) {\n      case ts.SyntaxKind.NumberKeyword:\n        elementType = 'number';\n        break;\n      case ts.SyntaxKind.StringKeyword:\n        elementType = 'string';\n        break;\n      case ts.SyntaxKind.BooleanKeyword:\n        elementType = 'boolean';\n        break;\n      case ts.SyntaxKind.TypeLiteral:\n        elementType = 'object';\n        break;\n    }\n  }\n  return `${elementType}[]`;\n}\n\nfunction isNullLike(type: ts.Type) {\n  return (\n    (type.flags & ts.TypeFlags.Null) !== 0 ||\n    (type.flags & ts.TypeFlags.Void) !== 0 ||\n    (type.flags & ts.TypeFlags.Undefined) !== 0\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1527\n\nimport { Rule, Scope } from 'eslint';\n\nconst futureReservedWords = [\n  'implements',\n  'interface',\n  'package',\n  'private',\n  'protected',\n  'public',\n  'enum',\n  'class',\n  'const',\n  'export',\n  'extends',\n  'import',\n  'super',\n  'let',\n  'static',\n  'yield',\n  'await',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      renameReserved:\n        'Rename \"{{reserved}}\" identifier to prevent potential conflicts with future evolutions of the JavaScript language.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function checkVariable(variable: Scope.Variable) {\n      if (variable.defs.length > 0) {\n        const def = variable.defs[0].name;\n        context.report({\n          node: def,\n          messageId: 'renameReserved',\n          data: {\n            reserved: variable.name,\n          },\n        });\n      }\n    }\n\n    function checkVariablesByScope(scope: Scope.Scope) {\n      scope.variables.filter(v => futureReservedWords.includes(v.name)).forEach(checkVariable);\n\n      scope.childScopes.forEach(childScope => {\n        checkVariablesByScope(childScope);\n      });\n    }\n\n    return {\n      'Program:exit': () => {\n        checkVariablesByScope(context.getScope());\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { getParent, RuleContext } from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      addYield: 'Add a \"yield\" statement to this generator.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const yieldStack: number[] = [];\n\n    function enterFunction() {\n      yieldStack.push(0);\n    }\n\n    function exitFunction(node: estree.Node) {\n      const functionNode = node as estree.FunctionExpression | estree.FunctionDeclaration;\n      const countYield = yieldStack.pop();\n      if (countYield === 0 && functionNode.body.body.length > 0) {\n        context.report({\n          messageId: 'addYield',\n          loc: getMainFunctionTokenLocation(\n            functionNode as TSESTree.FunctionLike,\n            getParent(context) as TSESTree.Node,\n            context as unknown as RuleContext,\n          ),\n        });\n      }\n    }\n\n    return {\n      ':function[generator=true]': enterFunction,\n      ':function[generator=true]:exit': exitFunction,\n      YieldExpression() {\n        if (yieldStack.length > 0) {\n          yieldStack[yieldStack.length - 1] += 1;\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S4790/javascript\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getModuleAndCalledMethod,\n  getUniqueWriteUsageOrNode,\n  isIdentifier,\n  isStringLiteral,\n} from '../utils';\n\nconst message = 'Make sure this weak hash algorithm is not used in a sensitive context here.';\nconst CRYPTO_UNSECURE_HASH_ALGORITHMS = new Set([\n  'md2',\n  'md4',\n  'md5',\n  'md6',\n  'haval128',\n  'hmacmd5',\n  'dsa',\n  'ripemd',\n  'ripemd128',\n  'ripemd160',\n  'hmacripemd160',\n  'sha1',\n]);\nconst SUBTLE_UNSECURE_HASH_ALGORITHMS = new Set(['sha-1']);\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    function checkNodejsCrypto(node: estree.CallExpression) {\n      // crypto#createHash\n      const { callee, arguments: args } = node;\n      const { module, method } = getModuleAndCalledMethod(callee, context);\n      if (module?.value === 'crypto' && isIdentifier(method, 'createHash')) {\n        checkUnsecureAlgorithm(method, args[0], CRYPTO_UNSECURE_HASH_ALGORITHMS);\n      }\n    }\n\n    function checkSubtleCrypto(node: estree.CallExpression) {\n      // crypto.subtle#digest\n      const { callee, arguments: args } = node;\n      if (callee.type === 'MemberExpression' && isIdentifier(callee.property, 'digest')) {\n        const { object, property: method } = callee;\n        if (\n          object.type === 'MemberExpression' &&\n          isIdentifier(object.object, 'crypto') &&\n          isIdentifier(object.property, 'subtle')\n        ) {\n          checkUnsecureAlgorithm(method, args[0], SUBTLE_UNSECURE_HASH_ALGORITHMS);\n        }\n      }\n    }\n\n    function checkUnsecureAlgorithm(\n      method: estree.Node,\n      hash: estree.Node,\n      unsecureAlgorithms: Set<string>,\n    ) {\n      const hashAlgorithm = getUniqueWriteUsageOrNode(context, hash);\n      if (\n        isStringLiteral(hashAlgorithm) &&\n        unsecureAlgorithms.has(hashAlgorithm.value.toLocaleLowerCase())\n      ) {\n        context.report({\n          message,\n          node: method,\n        });\n      }\n    }\n\n    return {\n      'CallExpression[arguments.length > 0]': (node: estree.Node) => {\n        const callExpr = node as estree.CallExpression;\n        checkNodejsCrypto(callExpr);\n        checkSubtleCrypto(callExpr);\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5691\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getModuleNameOfIdentifier,\n  getUniqueWriteUsage,\n  getObjectExpressionProperty,\n} from '../utils';\n\nconst SERVE_STATIC = 'serve-static';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeHiddenFile: 'Make sure serving hidden files is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression(node: estree.Node) {\n        const { callee, arguments: args } = node as estree.CallExpression;\n        if (callee.type !== 'Identifier') {\n          return;\n        }\n\n        // serveStatic(...)\n        const module = getModuleNameOfIdentifier(context, callee);\n        if (module?.value === SERVE_STATIC && args.length > 1) {\n          let options: estree.Node | undefined = args[1];\n          if (options.type === 'Identifier') {\n            options = getUniqueWriteUsage(context, options.name);\n          }\n\n          const dotfilesProperty = getObjectExpressionProperty(options, 'dotfiles');\n          if (\n            dotfilesProperty?.value.type === 'Literal' &&\n            dotfilesProperty.value.value === 'allow'\n          ) {\n            context.report({ node: dotfilesProperty, messageId: 'safeHiddenFile' });\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3785\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { isRequiredParserServices, getTypeFromTreeNode, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    function isPrimitive(node: estree.Node) {\n      const type = getTypeFromTreeNode(node, services);\n      return (\n        (type.flags & ts.TypeFlags.StringLike) !== 0 ||\n        (type.flags & ts.TypeFlags.NumberLike) !== 0 ||\n        (type.flags & ts.TypeFlags.BooleanLike) !== 0 ||\n        (type.flags & ts.TypeFlags.Null) !== 0 ||\n        (type.flags & ts.TypeFlags.Undefined) !== 0\n      );\n    }\n    return {\n      'BinaryExpression[operator=\"in\"]': (node: estree.Node) => {\n        const { left, right, operator } = node as estree.BinaryExpression;\n        if (isPrimitive(right)) {\n          const opToken = context\n            .getSourceCode()\n            .getTokensBetween(left, right)\n            .find(token => token.type === 'Keyword' && token.value === operator)!;\n          context.report({\n            message: toEncodedMessage(\n              'TypeError can be thrown as this operand might have primitive type.',\n              [opToken],\n            ),\n            node: right,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3686\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getVariableFromName, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const usedInNew: Map<Scope.Variable, estree.SimpleCallExpression> = new Map();\n    const usedInCall: Map<Scope.Variable, estree.SimpleCallExpression> = new Map();\n    const hasIssue: Scope.Variable[] = [];\n\n    return {\n      NewExpression: (node: estree.Node) => {\n        checkExpression(\n          node as estree.SimpleCallExpression,\n          usedInNew,\n          usedInCall,\n          hasIssue,\n          'out',\n          context,\n        );\n      },\n      CallExpression: (node: estree.Node) => {\n        checkExpression(\n          node as estree.SimpleCallExpression,\n          usedInCall,\n          usedInNew,\n          hasIssue,\n          '',\n          context,\n        );\n      },\n    };\n  },\n};\n\nfunction checkExpression(\n  callExpression: estree.SimpleCallExpression,\n  thisTypeUsageMap: Map<Scope.Variable, estree.SimpleCallExpression>,\n  otherTypeUsageMap: Map<Scope.Variable, estree.SimpleCallExpression>,\n  hasIssue: Scope.Variable[],\n  tail: string,\n  context: Rule.RuleContext,\n) {\n  const variable = getVariable(callExpression, context);\n  if (variable && variable.defs.length !== 0) {\n    const otherTypeUsage = otherTypeUsageMap.get(variable);\n    if (otherTypeUsage && otherTypeUsage.loc && !hasIssue.includes(variable)) {\n      const message =\n        `Correct the use of this function; ` +\n        `on line ${otherTypeUsage.loc.start.line} it was called with${tail} \"new\".`;\n\n      context.report({\n        node: callExpression.callee,\n        message: toEncodedMessage(message, [otherTypeUsage.callee as TSESTree.Node]),\n      });\n\n      hasIssue.push(variable);\n    } else {\n      thisTypeUsageMap.set(variable, callExpression);\n    }\n  }\n}\n\nfunction getVariable(node: estree.SimpleCallExpression, context: Rule.RuleContext) {\n  if (node.callee.type === 'Identifier') {\n    return getVariableFromName(context, node.callee.name);\n  }\n  return undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2692\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isArray, isRequiredParserServices, RequiredParserServices } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      considerIncludes:\n        \"This check ignores index 0; consider using 'includes' method to make this check safe and explicit.\",\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      BinaryExpression(node: estree.Node) {\n        const expression = node as estree.BinaryExpression;\n        if (\n          expression.operator === '>' &&\n          isZero(expression.right) &&\n          isArrayIndexOfCall(expression.left, services)\n        ) {\n          context.report({ node, messageId: 'considerIncludes' });\n        }\n      },\n    };\n  },\n};\n\nfunction isZero(node: estree.Expression): boolean {\n  return node.type === 'Literal' && node.value === 0;\n}\n\nfunction isArrayIndexOfCall(node: estree.Expression, services: RequiredParserServices): boolean {\n  return (\n    node.type === 'CallExpression' &&\n    node.arguments.length === 1 &&\n    node.callee.type === 'MemberExpression' &&\n    node.callee.property.type === 'Identifier' &&\n    node.callee.property.name === 'indexOf' &&\n    isArray(node.callee.object, services)\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2092\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { CookieFlagCheck } from './cookie-flag-check';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) =>\n        new CookieFlagCheck(context, 'secure').checkCookiesFromCallExpression(node),\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5659\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getPropertyWithValue,\n  getValueOfExpression,\n  getObjectExpressionProperty,\n  isCallToFQN,\n  toEncodedMessage,\n  isNullLiteral,\n} from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const SIGN_MESSAGE = 'Use only strong cipher algorithms when signing this JWT.';\n    const VERIFY_MESSAGE =\n      'Use only strong cipher algorithms when verifying the signature of this JWT.';\n    const SECONDARY_MESSAGE = `The \"algorithms\" option should be defined and should not contain 'none'.`;\n\n    function checkCallToSign(\n      callExpression: estree.CallExpression,\n      thirdArgumentValue: estree.ObjectExpression,\n      secondaryLocations: estree.Node[],\n    ) {\n      const unsafeAlgorithmProperty = getPropertyWithValue(\n        context,\n        thirdArgumentValue,\n        'algorithm',\n        'none',\n      );\n      if (unsafeAlgorithmProperty) {\n        const unsafeAlgorithmValue = getValueOfExpression(\n          context,\n          unsafeAlgorithmProperty.value,\n          'Literal',\n        );\n        if (unsafeAlgorithmValue && unsafeAlgorithmValue !== unsafeAlgorithmProperty.value) {\n          secondaryLocations.push(unsafeAlgorithmValue);\n        }\n        raiseIssueOn(callExpression.callee, SIGN_MESSAGE, secondaryLocations);\n      }\n    }\n\n    function checkCallToVerify(\n      callExpression: estree.CallExpression,\n      publicKey: estree.Node,\n      thirdArgumentValue: estree.ObjectExpression,\n      secondaryLocations: estree.Node[],\n    ) {\n      const algorithmsProperty = getObjectExpressionProperty(thirdArgumentValue, 'algorithms');\n      if (!algorithmsProperty) {\n        if (isNullLiteral(publicKey)) {\n          raiseIssueOn(callExpression.callee, VERIFY_MESSAGE, secondaryLocations);\n        }\n        return;\n      }\n      const algorithmsValue = getValueOfExpression(\n        context,\n        algorithmsProperty.value,\n        'ArrayExpression',\n      );\n      if (!algorithmsValue) {\n        return;\n      }\n      const algorithmsContainNone = algorithmsValue.elements.some(e => {\n        const value = getValueOfExpression(context, e, 'Literal');\n        return value?.value === 'none';\n      });\n      if (algorithmsContainNone) {\n        if (algorithmsProperty.value !== algorithmsValue) {\n          secondaryLocations.push(algorithmsValue);\n        }\n        raiseIssueOn(callExpression.callee, VERIFY_MESSAGE, secondaryLocations);\n      }\n    }\n\n    function raiseIssueOn(node: estree.Node, message: string, secondaryLocations: estree.Node[]) {\n      context.report({\n        node,\n        message: toEncodedMessage(\n          message,\n          secondaryLocations,\n          Array(secondaryLocations.length).fill(SECONDARY_MESSAGE),\n        ),\n      });\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression: estree.CallExpression = node as estree.CallExpression;\n        const isCallToSign = isCallToFQN(context, callExpression, 'jsonwebtoken', 'sign');\n        const isCallToVerify = isCallToFQN(context, callExpression, 'jsonwebtoken', 'verify');\n        if (!isCallToSign && !isCallToVerify) {\n          return;\n        }\n        if (callExpression.arguments.length < 3) {\n          // algorithm(s) property is contained in third argument of \"sign\" and \"verify\" calls\n          return;\n        }\n        const thirdArgument = callExpression.arguments[2];\n        const thirdArgumentValue = getValueOfExpression(context, thirdArgument, 'ObjectExpression');\n        if (!thirdArgumentValue) {\n          return;\n        }\n        const secondaryLocations: estree.Node[] = [thirdArgumentValue];\n        if (thirdArgumentValue !== thirdArgument) {\n          secondaryLocations.push(thirdArgument);\n        }\n        if (isCallToSign) {\n          checkCallToSign(callExpression, thirdArgumentValue, secondaryLocations);\n        }\n        const secondArgument = callExpression.arguments[1];\n        if (isCallToVerify) {\n          checkCallToVerify(callExpression, secondArgument, thirdArgumentValue, secondaryLocations);\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S3415\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, isLiteral, isMethodCall, Mocha, toEncodedMessage } from '../utils';\n\nconst ASSERT_FUNCTIONS = [\n  'equal',\n  'notEqual',\n  'strictEqual',\n  'notStrictEqual',\n  'deepEqual',\n  'notDeepEqual',\n  'closeTo',\n  'approximately',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const testCases: estree.Node[] = [];\n    return {\n      CallExpression(node: estree.Node) {\n        if (Mocha.isTestCase(node)) {\n          testCases.push(node);\n          return;\n        }\n        if (testCases.length > 0) {\n          checkInvertedArguments(node as estree.CallExpression, context);\n        }\n      },\n      'CallExpression:exit': (node: estree.Node) => {\n        if (Mocha.isTestCase(node)) {\n          testCases.pop();\n        }\n      },\n    };\n  },\n};\n\nfunction checkInvertedArguments(node: estree.CallExpression, context: Rule.RuleContext) {\n  const args = extractAssertionsArguments(node);\n  if (args) {\n    const [actual, expected] = args;\n    if (isLiteral(actual) && !isLiteral(expected)) {\n      const message = toEncodedMessage(\n        'Swap these 2 arguments so they are in the correct order: actual value, expected value.',\n        [actual],\n        ['Other argument to swap.'],\n      );\n      context.report({\n        node: expected,\n        message,\n        suggest: [\n          {\n            desc: 'Swap arguments',\n            fix: fixer => [\n              fixer.replaceText(actual, context.getSourceCode().getText(expected)),\n              fixer.replaceText(expected, context.getSourceCode().getText(actual)),\n            ],\n          },\n        ],\n      });\n    }\n  }\n}\n\nfunction extractAssertionsArguments(\n  node: estree.CallExpression,\n): [estree.Node, estree.Node] | null {\n  return extractAssertArguments(node) ?? extractExpectArguments(node) ?? extractFailArguments(node);\n}\n\nfunction extractAssertArguments(node: estree.CallExpression): [estree.Node, estree.Node] | null {\n  if (isMethodCall(node) && node.arguments.length > 1) {\n    const {\n      callee: { object, property },\n      arguments: [actual, expected],\n    } = node;\n    if (isIdentifier(object, 'assert') && isIdentifier(property, ...ASSERT_FUNCTIONS)) {\n      return [actual, expected];\n    }\n  }\n  return null;\n}\n\nfunction extractExpectArguments(node: estree.CallExpression): [estree.Node, estree.Node] | null {\n  if (node.callee.type !== 'MemberExpression') {\n    return null;\n  }\n  let { object, property } = node.callee;\n  if (!isIdentifier(property, 'equal', 'eql', 'closeTo')) {\n    return null;\n  }\n  while (object.type === 'MemberExpression') {\n    object = object.object;\n  }\n  if (object.type === 'CallExpression' && isIdentifier(object.callee, 'expect')) {\n    return [object.arguments[0], node.arguments[0]];\n  }\n  return null;\n}\n\nfunction extractFailArguments(node: estree.CallExpression): [estree.Node, estree.Node] | null {\n  if (isMethodCall(node) && node.arguments.length > 1) {\n    const {\n      callee: { object, property },\n      arguments: [actual, expected],\n    } = node;\n    if (isIdentifier(object, 'assert', 'expect', 'should') && isIdentifier(property, 'fail')) {\n      return [actual, expected];\n    }\n  }\n  return null;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1439\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeLabel: 'Remove this \"{{label}}\" label.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      LabeledStatement: (node: estree.Node) =>\n        checkLabeledStatement(node as estree.LabeledStatement, context),\n    };\n  },\n};\n\nfunction checkLabeledStatement(node: estree.LabeledStatement, context: Rule.RuleContext) {\n  if (!isLoopStatement(node.body) && !isSwitchStatement(node.body)) {\n    context.report({\n      messageId: 'removeLabel',\n      data: {\n        label: node.label.name,\n      },\n      node: node.label,\n    });\n  }\n}\n\nfunction isLoopStatement(node: estree.Node) {\n  return (\n    node.type === 'WhileStatement' ||\n    node.type === 'DoWhileStatement' ||\n    node.type === 'ForStatement' ||\n    node.type === 'ForOfStatement' ||\n    node.type === 'ForInStatement'\n  );\n}\n\nfunction isSwitchStatement(node: estree.Node) {\n  return node.type === 'SwitchStatement';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4622\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      refactorUnion: 'Refactor this union type to have less than {{threshold}} elements.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      TSUnionType: (node: estree.Node) => {\n        const union = node as unknown as TSESTree.TSUnionType;\n        const [threshold] = context.options;\n        if (union.types.length > threshold && !isFromTypeStatement(union)) {\n          context.report({\n            messageId: 'refactorUnion',\n            data: {\n              threshold,\n            },\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isFromTypeStatement(node: TSESTree.TSUnionType): boolean {\n  return node.parent !== undefined && node.parent.type === 'TSTypeAliasDeclaration';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1994\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { areEquivalent } from 'eslint-plugin-sonarjs/lib/utils/equivalence';\nimport { getParent, RuleContext } from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nclass ForInfo {\n  updatedExpressions: estree.Node[] = [];\n  testedExpressions: estree.Node[] = [];\n\n  constructor(readonly forLoop: estree.ForStatement) {}\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      misplacedCounter: `This loop's stop condition tests \"{{test}}\" but the incrementer updates \"{{update}}\".`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const forLoopStack: ForInfo[] = [];\n\n    function join(expressions: estree.Node[]) {\n      return expressions.map(expr => context.getSourceCode().getText(expr)).join(', ');\n    }\n\n    function isInsideUpdate(node: estree.Node) {\n      return isInside(node, f => f.update);\n    }\n\n    function isInsideTest(node: estree.Node) {\n      return isInside(node, f => f.test);\n    }\n\n    function isInside(\n      node: estree.Node,\n      getChild: (loop: estree.ForStatement) => estree.Expression | null | undefined,\n    ) {\n      if (forLoopStack.length > 0) {\n        const currentLoop = peekFor();\n        const parentChain = context.getAncestors();\n        parentChain.push(node);\n        const forLoopChild = getChild(currentLoop.forLoop);\n        if (forLoopChild) {\n          return parentChain.some(parentChainNode => forLoopChild === parentChainNode);\n        }\n      }\n      return false;\n    }\n\n    function peekFor() {\n      return forLoopStack[forLoopStack.length - 1];\n    }\n\n    return {\n      ForStatement: (node: estree.Node) => {\n        forLoopStack.push(new ForInfo(node as estree.ForStatement));\n      },\n      'ForStatement:exit': () => {\n        const forInfo = forLoopStack.pop()!;\n        if (forInfo.updatedExpressions.length === 0 || !forInfo.forLoop.test) {\n          return;\n        }\n        const hasIntersection = forInfo.testedExpressions.some(testedExpr =>\n          forInfo.updatedExpressions.some(updatedExpr =>\n            areEquivalent(\n              updatedExpr as TSESTree.Node,\n              testedExpr as TSESTree.Node,\n              (context as unknown as RuleContext).getSourceCode(),\n            ),\n          ),\n        );\n\n        if (!hasIntersection) {\n          context.report({\n            loc: context.getSourceCode().getFirstToken(forInfo.forLoop)!.loc,\n            messageId: 'misplacedCounter',\n            data: {\n              test: join(forInfo.testedExpressions),\n              update: join(forInfo.updatedExpressions),\n            },\n          });\n        }\n      },\n\n      'ForStatement AssignmentExpression': (node: estree.Node) => {\n        if (isInsideUpdate(node)) {\n          const left = (node as estree.AssignmentExpression).left;\n          const assignedExpressions: estree.Node[] = [];\n          computeAssignedExpressions(left, assignedExpressions);\n          const { updatedExpressions } = peekFor();\n          assignedExpressions.forEach(ass => updatedExpressions.push(ass));\n        }\n      },\n\n      'ForStatement UpdateExpression': (node: estree.Node) => {\n        if (isInsideUpdate(node)) {\n          peekFor().updatedExpressions.push((node as estree.UpdateExpression).argument);\n        }\n      },\n\n      'ForStatement CallExpression': (node: estree.Node) => {\n        if (!isInsideUpdate(node)) {\n          return;\n        }\n        const callee = getCalleeObject(node as estree.CallExpression);\n        if (callee) {\n          peekFor().updatedExpressions.push(callee);\n        }\n      },\n\n      'ForStatement Identifier': (node: estree.Node) => {\n        if (isInsideTest(node)) {\n          const parent = getParent(context)!;\n          if (parent.type !== 'MemberExpression' || parent.computed || parent.object === node) {\n            peekFor().testedExpressions.push(node);\n          }\n        }\n      },\n\n      'ForStatement MemberExpression': (node: estree.Node) => {\n        if (\n          isInsideTest(node) &&\n          getParent(context)!.type !== 'MemberExpression' &&\n          getParent(context)!.type !== 'CallExpression'\n        ) {\n          peekFor().testedExpressions.push(node);\n        }\n      },\n    };\n  },\n};\n\nfunction getCalleeObject(node: estree.CallExpression) {\n  let callee = node.callee;\n  while (callee.type === 'MemberExpression') {\n    callee = callee.object;\n  }\n  if (callee.type === 'Identifier' && callee !== node.callee) {\n    return callee;\n  }\n  return null;\n}\n\nfunction computeAssignedExpressions(node: estree.Node | null, assigned: Array<estree.Node | null>) {\n  switch (node?.type) {\n    case 'ArrayPattern':\n      node.elements.forEach(element => computeAssignedExpressions(element, assigned));\n      break;\n    case 'ObjectPattern':\n      node.properties.forEach(property => computeAssignedExpressions(property, assigned));\n      break;\n    case 'Property':\n      computeAssignedExpressions(node.value, assigned);\n      break;\n    case 'AssignmentPattern':\n      computeAssignedExpressions(node.left, assigned);\n      break;\n    default:\n      assigned.push(node);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-134\n\nimport { Rule, AST } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      { type: 'integer' },\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const sourceCode = context.getSourceCode();\n    const [threshold] = context.options;\n    const nodeStack: AST.Token[] = [];\n    function push(n: AST.Token) {\n      nodeStack.push(n);\n    }\n    function pop() {\n      return nodeStack.pop();\n    }\n    function check(node: estree.Node) {\n      if (nodeStack.length === threshold) {\n        context.report({\n          message: toEncodedMessage(\n            `Refactor this code to not nest more than ${threshold} if/for/while/switch/try statements.`,\n            nodeStack,\n            nodeStack.map(_n => '+1'),\n          ),\n          loc: sourceCode.getFirstToken(node)!.loc,\n        });\n      }\n    }\n    function isElseIf(node: estree.Node) {\n      const parent = last(context.getAncestors());\n      return (\n        node.type === 'IfStatement' && parent.type === 'IfStatement' && node === parent.alternate\n      );\n    }\n    const controlFlowNodes = [\n      'ForStatement',\n      'ForInStatement',\n      'ForOfStatement',\n      'WhileStatement',\n      'DoWhileStatement',\n      'IfStatement',\n      'TryStatement',\n      'SwitchStatement',\n    ].join(',');\n    return {\n      [controlFlowNodes]: (node: estree.Node) => {\n        if (isElseIf(node)) {\n          pop();\n          push(sourceCode.getFirstToken(node)!);\n        } else {\n          check(node);\n          push(sourceCode.getFirstToken(node)!);\n        }\n      },\n      [`${controlFlowNodes}:exit`]: (node: estree.Node) => {\n        if (!isElseIf(node)) {\n          pop();\n        }\n      },\n    };\n  },\n};\n\nfunction last(arr: Array<any>) {\n  return arr[arr.length - 1];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2999\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport {\n  isRequiredParserServices,\n  getTypeFromTreeNode,\n  getSignatureFromCallee,\n  toEncodedMessage,\n} from '../utils';\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      { type: 'object' },\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const { considerJSDoc } = context.options[0];\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      'NewExpression[callee.type!=\"ThisExpression\"]': (node: estree.Node) => {\n        const { callee } = node as estree.NewExpression;\n        const type = getTypeFromTreeNode(callee, services);\n        const signature = getSignatureFromCallee(node, services);\n        if (!isInstantiable(type, signature, considerJSDoc) && !isAny(type)) {\n          const functionToken = context\n            .getSourceCode()\n            .getFirstToken(node, token => token.type === 'Keyword' && token.value === 'function');\n          const newToken = context\n            .getSourceCode()\n            .getFirstToken(node, token => token.type === 'Keyword' && token.value === 'new')!;\n          const text = isFunction(type) ? 'this function' : context.getSourceCode().getText(callee);\n          const loc = callee.type === 'FunctionExpression' ? functionToken!.loc : callee.loc!;\n          context.report({\n            message: toEncodedMessage(`Replace ${text} with a constructor function.`, [newToken]),\n            loc,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isInstantiable(\n  type: ts.Type,\n  signature: ts.Signature | undefined,\n  considerJSDoc: boolean,\n): boolean {\n  return (\n    isClass(type) ||\n    isModule(type) ||\n    isConstructor(type, signature, considerJSDoc) ||\n    (type.isUnionOrIntersection() &&\n      type.types.some(tp => isInstantiable(tp, signature, considerJSDoc)))\n  );\n}\n\nfunction isClass(type: ts.Type) {\n  return (\n    type.symbol &&\n    ((type.symbol.flags & ts.SymbolFlags.Class) !== 0 ||\n      (type.symbol.flags & ts.SymbolFlags.Type) !== 0)\n  );\n}\n\nfunction isModule(type: ts.Type) {\n  return type.symbol && (type.symbol.flags & ts.SymbolFlags.Module) !== 0;\n}\n\nfunction isFunction(type: ts.Type) {\n  return type.symbol && (type.symbol.flags & ts.SymbolFlags.Function) !== 0;\n}\n\nfunction isConstructor(type: ts.Type, signature: ts.Signature | undefined, considerJSDoc: boolean) {\n  return isFunction(type) && (!considerJSDoc || hasJSDocAnnotation(signature));\n}\n\nfunction hasJSDocAnnotation(signature: ts.Signature | undefined) {\n  return (\n    signature !== undefined &&\n    signature.getJsDocTags().some(tag => ['constructor', 'class'].includes(tag.name))\n  );\n}\n\nfunction isAny(type: ts.Type) {\n  return type.flags === ts.TypeFlags.Any;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4275\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\ninterface AccessorInfo {\n  type: 'getter' | 'setter';\n  name: string;\n}\n\ninterface Field {\n  name: string;\n  node: TSESTree.Node;\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const currentFieldsStack = [new Map<string, Field>()];\n\n    function checkAccessor(accessor: TSESTree.Property | TSESTree.MethodDefinition) {\n      const accessorIsPublic =\n        accessor.type !== 'MethodDefinition' || accessor.accessibility === 'public';\n      const accessorInfo = getAccessorInfo(accessor);\n      const statements = getFunctionBody(accessor.value);\n      if (!accessorInfo || !accessorIsPublic || !statements || statements.length > 1) {\n        return;\n      }\n\n      const matchingFields = findMatchingFields(\n        currentFieldsStack[currentFieldsStack.length - 1],\n        accessorInfo.name,\n      );\n      if (\n        matchingFields.length > 0 &&\n        (statements.length === 0 ||\n          !isUsingAccessorFieldInBody(statements[0], accessorInfo, matchingFields))\n      ) {\n        const fieldToRefer = matchingFields[0];\n        const primaryMessage =\n          `Refactor this ${accessorInfo.type} ` +\n          `so that it actually refers to the property '${fieldToRefer.name}'.`;\n        const secondaryLocations = [fieldToRefer.node];\n        const secondaryMessages = ['Property which should be referred.'];\n\n        context.report({\n          message: toEncodedMessage(primaryMessage, secondaryLocations, secondaryMessages),\n          loc: accessor.key.loc,\n        });\n      }\n    }\n\n    return {\n      Property: (node: estree.Node) => checkAccessor(node as TSESTree.Property),\n      MethodDefinition: (node: estree.Node) => checkAccessor(node as TSESTree.MethodDefinition),\n\n      ClassBody: (node: estree.Node) => {\n        const classBody = node as TSESTree.ClassBody;\n        const fields = getFieldMap(classBody.body, classElement =>\n          (classElement.type === 'PropertyDefinition' ||\n            classElement.type === 'TSAbstractPropertyDefinition') &&\n          !classElement.static\n            ? classElement.key\n            : null,\n        );\n        const fieldsFromConstructor = fieldsDeclaredInConstructorParameters(classBody);\n        const allFields = new Map([...fields, ...fieldsFromConstructor]);\n        currentFieldsStack.push(allFields);\n      },\n      ObjectExpression: (node: estree.Node) => {\n        const currentFields = getFieldMap((node as TSESTree.ObjectExpression).properties, prop =>\n          isValidObjectField(prop) ? prop.key : null,\n        );\n        currentFieldsStack.push(currentFields);\n      },\n      ':matches(ClassBody, ObjectExpression):exit': () => {\n        currentFieldsStack.pop();\n      },\n    };\n  },\n};\n\nfunction getAccessorInfo(\n  accessor: TSESTree.Property | TSESTree.MethodDefinition,\n): AccessorInfo | null {\n  let name = getName(accessor.key);\n  if (!name) {\n    return null;\n  }\n\n  name = name.toLowerCase();\n  if (accessor.kind === 'get') {\n    return { type: 'getter', name };\n  } else if (accessor.kind === 'set') {\n    return { type: 'setter', name };\n  } else {\n    return setterOrGetter(name, accessor.value);\n  }\n}\n\nfunction getName(key: TSESTree.Node) {\n  if (key.type === 'Literal') {\n    return String(key.value);\n  } else if (key.type === 'Identifier') {\n    return key.name;\n  }\n  return null;\n}\n\nfunction setterOrGetter(name: string, functionExpression: TSESTree.Node): AccessorInfo | null {\n  if (functionExpression.type !== 'FunctionExpression') {\n    return null;\n  }\n\n  if (name.startsWith('set') && functionExpression.params.length === 1) {\n    return { type: 'setter', name: name.substring(3) };\n  }\n  if (name.startsWith('get') && functionExpression.params.length === 0) {\n    return { type: 'getter', name: name.substring(3) };\n  }\n\n  return null;\n}\n\nfunction getFieldMap<T extends TSESTree.Node>(\n  elements: T[],\n  getPropertyName: (arg: T) => TSESTree.PropertyName | null,\n) {\n  const fields: Map<string, Field> = new Map<string, Field>();\n  for (const element of elements) {\n    const propertyNameNode = getPropertyName(element);\n    if (propertyNameNode) {\n      const name = getName(propertyNameNode);\n      if (name) {\n        fields.set(name.toLowerCase(), {\n          name,\n          node: element,\n        });\n      }\n    }\n  }\n  return fields;\n}\n\nfunction isValidObjectField(prop: TSESTree.Node): prop is TSESTree.Property {\n  return prop.type === 'Property' && !prop.method && prop.kind === 'init';\n}\n\nfunction fieldsDeclaredInConstructorParameters(containingClass: TSESTree.ClassBody) {\n  const constr = getConstructorOf(containingClass);\n  if (constr) {\n    const fieldsFromConstructor = new Map<string, Field>();\n    for (const parameter of constr.params) {\n      if (\n        parameter.type === 'TSParameterProperty' &&\n        (parameter.accessibility || parameter.readonly)\n      ) {\n        const parameterName = getName(parameter.parameter);\n        if (parameterName) {\n          fieldsFromConstructor.set(parameterName, {\n            name: parameterName,\n            node: parameter,\n          });\n        }\n      }\n    }\n    return fieldsFromConstructor;\n  } else {\n    return new Map<string, Field>();\n  }\n}\n\nfunction getConstructorOf(\n  containingClass: TSESTree.ClassBody,\n): TSESTree.FunctionExpression | TSESTree.TSEmptyBodyFunctionExpression | undefined {\n  for (const classElement of containingClass.body) {\n    if (classElement.type === 'MethodDefinition' && getName(classElement.key) === 'constructor') {\n      return classElement.value;\n    }\n  }\n}\n\nfunction findMatchingFields(currentFields: Map<string, Field>, name: string) {\n  const underscoredTargetName1 = `_${name}`;\n  const underscoredTargetName2 = `${name}_`;\n  const exactFieldName = currentFields.get(name);\n  const underscoreFieldName1 = currentFields.get(underscoredTargetName1);\n  const underscoreFieldName2 = currentFields.get(underscoredTargetName2);\n  return [exactFieldName, underscoreFieldName1, underscoreFieldName2].filter(\n    field => field,\n  ) as Field[];\n}\n\nfunction getFunctionBody(node: TSESTree.Node) {\n  if (node.type !== 'FunctionExpression' || !node.body) {\n    return null;\n  }\n  return node.body.body;\n}\n\nfunction getPropertyName(expression: TSESTree.Expression | null) {\n  if (\n    expression &&\n    expression.type === 'MemberExpression' &&\n    expression.object.type === 'ThisExpression'\n  ) {\n    return getName(expression.property);\n  }\n  return null;\n}\n\nfunction getFieldUsedInsideSimpleBody(statement: TSESTree.Statement, accessorInfo: AccessorInfo) {\n  if (accessorInfo.type === 'setter') {\n    if (\n      statement.type === 'ExpressionStatement' &&\n      statement.expression.type === 'AssignmentExpression'\n    ) {\n      return getPropertyName(statement.expression.left);\n    }\n  } else if (statement.type === 'ReturnStatement') {\n    return getPropertyName(statement.argument);\n  }\n  return null;\n}\n\nfunction isUsingAccessorFieldInBody(\n  statement: TSESTree.Statement,\n  accessorInfo: AccessorInfo,\n  matchingFields: Field[],\n) {\n  const usedField = getFieldUsedInsideSimpleBody(statement, accessorInfo);\n  return !usedField || matchingFields.some(matchingField => usedField === matchingField.name);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2871\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as ts from 'typescript';\nimport { isRequiredParserServices, sortLike, RequiredParserServices } from '../utils';\n\nconst compareFunctionPlaceholder = '(a, b) => (a - b)';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      provideCompareFunction:\n        'Provide a compare function to avoid sorting elements alphabetically.',\n      suggestCompareFunction: 'Add a comparator function to sort in ascending order',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      CallExpression: (node: estree.Node) => {\n        const call = node as TSESTree.CallExpression;\n        const callee = call.callee;\n        if (call.arguments.length === 0 && callee.type === 'MemberExpression') {\n          const { object, property } = callee;\n          const text = context.getSourceCode().getText(property as estree.Node);\n          if (sortLike.includes(text)) {\n            const arrayElementType = arrayElementTypeOf(object, services);\n            if (arrayElementType && arrayElementType.kind === ts.SyntaxKind.NumberKeyword) {\n              const closingParenthesis = context\n                .getSourceCode()\n                .getLastToken(node, token => token.value === ')')!;\n              context.report({\n                messageId: 'provideCompareFunction',\n                node: property as estree.Node,\n                suggest: [\n                  {\n                    messageId: 'suggestCompareFunction',\n                    fix: fixer =>\n                      fixer.insertTextBefore(closingParenthesis, compareFunctionPlaceholder),\n                  },\n                ],\n              });\n            }\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction arrayElementTypeOf(node: TSESTree.Node, services: RequiredParserServices) {\n  const { typeToTypeNode, getTypeAtLocation } = services.program.getTypeChecker();\n  const typeNode = typeToTypeNode(\n    getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node)),\n    undefined,\n    undefined,\n  );\n  if (typeNode && ts.isArrayTypeNode(typeNode)) {\n    return typeNode.elementType;\n  }\n  return undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-6268\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isMemberWithProperty, isLiteral } from '../utils';\n\nconst bypassMethods = [\n  'bypassSecurityTrustHtml',\n  'bypassSecurityTrustStyle',\n  'bypassSecurityTrustScript',\n  'bypassSecurityTrustUrl',\n  'bypassSecurityTrustResourceUrl',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      checkAngularBypass: 'Make sure disabling Angular built-in sanitization is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) => {\n        const { callee, arguments: args } = node as estree.CallExpression;\n\n        if (\n          isMemberWithProperty(callee, ...bypassMethods) &&\n          args.length === 1 &&\n          !isHardcodedLiteral(args[0])\n        ) {\n          context.report({\n            messageId: 'checkAngularBypass',\n            node: (callee as estree.MemberExpression).property,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isHardcodedLiteral(node: estree.Node) {\n  if (node.type === 'TemplateLiteral') {\n    return node.expressions.length === 0;\n  } else {\n    return isLiteral(node);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2870\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getParent, isArray, isRequiredParserServices } from '../utils';\n\nconst ArrayDeleteExpression =\n  \"UnaryExpression[operator='delete'] > MemberExpression[computed=true]\";\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeDelete: 'Remove this use of \"delete\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (isRequiredParserServices(services)) {\n      return {\n        [ArrayDeleteExpression]: (node: estree.Node) => {\n          const member = node as estree.MemberExpression;\n          const object = member.object;\n          if (isArray(object, services)) {\n            raiseIssue(context);\n          }\n        },\n      };\n    }\n    return {};\n  },\n};\n\nfunction raiseIssue(context: Rule.RuleContext): void {\n  const deleteKeyword = context.getSourceCode().getFirstToken(getParent(context)!);\n  context.report({\n    messageId: 'removeDelete',\n    loc: deleteKeyword!.loc,\n  });\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3579\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isArray, isString, isRequiredParserServices } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      noAssociativeArray:\n        'Make it an object if it must have named properties; otherwise, use a numeric index here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    return {\n      'AssignmentExpression[left.type=\"MemberExpression\"]'(node: estree.Node) {\n        const { property, object } = (node as estree.AssignmentExpression)\n          .left as estree.MemberExpression;\n        if (isString(property, services) && isArray(object, services)) {\n          context.report({\n            messageId: 'noAssociativeArray',\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2424\n\nimport { globalsByLibraries } from '../utils';\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeOverride: 'Remove this override of \"{{overridden}}\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const overriden: Set<estree.Identifier> = new Set();\n\n    function isBuiltIn(variable: Scope.Variable) {\n      return globalsByLibraries.builtin.includes(variable.name);\n    }\n\n    function checkVariable(variable: Scope.Variable) {\n      if (isBuiltIn(variable)) {\n        variable.defs.forEach(def => overriden.add(def.name));\n        variable.references\n          .filter(ref => ref.isWrite())\n          .forEach(ref => overriden.add(ref.identifier));\n      }\n    }\n\n    function checkScope(scope: Scope.Scope) {\n      scope.variables.forEach(checkVariable);\n      scope.childScopes.forEach(checkScope);\n    }\n\n    function isTSEnumMemberId(node: estree.Identifier) {\n      const id = node as TSESTree.Identifier;\n      return id.parent?.type === 'TSEnumMember';\n    }\n\n    return {\n      Program: () => {\n        checkScope(context.getScope());\n      },\n      'Program:exit': () => {\n        overriden.forEach(node => {\n          if (!isTSEnumMemberId(node)) {\n            context.report({\n              messageId: 'removeOverride',\n              data: {\n                overridden: node.name,\n              },\n              node,\n            });\n          }\n        });\n        overriden.clear();\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1219\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeLabel: 'Remove this misleading \"{{label}}\" label.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const stack: number[] = [0];\n    function enterCase() {\n      stack.push(stack.pop()! + 1);\n    }\n    function leaveCase() {\n      stack.push(stack.pop()! - 1);\n    }\n    function inCase() {\n      return stack[stack.length - 1] > 0;\n    }\n    return {\n      SwitchCase: () => {\n        enterCase();\n      },\n      LabeledStatement: (node: estree.Node) => {\n        if (inCase()) {\n          const label = (node as estree.LabeledStatement).label;\n          context.report({\n            messageId: 'removeLabel',\n            data: {\n              label: label.name,\n            },\n            node: label,\n          });\n        }\n      },\n      'FunctionExpression, FunctionDeclaration': () => {\n        stack.push(0);\n      },\n      'SwitchCase:exit': () => {\n        leaveCase();\n      },\n      'FunctionExpression, FunctionDeclaration :exit': () => {\n        stack.pop();\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5332\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { URL } from 'url';\nimport {\n  getValueOfExpression,\n  getObjectExpressionProperty,\n  getModuleNameOfNode,\n  isCallToFQN,\n  getParent,\n} from '../utils';\n\nconst INSECURE_PROTOCOLS = ['http://', 'ftp://', 'telnet://'];\nconst LOOPBACK_PATTERN = /localhost|127(?:\\.[0-9]+){0,2}\\.[0-9]+$|\\/\\/(?:0*\\:)*?:?0*1$/;\nconst EXCEPTION_FULL_HOSTS = [\n  'www.w3.org',\n  'xml.apache.org',\n  'schemas.xmlsoap.org',\n  'schemas.openxmlformats.org',\n  'rdfs.org',\n  'purl.org',\n  'xmlns.com',\n  'schemas.google.com',\n  'a9.com',\n  'ns.adobe.com',\n  'ltsc.ieee.org',\n  'docbook.org',\n  'graphml.graphdrawing.org',\n  'json-schema.org',\n];\nconst EXCEPTION_TOP_HOSTS = [/(.*\\.)?example\\.com$/, /(.*\\.)?example\\.org$/, /(.*\\.)?test\\.com$/];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      insecureProtocol: 'Using {{protocol}} protocol is insecure. Use {{alternative}} instead.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function checkNodemailer(callExpression: estree.CallExpression) {\n      const firstArg = callExpression.arguments.length > 0 ? callExpression.arguments[0] : null;\n      if (!firstArg) {\n        return;\n      }\n      const firstArgValue = getValueOfExpression(context, firstArg, 'ObjectExpression');\n      const secure = getObjectExpressionProperty(firstArgValue, 'secure');\n      const requireTls = getObjectExpressionProperty(firstArgValue, 'requireTLS');\n      const port = getObjectExpressionProperty(firstArgValue, 'port');\n      if (secure && (secure.value.type !== 'Literal' || secure.value.raw !== 'false')) {\n        return;\n      }\n      if (requireTls && (requireTls.value.type !== 'Literal' || requireTls.value.raw !== 'false')) {\n        return;\n      }\n      if (port && (port.value.type !== 'Literal' || port.value.raw === '465')) {\n        return;\n      }\n      context.report({ node: callExpression.callee, ...getMessageAndData('http') });\n    }\n\n    function checkCallToFtp(callExpression: estree.CallExpression) {\n      if (\n        callExpression.callee.type === 'MemberExpression' &&\n        callExpression.callee.property.type === 'Identifier' &&\n        callExpression.callee.property.name === 'connect'\n      ) {\n        const newExpression = getValueOfExpression(\n          context,\n          callExpression.callee.object,\n          'NewExpression',\n        );\n        if (\n          !!newExpression &&\n          getModuleNameOfNode(context, newExpression.callee)?.value === 'ftp'\n        ) {\n          const firstArg = callExpression.arguments.length > 0 ? callExpression.arguments[0] : null;\n          if (!firstArg) {\n            return;\n          }\n          const firstArgValue = getValueOfExpression(context, firstArg, 'ObjectExpression');\n          const secure = getObjectExpressionProperty(firstArgValue, 'secure');\n          if (secure && secure.value.type === 'Literal' && secure.value.raw === 'false') {\n            context.report({\n              node: callExpression.callee,\n              ...getMessageAndData('ftp'),\n            });\n          }\n        }\n      }\n    }\n\n    function checkCallToRequire(callExpression: estree.CallExpression) {\n      if (callExpression.callee.type === 'Identifier' && callExpression.callee.name === 'require') {\n        const firstArg = callExpression.arguments.length > 0 ? callExpression.arguments[0] : null;\n        if (\n          firstArg &&\n          firstArg.type === 'Literal' &&\n          typeof firstArg.value === 'string' &&\n          firstArg.value === 'telnet-client'\n        ) {\n          context.report({\n            node: firstArg,\n            ...getMessageAndData('telnet'),\n          });\n        }\n      }\n    }\n\n    function isExceptionUrl(value: string) {\n      if (INSECURE_PROTOCOLS.includes(value)) {\n        const parent = getParent(context);\n        return !(parent?.type === 'BinaryExpression' && parent.operator === '+');\n      }\n      return hasExceptionHost(value);\n    }\n\n    function hasExceptionHost(value: string) {\n      let url;\n\n      try {\n        url = new URL(value);\n      } catch (err) {\n        return false;\n      }\n\n      const host = url.hostname;\n      return (\n        host.length === 0 ||\n        LOOPBACK_PATTERN.test(host) ||\n        EXCEPTION_FULL_HOSTS.some(exception => exception === host) ||\n        EXCEPTION_TOP_HOSTS.some(exception => exception.test(host))\n      );\n    }\n\n    return {\n      Literal: (node: estree.Node) => {\n        const literal = node as estree.Literal;\n        if (typeof literal.value === 'string') {\n          const value = literal.value.trim().toLocaleLowerCase();\n          const insecure = INSECURE_PROTOCOLS.find(protocol => value.startsWith(protocol));\n          if (insecure && !isExceptionUrl(value)) {\n            const protocol = insecure.substring(0, insecure.indexOf(':'));\n            context.report({\n              ...getMessageAndData(protocol),\n              node,\n            });\n          }\n        }\n      },\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (isCallToFQN(context, callExpression, 'nodemailer', 'createTransport')) {\n          checkNodemailer(callExpression);\n        }\n        checkCallToFtp(callExpression);\n        checkCallToRequire(callExpression);\n      },\n      ImportDeclaration: (node: estree.Node) => {\n        const importDeclaration = node as estree.ImportDeclaration;\n        if (\n          typeof importDeclaration.source.value === 'string' &&\n          importDeclaration.source.value === 'telnet-client'\n        ) {\n          context.report({\n            node: importDeclaration.source,\n            ...getMessageAndData('telnet'),\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction getMessageAndData(protocol: string) {\n  let alternative;\n  switch (protocol) {\n    case 'http':\n      alternative = 'https';\n      break;\n    case 'ftp':\n      alternative = 'sftp, scp or ftps';\n      break;\n    default:\n      alternative = 'ssh';\n  }\n  return { messageId: 'insecureProtocol', data: { protocol, alternative } };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport Variable = Scope.Variable;\nimport CodePathSegment = Rule.CodePathSegment;\nimport Reference = Scope.Reference;\n\ntype LiteralValue = string;\n\nclass AssignedValues extends Set<LiteralValue> {\n  type: 'AssignedValues' = 'AssignedValues';\n}\n\nconst assignedValues = (val: LiteralValue) => new AssignedValues([val]);\ninterface UnknownValue {\n  type: 'UnknownValue';\n}\nexport const unknownValue: UnknownValue = {\n  type: 'UnknownValue',\n};\n\nexport type Values = AssignedValues | UnknownValue;\n\nexport function reachingDefinitions(reachingDefinitionsMap: Map<string, ReachingDefinitions>) {\n  const worklist = Array.from(reachingDefinitionsMap.values(), defs => defs.segment);\n\n  while (worklist.length > 0) {\n    const current = worklist.pop()!;\n    const reachingDefs = reachingDefinitionsMap.get(current.id)!;\n    const outHasChanged = reachingDefs.propagate(reachingDefinitionsMap);\n    if (outHasChanged) {\n      current.nextSegments.forEach(next => worklist.push(next));\n    }\n  }\n}\n\nexport class ReachingDefinitions {\n  constructor(segment: Rule.CodePathSegment) {\n    this.segment = segment;\n  }\n\n  segment: CodePathSegment;\n\n  in = new Map<Variable, Values>();\n\n  out = new Map<Variable, Values>();\n\n  /**\n   * collects references in order they are evaluated, set in JS maintains insertion order\n   */\n  references = new Set<Reference>();\n\n  add(ref: Reference) {\n    const variable = ref.resolved;\n    if (variable) {\n      this.references.add(ref);\n    }\n  }\n\n  propagate(reachingDefinitionsMap: Map<string, ReachingDefinitions>) {\n    this.in.clear();\n    this.segment.prevSegments.forEach(prev => {\n      this.join(reachingDefinitionsMap.get(prev.id)!.out);\n    });\n    const newOut = new Map<Variable, Values>(this.in);\n    this.references.forEach(ref => this.updateProgramState(ref, newOut));\n    if (!equals(this.out, newOut)) {\n      this.out = newOut;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  updateProgramState(ref: Reference, programState: Map<Variable, Values>) {\n    const variable = ref.resolved;\n    if (!variable || !ref.isWrite()) {\n      return;\n    }\n    if (!ref.writeExpr) {\n      programState.set(variable, unknownValue);\n      return;\n    }\n    const rhsValues = resolveAssignedValues(variable, ref.writeExpr, programState, ref.from);\n    programState.set(variable, rhsValues);\n  }\n\n  join(previousOut: Map<Variable, Values>) {\n    for (const [key, values] of previousOut.entries()) {\n      const inValues = this.in.get(key) || new AssignedValues();\n      if (inValues.type === 'AssignedValues' && values.type === 'AssignedValues') {\n        values.forEach(val => inValues.add(val));\n        this.in.set(key, inValues);\n      } else {\n        this.in.set(key, unknownValue);\n      }\n    }\n  }\n}\n\nexport function resolveAssignedValues(\n  lhsVariable: Variable,\n  writeExpr: estree.Node | null,\n  assignedValuesMap: Map<Variable, Values>,\n  scope: Scope.Scope,\n): Values {\n  if (!writeExpr) {\n    return unknownValue;\n  }\n  switch (writeExpr.type) {\n    case 'Literal':\n      return writeExpr.raw ? assignedValues(writeExpr.raw) : unknownValue;\n    case 'Identifier':\n      const resolvedVar = getVariableFromIdentifier(writeExpr, scope);\n      if (resolvedVar && resolvedVar !== lhsVariable) {\n        const resolvedAssignedValues = assignedValuesMap.get(resolvedVar);\n        return resolvedAssignedValues || unknownValue;\n      }\n      return unknownValue;\n    default:\n      return unknownValue;\n  }\n}\n\nfunction equals(ps1: Map<Variable, Values>, ps2: Map<Variable, Values>) {\n  if (ps1.size !== ps2.size) {\n    return false;\n  }\n  for (const [variable, values1] of ps1) {\n    const values2 = ps2.get(variable);\n    if (!values2 || !valuesEquals(values2, values1)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction valuesEquals(a: Values, b: Values) {\n  if (a.type === 'AssignedValues' && b.type === 'AssignedValues') {\n    return setEquals(a, b);\n  }\n  return a === b;\n}\n\nfunction setEquals<T>(a: Set<T>, b: Set<T>): boolean {\n  return a.size === b.size && [...a].every(e => b.has(e));\n}\n\nexport function getVariableFromIdentifier(identifier: estree.Identifier, scope: Scope.Scope) {\n  let variable = scope.variables.find(value => value.name === identifier.name);\n  if (!variable && scope.upper) {\n    variable = scope.upper.variables.find(value => value.name === identifier.name);\n  }\n  return variable;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6079/javascript\n\nimport { Rule, Scope } from 'eslint';\nimport { Mocha, toEncodedMessage } from '../utils';\nimport * as estree from 'estree';\nimport { getVariableFromIdentifier } from './reachingDefinitions';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    let currentDoneVariable: Scope.Variable | undefined;\n    let doneCall: estree.Node | undefined;\n    let doneSegment: Rule.CodePathSegment | undefined;\n\n    let currentSegment: Rule.CodePathSegment | undefined;\n    let currentCase: Mocha.TestCase;\n    const segmentFirstStatement: Map<Rule.CodePathSegment, estree.Node> = new Map();\n\n    function checkForTestCase(node: estree.Node) {\n      const testCase = Mocha.extractTestCase(node);\n      if (!testCase) {\n        return;\n      }\n\n      currentCase = testCase;\n      currentDoneVariable = undefined;\n      if (testCase.callback.params.length === 0) {\n        return;\n      }\n      const [done] = testCase.callback.params;\n      if (done.type !== 'Identifier') {\n        return;\n      }\n      const callbackScope = context\n        .getScope()\n        .childScopes.find(scope => scope.block === testCase.callback);\n      if (!callbackScope) {\n        return;\n      }\n      currentDoneVariable = getVariableFromIdentifier(done, callbackScope);\n    }\n\n    function checkForDoneCall(node: estree.CallExpression) {\n      const { callee } = node;\n      if (\n        currentDoneVariable &&\n        currentDoneVariable.references.some(ref => ref.identifier === callee)\n      ) {\n        doneCall = node;\n        doneSegment = currentSegment;\n      }\n    }\n\n    function report(statementAfterDone: estree.Node) {\n      context.report({\n        node: statementAfterDone,\n        message: toEncodedMessage(`Move this code before the call to \"done\".`, [\n          doneCall as TSESTree.Node,\n        ]),\n      });\n\n      doneSegment = undefined;\n      doneCall = undefined;\n      currentDoneVariable = undefined;\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        checkForTestCase(node);\n        checkForDoneCall(node as estree.CallExpression);\n      },\n\n      ExpressionStatement: (node: estree.Node) => {\n        if (currentSegment && currentSegment === doneSegment) {\n          report(node);\n        }\n\n        if (currentSegment && !segmentFirstStatement.has(currentSegment)) {\n          segmentFirstStatement.set(currentSegment, node);\n        }\n      },\n\n      onCodePathSegmentStart(segment: Rule.CodePathSegment) {\n        currentSegment = segment;\n      },\n\n      onCodePathEnd(_codePath: Rule.CodePath, node: estree.Node) {\n        currentSegment = undefined;\n        if (currentCase?.callback === node && doneSegment) {\n          // we report an issue if one of 'doneSegment.nextSegments' is not empty\n          const statementAfterDone = doneSegment.nextSegments\n            .map(segment => segmentFirstStatement.get(segment))\n            .find(stmt => !!stmt);\n          if (statementAfterDone) {\n            report(statementAfterDone);\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport path from 'path';\nimport fs from 'fs';\nimport ts from 'typescript';\n\nconst programs = new Map<string, ts.Program>();\nlet programCount = 0;\n\nconst parseConfigHost: ts.ParseConfigHost = {\n  useCaseSensitiveFileNames: true,\n  readDirectory: ts.sys.readDirectory,\n  fileExists: ts.sys.fileExists,\n  readFile: ts.sys.readFile,\n};\n\nexport function getProgramById(programId: string): ts.Program {\n  const program = programs.get(programId);\n  if (!program) {\n    throw Error(`Failed to find program ${programId}`);\n  }\n  return program;\n}\n\nexport function deleteProgram(programId: string): void {\n  programs.delete(programId);\n}\n\nexport function createProgram(inputTsConfig: string): {\n  programId: string;\n  files: string[];\n  projectReferences: string[];\n} {\n  let tsConfig = inputTsConfig;\n\n  if (fs.lstatSync(tsConfig).isDirectory()) {\n    tsConfig = path.join(tsConfig, 'tsconfig.json');\n  }\n\n  console.log(`DEBUG creating program from ${tsConfig}`);\n  const config = ts.readConfigFile(tsConfig, parseConfigHost.readFile);\n\n  if (config.error) {\n    console.error(`Failed to parse tsconfig: ${tsConfig} (${diagnosticToString(config.error)})`);\n    throw Error(diagnosticToString(config.error));\n  }\n\n  const parsedConfigFile = ts.parseJsonConfigFileContent(\n    config.config,\n    parseConfigHost,\n    path.resolve(path.dirname(tsConfig)),\n    {\n      noEmit: true,\n    },\n    tsConfig,\n    // to include .vue files we can provide additional options here (parameter 'extraFileExtensions')\n  );\n\n  if (parsedConfigFile.errors.length > 0) {\n    const message = parsedConfigFile.errors.map(diagnosticToString).join('; ');\n    throw Error(message);\n  }\n\n  const programOptions: ts.CreateProgramOptions = {\n    rootNames: parsedConfigFile.fileNames,\n    options: { ...parsedConfigFile.options, allowNonTsExtensions: true },\n    projectReferences: parsedConfigFile.projectReferences,\n  };\n\n  const program = ts.createProgram(programOptions);\n  const maybeProjectReferences = program.getProjectReferences();\n  const projectReferences = maybeProjectReferences ? maybeProjectReferences.map(p => p.path) : [];\n  const files = program.getSourceFiles().map(sourceFile => sourceFile.fileName);\n\n  const programId = nextId();\n  programs.set(programId, program);\n  console.log(`DEBUG program from ${tsConfig} with id ${programId} is created`);\n\n  return { programId, files, projectReferences };\n}\n\nfunction nextId() {\n  programCount++;\n  return programCount.toString();\n}\n\nfunction diagnosticToString(diagnostic: ts.Diagnostic): string {\n  const text =\n    typeof diagnostic.messageText === 'string'\n      ? diagnostic.messageText\n      : diagnostic.messageText.messageText;\n  if (diagnostic.file) {\n    return `${text}  ${diagnostic.file?.fileName}:${diagnostic.start}`;\n  } else {\n    return text;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as fs from 'fs';\nimport * as babel from '@babel/eslint-parser';\nimport { Linter, SourceCode } from 'eslint';\nimport * as VueJS from 'vue-eslint-parser';\nimport * as tsEslintParser from '@typescript-eslint/parser';\nimport { getContext } from './context';\nimport { JsTsAnalysisInput } from './analyzer';\nimport { getProgramById } from './programManager';\n\nconst babelParser = { parse: babel.parseForESLint, parser: '@babel/eslint-parser' };\nconst vueParser = { parse: VueJS.parseForESLint, parser: 'vue-eslint-parser' };\nconst tsParser = { parse: tsEslintParser.parseForESLint, parser: '@typescript-eslint/parser' };\n\nfunction shouldTryTsParser() {\n  const context = getContext();\n  return context ? context.shouldUseTypeScriptParserForJS : true;\n}\n\nexport function buildSourceCode(input: JsTsAnalysisInput, language: 'ts' | 'js') {\n  const vue = input.filePath.endsWith('.vue');\n  let options, result;\n\n  // ts (including .vue)\n  if (language === 'ts') {\n    options = buildParsingOptions(input, false, vue ? tsParser.parser : undefined);\n    const parse = vue ? vueParser.parse : tsParser.parse;\n    return parseForEslint(input, parse, options);\n  }\n\n  const tryTsParser = shouldTryTsParser();\n\n  // .vue\n  if (vue) {\n    if (tryTsParser) {\n      options = buildParsingOptions(input, false, tsParser.parser);\n      result = parseForEslint(input, vueParser.parse, options);\n      if (result instanceof SourceCode) {\n        return result;\n      }\n      console.log(\n        `DEBUG Failed to parse ${input.filePath} with TypeScript compiler: ${result.message}`,\n      );\n    }\n    options = buildParsingOptions(input, true, babelParser.parser);\n    return parseForEslint(input, vueParser.parse, options);\n  }\n\n  // js\n  return buildSourceCodeForJs(input, tryTsParser);\n}\n\nfunction buildSourceCodeForJs(input: JsTsAnalysisInput, tryTsParser: boolean) {\n  if (tryTsParser) {\n    const result = parseForEslint(input, tsParser.parse, buildParsingOptions(input, false));\n    if (result instanceof SourceCode) {\n      return result;\n    }\n    console.log(\n      `DEBUG Failed to parse ${input.filePath} with TypeScript compiler: ${result.message}`,\n    );\n  }\n  const resultAsModule = parseForEslint(input, babelParser.parse, buildParsingOptions(input, true));\n  if (resultAsModule instanceof SourceCode) {\n    return resultAsModule;\n  }\n  const resultAsScript = parseForEslint(\n    input,\n    babelParser.parse,\n    buildParsingOptions(input, true, undefined, 'script'),\n  );\n  // prefer displaying parsing error as module if parsing as script also failed\n  return resultAsScript instanceof SourceCode ? resultAsScript : resultAsModule;\n}\n\nfunction parseForEslint(\n  { fileContent, filePath }: JsTsAnalysisInput,\n  parse: (code: string, options: {}) => any,\n  options: {},\n) {\n  try {\n    const text = fileContent || getFileContent(filePath);\n    const result = parse(text, options);\n    return new SourceCode({\n      ...result,\n      text,\n      parserServices: result.services,\n    });\n  } catch ({ lineNumber, message }) {\n    return {\n      line: lineNumber,\n      message,\n      code: parseExceptionCodeOf(message),\n    };\n  }\n}\n\nexport function buildParsingOptions(\n  input: JsTsAnalysisInput,\n  usingBabel = false,\n  parserOption?: string,\n  sourceType: 'script' | 'module' = 'module',\n) {\n  const project = 'tsConfigs' in input ? input.tsConfigs : undefined;\n  const programs = 'programId' in input ? [getProgramById(input.programId)] : undefined;\n\n  const options: Linter.ParserOptions = {\n    tokens: true,\n    comment: true,\n    loc: true,\n    range: true,\n    ecmaVersion: 2018,\n    sourceType,\n    codeFrame: false,\n    ecmaFeatures: {\n      jsx: true,\n      globalReturn: false,\n      legacyDecorators: true,\n    },\n\n    // for Vue parser\n    extraFileExtensions: ['.vue'],\n    parser: parserOption,\n\n    // for TS parser\n    filePath: input.filePath,\n    project,\n    programs,\n    // enable logs for @typescripteslint\n    // debugLevel: true,\n  };\n\n  if (usingBabel) {\n    return babelConfig(options);\n  }\n\n  return options;\n}\n\nexport function getFileContent(filePath: string) {\n  const fileContent = fs.readFileSync(filePath, { encoding: 'utf8' });\n  return stripBom(fileContent);\n}\n\nfunction stripBom(s: string) {\n  if (s.charCodeAt(0) === 0xfeff) {\n    return s.slice(1);\n  }\n  return s;\n}\n\nexport function unloadTypeScriptEslint() {\n  tsEslintParser.clearCaches();\n}\n\nexport type ParseException = {\n  lineNumber?: number;\n  message: string;\n  code: string;\n};\n\nexport enum ParseExceptionCode {\n  Parsing = 'PARSING',\n  MissingTypeScript = 'MISSING_TYPESCRIPT',\n  UnsupportedTypeScript = 'UNSUPPORTED_TYPESCRIPT',\n  FailingTypeScript = 'FAILING_TYPESCRIPT',\n  GeneralError = 'GENERAL_ERROR',\n}\n\n// exported for testing\nexport function parseExceptionCodeOf(exceptionMsg: string): ParseExceptionCode {\n  if (exceptionMsg.startsWith(\"Cannot find module 'typescript'\")) {\n    return ParseExceptionCode.MissingTypeScript;\n  } else if (exceptionMsg.startsWith('You are using version of TypeScript')) {\n    return ParseExceptionCode.UnsupportedTypeScript;\n  } else if (exceptionMsg.startsWith('Debug Failure')) {\n    return ParseExceptionCode.FailingTypeScript;\n  } else {\n    return ParseExceptionCode.Parsing;\n  }\n}\n\nfunction babelConfig(config: Linter.ParserOptions) {\n  const pluginPath = `${__dirname}/../node_modules`;\n  const babelOptions = {\n    presets: [\n      `${pluginPath}/@babel/preset-react`,\n      `${pluginPath}/@babel/preset-flow`,\n      `${pluginPath}/@babel/preset-env`,\n    ],\n    babelrc: false,\n    configFile: false,\n  };\n  return { ...config, requireConfigFile: false, babelOptions };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-125\n\nimport { Rule, SourceCode } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as babel from '@babel/eslint-parser';\nimport { buildParsingOptions } from '../parser';\n\nconst EXCLUDED_STATEMENTS = ['BreakStatement', 'LabeledStatement', 'ContinueStatement'];\n\ninterface GroupComment {\n  value: string;\n  nodes: TSESTree.Comment[];\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      commentedCode: 'Remove this commented out code.',\n      commentedCodeFix: 'Remove this commented out code',\n    },\n    hasSuggestions: true,\n  },\n  create(context: Rule.RuleContext) {\n    function getGroupedComments(comments: TSESTree.Comment[]): GroupComment[] {\n      const groupedComments: GroupComment[] = [];\n      let currentGroup: TSESTree.Comment[] = [];\n      for (const comment of comments) {\n        if (comment.type === 'Block') {\n          groupedComments.push({ value: comment.value, nodes: [comment] });\n        } else if (\n          currentGroup.length === 0 ||\n          areAdjacentLineComments(currentGroup[currentGroup.length - 1], comment)\n        ) {\n          currentGroup.push(comment);\n        } else {\n          groupedComments.push({\n            value: currentGroup.map(lineComment => lineComment.value).join('\\n'),\n            nodes: currentGroup,\n          });\n          currentGroup = [comment];\n        }\n      }\n\n      if (currentGroup.length > 0) {\n        groupedComments.push({\n          value: currentGroup.map(lineComment => lineComment.value).join('\\n'),\n          nodes: currentGroup,\n        });\n      }\n\n      return groupedComments;\n    }\n\n    function areAdjacentLineComments(previous: TSESTree.Comment, next: TSESTree.Comment) {\n      const nextCommentLine = next.loc.start.line;\n      if (previous.loc.start.line + 1 === nextCommentLine) {\n        const nextCodeToken = context.getSourceCode().getTokenAfter(previous);\n        return !nextCodeToken || nextCodeToken.loc.start.line > nextCommentLine;\n      }\n      return false;\n    }\n\n    return {\n      'Program:exit': () => {\n        const groupedComments = getGroupedComments(\n          context.getSourceCode().getAllComments() as TSESTree.Comment[],\n        );\n        groupedComments.forEach(groupComment => {\n          const rawTextTrimmed = groupComment.value.trim();\n          if (rawTextTrimmed !== '}' && containsCode(injectMissingBraces(rawTextTrimmed))) {\n            context.report({\n              messageId: 'commentedCode',\n              loc: getCommentLocation(groupComment.nodes),\n              suggest: [\n                {\n                  messageId: 'commentedCodeFix',\n                  fix(fixer) {\n                    const start = groupComment.nodes[0].range[0];\n                    const end = groupComment.nodes[groupComment.nodes.length - 1].range[1];\n                    return fixer.removeRange([start, end]);\n                  },\n                },\n              ],\n            });\n          }\n        });\n      },\n    };\n  },\n};\n\nfunction isExpressionExclusion(statement: estree.Node, code: SourceCode) {\n  if (statement.type === 'ExpressionStatement') {\n    const expression = statement.expression;\n    if (\n      expression.type === 'Identifier' ||\n      expression.type === 'SequenceExpression' ||\n      isUnaryPlusOrMinus(expression) ||\n      isExcludedLiteral(expression) ||\n      !code.getLastToken(statement, token => token.value === ';')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isExclusion(parsedBody: Array<estree.Node>, code: SourceCode) {\n  if (parsedBody.length === 1) {\n    const singleStatement = parsedBody[0];\n    return (\n      EXCLUDED_STATEMENTS.includes(singleStatement.type) ||\n      isReturnThrowExclusion(singleStatement) ||\n      isExpressionExclusion(singleStatement, code)\n    );\n  }\n  return false;\n}\n\nfunction containsCode(value: string) {\n  try {\n    const options = buildParsingOptions(\n      { filePath: 'some/filePath', tsConfigs: [], fileContent: '', fileType: 'MAIN' },\n      true,\n    );\n    const result = babel.parse(value, options);\n    const parseResult = new SourceCode(value, result);\n    return parseResult.ast.body.length > 0 && !isExclusion(parseResult.ast.body, parseResult);\n  } catch (exception) {\n    return false;\n  }\n}\n\nfunction injectMissingBraces(value: string) {\n  const openCurlyBraceNum = (value.match(/{/g) || []).length;\n  const closeCurlyBraceNum = (value.match(/}/g) || []).length;\n  const missingBraces = openCurlyBraceNum - closeCurlyBraceNum;\n  if (missingBraces > 0) {\n    return value + Array(missingBraces).fill('}').join('');\n  } else if (missingBraces < 0) {\n    return Array(-missingBraces).fill('{').join('') + value;\n  } else {\n    return value;\n  }\n}\n\nfunction getCommentLocation(nodes: TSESTree.Comment[]) {\n  return {\n    start: nodes[0].loc.start,\n    end: nodes[nodes.length - 1].loc.end,\n  };\n}\n\nfunction isReturnThrowExclusion(statement: estree.Node) {\n  if (statement.type === 'ReturnStatement' || statement.type === 'ThrowStatement') {\n    return statement.argument == null || statement.argument.type === 'Identifier';\n  }\n  return false;\n}\n\nfunction isUnaryPlusOrMinus(expression: estree.Expression) {\n  return (\n    expression.type === 'UnaryExpression' &&\n    (expression.operator === '+' || expression.operator === '-')\n  );\n}\n\nfunction isExcludedLiteral(expression: estree.Expression) {\n  if (expression.type === 'Literal') {\n    return typeof expression.value === 'string' || typeof expression.value === 'number';\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule, Scope } from 'eslint';\nimport Variable = Scope.Variable;\nimport CodePathSegment = Rule.CodePathSegment;\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/typescript-estree';\n\nexport function lva(liveVariablesMap: Map<string, LiveVariables>) {\n  const worklist = Array.from(liveVariablesMap.values(), lva => lva.segment);\n  while (worklist.length > 0) {\n    const current = worklist.pop()!;\n    const liveVariables = liveVariablesMap.get(current.id)!;\n    const liveInHasChanged = liveVariables.propagate(liveVariablesMap);\n    if (liveInHasChanged) {\n      current.prevSegments.forEach(prev => worklist.push(prev));\n    }\n  }\n}\n\nexport interface ReferenceLike {\n  identifier: estree.Identifier | TSESTree.JSXIdentifier;\n  from: Scope.Scope;\n  resolved: Scope.Variable | null;\n  writeExpr: estree.Node | null;\n  init: boolean;\n\n  isWrite(): boolean;\n\n  isRead(): boolean;\n\n  isWriteOnly(): boolean;\n\n  isReadOnly(): boolean;\n\n  isReadWrite(): boolean;\n}\n\nexport class LiveVariables {\n  constructor(segment: Rule.CodePathSegment) {\n    this.segment = segment;\n  }\n\n  segment: CodePathSegment;\n\n  /**\n   * variables that are being read in the block\n   */\n  gen = new Set<Variable>();\n  /**\n   * variables that are being written in the block\n   */\n  kill = new Set<Variable>();\n  /**\n   * variables needed by this or a successor block and are not killed in this block\n   */\n  in = new Set<Variable>();\n  /**\n   * variables needed by successors\n   */\n  out = new Set<Variable>();\n\n  /**\n   * collects references in order they are evaluated, set in JS maintains insertion order\n   */\n  references = new Set<ReferenceLike>();\n\n  add(ref: ReferenceLike) {\n    const variable = ref.resolved;\n    if (variable) {\n      if (ref.isRead()) {\n        this.gen.add(variable);\n      }\n      if (ref.isWrite()) {\n        this.kill.add(variable);\n      }\n      this.references.add(ref);\n    }\n  }\n\n  propagate(liveVariablesMap: Map<string, LiveVariables>) {\n    this.out.clear();\n    this.segment.nextSegments.forEach(next => {\n      liveVariablesMap.get(next.id)!.in.forEach(v => this.out.add(v));\n    });\n    const newIn = union(this.gen, difference(this.out, this.kill));\n    if (!equals(this.in, newIn)) {\n      this.in = newIn;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction difference<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set<T>([...a].filter(e => !b.has(e)));\n}\n\nfunction union<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set<T>([...a, ...b]);\n}\n\nfunction equals<T>(a: Set<T>, b: Set<T>): boolean {\n  return a.size === b.size && [...a].every(e => b.has(e));\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1854\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport {\n  isLiteral,\n  isObjectExpression,\n  isIdentifier,\n  isAssignmentExpression,\n} from 'eslint-plugin-sonarjs/lib/utils/nodes';\nimport { LiveVariables, lva, ReferenceLike } from './lva';\nimport CodePath = Rule.CodePath;\nimport Variable = Scope.Variable;\nimport CodePathSegment = Rule.CodePathSegment;\nimport { isUnaryExpression, isArrayExpression } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeAssignment: 'Remove this useless assignment to variable \"{{variable}}\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const codePathStack: CodePathContext[] = [];\n    const liveVariablesMap = new Map<string, LiveVariables>();\n    const readVariables = new Set<Variable>();\n    // map from Variable to CodePath ids where variable is used\n    const variableUsages = new Map<Variable, Set<string>>();\n    const referencesUsedInDestructuring = new Set<ReferenceLike>();\n    const destructuringStack: DestructuringContext[] = [];\n\n    return {\n      ':matches(AssignmentExpression, VariableDeclarator[init])': (node: estree.Node) => {\n        pushAssignmentContext(node as AssignmentLike);\n      },\n      ':matches(AssignmentExpression, VariableDeclarator[init]):exit': () => {\n        popAssignmentContext();\n      },\n      Identifier: (node: estree.Node) => {\n        if (isEnumConstant()) {\n          return;\n        }\n        checkIdentifierUsage(node as estree.Identifier);\n      },\n      JSXIdentifier: (node: unknown) => {\n        checkIdentifierUsage(node as TSESTree.JSXIdentifier);\n      },\n      ObjectPattern: () => {\n        destructuringStack.push(new DestructuringContext());\n      },\n      'ObjectPattern > Property > Identifier': (node: estree.Node) => {\n        const destructuring = peek(destructuringStack)!;\n        const { ref } = resolveReference(node as estree.Identifier);\n        if (ref) {\n          destructuring.references.push(ref);\n        }\n      },\n      'ObjectPattern > :matches(RestElement, ExperimentalRestProperty)': () => {\n        peek(destructuringStack).hasRest = true;\n      },\n      'ObjectPattern:exit': () => {\n        const destructuring = destructuringStack.pop();\n        if (destructuring && destructuring.hasRest) {\n          destructuring.references.forEach(ref => referencesUsedInDestructuring.add(ref));\n        }\n      },\n\n      'Program:exit': () => {\n        lva(liveVariablesMap);\n        liveVariablesMap.forEach(lva => {\n          checkSegment(lva);\n          reportNeverReadVariables(lva);\n        });\n      },\n\n      // CodePath events\n      onCodePathSegmentStart: (segment: CodePathSegment) => {\n        liveVariablesMap.set(segment.id, new LiveVariables(segment));\n      },\n      onCodePathStart: codePath => {\n        pushContext(new CodePathContext(codePath));\n      },\n      onCodePathEnd: () => {\n        popContext();\n      },\n    };\n\n    function pushAssignmentContext(node: AssignmentLike) {\n      peek(codePathStack).assignmentStack.push(new AssignmentContext(node));\n    }\n\n    function popAssignmentContext() {\n      const assignment = peek(codePathStack).assignmentStack.pop()!;\n      assignment.rhs.forEach(r => processReference(r));\n      assignment.lhs.forEach(r => processReference(r));\n    }\n\n    function checkSegment(liveVariables: LiveVariables) {\n      const willBeRead = new Set<Variable>(liveVariables.out);\n      const references = [...liveVariables.references].reverse();\n      references.forEach(ref => {\n        const variable = ref.resolved;\n        if (!variable) {\n          return;\n        }\n        if (ref.isWrite()) {\n          if (!willBeRead.has(variable) && shouldReport(ref)) {\n            report(ref);\n          }\n          willBeRead.delete(variable);\n        }\n        if (ref.isRead()) {\n          willBeRead.add(variable);\n        }\n      });\n    }\n\n    function reportNeverReadVariables(lva: LiveVariables) {\n      lva.references.forEach(ref => {\n        if (shouldReportReference(ref) && !readVariables.has(ref.resolved!)) {\n          report(ref);\n        }\n      });\n    }\n\n    function shouldReport(ref: ReferenceLike) {\n      const variable = ref.resolved;\n      return (\n        variable &&\n        shouldReportReference(ref) &&\n        !variableUsedOutsideOfCodePath(variable) &&\n        readVariables.has(variable)\n      );\n    }\n\n    function shouldReportReference(ref: ReferenceLike) {\n      const variable = ref.resolved;\n      return (\n        variable &&\n        isLocalVar(variable) &&\n        !isReferenceWithBasicValue(ref) &&\n        !isDefaultParameter(ref) &&\n        !referencesUsedInDestructuring.has(ref) &&\n        !variable.name.startsWith('_')\n      );\n    }\n\n    function isEnumConstant() {\n      return (context.getAncestors() as TSESTree.Node[]).some(n => n.type === 'TSEnumDeclaration');\n    }\n\n    function isDefaultParameter(ref: ReferenceLike) {\n      if (ref.identifier.type !== 'Identifier') {\n        return false;\n      }\n      const parent = (ref.identifier as TSESTree.Identifier).parent;\n      return parent && parent.type === 'AssignmentPattern';\n    }\n\n    function isLocalVar(variable: Variable) {\n      // @ts-ignore\n      const scope = variable.scope;\n      const node = scope.block as TSESTree.Node;\n      return node.type !== 'Program' && node.type !== 'TSModuleDeclaration';\n    }\n\n    function variableUsedOutsideOfCodePath(variable: Scope.Variable) {\n      return variableUsages.get(variable)!.size > 1;\n    }\n\n    function isReferenceWithBasicValue(ref: ReferenceLike) {\n      return ref.init && ref.writeExpr && isBasicValue(ref.writeExpr);\n    }\n\n    function isBasicValue(node: estree.Node): boolean {\n      const node1 = node as TSESTree.Node;\n      if (isLiteral(node1)) {\n        return node1.value === '' || [0, 1, null, true, false].includes(node1.value as any);\n      }\n      if (isIdentifier(node1)) {\n        return node1.name === 'undefined';\n      }\n      if (isUnaryExpression(node)) {\n        return isBasicValue(node.argument);\n      }\n      if (isObjectExpression(node1)) {\n        return node1.properties.length === 0;\n      }\n      if (isArrayExpression(node)) {\n        return node.elements.length === 0;\n      }\n      return false;\n    }\n\n    function report(ref: ReferenceLike) {\n      context.report({\n        messageId: 'removeAssignment',\n        data: {\n          variable: ref.identifier.name,\n        },\n        loc: ref.identifier.loc!,\n      });\n    }\n\n    function checkIdentifierUsage(node: estree.Identifier | TSESTree.JSXIdentifier) {\n      const { ref, variable } =\n        node.type === 'Identifier' ? resolveReference(node) : resolveJSXReference(node);\n      if (ref) {\n        processReference(ref);\n        if (variable) {\n          updateReadVariables(ref);\n        }\n      }\n      if (variable) {\n        updateVariableUsages(variable);\n      }\n    }\n\n    function resolveJSXReference(node: TSESTree.JSXIdentifier) {\n      if (isJSXAttributeName(node)) {\n        return {};\n      }\n      const jsxReference = new JSXReference(node, context.getScope());\n      return { ref: jsxReference, variable: jsxReference.resolved };\n    }\n\n    function isJSXAttributeName(node: TSESTree.JSXIdentifier) {\n      const parent = node.parent;\n      return parent && parent.type === 'JSXAttribute' && parent.name === node;\n    }\n\n    function processReference(ref: ReferenceLike) {\n      const assignmentStack = peek(codePathStack).assignmentStack;\n      if (assignmentStack.length > 0) {\n        const assignment = peek(assignmentStack);\n        assignment.add(ref);\n      } else {\n        peek(codePathStack).codePath.currentSegments.forEach(segment => {\n          lvaForSegment(segment).add(ref);\n        });\n      }\n    }\n\n    function lvaForSegment(segment: CodePathSegment) {\n      let lva;\n      if (liveVariablesMap.has(segment.id)) {\n        lva = liveVariablesMap.get(segment.id)!;\n      } else {\n        lva = new LiveVariables(segment);\n        liveVariablesMap.set(segment.id, lva);\n      }\n      return lva;\n    }\n\n    function updateReadVariables(reference: ReferenceLike) {\n      const variable = reference.resolved!;\n      if (reference.isRead()) {\n        readVariables.add(variable);\n      }\n    }\n\n    function updateVariableUsages(variable: Scope.Variable) {\n      const codePathId = peek(codePathStack).codePath.id;\n      if (variableUsages.has(variable)) {\n        variableUsages.get(variable)!.add(codePathId);\n      } else {\n        variableUsages.set(variable, new Set<string>([codePathId]));\n      }\n    }\n\n    function popContext() {\n      codePathStack.pop();\n    }\n\n    function pushContext(codePathContext: CodePathContext) {\n      codePathStack.push(codePathContext);\n    }\n\n    function resolveReference(node: estree.Identifier) {\n      return resolveReferenceRecursively(node, context.getScope());\n    }\n\n    function resolveReferenceRecursively(\n      node: estree.Identifier,\n      scope: Scope.Scope | null,\n    ): { ref: ReferenceLike | null; variable: Scope.Variable | null } {\n      if (scope === null) {\n        return { ref: null, variable: null };\n      }\n      const ref = scope.references.find(r => r.identifier === node);\n      if (ref) {\n        return { ref, variable: ref.resolved };\n      } else {\n        // if it's not a reference, it can be just declaration without initializer\n        const variable = scope.variables.find(v => v.defs.find(def => def.name === node));\n        if (variable) {\n          return { ref: null, variable };\n        }\n        // in theory we only need 1-level recursion, only for switch expression, which is likely a bug in eslint\n        // generic recursion is used for safety & readability\n        return resolveReferenceRecursively(node, scope.upper);\n      }\n    }\n  },\n};\n\nclass CodePathContext {\n  liveVariablesMap = new Map<string, LiveVariables>();\n  liveVariablesStack: LiveVariables[] = [];\n  codePath: CodePath;\n  segments = new Map<string, CodePathSegment>();\n  assignmentStack: AssignmentContext[] = [];\n\n  constructor(codePath: CodePath) {\n    this.codePath = codePath;\n  }\n}\n\nclass DestructuringContext {\n  hasRest = false;\n  references: ReferenceLike[] = [];\n}\n\ntype AssignmentLike = TSESTree.AssignmentExpression | TSESTree.VariableDeclarator;\n\nclass AssignmentContext {\n  node: AssignmentLike;\n\n  constructor(node: AssignmentLike) {\n    this.node = node;\n  }\n\n  lhs = new Set<ReferenceLike>();\n  rhs = new Set<ReferenceLike>();\n\n  isRhs(node: TSESTree.Node) {\n    return isAssignmentExpression(this.node) ? this.node.right === node : this.node.init === node;\n  }\n\n  isLhs(node: TSESTree.Node) {\n    return isAssignmentExpression(this.node) ? this.node.left === node : this.node.id === node;\n  }\n\n  add(ref: ReferenceLike) {\n    let parent = ref.identifier as TSESTree.Node | undefined;\n    while (parent) {\n      if (this.isLhs(parent)) {\n        this.lhs.add(ref);\n        break;\n      }\n      if (this.isRhs(parent)) {\n        this.rhs.add(ref);\n        break;\n      }\n      parent = parent.parent;\n    }\n    if (parent === null) {\n      throw new Error('failed to find assignment lhs/rhs');\n    }\n  }\n}\n\nclass JSXReference implements ReferenceLike {\n  from: Scope.Scope;\n  identifier: TSESTree.JSXIdentifier;\n  init = false;\n  resolved: Scope.Variable | null;\n  writeExpr: estree.Node | null = null;\n\n  constructor(node: TSESTree.JSXIdentifier, scope: Scope.Scope) {\n    this.from = scope;\n    this.identifier = node;\n    this.resolved = findJSXVariableInScope(node, scope);\n  }\n\n  isRead(): boolean {\n    return true;\n  }\n\n  isReadOnly(): boolean {\n    return true;\n  }\n\n  isReadWrite(): boolean {\n    return false;\n  }\n\n  isWrite(): boolean {\n    return false;\n  }\n\n  isWriteOnly(): boolean {\n    return false;\n  }\n}\n\nfunction findJSXVariableInScope(\n  node: TSESTree.JSXIdentifier,\n  scope: Scope.Scope | null,\n): Scope.Variable | null {\n  return (\n    scope &&\n    (scope.variables.find(v => v.name === node.name) || findJSXVariableInScope(node, scope.upper))\n  );\n}\n\nfunction peek<T>(arr: Array<T>) {\n  return arr[arr.length - 1];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3001\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeDelete: 'Remove this \"delete\" operator or pass an object property to it.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      \"UnaryExpression[operator='delete'][argument.type!='MemberExpression']\": (\n        node: estree.Node,\n      ) => {\n        const { argument } = node as estree.UnaryExpression;\n        if (!isGlobalProperty(argument, context.getScope().references)) {\n          context.report({\n            messageId: 'removeDelete',\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isGlobalProperty(expr: estree.Expression, references: Scope.Reference[]) {\n  return (\n    expr.type === 'Identifier' &&\n    references.filter(ref => ref.identifier.name === expr.name && ref.resolved).length === 0\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S4621/javascript\n\nimport { Rule, AST } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    return {\n      'TSUnionType, TSIntersectionType'(node: estree.Node) {\n        const sourceCode = context.getSourceCode();\n        const compositeType = node as unknown as TSESTree.TSUnionType | TSESTree.TSIntersectionType;\n        const groupedTypes: Map<string, Array<TSESTree.Node>> = new Map();\n\n        compositeType.types.forEach(typescriptType => {\n          const nodeValue = sourceCode.getText(typescriptType as unknown as estree.Node);\n          const nodesWithGivenType = groupedTypes.get(nodeValue);\n          const nodeType = typescriptType as TSESTree.Node;\n          if (!nodesWithGivenType) {\n            groupedTypes.set(nodeValue, [nodeType]);\n          } else {\n            nodesWithGivenType.push(nodeType);\n          }\n        });\n\n        groupedTypes.forEach(duplicates => {\n          if (duplicates.length > 1) {\n            const suggest = getSuggestions(compositeType, duplicates, context);\n            const primaryNode = duplicates.splice(1, 1)[0];\n            const secondaryMessages = Array(duplicates.length);\n            secondaryMessages[0] = `Original`;\n            secondaryMessages.fill(`Another duplicate`, 1, duplicates.length);\n\n            context.report({\n              message: toEncodedMessage(\n                `Remove this duplicated type or replace with another one.`,\n                duplicates,\n                secondaryMessages,\n              ),\n              loc: primaryNode.loc,\n              suggest,\n            });\n          }\n        });\n      },\n    };\n  },\n};\n\nfunction getSuggestions(\n  composite: TSESTree.TSUnionType | TSESTree.TSIntersectionType,\n  duplicates: TSESTree.Node[],\n  context: Rule.RuleContext,\n): Rule.SuggestionReportDescriptor[] {\n  const ranges: [number, number][] = duplicates.slice(1).map(duplicate => {\n    const idx = composite.types.indexOf(duplicate as TSESTree.TypeNode);\n    return [\n      getEnd(context, composite.types[idx - 1], composite),\n      getEnd(context, duplicate, composite),\n    ];\n  });\n  return [\n    {\n      desc: 'Remove duplicate types',\n      fix: fixer => ranges.map(r => fixer.removeRange(r)),\n    },\n  ];\n}\n\nfunction getEnd(context: Rule.RuleContext, node: TSESTree.Node, composite: TSESTree.Node) {\n  let end: estree.Node | AST.Token = node as unknown as estree.Node;\n  while (true) {\n    const nextToken: AST.Token | null = context.getSourceCode().getTokenAfter(end);\n    if (nextToken && nextToken.value === ')' && nextToken.range![1] <= composite.range![1]) {\n      end = nextToken;\n    } else {\n      break;\n    }\n  }\n  return end.range![1];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6019/javascript\n\nimport { Rule } from 'eslint';\nimport { createRegExpRule, RegexRuleContext } from './regex-rule-template';\nimport * as regexpp from 'regexpp';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  return {\n    onRegExpLiteralEnter: (node: regexpp.AST.RegExpLiteral) => {\n      node.pattern.alternatives.forEach(({ elements }) => checkElements(elements, context));\n    },\n  };\n});\n\nfunction report(quantifier: regexpp.AST.Quantifier, context: RegexRuleContext) {\n  const ending = quantifier.min === 1 ? '' : 's';\n  const message = `Fix this reluctant quantifier that will only ever match ${quantifier.min} repetition${ending}.`;\n  context.reportRegExpNode({\n    message,\n    regexpNode: quantifier,\n    node: context.node,\n  });\n}\n\nfunction checkElements(elements: regexpp.AST.Element[], context: RegexRuleContext) {\n  if (elements.length === 0) {\n    return;\n  }\n\n  const lastElement = elements[elements.length - 1];\n  if (lastElement.type === 'Quantifier' && !lastElement.greedy) {\n    report(lastElement, context);\n    return;\n  }\n\n  if (elements.length === 1) {\n    return;\n  }\n\n  const lastButOneElement = elements[elements.length - 2];\n  if (lastButOneElement.type === 'Quantifier' && !lastButOneElement.greedy) {\n    if (lastElement.type === 'Assertion' && lastElement.kind === 'end') {\n      context.reportRegExpNode({\n        message: `Remove the '?' from this unnecessarily reluctant quantifier.`,\n        regexpNode: lastButOneElement,\n        node: context.node,\n      });\n    } else if (lastElement.type === 'Quantifier' && lastElement.min === 0) {\n      report(lastButOneElement, context);\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6323\n\nimport { Rule } from 'eslint';\nimport { Alternation, last } from '../utils';\nimport { createRegExpRule } from './regex-rule-template';\nimport * as regexpp from 'regexpp';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  function checkAlternation(alternation: Alternation) {\n    const { alternatives: alts } = alternation;\n    if (alts.length <= 1) {\n      return;\n    }\n    for (let i = 0; i < alts.length; i++) {\n      let alt = alts[i];\n      if (alt.elements.length === 0 && !isLastEmptyInGroup(alt)) {\n        context.reportRegExpNode({\n          message: 'Remove this empty alternative.',\n          regexpNode: alt,\n          offset: i === alts.length - 1 ? [-1, 0] : [0, 1], // we want to raise the issue on the |\n          node: context.node,\n        });\n      }\n    }\n  }\n\n  return {\n    onPatternEnter: checkAlternation,\n    onGroupEnter: checkAlternation,\n    onCapturingGroupEnter: checkAlternation,\n  };\n});\n\nfunction isLastEmptyInGroup(alt: regexpp.AST.Alternative) {\n  const group = alt.parent;\n  return (\n    (group.type === 'Group' || group.type === 'CapturingGroup') &&\n    last(group.alternatives) === alt &&\n    group.parent.type !== 'Quantifier'\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6331\n\nimport { Rule } from 'eslint';\nimport { AST } from 'regexpp';\nimport { createRegExpRule } from './regex-rule-template';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  function checkEmptyGroup(group: AST.Group | AST.CapturingGroup) {\n    const { alternatives } = group;\n    if (alternatives.every(alt => alt.elements.length === 0)) {\n      context.reportRegExpNode({\n        message: 'Remove this empty group.',\n        node: context.node,\n        regexpNode: group,\n      });\n    }\n  }\n  return {\n    onGroupEnter: checkEmptyGroup,\n    onCapturingGroupEnter: checkEmptyGroup,\n  };\n});\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-888\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getVariableFromName } from '../utils';\n\nconst equalityOperator = ['!=', '=='];\nconst plusMinusOperator = ['+=', '-='];\n\ninterface CompleteForStatement extends estree.BaseStatement {\n  type: 'ForStatement';\n  init?: estree.VariableDeclaration | estree.Expression | null;\n  test: estree.Expression;\n  update: estree.Expression;\n  body: estree.Statement;\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      replaceOperator:\n        \"Replace '{{operator}}' operator with one of '<=', '>=', '<', or '>' comparison operators.\",\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      ForStatement: (node: estree.Node) => {\n        const forStatement = node as estree.ForStatement;\n        if (!forStatement.test || !forStatement.update) {\n          return;\n        }\n        const completeForStatement = node as CompleteForStatement;\n        const condition = completeForStatement.test;\n        if (\n          isEquality(condition) &&\n          isUpdateIncDec(completeForStatement.update) &&\n          !isException(completeForStatement, context)\n        ) {\n          context.report({\n            messageId: 'replaceOperator',\n            data: {\n              operator: condition.operator,\n            },\n            node: condition,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isEquality(expression: estree.Expression): expression is estree.BinaryExpression {\n  return !!(\n    expression.type === 'BinaryExpression' && equalityOperator.includes(expression.operator)\n  );\n}\n\nfunction isUpdateIncDec(expression: estree.Expression): boolean {\n  if (isIncDec(expression) || expression.type === 'UpdateExpression') {\n    return true;\n  } else if (expression.type === 'SequenceExpression') {\n    return expression.expressions.every(isUpdateIncDec);\n  }\n  return false;\n}\n\nfunction isIncDec(expression: estree.Expression): expression is estree.AssignmentExpression {\n  return !!(\n    expression.type === 'AssignmentExpression' && plusMinusOperator.includes(expression.operator)\n  );\n}\n\nfunction isException(forStatement: CompleteForStatement, context: Rule.RuleContext) {\n  return (\n    isNontrivialConditionException(forStatement) ||\n    isTrivialIteratorException(forStatement, context)\n  );\n}\n\nfunction isNontrivialConditionException(forStatement: CompleteForStatement) {\n  //If we reach this point, we know that test is an equality kind\n  const condition = forStatement.test as estree.BinaryExpression;\n  var counters: Array<string> = [];\n  collectCounters(forStatement.update, counters);\n  return condition.left.type !== 'Identifier' || !counters.includes(condition.left.name);\n}\n\nfunction collectCounters(expression: estree.Expression, counters: Array<string>) {\n  let counter: estree.Node | null | undefined = undefined;\n\n  if (isIncDec(expression)) {\n    counter = expression.left;\n  } else if (expression.type === 'UpdateExpression') {\n    counter = expression.argument;\n  } else if (expression.type === 'SequenceExpression') {\n    expression.expressions.forEach(e => collectCounters(e, counters));\n  }\n\n  if (counter && counter.type === 'Identifier') {\n    counters.push(counter.name);\n  }\n}\n\nfunction isTrivialIteratorException(forStatement: CompleteForStatement, context: Rule.RuleContext) {\n  const init = forStatement.init;\n  const condition = forStatement.test;\n\n  if (init && isNotEqual(condition)) {\n    const updatedByOne = checkForUpdateByOne(forStatement.update, forStatement.body, context);\n    if (updatedByOne !== 0) {\n      const beginValue = getValue(init);\n      const endValue = getValue(condition);\n      return (\n        beginValue !== undefined &&\n        endValue !== undefined &&\n        updatedByOne === Math.sign(endValue - beginValue)\n      );\n    }\n  }\n\n  return false;\n}\n\nfunction isNotEqual(node: estree.Node): node is estree.BinaryExpression {\n  return !!(node && node.type === 'BinaryExpression' && node.operator === '!=');\n}\n\nfunction checkForUpdateByOne(\n  update: estree.Expression,\n  loopBody: estree.Node,\n  context: Rule.RuleContext,\n) {\n  if (isUpdateByOne(update, loopBody, context)) {\n    if (update.operator === '++' || update.operator === '+=') {\n      return +1;\n    }\n    if (update.operator === '--' || update.operator === '-=') {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nfunction isUpdateByOne(\n  update: estree.Expression,\n  loopBody: estree.Node,\n  context: Rule.RuleContext,\n): update is estree.UpdateExpression | estree.AssignmentExpression {\n  return (\n    (update.type === 'UpdateExpression' && !isUsedInsideBody(update.argument, loopBody, context)) ||\n    (isUpdateOnOneWithAssign(update) && !isUsedInsideBody(update.left, loopBody, context))\n  );\n}\n\nfunction isUsedInsideBody(id: estree.Node, loopBody: estree.Node, context: Rule.RuleContext) {\n  if (id.type === 'Identifier') {\n    const variable = getVariableFromName(context, id.name);\n    const bodyRange = loopBody.range;\n    if (variable && bodyRange) {\n      return variable.references.some(ref => isInBody(ref.identifier, bodyRange));\n    }\n  }\n  return false;\n}\n\nfunction isInBody(id: estree.Identifier, bodyRange: [number, number]) {\n  return id && id.range && id.range[0] > bodyRange[0] && id.range[1] < bodyRange[1];\n}\n\nfunction getValue(node: estree.Node) {\n  if (isNotEqual(node)) {\n    return getInteger(node.right);\n  } else if (isOneVarDeclaration(node)) {\n    const variable = node.declarations[0];\n    return getInteger(variable.init);\n  } else if (node.type === 'AssignmentExpression') {\n    return getInteger(node.right);\n  }\n  return undefined;\n}\n\nfunction getInteger(node: estree.Node | undefined | null) {\n  if (node && node.type === 'Literal' && typeof node.value === 'number') {\n    return node.value;\n  }\n  return undefined;\n}\n\nfunction isOneVarDeclaration(node: estree.Node): node is estree.VariableDeclaration {\n  return node.type === 'VariableDeclaration' && node.declarations.length === 1;\n}\n\nfunction isUpdateOnOneWithAssign(\n  expression: estree.Expression,\n): expression is estree.AssignmentExpression {\n  if (isIncDec(expression)) {\n    const right = expression.right;\n    return right.type === 'Literal' && right.value === 1;\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4139\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport ts from 'typescript';\nimport { getTypeFromTreeNode, isRequiredParserServices } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      useForOf: 'Use \"for...of\" to iterate over this \"{{iterable}}\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      ForInStatement: (node: estree.Node) => {\n        const type = getTypeFromTreeNode((node as estree.ForInStatement).right, services);\n        if (isIterable(type)) {\n          const iterable = type.symbol ? type.symbol.name : 'String';\n          context.report({\n            messageId: 'useForOf',\n            data: { iterable },\n            loc: context.getSourceCode().getFirstToken(node)!.loc,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isIterable(type: ts.Type) {\n  return isCollection(type) || isString(type);\n}\n\nfunction isCollection(type: ts.Type) {\n  return (\n    type.symbol !== undefined &&\n    [\n      'Array',\n      'Int8Array',\n      'Uint8Array',\n      'Uint8ClampedArray',\n      'Int16Array',\n      'Uint16Array',\n      'Int32Array',\n      'Uint32Array',\n      'Float32Array',\n      'Float64Array',\n      'BigInt64Array',\n      'BigUint64Array',\n      'Set',\n      'Map',\n    ].includes(type.symbol.name)\n  );\n}\n\nfunction isString(type: ts.Type) {\n  return (\n    (type.symbol !== undefined && type.symbol.name === 'String') ||\n    (type.flags & ts.TypeFlags.StringLike) !== 0\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1530\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getParent, RuleContext } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      blockedFunction: 'Do not use function declarations within blocks.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      ':not(FunctionDeclaration, FunctionExpression, ArrowFunctionExpression) > BlockStatement > FunctionDeclaration':\n        (node: estree.Node) => {\n          context.report({\n            messageId: 'blockedFunction',\n            loc: getMainFunctionTokenLocation(\n              node as TSESTree.FunctionDeclaration,\n              getParent(context) as TSESTree.Node,\n              context as unknown as RuleContext,\n            ),\n          });\n        },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2990\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      removeThis: `Remove the use of \"this\".`,\n      suggestRemoveThis: 'Remove \"this\"',\n      suggestUseWindow: 'Replace \"this\" with \"window\" object',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'MemberExpression[object.type=\"ThisExpression\"]'(node: estree.Node) {\n        const memberExpression = node as estree.MemberExpression;\n        const scopeType = context.getScope().variableScope.type;\n        const isInsideClass = context\n          .getAncestors()\n          .some(\n            ancestor => ancestor.type === 'ClassDeclaration' || ancestor.type === 'ClassExpression',\n          );\n        if ((scopeType === 'global' || scopeType === 'module') && !isInsideClass) {\n          const suggest: Rule.SuggestionReportDescriptor[] = [];\n          if (!memberExpression.computed) {\n            const propertyText = context.getSourceCode().getText(memberExpression.property);\n            suggest.push(\n              {\n                messageId: 'suggestRemoveThis',\n                fix: fixer => fixer.replaceText(node, propertyText),\n              },\n              {\n                messageId: 'suggestUseWindow',\n                fix: fixer => fixer.replaceText(memberExpression.object, 'window'),\n              },\n            );\n          }\n          context.report({\n            messageId: 'removeThis',\n            node: memberExpression.object,\n            suggest,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2137\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nconst illegalNames = ['eval', 'arguments', 'undefined', 'NaN', 'Infinity'];\n\nconst getDeclarationIssue = (redeclareType: string) => (name: string) => ({\n  messageId: 'forbidDeclaration',\n  data: { symbol: name, type: redeclareType },\n});\n\nconst getModificationIssue = (functionName: string) => ({\n  messageId: 'removeModification',\n  data: { symbol: functionName },\n});\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeModification: 'Remove the modification of \"{{symbol}}\".',\n      forbidDeclaration: 'Do not use \"{{symbol}}\" to declare a {{type}} - use another name.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'FunctionDeclaration, FunctionExpression': function (node: estree.Node) {\n        const func = node as estree.FunctionDeclaration | estree.FunctionExpression;\n        reportBadUsageOnFunction(func, func.id, context);\n      },\n      ArrowFunctionExpression: function (node: estree.Node) {\n        reportBadUsageOnFunction(node as estree.ArrowFunctionExpression, undefined, context);\n      },\n      VariableDeclaration(node: estree.Node) {\n        (node as estree.VariableDeclaration).declarations.forEach(decl => {\n          reportBadUsage(decl.id, getDeclarationIssue('variable'), context);\n        });\n      },\n      UpdateExpression(node: estree.Node) {\n        reportBadUsage((node as estree.UpdateExpression).argument, getModificationIssue, context);\n      },\n      AssignmentExpression(node: estree.Node) {\n        reportBadUsage((node as estree.AssignmentExpression).left, getModificationIssue, context);\n      },\n      CatchClause(node: estree.Node) {\n        reportBadUsage(\n          (node as estree.CatchClause).param,\n          getDeclarationIssue('variable'),\n          context,\n        );\n      },\n    };\n  },\n};\n\nfunction reportBadUsageOnFunction(\n  func: estree.Function,\n  id: estree.Node | null | undefined,\n  context: Rule.RuleContext,\n) {\n  reportBadUsage(id, getDeclarationIssue('function'), context);\n  func.params.forEach(p => {\n    reportBadUsage(p, getDeclarationIssue('parameter'), context);\n  });\n}\n\nfunction reportBadUsage(\n  node: estree.Node | null | undefined,\n  buildMessageAndData: (name: string) => { messageId: string; data: any },\n  context: Rule.RuleContext,\n) {\n  if (node) {\n    switch (node.type) {\n      case 'Identifier': {\n        if (illegalNames.includes(node.name)) {\n          context.report({\n            node: node,\n            ...buildMessageAndData(node.name),\n          });\n        }\n        break;\n      }\n      case 'RestElement':\n        reportBadUsage(node.argument, buildMessageAndData, context);\n        break;\n      case 'ObjectPattern':\n        node.properties.forEach(prop => {\n          if (prop.type === 'Property') {\n            reportBadUsage(prop.value, buildMessageAndData, context);\n          } else {\n            reportBadUsage(prop.argument, buildMessageAndData, context);\n          }\n        });\n        break;\n      case 'ArrayPattern':\n        node.elements.forEach(elem => {\n          reportBadUsage(elem, buildMessageAndData, context);\n        });\n        break;\n      case 'AssignmentPattern':\n        reportBadUsage(node.left, buildMessageAndData, context);\n        break;\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2068\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isStringLiteral } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      reviewCredential: 'Review this potentially hardcoded credential.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const variableNames = context.options;\n    const literalRegExp = variableNames.map(name => new RegExp(`${name}=.+`));\n    return {\n      VariableDeclarator: (node: estree.Node) => {\n        const declaration = node as estree.VariableDeclarator;\n        checkAssignment(context, variableNames, declaration.id, declaration.init);\n      },\n      AssignmentExpression: (node: estree.Node) => {\n        const assignment = node as estree.AssignmentExpression;\n        checkAssignment(context, variableNames, assignment.left, assignment.right);\n      },\n      Property: (node: estree.Node) => {\n        const property = node as estree.Property;\n        checkAssignment(context, variableNames, property.key, property.value);\n      },\n      Literal: (node: estree.Node) => {\n        const literal = node as estree.Literal;\n        checkLiteral(context, literalRegExp, literal);\n      },\n    };\n  },\n};\n\nfunction checkAssignment(\n  context: Rule.RuleContext,\n  patterns: string[],\n  variable: estree.Node,\n  initializer?: estree.Node | null,\n) {\n  if (\n    initializer &&\n    isStringLiteral(initializer) &&\n    (initializer.value as string).length > 0 &&\n    patterns.some(pattern => context.getSourceCode().getText(variable).includes(pattern))\n  ) {\n    context.report({\n      messageId: 'reviewCredential',\n      node: initializer,\n    });\n  }\n}\n\nfunction checkLiteral(context: Rule.RuleContext, patterns: RegExp[], literal: estree.Literal) {\n  if (isStringLiteral(literal) && patterns.some(pattern => pattern.test(literal.value as string))) {\n    context.report({\n      messageId: 'reviewCredential',\n      node: literal,\n    });\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1313\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIP } from 'net';\n\nconst netMaskRegex = /(^[^\\/]+)\\/\\d{1,3}$/;\nconst acceptedIpAddresses = ['255.255.255.255', '::1', '::', '0:0:0:0:0:0:0:1', '0:0:0:0:0:0:0:0'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      checkIP: 'Make sure using a hardcoded IP address {{ip}} is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function isException(ip: string) {\n      return (\n        ip.startsWith('127.') ||\n        ip.startsWith('0.') ||\n        // avoid FP for OID http://www.oid-info.com/introduction.htm\n        ip.startsWith('2.5') ||\n        acceptedIpAddresses.includes(ip)\n      );\n    }\n    function isIPV4OctalOrHex(ip: string) {\n      const digits = ip.split('.');\n      if (digits.length !== 4) {\n        return false;\n      }\n      const decimalDigits = [];\n      for (const digit of digits) {\n        if (digit.match(/^0[0-7]*$/)) {\n          decimalDigits.push(parseInt(digit, 8));\n        } else if (digit.match(/^0[xX][0-9a-fA-F]+$/)) {\n          decimalDigits.push(parseInt(digit, 16));\n        } else {\n          return false;\n        }\n      }\n      const convertedIp = `${decimalDigits[0]}.${decimalDigits[1]}.${decimalDigits[2]}.${decimalDigits[3]}`;\n      return !isException(convertedIp) && isIP(convertedIp) !== 0;\n    }\n    return {\n      Literal(node: estree.Node) {\n        const { value } = node as estree.Literal;\n        if (typeof value !== 'string') {\n          return;\n        }\n        let ip = value;\n        const result = value.match(netMaskRegex);\n        if (result) {\n          ip = result[1];\n        }\n        if ((!isException(ip) && isIP(ip) !== 0) || isIPV4OctalOrHex(ip)) {\n          context.report({\n            node,\n            messageId: 'checkIP',\n            data: {\n              ip: value,\n            },\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4328\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport builtins from 'builtin-modules';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as ts from 'typescript';\nimport { RequiredParserServices } from '../utils';\n\nconst DefinitelyTyped = '@types/';\n\n/**\n * Cache for each dirname the dependencies of the nearest package.json.\n */\nconst cache: Map<string, Set<string>> = new Map();\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeOrAddDependency: 'Either remove this import or add it as a dependency.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const whitelist = context.options;\n    const dependencies = getDependencies(context.getFilename());\n    const aliasedPathsMappingPatterns = extractPathMappingPatterns(context.parserServices);\n    if (aliasedPathsMappingPatterns === 'matchAll') {\n      // deactivates this rule altogether.\n      return {};\n    }\n    return {\n      CallExpression: (node: estree.Node) => {\n        const call = node as estree.CallExpression;\n        if (\n          call.callee.type === 'Identifier' &&\n          call.callee.name === 'require' &&\n          call.arguments.length === 1\n        ) {\n          const [argument] = call.arguments;\n          if (argument.type === 'Literal') {\n            const requireToken = call.callee;\n            raiseOnImplicitImport(\n              argument,\n              requireToken.loc!,\n              dependencies,\n              whitelist,\n              aliasedPathsMappingPatterns,\n              context,\n            );\n          }\n        }\n      },\n      ImportDeclaration: (node: estree.Node) => {\n        const module = (node as estree.ImportDeclaration).source;\n        const importToken = context.getSourceCode().getFirstToken(node);\n        raiseOnImplicitImport(\n          module,\n          importToken!.loc,\n          dependencies,\n          whitelist,\n          aliasedPathsMappingPatterns,\n          context,\n        );\n      },\n    };\n  },\n};\n\nfunction raiseOnImplicitImport(\n  module: estree.Literal,\n  loc: estree.SourceLocation,\n  dependencies: Set<string>,\n  whitelist: string[],\n  aliasedPathsMappingPatterns: PathMappingPattern[],\n  context: Rule.RuleContext,\n) {\n  const moduleName = module.value;\n  if (typeof moduleName !== 'string') {\n    return;\n  }\n\n  if (ts.isExternalModuleNameRelative(moduleName)) {\n    return;\n  }\n\n  if (aliasedPathsMappingPatterns.some(pattern => pattern.isApplicableTo(moduleName))) {\n    return;\n  }\n\n  const packageName = getPackageName(moduleName);\n  if (\n    !whitelist.includes(packageName) &&\n    !builtins.includes(packageName) &&\n    !dependencies.has(packageName)\n  ) {\n    context.report({\n      messageId: 'removeOrAddDependency',\n      loc,\n    });\n  }\n}\n\nfunction getPackageName(name: string) {\n  /*\n    - scoped `@namespace/foo/bar` -> package `@namespace/foo`\n    - scope `foo/bar` -> package `foo`\n  */\n  const parts = name.split('/');\n  if (!name.startsWith('@')) {\n    return parts[0];\n  } else {\n    return `${parts[0]}/${parts[1]}`;\n  }\n}\n\nfunction getDependencies(fileName: string) {\n  const dirname = path.dirname(fileName);\n\n  const cached = cache.get(dirname);\n  if (cached) {\n    return cached;\n  }\n\n  const result = new Set<string>();\n  const packageJsonPath = findPackageJson(path.resolve(dirname));\n  if (packageJsonPath !== undefined) {\n    try {\n      // remove BOM from file content before parsing\n      const content = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8').replace(/^\\uFEFF/, ''));\n      if (content.dependencies !== undefined) {\n        addDependencies(result, content.dependencies);\n      }\n      if (content.devDependencies !== undefined) {\n        addDependencies(result, content.devDependencies);\n      }\n      if (content.peerDependencies !== undefined) {\n        addDependencies(result, content.peerDependencies);\n      }\n    } catch {}\n  }\n\n  cache.set(dirname, result);\n\n  return result;\n}\n\nfunction addDependencies(result: Set<string>, dependencies: any) {\n  Object.keys(dependencies).forEach(name =>\n    result.add(name.startsWith(DefinitelyTyped) ? name.substring(DefinitelyTyped.length) : name),\n  );\n}\n\nfunction findPackageJson(current: string): string | undefined {\n  const fileName = path.join(current, 'package.json');\n  if (fs.existsSync(fileName)) {\n    return fileName;\n  }\n\n  const prev: string = current;\n  current = path.dirname(current);\n\n  if (prev !== current) {\n    return findPackageJson(current);\n  }\n  return undefined;\n}\n\n/**\n * The matching pattern part of a path mapping specified\n * in `paths` in `tsconfig.json`.\n */\ninterface PathMappingPattern {\n  isApplicableTo(name: string): boolean;\n}\n\nclass PathMappingNoAsteriskPattern implements PathMappingPattern {\n  constructor(private readonly value: string) {}\n  isApplicableTo(name: string): boolean {\n    return name === this.value;\n  }\n}\n\nclass PathMappingSingleAsteriskPattern implements PathMappingPattern {\n  constructor(private readonly prefix: string, private readonly suffix: string) {}\n  isApplicableTo(name: string): boolean {\n    return name.startsWith(this.prefix) && name.endsWith(this.suffix);\n  }\n}\n\nconst PATH_MAPPING_ASTERISK_PATTERN = /^([^*]*)\\*([^*]*)$/; // matches any string with single asterisk '*'\nconst PATH_MAPPING_ASTERISK_PATTERN_PREFIX_IDX = 1;\nconst PATH_MAPPING_ASTERISK_PATTERN_SUFFIX_IDX = 2;\nfunction extractPathMappingPatterns(\n  parserServices: RequiredParserServices,\n): PathMappingPattern[] | 'matchAll' {\n  const compilerOptions = parserServices.program && parserServices.program.getCompilerOptions();\n  const paths = (compilerOptions && compilerOptions.paths) || [];\n  const pathMappingPatterns: PathMappingPattern[] = [];\n  for (const p in paths) {\n    if (p === '*') {\n      return 'matchAll';\n    } else {\n      const m = p.match(PATH_MAPPING_ASTERISK_PATTERN);\n      if (m) {\n        pathMappingPatterns.push(\n          new PathMappingSingleAsteriskPattern(\n            m[PATH_MAPPING_ASTERISK_PATTERN_PREFIX_IDX],\n            m[PATH_MAPPING_ASTERISK_PATTERN_SUFFIX_IDX],\n          ),\n        );\n      } else if (!p.includes('*')) {\n        pathMappingPatterns.push(new PathMappingNoAsteriskPattern(p));\n      } else {\n        // This case should not occur: `tsc` emits error if there is more than one asterisk\n      }\n    }\n  }\n  return pathMappingPatterns;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2703\n\nimport { Rule } from 'eslint';\nimport { flatMap, globalsByLibraries } from '../utils';\n\nconst excludedNames = new Set(flatMap(Object.values(globalsByLibraries), globals => globals));\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      explicitModifier:\n        'Add the \"let\", \"const\" or \"var\" keyword to this declaration of \"{{variable}}\" to make it explicit.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'Program:exit'() {\n        const globalScope = context.getScope();\n        const alreadyReported: Set<string> = new Set();\n        globalScope.through\n          .filter(ref => ref.isWrite())\n          .forEach(ref => {\n            const name = ref.identifier.name;\n            if (!alreadyReported.has(name) && !excludedNames.has(name)) {\n              alreadyReported.add(name);\n              context.report({\n                messageId: 'explicitModifier',\n                data: {\n                  variable: name,\n                },\n                node: ref.identifier,\n              });\n            }\n          });\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S4619/javascript\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isArray, isNumber, isRequiredParserServices } from '../utils';\nimport { isLiteral } from 'eslint-plugin-sonarjs/lib/utils/nodes';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      inMisuse: 'Use \"indexOf\" or \"includes\" (available from ES2016) instead.',\n      suggestIndexOf: 'Replace with \"indexOf\" method',\n      suggestIncludes: 'Replace with \"includes\" method',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n\n    function prototypeProperty(node: estree.Expression) {\n      const expr = node as TSESTree.Expression;\n      if (!isLiteral(expr) || typeof expr.value !== 'string') {\n        return false;\n      }\n\n      return ['indexOf', 'lastIndexOf', 'forEach', 'map', 'filter', 'every', 'some'].includes(\n        expr.value,\n      );\n    }\n\n    if (isRequiredParserServices(services)) {\n      return {\n        \"BinaryExpression[operator='in']\": (node: estree.Node) => {\n          const { left, right } = node as estree.BinaryExpression;\n          if (isArray(right, services) && !prototypeProperty(left) && !isNumber(left, services)) {\n            const leftText = context.getSourceCode().getText(left);\n            const rightText = context.getSourceCode().getText(right);\n            context.report({\n              messageId: 'inMisuse',\n              node,\n              suggest: [\n                {\n                  messageId: 'suggestIndexOf',\n                  fix: fixer => fixer.replaceText(node, `${rightText}.indexOf(${leftText}) > -1`),\n                },\n                {\n                  messageId: 'suggestIncludes',\n                  fix: fixer => fixer.replaceText(node, `${rightText}.includes(${leftText})`),\n                },\n              ],\n            });\n          }\n        },\n      };\n    }\n    return {};\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S2970/javascript\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, isNumberLiteral } from '../utils';\n\nconst assertionFunctions = [\n  'a',\n  'an',\n  'include',\n  'includes',\n  'contain',\n  'contains',\n  'equal',\n  'equals',\n  'eq',\n  'eql',\n  'eqls',\n  'above',\n  'gt',\n  'greaterThan',\n  'least',\n  'gte',\n  'below',\n  'lt',\n  'lessThan',\n  'most',\n  'lte',\n  'within',\n  'instanceof',\n  'instanceOf',\n  'property',\n  'ownPropertyDescriptor',\n  'haveOwnPropertyDescriptor',\n  'lengthOf',\n  'length',\n  'match',\n  'matches',\n  'string',\n  'key',\n  'keys',\n  'throw',\n  'throws',\n  'Throw',\n  'respondTo',\n  'respondsTo',\n  'satisfy',\n  'satisfies',\n  'closeTo',\n  'approximately',\n  'members',\n  'oneOf',\n  'change',\n  'changes',\n  'increase',\n  'increases',\n  'decrease',\n  'decreases',\n  'by',\n  'fail',\n];\n\nconst gettersOrModifiers = [\n  'to',\n  'be',\n  'been',\n  'is',\n  'that',\n  'which',\n  'and',\n  'has',\n  'have',\n  'with',\n  'at',\n  'of',\n  'same',\n  'but',\n  'does',\n  'still',\n\n  // Modifier functions\n  'not',\n  'deep',\n  'nested',\n  'own',\n  'ordered',\n  'any',\n  'all',\n  'itself',\n\n  'should',\n];\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    return {\n      ExpressionStatement(node: estree.Node) {\n        const exprStatement = node as estree.ExpressionStatement;\n        if (exprStatement.expression.type === 'MemberExpression') {\n          const { property } = exprStatement.expression;\n          if (isTestAssertion(exprStatement.expression)) {\n            if (isIdentifier(property, ...assertionFunctions)) {\n              context.report({\n                node: property,\n                message: `Call this '${property.name}' assertion.`,\n              });\n            }\n            if (isIdentifier(property, ...gettersOrModifiers)) {\n              context.report({\n                node: property,\n                message: `Complete this assertion; '${property.name}' doesn't assert anything by itself.`,\n              });\n            }\n          }\n        }\n        if (isExpectCall(exprStatement.expression)) {\n          const { callee } = exprStatement.expression;\n          context.report({\n            node: callee,\n            message: `Complete this assertion; '${callee.name}' doesn't assert anything by itself.`,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isTestAssertion(node: estree.MemberExpression): boolean {\n  const { object, property } = node;\n  // Chai's BDD style where 'should' extends Object.prototype https://www.chaijs.com/guide/styles/\n  if (isIdentifier(object) && isIdentifier(property, 'should')) {\n    return true;\n  }\n  if (isExpectCall(object) || isIdentifier(object, 'assert', 'expect', 'should')) {\n    return true;\n  } else if (object.type === 'MemberExpression') {\n    return isTestAssertion(object);\n  } else if (object.type === 'CallExpression' && object.callee.type === 'MemberExpression') {\n    return isTestAssertion(object.callee);\n  }\n  return false;\n}\n\nfunction isExpectCall(\n  node: estree.Node,\n): node is estree.CallExpression & { callee: estree.Identifier } {\n  return (\n    node.type === 'CallExpression' &&\n    isIdentifier(node.callee, 'expect') &&\n    !isNumberLiteral(node.arguments[0])\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3801\n\nimport { AST, Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { getParent, RuleContext, toEncodedMessage } from '../utils';\n\ninterface FunctionContext {\n  codePath: Rule.CodePath;\n  containsReturnWithValue: boolean;\n  containsReturnWithoutValue: boolean;\n  containsImplicitReturn: boolean;\n  returnStatements: estree.ReturnStatement[];\n}\n\ninterface FunctionLikeDeclaration {\n  type: string;\n  id?: estree.Node | null;\n  returnType?: TSESTree.TSTypeAnnotation;\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const sourceCode = context.getSourceCode();\n    const functionContextStack: FunctionContext[] = [];\n    const checkOnFunctionExit = (node: estree.Node) =>\n      checkFunctionLikeDeclaration(\n        node as FunctionLikeDeclaration,\n        functionContextStack[functionContextStack.length - 1],\n      );\n\n    function checkFunctionLikeDeclaration(\n      node: FunctionLikeDeclaration,\n      functionContext?: FunctionContext,\n    ) {\n      if (\n        !functionContext ||\n        (!!node.returnType &&\n          declaredReturnTypeContainsVoidOrNeverTypes(node.returnType.typeAnnotation))\n      ) {\n        return;\n      }\n\n      checkFunctionForImplicitReturn(functionContext);\n\n      if (hasInconsistentReturns(functionContext)) {\n        const [secondaryLocationsHolder, secondaryLocationMessages] = getSecondaryLocations(\n          functionContext,\n          node as estree.Node,\n        );\n        const message = toEncodedMessage(\n          `Refactor this function to use \"return\" consistently.`,\n          secondaryLocationsHolder,\n          secondaryLocationMessages,\n        );\n\n        context.report({\n          message,\n          loc: getMainFunctionTokenLocation(\n            node as TSESTree.FunctionLike,\n            getParent(context) as TSESTree.Node,\n            context as unknown as RuleContext,\n          ),\n        });\n      }\n    }\n\n    function checkFunctionForImplicitReturn(functionContext: FunctionContext) {\n      // As this method is called at the exit point of a function definition, the current\n      // segments are the ones leading to the exit point at the end of the function. If they\n      // are reachable, it means there is an implicit return.\n      functionContext.containsImplicitReturn = functionContext.codePath.currentSegments.some(\n        segment => segment.reachable,\n      );\n    }\n\n    function getSecondaryLocations(\n      functionContext: FunctionContext,\n      node: estree.Node,\n    ): [Array<AST.Token | TSESTree.Node>, Array<string>] {\n      const secondaryLocationsHolder = functionContext.returnStatements.slice() as TSESTree.Node[];\n      const secondaryLocationMessages: string[] = functionContext.returnStatements.map(\n        returnStatement =>\n          returnStatement.argument ? 'Return with value' : 'Return without value',\n      );\n\n      if (functionContext.containsImplicitReturn) {\n        const closeCurlyBraceToken = sourceCode.getLastToken(node, token => token.value === '}');\n        if (!!closeCurlyBraceToken) {\n          secondaryLocationsHolder.push(closeCurlyBraceToken as TSESTree.Node);\n          secondaryLocationMessages.push('Implicit return without value');\n        }\n      }\n\n      return [secondaryLocationsHolder, secondaryLocationMessages];\n    }\n\n    return {\n      onCodePathStart(codePath: Rule.CodePath) {\n        functionContextStack.push({\n          codePath,\n          containsReturnWithValue: false,\n          containsReturnWithoutValue: false,\n          containsImplicitReturn: false,\n          returnStatements: [],\n        });\n      },\n      onCodePathEnd() {\n        functionContextStack.pop();\n      },\n\n      ReturnStatement(node: estree.Node) {\n        const currentContext = functionContextStack[functionContextStack.length - 1];\n        if (!!currentContext) {\n          const returnStatement = node as estree.ReturnStatement;\n          currentContext.containsReturnWithValue =\n            currentContext.containsReturnWithValue || !!returnStatement.argument;\n          currentContext.containsReturnWithoutValue =\n            currentContext.containsReturnWithoutValue || !returnStatement.argument;\n          currentContext.returnStatements.push(returnStatement);\n        }\n      },\n      'FunctionDeclaration:exit': checkOnFunctionExit,\n      'FunctionExpression:exit': checkOnFunctionExit,\n      'ArrowFunctionExpression:exit': checkOnFunctionExit,\n    };\n  },\n};\n\nfunction hasInconsistentReturns(functionContext: FunctionContext) {\n  return (\n    functionContext.containsReturnWithValue &&\n    (functionContext.containsReturnWithoutValue || functionContext.containsImplicitReturn)\n  );\n}\n\nfunction declaredReturnTypeContainsVoidOrNeverTypes(returnTypeNode: TSESTree.TypeNode): boolean {\n  return (\n    isVoidType(returnTypeNode) ||\n    (returnTypeNode.type === 'TSUnionType' &&\n      returnTypeNode.types.some(declaredReturnTypeContainsVoidOrNeverTypes))\n  );\n}\n\nfunction isVoidType(typeNode: TSESTree.TypeNode) {\n  return (\n    typeNode.type === 'TSUndefinedKeyword' ||\n    typeNode.type === 'TSVoidKeyword' ||\n    typeNode.type === 'TSNeverKeyword'\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3402\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as tsTypes from 'typescript';\nimport {\n  RequiredParserServices,\n  isRequiredParserServices,\n  getTypeFromTreeNode,\n  toEncodedMessage,\n  isStringLiteral,\n} from '../utils';\n\nconst message = `Review this expression to be sure that the concatenation was intended.`;\nconst objectLikeTypes = new Set(['object', 'Object']);\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services: RequiredParserServices = context.parserServices;\n\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    const checker = services.program.getTypeChecker();\n\n    function isStringPlusNonString(type1: tsTypes.Type, type2: tsTypes.Type) {\n      if (isLiteralType(type1) || isLiteralType(type2)) {\n        return false;\n      }\n      const isObjectLike = objectLikeTypes.has(checker.typeToString(type2));\n      // @ts-ignore private API, see https://github.com/microsoft/TypeScript/issues/9879\n      return isStringType(type1) && !isObjectLike && !checker.isTypeAssignableTo(type1, type2);\n    }\n\n    function getOperatorLocation(left: estree.Node, right: estree.Node) {\n      return context\n        .getSourceCode()\n        .getTokensBetween(left, right)\n        .find(token => token.value === '+')!.loc;\n    }\n\n    return {\n      'BinaryExpression[operator=\"+\"]'(node: estree.Node) {\n        const { left, right } = node as estree.BinaryExpression;\n        if (\n          isStringLiteral(left) ||\n          isStringLiteral(right) ||\n          isConcatenation(left) ||\n          isConcatenation(right)\n        ) {\n          return;\n        }\n\n        const leftType = getTypeFromTreeNode(left, services);\n        const rightType = getTypeFromTreeNode(right, services);\n        if (\n          isStringPlusNonString(leftType, rightType) ||\n          isStringPlusNonString(rightType, leftType)\n        ) {\n          context.report({\n            message: toEncodedMessage(\n              message,\n              [left, right],\n              [\n                `left operand has type ${checker.typeToString(leftType)}.`,\n                `right operand has type ${checker.typeToString(rightType)}.`,\n              ],\n            ),\n            loc: getOperatorLocation(left, right),\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isStringType(typ: tsTypes.Type) {\n  return (typ.getFlags() & tsTypes.TypeFlags.StringLike) !== 0;\n}\n\nfunction isLiteralType(type: tsTypes.Type): boolean {\n  if (type.isUnion()) {\n    return type.types.some(t => isLiteralType(t));\n  }\n  return type.isStringLiteral();\n}\n\nfunction isConcatenation(node: estree.Node) {\n  return node.type === 'BinaryExpression' && node.operator === '+';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2189\n\nimport { Linter, Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { interceptReport, childrenOf } from '../utils';\n\nconst linter = new Linter();\nconst noUnmodifiedLoopEslint = interceptReport(\n  linter.getRules().get('no-unmodified-loop-condition')!,\n  onReport,\n);\nconst MESSAGE = \"Correct this loop's end condition to not be invariant.\";\nexport const rule: Rule.RuleModule = {\n  // we copy the meta to have proper messageId\n  meta: noUnmodifiedLoopEslint.meta,\n  create(context: Rule.RuleContext) {\n    const noUnmodifiedLoopListener = noUnmodifiedLoopEslint.create(context);\n    return {\n      WhileStatement: (node: estree.Node) => {\n        checkWhileStatement(node, context);\n      },\n      DoWhileStatement: (node: estree.Node) => {\n        checkWhileStatement(node, context);\n      },\n      ForStatement: (node: estree.Node) => {\n        const forStatement = node as estree.ForStatement;\n        if (\n          !forStatement.test ||\n          (forStatement.test.type === 'Literal' && forStatement.test.value === true)\n        ) {\n          const hasEndCondition = LoopVisitor.hasEndCondition(forStatement.body, context);\n          if (!hasEndCondition) {\n            const firstToken = context.getSourceCode().getFirstToken(node);\n            context.report({\n              loc: firstToken!.loc,\n              message: MESSAGE,\n            });\n          }\n        }\n      },\n      'Program:exit'() {\n        // @ts-ignore\n        noUnmodifiedLoopListener['Program:exit']!();\n      },\n    };\n  },\n};\n\nfunction checkWhileStatement(node: estree.Node, context: Rule.RuleContext) {\n  const whileStatement = node as estree.WhileStatement | estree.DoWhileStatement;\n  if (whileStatement.test.type === 'Literal' && whileStatement.test.value === true) {\n    const hasEndCondition = LoopVisitor.hasEndCondition(whileStatement.body, context);\n    if (!hasEndCondition) {\n      const firstToken = context.getSourceCode().getFirstToken(node);\n      context.report({ loc: firstToken!.loc, message: MESSAGE });\n    }\n  }\n}\n\nfunction onReport(context: Rule.RuleContext, reportDescriptor: Rule.ReportDescriptor) {\n  if ('node' in reportDescriptor) {\n    const node = reportDescriptor['node'];\n    if (node.type === 'Identifier' && node.name === 'undefined') {\n      return;\n    }\n    context.report(reportDescriptor);\n  }\n}\n\nclass LoopVisitor {\n  hasEndCondition = false;\n\n  static hasEndCondition(node: estree.Node, context: Rule.RuleContext) {\n    const visitor = new LoopVisitor();\n    visitor.visit(node, context);\n    return visitor.hasEndCondition;\n  }\n\n  private visit(root: estree.Node, context: Rule.RuleContext) {\n    const visitNode = (node: estree.Node, isNestedLoop = false) => {\n      switch (node.type) {\n        case 'WhileStatement':\n        case 'DoWhileStatement':\n        case 'ForStatement':\n          isNestedLoop = true;\n          break;\n        case 'FunctionExpression':\n        case 'FunctionDeclaration':\n          // Don't consider nested functions\n          return;\n        case 'BreakStatement':\n          if (!isNestedLoop || !!node.label) {\n            this.hasEndCondition = true;\n          }\n          break;\n        case 'YieldExpression':\n        case 'ReturnStatement':\n        case 'ThrowStatement':\n          this.hasEndCondition = true;\n          return;\n      }\n      childrenOf(node, context.getSourceCode().visitorKeys).forEach(child =>\n        visitNode(child, isNestedLoop),\n      );\n    };\n    visitNode(root);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5604\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, isMemberExpression, getValueOfExpression } from '../utils';\n\nconst permissions = ['geolocation', 'camera', 'microphone', 'notifications', 'persistent-storage'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      checkPermission: 'Make sure the use of the {{feature}} is necessary.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'CallExpression[callee.type=\"MemberExpression\"]'(node: estree.Node) {\n        const call = node as estree.CallExpression;\n        const callee = call.callee as estree.MemberExpression;\n        if (\n          isNavigatorMemberExpression(callee, 'permissions', 'query') &&\n          call.arguments.length > 0\n        ) {\n          checkPermissions(context, call);\n          return;\n        }\n        if (\n          context.options.includes('geolocation') &&\n          isNavigatorMemberExpression(callee, 'geolocation', 'watchPosition', 'getCurrentPosition')\n        ) {\n          context.report({\n            messageId: 'checkPermission',\n            data: {\n              feature: 'geolocation',\n            },\n            node: callee,\n          });\n          return;\n        }\n        if (\n          isNavigatorMemberExpression(callee, 'mediaDevices', 'getUserMedia') &&\n          call.arguments.length > 0\n        ) {\n          const firstArg = getValueOfExpression(context, call.arguments[0], 'ObjectExpression');\n          checkForCameraAndMicrophonePermissions(context, callee, firstArg);\n          return;\n        }\n        if (\n          context.options.includes('notifications') &&\n          isMemberExpression(callee, 'Notification', 'requestPermission')\n        ) {\n          context.report({\n            messageId: 'checkPermission',\n            data: {\n              feature: 'notifications',\n            },\n            node: callee,\n          });\n          return;\n        }\n        if (\n          context.options.includes('persistent-storage') &&\n          isMemberExpression(callee.object, 'navigator', 'storage')\n        ) {\n          context.report({\n            messageId: 'checkPermission',\n            data: {\n              feature: 'persistent-storage',\n            },\n            node: callee,\n          });\n        }\n      },\n      NewExpression(node: estree.Node) {\n        const { callee } = node as estree.NewExpression;\n        if (context.options.includes('notifications') && isIdentifier(callee, 'Notification')) {\n          context.report({\n            messageId: 'checkPermission',\n            data: {\n              feature: 'notifications',\n            },\n            node: callee,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction checkForCameraAndMicrophonePermissions(\n  context: Rule.RuleContext,\n  callee: estree.MemberExpression,\n  firstArg: estree.ObjectExpression | undefined,\n) {\n  if (!firstArg) {\n    return;\n  }\n  const shouldCheckAudio = context.options.includes('microphone');\n  const shouldCheckVideo = context.options.includes('camera');\n  if (!shouldCheckAudio && !shouldCheckVideo) {\n    return;\n  }\n  const perms = [];\n  for (const prop of firstArg.properties) {\n    if (prop.type === 'Property') {\n      const { value, key } = prop;\n      if (isIdentifier(key, 'audio') && shouldCheckAudio && isOtherThanFalse(context, value)) {\n        perms.push('microphone');\n      } else if (\n        isIdentifier(key, 'video') &&\n        shouldCheckVideo &&\n        isOtherThanFalse(context, value)\n      ) {\n        perms.push('camera');\n      }\n    }\n  }\n  if (perms.length > 0) {\n    context.report({\n      messageId: 'checkPermission',\n      data: {\n        feature: perms.join(' and '),\n      },\n      node: callee,\n    });\n  }\n}\n\nfunction isOtherThanFalse(context: Rule.RuleContext, value: estree.Node) {\n  const exprValue = getValueOfExpression(context, value, 'Literal');\n  if (exprValue && exprValue.value === false) {\n    return false;\n  }\n  return true;\n}\n\nfunction checkPermissions(context: Rule.RuleContext, call: estree.CallExpression) {\n  const firstArg = getValueOfExpression(context, call.arguments[0], 'ObjectExpression');\n  if (firstArg?.type === 'ObjectExpression') {\n    const nameProp = firstArg.properties.find(prop => hasNamePropertyWithPermission(prop, context));\n    if (nameProp) {\n      const { value } = (nameProp as estree.Property).value as estree.Literal;\n      context.report({\n        messageId: 'checkPermission',\n        data: {\n          feature: String(value),\n        },\n        node: nameProp,\n      });\n    }\n  }\n}\n\nfunction isNavigatorMemberExpression(\n  { object, property }: estree.MemberExpression,\n  firstProperty: string,\n  ...secondProperty: string[]\n) {\n  return (\n    isMemberExpression(object, 'navigator', firstProperty) &&\n    isIdentifier(property, ...secondProperty)\n  );\n}\n\nfunction hasNamePropertyWithPermission(\n  prop: estree.Property | estree.SpreadElement,\n  context: Rule.RuleContext,\n) {\n  if (prop.type === 'Property' && isIdentifier(prop.key, 'name')) {\n    const value = getValueOfExpression(context, prop.value, 'Literal');\n    return (\n      value &&\n      typeof value.value === 'string' &&\n      permissions.includes(value.value) &&\n      context.options.includes(value.value)\n    );\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4123\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { isRequiredParserServices, getTypeFromTreeNode } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      refactorAwait: \"Refactor this redundant 'await' on a non-promise.\",\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (isRequiredParserServices(services)) {\n      return {\n        AwaitExpression: (node: estree.Node) => {\n          const awaitedType = getTypeFromTreeNode(\n            (node as estree.AwaitExpression).argument,\n            services,\n          );\n          if (!hasThenMethod(awaitedType) && !isAny(awaitedType) && !isUnion(awaitedType)) {\n            context.report({\n              messageId: 'refactorAwait',\n              node,\n            });\n          }\n        },\n      };\n    }\n    return {};\n  },\n};\n\nfunction hasThenMethod(type: ts.Type) {\n  const thenProperty = type.getProperty('then');\n  return thenProperty?.declarations?.some(\n    d => d.kind === ts.SyntaxKind.MethodSignature || d.kind === ts.SyntaxKind.MethodDeclaration,\n  );\n}\n\nfunction isAny(type: ts.Type) {\n  return Boolean(type.flags & ts.TypeFlags.Any);\n}\n\nfunction isUnion(type: ts.Type) {\n  return Boolean(type.flags & ts.TypeFlags.Union);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3516\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport {\n  findFirstMatchingAncestor,\n  FUNCTION_NODES,\n  getParent,\n  isElementWrite,\n  RuleContext,\n  toEncodedMessage,\n} from '../utils';\n\ninterface FunctionContext {\n  codePath: Rule.CodePath;\n  containsReturnWithoutValue: boolean;\n  returnStatements: estree.ReturnStatement[];\n}\n\ninterface SingleWriteVariable {\n  variable: Scope.Variable;\n  initExpression?: estree.Expression | null;\n}\n\ntype LiteralValue = number | RegExp | string | null | boolean | bigint;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    const functionContextStack: FunctionContext[] = [];\n\n    const checkOnFunctionExit = (node: estree.Node) =>\n      checkInvariantReturnStatements(node, functionContextStack[functionContextStack.length - 1]);\n\n    function checkInvariantReturnStatements(node: estree.Node, functionContext?: FunctionContext) {\n      if (!functionContext || hasDifferentReturnTypes(functionContext)) {\n        return;\n      }\n\n      const returnedValues = functionContext.returnStatements.map(\n        returnStatement => returnStatement.argument as estree.Node,\n      );\n      if (areAllSameValue(returnedValues, context.getScope())) {\n        const message = toEncodedMessage(\n          `Refactor this function to not always return the same value.`,\n          returnedValues as TSESTree.Node[],\n          returnedValues.map(_ => 'Returned value.'),\n          returnedValues.length,\n        );\n\n        context.report({\n          message,\n          loc: getMainFunctionTokenLocation(\n            node as TSESTree.FunctionLike,\n            getParent(context) as TSESTree.Node,\n            context as unknown as RuleContext,\n          ),\n        });\n      }\n    }\n\n    return {\n      onCodePathStart(codePath: Rule.CodePath) {\n        functionContextStack.push({\n          codePath,\n          containsReturnWithoutValue: false,\n          returnStatements: [],\n        });\n      },\n      onCodePathEnd() {\n        functionContextStack.pop();\n      },\n      ReturnStatement(node: estree.Node) {\n        const currentContext = functionContextStack[functionContextStack.length - 1];\n        if (currentContext) {\n          const returnStatement = node as estree.ReturnStatement;\n          currentContext.containsReturnWithoutValue =\n            currentContext.containsReturnWithoutValue || !returnStatement.argument;\n          currentContext.returnStatements.push(returnStatement);\n        }\n      },\n      'FunctionDeclaration:exit': checkOnFunctionExit,\n      'FunctionExpression:exit': checkOnFunctionExit,\n      'ArrowFunctionExpression:exit': checkOnFunctionExit,\n    };\n  },\n};\n\nfunction hasDifferentReturnTypes(functionContext: FunctionContext) {\n  // As this method is called at the exit point of a function definition, the current\n  // segments are the ones leading to the exit point at the end of the function. If they\n  // are reachable, it means there is an implicit return.\n  const hasImplicitReturn = functionContext.codePath.currentSegments.some(\n    segment => segment.reachable,\n  );\n\n  return (\n    hasImplicitReturn ||\n    functionContext.containsReturnWithoutValue ||\n    functionContext.returnStatements.length <= 1 ||\n    functionContext.codePath.thrownSegments.length > 0\n  );\n}\n\nfunction areAllSameValue(returnedValues: estree.Node[], scope: Scope.Scope) {\n  const firstReturnedValue = returnedValues[0];\n  const firstValue = getLiteralValue(firstReturnedValue, scope);\n  if (firstValue !== undefined) {\n    return returnedValues\n      .slice(1)\n      .every(returnedValue => getLiteralValue(returnedValue, scope) === firstValue);\n  } else if (firstReturnedValue.type === 'Identifier') {\n    const singleWriteVariable = getSingleWriteDefinition(firstReturnedValue.name, scope);\n    if (singleWriteVariable) {\n      const readReferenceIdentifiers = singleWriteVariable.variable.references\n        .slice(1)\n        .map(ref => ref.identifier);\n      return returnedValues.every(returnedValue =>\n        readReferenceIdentifiers.includes(returnedValue as estree.Identifier),\n      );\n    }\n  }\n  return false;\n}\n\nfunction getSingleWriteDefinition(\n  variableName: string,\n  scope: Scope.Scope,\n): SingleWriteVariable | null {\n  const variable = scope.set.get(variableName);\n  if (variable) {\n    const references = variable.references.slice(1);\n    if (!references.some(ref => ref.isWrite() || isPossibleObjectUpdate(ref))) {\n      let initExpression = null;\n      if (variable.defs.length === 1 && variable.defs[0].type === 'Variable') {\n        initExpression = variable.defs[0].node.init;\n      }\n      return { variable, initExpression };\n    }\n  }\n  return null;\n}\n\nfunction isPossibleObjectUpdate(ref: Scope.Reference) {\n  const expressionStatement = findFirstMatchingAncestor(\n    ref.identifier as TSESTree.Node,\n    n => n.type === 'ExpressionStatement' || FUNCTION_NODES.includes(n.type),\n  ) as estree.Node | undefined;\n\n  // To avoid FP, we consider method calls as write operations, since we do not know whether they will\n  // update the object state or not.\n  return (\n    expressionStatement &&\n    expressionStatement.type === 'ExpressionStatement' &&\n    (isElementWrite(expressionStatement, ref) ||\n      expressionStatement.expression.type === 'CallExpression')\n  );\n}\n\nfunction getLiteralValue(returnedValue: estree.Node, scope: Scope.Scope): LiteralValue | undefined {\n  if (returnedValue.type === 'Literal') {\n    return returnedValue.value;\n  } else if (returnedValue.type === 'UnaryExpression') {\n    const innerReturnedValue = getLiteralValue(returnedValue.argument, scope);\n    return innerReturnedValue !== undefined\n      ? evaluateUnaryLiteralExpression(returnedValue.operator, innerReturnedValue)\n      : undefined;\n  } else if (returnedValue.type === 'Identifier') {\n    const singleWriteVariable = getSingleWriteDefinition(returnedValue.name, scope);\n    if (singleWriteVariable && singleWriteVariable.initExpression) {\n      return getLiteralValue(singleWriteVariable.initExpression, scope);\n    }\n  }\n  return undefined;\n}\n\nfunction evaluateUnaryLiteralExpression(operator: string, innerReturnedValue: LiteralValue) {\n  switch (operator) {\n    case '-':\n      return -Number(innerReturnedValue);\n    case '+':\n      return Number(innerReturnedValue);\n    case '~':\n      return ~Number(innerReturnedValue);\n    case '!':\n      return !Boolean(innerReturnedValue);\n    case 'typeof':\n      return typeof innerReturnedValue;\n    default:\n      return undefined;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5759\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  getObjectExpressionProperty,\n  getValueOfExpression,\n  isCallToFQN,\n  getModuleNameOfNode,\n  toEncodedMessage,\n} from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression(node: estree.Node) {\n        const call = node as estree.CallExpression;\n        const { callee, arguments: args } = call;\n        if (isSensitiveFQN(context, call) && args.length > 0) {\n          const xfwdProp = getObjectExpressionProperty(args[0], 'xfwd');\n          if (!xfwdProp) {\n            return;\n          }\n          const xfwdValue = getValueOfExpression(context, xfwdProp.value, 'Literal');\n          if (xfwdValue?.value === true) {\n            context.report({\n              node: callee,\n              message: toEncodedMessage('Make sure forwarding client IP address is safe here.', [\n                xfwdProp,\n              ]),\n            });\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction isSensitiveFQN(context: Rule.RuleContext, call: estree.CallExpression) {\n  const { callee } = call;\n  if (callee.type === 'MemberExpression') {\n    return (\n      isCallToFQN(context, call, 'http-proxy', 'createProxyServer') ||\n      isCallToFQN(context, call, 'http-proxy-middleware', 'createProxyMiddleware')\n    );\n  }\n  return (\n    (isIdentifier(callee, 'createProxyServer') &&\n      getModuleNameOfNode(context, callee)?.value === 'http-proxy') ||\n    (isIdentifier(callee, 'createProxyMiddleware') &&\n      getModuleNameOfNode(context, callee)?.value === 'http-proxy-middleware')\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1119\n\nimport { Rule } from 'eslint';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeLabel: 'Refactor the code to remove this label and the need for it.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      LabeledStatement(node) {\n        const sourceCode = context.getSourceCode();\n        context.report({\n          messageId: 'removeLabel',\n          loc: sourceCode.getFirstToken(node)!.loc,\n        });\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5734\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfNode, getPropertyWithValue } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst NO_SNIFF = 'noSniff';\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findFalseNoSniffPropertyFromHelmet,\n  `Make sure allowing browsers to sniff MIME types is safe here.`,\n);\n\n/**\n * Looks for property `noSniff: false` in node looking\n * somewhat similar to `helmet(<options>?)`, and returns it.\n */\nfunction findFalseNoSniffPropertyFromHelmet(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  let sensitive: estree.Property | undefined;\n  const { callee, arguments: args } = node;\n  if (\n    callee.type === 'Identifier' &&\n    getModuleNameOfNode(context, callee)?.value === HELMET &&\n    args.length === 1 &&\n    args[0].type === 'ObjectExpression'\n  ) {\n    sensitive = getPropertyWithValue(context, args[0], NO_SNIFF, false);\n  }\n  return sensitive ? [sensitive] : [];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4043\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as ts from 'typescript';\nimport {\n  isArray,\n  sortLike,\n  isRequiredParserServices,\n  RequiredParserServices,\n  getSymbolAtLocation,\n  localAncestorsChain,\n} from '../utils';\n\nconst arrayMutatingMethods = ['reverse', \"'reverse'\", '\"reverse\"', ...sortLike];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      moveMethod: 'Move this array \"{{method}}\" operation to a separate statement.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      CallExpression(node: estree.Node) {\n        const callee = (node as estree.CallExpression).callee;\n        if (callee.type === 'MemberExpression') {\n          const propertyText = context.getSourceCode().getText(callee.property);\n          if (isArrayMutatingCall(callee, services, propertyText)) {\n            const mutatedArray = callee.object;\n\n            if (\n              isIdentifierOrPropertyAccessExpression(mutatedArray, services) &&\n              !isInSelfAssignment(mutatedArray, node) &&\n              isForbiddenOperation(node)\n            ) {\n              context.report({\n                messageId: 'moveMethod',\n                data: {\n                  method: formatMethod(propertyText),\n                },\n                node,\n              });\n            }\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction formatMethod(mutatingMethod: string) {\n  if (mutatingMethod.startsWith('\"') || mutatingMethod.startsWith(\"'\")) {\n    return mutatingMethod.substr(1, mutatingMethod.length - 2);\n  } else {\n    return mutatingMethod;\n  }\n}\n\nfunction isArrayMutatingCall(\n  memberExpression: estree.MemberExpression,\n  services: RequiredParserServices,\n  propertyText: string,\n) {\n  return arrayMutatingMethods.includes(propertyText) && isArray(memberExpression.object, services);\n}\n\nfunction isIdentifierOrPropertyAccessExpression(\n  node: estree.Node,\n  services: RequiredParserServices,\n): boolean {\n  return (\n    node.type === 'Identifier' ||\n    (node.type === 'MemberExpression' && !isGetAccessor(node.property, services))\n  );\n}\n\nfunction isGetAccessor(node: estree.Node, services: RequiredParserServices): boolean {\n  const symbol = getSymbolAtLocation(node, services);\n  const declarations = symbol && symbol.declarations;\n  return (\n    declarations !== undefined &&\n    declarations.length === 1 &&\n    declarations[0].kind === ts.SyntaxKind.GetAccessor\n  );\n}\n\nfunction isInSelfAssignment(mutatedArray: estree.Node, node?: estree.Node): boolean {\n  const parent = (node as TSESTree.Node).parent;\n  return (\n    // check assignment\n    parent !== undefined &&\n    parent.type === 'AssignmentExpression' &&\n    parent.operator === '=' &&\n    parent.left.type === 'Identifier' &&\n    mutatedArray.type === 'Identifier' &&\n    parent.left.name === mutatedArray.name\n  );\n}\n\nfunction isForbiddenOperation(node: estree.Node) {\n  return !isStandaloneExpression(node) && !isReturnedExpression(node);\n}\n\nfunction isStandaloneExpression(node: estree.Node) {\n  const parent = (node as TSESTree.Node).parent;\n  return parent?.type === 'ExpressionStatement';\n}\n\nfunction isReturnedExpression(node: estree.Node) {\n  const ancestors = localAncestorsChain(node as TSESTree.Node);\n  const returnIdx = ancestors.findIndex(ancestor => ancestor.type === 'ReturnStatement');\n  return (\n    returnIdx > -1 &&\n    ancestors\n      .slice(0, returnIdx)\n      .every(ancestor =>\n        ['ArrayExpression', 'ObjectExpression', 'ConditionalExpression', 'SpreadElement'].includes(\n          ancestor.type,\n        ),\n      )\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5730\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfNode, isCallToFQN, getObjectExpressionProperty } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst HELMET_CSP = 'helmet-csp';\nconst DIRECTIVES = 'directives';\nconst CONTENT_SECURITY_POLICY = 'contentSecurityPolicy';\nconst BLOCK_ALL_MIXED_CONTENT_CAMEL = 'blockAllMixedContent';\nconst BLOCK_ALL_MIXED_CONTENT_HYPHEN = 'block-all-mixed-content';\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findDirectivesWithMissingMixedContentPropertyFromHelmet,\n  `Make sure allowing mixed-content is safe here.`,\n);\n\nfunction findDirectivesWithMissingMixedContentPropertyFromHelmet(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  let sensitive: estree.Property | undefined;\n  const { arguments: args } = node;\n  if (args.length === 1) {\n    const [options] = args;\n    const maybeDirectives = getObjectExpressionProperty(options, DIRECTIVES);\n    if (\n      maybeDirectives &&\n      isMissingMixedContentProperty(maybeDirectives) &&\n      isValidHelmetModuleCall(context, node)\n    ) {\n      sensitive = maybeDirectives;\n    }\n  }\n  return sensitive ? [sensitive] : [];\n}\n\nfunction isValidHelmetModuleCall(context: Rule.RuleContext, callExpr: estree.CallExpression) {\n  const { callee } = callExpr;\n\n  /* csp(options) */\n  if (callee.type === 'Identifier' && getModuleNameOfNode(context, callee)?.value === HELMET_CSP) {\n    return true;\n  }\n\n  /* helmet.contentSecurityPolicy(options) */\n  return isCallToFQN(context, callExpr, HELMET, CONTENT_SECURITY_POLICY);\n}\n\nfunction isMissingMixedContentProperty(directives: estree.Property): boolean {\n  return !(\n    Boolean(getObjectExpressionProperty(directives.value, BLOCK_ALL_MIXED_CONTENT_CAMEL)) ||\n    Boolean(getObjectExpressionProperty(directives.value, BLOCK_ALL_MIXED_CONTENT_HYPHEN))\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1121\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getParent } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      extractAssignment: 'Extract the assignment of \"{{symbol}}\" from this expression.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function isAssignmentStatement(parent: estree.Node) {\n      return parent.type === 'ExpressionStatement';\n    }\n\n    function isEnclosingChain(parent: estree.Node) {\n      return parent.type === 'AssignmentExpression';\n    }\n\n    function isEnclosingRelation(parent: estree.Node) {\n      return (\n        parent.type === 'BinaryExpression' &&\n        ['==', '!=', '===', '!==', '<', '<=', '>', '>='].includes(parent.operator)\n      );\n    }\n\n    function isEnclosingSequence(parent: estree.Node) {\n      return parent.type === 'SequenceExpression';\n    }\n\n    function isEnclosingDeclarator(parent: estree.Node) {\n      return parent.type === 'VariableDeclarator';\n    }\n\n    function isLambdaBody(parent: estree.Node, expr: estree.AssignmentExpression) {\n      return parent.type === 'ArrowFunctionExpression' && parent.body === expr;\n    }\n\n    function isConditionalAssignment(parent: estree.Node, expr: estree.AssignmentExpression) {\n      return parent.type === 'LogicalExpression' && parent.right === expr;\n    }\n\n    function isWhileCondition(parent: estree.Node, expr: estree.AssignmentExpression) {\n      return (\n        (parent.type === 'DoWhileStatement' || parent.type === 'WhileStatement') &&\n        parent.test === expr\n      );\n    }\n\n    function isForInitOrUpdate(parent: estree.Node, expr: estree.AssignmentExpression) {\n      return parent.type === 'ForStatement' && (parent.init === expr || parent.update === expr);\n    }\n\n    return {\n      AssignmentExpression: (node: estree.Node) => {\n        const assignment = node as estree.AssignmentExpression;\n        const parent = getParent(context);\n        if (\n          parent &&\n          !isAssignmentStatement(parent) &&\n          !isEnclosingChain(parent) &&\n          !isEnclosingRelation(parent) &&\n          !isEnclosingSequence(parent) &&\n          !isEnclosingDeclarator(parent) &&\n          !isLambdaBody(parent, assignment) &&\n          !isConditionalAssignment(parent, assignment) &&\n          !isWhileCondition(parent, assignment) &&\n          !isForInitOrUpdate(parent, assignment)\n        ) {\n          raiseIssue(assignment, context);\n        }\n      },\n    };\n  },\n};\n\nfunction raiseIssue(node: estree.AssignmentExpression, context: Rule.RuleContext) {\n  const sourceCode = context.getSourceCode();\n  const operator = sourceCode.getFirstTokenBetween(\n    node.left,\n    node.right,\n    token => token.value === node.operator,\n  );\n  const text = sourceCode.getText(node.left);\n  context.report({\n    messageId: 'extractAssignment',\n    data: {\n      symbol: text,\n    },\n    loc: operator!.loc,\n  });\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3358\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      extractTernary: 'Extract this nested ternary operation into an independent statement.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'ConditionalExpression ConditionalExpression': (node: estree.Node) => {\n        if (!isNestingBroken(context.getAncestors())) {\n          context.report({\n            messageId: 'extractTernary',\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isNestingBroken(ancestors: estree.Node[]) {\n  let parent = ancestors.pop()!;\n  while (parent.type !== 'ConditionalExpression') {\n    if (breaksNesting(parent)) {\n      return true;\n    }\n    parent = ancestors.pop()!;\n  }\n  return false;\n}\n\nfunction breaksNesting(node: estree.Node) {\n  return [\n    'ArrayExpression',\n    'ObjectExpression',\n    'FunctionExpression',\n    'ArrowFunctionExpression',\n  ].includes(node.type);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-881\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      extractOperation: 'Extract this {{incrementType}} operation into a dedicated statement.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function reportUpdateExpression(node: estree.UpdateExpression) {\n      context.report({\n        messageId: 'extractOperation',\n        data: {\n          incrementType: node.operator === '++' ? 'increment' : 'decrement',\n        },\n        node,\n      });\n    }\n\n    return {\n      UpdateExpression(node: estree.Node) {\n        if (!isIgnored(node, context.getAncestors())) {\n          reportUpdateExpression(node as estree.UpdateExpression);\n        }\n      },\n    };\n  },\n};\n\nfunction isIgnored(node: estree.Node, ancestors: estree.Node[]): boolean {\n  const firstAncestor = ancestors.pop();\n\n  if (firstAncestor) {\n    switch (firstAncestor.type) {\n      case 'ExpressionStatement':\n        return true;\n      case 'ForStatement':\n        return firstAncestor.update === node;\n      case 'SequenceExpression': {\n        const secondAncestor = ancestors.pop();\n        return (\n          secondAncestor !== undefined &&\n          secondAncestor.type === 'ForStatement' &&\n          secondAncestor.update === firstAncestor\n        );\n      }\n    }\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4624\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nconst message = 'Refactor this code to not use nested template literals.';\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    return {\n      'TemplateLiteral TemplateLiteral': function (node: estree.Node) {\n        context.report({\n          message,\n          node,\n        });\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3834\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\nimport { getVariableFromName } from '../utils';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nconst SYMBOL = 'Symbol';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    function isSymbol(node: estree.Node) {\n      return node.type === 'Identifier' && node.name === SYMBOL;\n    }\n    function isShadowed(_node: estree.Node) {\n      const variable = getVariableFromName(context, SYMBOL);\n      return variable && variable.defs.length > 0;\n    }\n    return {\n      NewExpression: (node: estree.Node) => {\n        const { callee } = node as estree.NewExpression;\n        if (isSymbol(callee) && !isShadowed(callee)) {\n          const newToken = context\n            .getSourceCode()\n            .getFirstToken(node, token => token.value === 'new')!;\n          context.report({\n            message: toEncodedMessage(`Remove this \"new\" operator.`, [callee as TSESTree.Node]),\n            loc: newToken.loc,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1226\n\nimport { AST, Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { FUNCTION_NODES, getParent, resolveIdentifiers } from '../utils';\n\ntype ContextType = 'catch' | 'function' | 'foreach' | 'global';\n\ninterface ReassignmentContext {\n  type: ContextType;\n  variablesToCheckInCurrentScope: Set<string>;\n  variablesToCheck: Set<string>;\n  variablesRead: Set<string>;\n  referencesByIdentifier: Map<estree.Identifier, Scope.Reference>;\n  parentContext?: ReassignmentContext;\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      noReassignment:\n        'Introduce a new variable or use its initial value before reassigning \"{{reference}}\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let variableUsageContext: ReassignmentContext = {\n      type: 'global',\n      variablesToCheckInCurrentScope: new Set<string>(),\n      variablesToCheck: new Set<string>(),\n      variablesRead: new Set<string>(),\n      referencesByIdentifier: new Map<estree.Identifier, Scope.Reference>(),\n    };\n\n    function checkIdentifierUsage(\n      identifier: estree.Identifier,\n      identifierContextType: ContextType,\n    ) {\n      if (variableUsageContext.type !== identifierContextType) {\n        return;\n      }\n\n      const variableName = identifier.name;\n      const currentReference = getReference(variableUsageContext, identifier);\n      if (\n        currentReference &&\n        !currentReference.init &&\n        !variableUsageContext.variablesRead.has(variableName)\n      ) {\n        if (\n          variableUsageContext.variablesToCheck.has(variableName) &&\n          currentReference.isWriteOnly() &&\n          !isUsedInWriteExpression(variableName, currentReference.writeExpr)\n        ) {\n          // we do not raise issue when value is reassigned inside a top-level IfStatement, as it might be a shift or\n          // default value reassignment\n          if (\n            isInsideTopLevelIfStatement(context) ||\n            context.getAncestors().some(node => node.type === 'SwitchCase') // issue-2398\n          ) {\n            return;\n          }\n          raiseIssue(currentReference);\n        }\n        markAsRead(variableUsageContext, variableName);\n      } else if (variableName === 'arguments') {\n        markAllFunctionArgumentsAsRead(variableUsageContext);\n      }\n    }\n\n    function isUsedInWriteExpression(variableName: string, writeExpr: estree.Node | null) {\n      return (\n        writeExpr &&\n        context\n          .getSourceCode()\n          .getFirstToken(\n            writeExpr,\n            token => token.value === variableName || token.value === 'arguments',\n          )\n      );\n    }\n\n    function raiseIssue(reference: Scope.Reference) {\n      const locationHolder = getPreciseLocationHolder(reference);\n      context.report({\n        messageId: 'noReassignment',\n        data: {\n          reference: reference.identifier.name,\n        },\n        ...locationHolder,\n      });\n    }\n\n    function popContext() {\n      variableUsageContext = variableUsageContext.parentContext\n        ? variableUsageContext.parentContext\n        : variableUsageContext;\n    }\n\n    return {\n      onCodePathStart(_codePath: Rule.CodePath, node: estree.Node) {\n        const currentScope = context.getScope();\n        if (currentScope && currentScope.type === 'function') {\n          const { referencesByIdentifier, variablesToCheck, variablesToCheckInCurrentScope } =\n            computeNewContextInfo(variableUsageContext, context, node);\n\n          const functionName = getFunctionName(node as estree.FunctionExpression);\n          if (functionName) {\n            variablesToCheck.delete(functionName);\n          }\n\n          variableUsageContext = {\n            type: 'function',\n            parentContext: variableUsageContext,\n            variablesToCheck,\n            referencesByIdentifier,\n            variablesToCheckInCurrentScope,\n            variablesRead: computeSetDifference(\n              variableUsageContext.variablesRead,\n              variablesToCheckInCurrentScope,\n            ),\n          };\n        } else {\n          variableUsageContext = {\n            type: 'global',\n            parentContext: variableUsageContext,\n            variablesToCheckInCurrentScope: new Set<string>(),\n            variablesToCheck: new Set<string>(),\n            variablesRead: new Set<string>(),\n            referencesByIdentifier: new Map<estree.Identifier, Scope.Reference>(),\n          };\n        }\n      },\n\n      onCodePathSegmentLoop(\n        _fromSegment: Rule.CodePathSegment,\n        _toSegment: Rule.CodePathSegment,\n        node: estree.Node,\n      ) {\n        const parent = getParent(context);\n        if (!isForEachLoopStart(node, parent)) {\n          return;\n        }\n        const currentScope = context.getSourceCode().scopeManager.acquire(parent.body);\n        const { referencesByIdentifier, variablesToCheck, variablesToCheckInCurrentScope } =\n          computeNewContextInfo(variableUsageContext, context, parent.left);\n\n        if (currentScope) {\n          for (const ref of currentScope.references) {\n            referencesByIdentifier.set(ref.identifier, ref);\n          }\n        }\n\n        // In case of array or object pattern expression, the left hand side are not declared variables but simply identifiers\n        resolveIdentifiers(parent.left as TSESTree.Node, true)\n          .map(identifier => identifier.name)\n          .forEach(name => {\n            variablesToCheck.add(name);\n            variablesToCheckInCurrentScope.add(name);\n          });\n\n        variableUsageContext = {\n          type: 'foreach',\n          parentContext: variableUsageContext,\n          variablesToCheckInCurrentScope,\n          variablesToCheck,\n          variablesRead: computeSetDifference(\n            variableUsageContext.variablesRead,\n            variablesToCheckInCurrentScope,\n          ),\n          referencesByIdentifier,\n        };\n      },\n\n      onCodePathSegmentStart(_segment: Rule.CodePathSegment, node: estree.Node) {\n        if (node.type !== 'CatchClause') {\n          return;\n        }\n\n        const { referencesByIdentifier, variablesToCheck, variablesToCheckInCurrentScope } =\n          computeNewContextInfo(variableUsageContext, context, node);\n\n        variableUsageContext = {\n          type: 'catch',\n          parentContext: variableUsageContext,\n          variablesToCheckInCurrentScope,\n          variablesToCheck,\n          variablesRead: computeSetDifference(\n            variableUsageContext.variablesRead,\n            variablesToCheckInCurrentScope,\n          ),\n          referencesByIdentifier,\n        };\n      },\n\n      onCodePathEnd: popContext,\n      'ForInStatement:exit': popContext,\n      'ForOfStatement:exit': popContext,\n      'CatchClause:exit': popContext,\n      '*:function > BlockStatement Identifier': (node: estree.Node) =>\n        checkIdentifierUsage(node as estree.Identifier, 'function'),\n      'ForInStatement > *:statement Identifier': (node: estree.Node) =>\n        checkIdentifierUsage(node as estree.Identifier, 'foreach'),\n      'ForOfStatement > *:statement Identifier': (node: estree.Node) =>\n        checkIdentifierUsage(node as estree.Identifier, 'foreach'),\n      'CatchClause > BlockStatement Identifier': (node: estree.Node) =>\n        checkIdentifierUsage(node as estree.Identifier, 'catch'),\n    };\n  },\n};\n\nfunction isInsideTopLevelIfStatement(context: Rule.RuleContext) {\n  const ifStatementParent = context.getAncestors().find(node => node.type === 'IfStatement') as\n    | TSESTree.IfStatement\n    | undefined;\n  if (ifStatementParent) {\n    return (\n      hasParentOfType(ifStatementParent.parent, ['BlockStatement']) &&\n      hasParentOfType(ifStatementParent.parent.parent, FUNCTION_NODES)\n    );\n  }\n  return false;\n}\n\nfunction hasParentOfType(\n  parent: TSESTree.Node | undefined,\n  expectedType: string[],\n): parent is TSESTree.Node {\n  return !!parent && expectedType.includes(parent.type);\n}\n\n/**\n * Computes the set difference (a \\ b)\n */\nfunction computeSetDifference(a: Set<string>, b: Set<string>) {\n  return new Set([...a].filter(str => !b.has(str)));\n}\n\nfunction getFunctionName(node: estree.FunctionExpression) {\n  return !node.id ? null : node.id.name;\n}\n\nfunction isForEachLoopStart(\n  node: estree.Node,\n  parent?: estree.Node,\n): parent is estree.ForInStatement | estree.ForOfStatement {\n  return (\n    node.type === 'BlockStatement' &&\n    !!parent &&\n    (parent.type === 'ForInStatement' || parent.type === 'ForOfStatement')\n  );\n}\n\nfunction computeNewContextInfo(\n  variableUsageContext: ReassignmentContext,\n  context: Rule.RuleContext,\n  node: estree.Node,\n) {\n  const referencesByIdentifier = new Map<estree.Identifier, Scope.Reference>();\n  const variablesToCheck = new Set<string>(variableUsageContext.variablesToCheck);\n  const variablesToCheckInCurrentScope = new Set<string>();\n  context.getDeclaredVariables(node).forEach(variable => {\n    variablesToCheck.add(variable.name);\n    variablesToCheckInCurrentScope.add(variable.name);\n    for (const currentRef of variable.references) {\n      referencesByIdentifier.set(currentRef.identifier, currentRef);\n    }\n  });\n  return { referencesByIdentifier, variablesToCheck, variablesToCheckInCurrentScope };\n}\n\nfunction markAsRead(context: ReassignmentContext, variableName: string) {\n  context.variablesRead.add(variableName);\n  if (!context.variablesToCheckInCurrentScope.has(variableName) && context.parentContext) {\n    markAsRead(context.parentContext, variableName);\n  }\n}\n\nfunction markAllFunctionArgumentsAsRead(variableUsageContext: ReassignmentContext) {\n  let functionContext: ReassignmentContext | undefined = variableUsageContext;\n  while (functionContext && functionContext.type !== 'function') {\n    functionContext = functionContext.parentContext;\n  }\n\n  if (functionContext) {\n    for (const variableName of functionContext.variablesToCheckInCurrentScope) {\n      functionContext.variablesRead.add(variableName);\n    }\n  }\n}\n\nfunction getPreciseLocationHolder(\n  reference: Scope.Reference,\n): { node: estree.Node } | { loc: AST.SourceLocation } {\n  const identifierLoc = reference.identifier.loc;\n  if (identifierLoc && reference.writeExpr && reference.writeExpr.loc) {\n    return { loc: { start: identifierLoc.start, end: reference.writeExpr.loc.end } };\n  }\n  return { node: reference.identifier };\n}\n\nfunction getReference(\n  variableUsageContext: ReassignmentContext,\n  identifier: estree.Identifier,\n): Scope.Reference | undefined {\n  const identifierReference = variableUsageContext.referencesByIdentifier.get(identifier);\n  if (!identifierReference && variableUsageContext.parentContext) {\n    return getReference(variableUsageContext.parentContext, identifier);\n  }\n  return identifierReference;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1533\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nconst WRAPPER_TYPES = ['Boolean', 'Number', 'String'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      removeConstructor: 'Remove this use of \"{{constructor}}\" constructor.',\n      replaceWrapper:\n        'Replace this \"{{wrapper}}\" wrapper object with primitive type \"{{primitive}}\".',\n      suggestRemoveNew: 'Remove \"new\" operator',\n      suggestReplaceWrapper: 'Replace \"{{wrapper}}\" with \"{{primitive}}\"',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      NewExpression(node: estree.Node) {\n        const constructor = (node as estree.NewExpression).callee;\n        if (constructor.type === 'Identifier' && WRAPPER_TYPES.includes(constructor.name)) {\n          const newToken = context\n            .getSourceCode()\n            .getFirstToken(node, token => token.value === 'new')!;\n          const [begin, end] = newToken.range;\n          context.report({\n            messageId: 'removeConstructor',\n            data: {\n              constructor: constructor.name,\n            },\n            node,\n            suggest: [\n              {\n                messageId: 'suggestRemoveNew',\n                fix: fixer => fixer.removeRange([begin, end + 1]),\n              },\n            ],\n          });\n        }\n      },\n      TSTypeReference(node: estree.Node) {\n        const typeString = context.getSourceCode().getText(node);\n        if (WRAPPER_TYPES.includes(typeString)) {\n          const primitiveType = typeString.toLowerCase();\n          context.report({\n            messageId: 'replaceWrapper',\n            data: {\n              wrapper: typeString,\n              primitive: primitiveType,\n            },\n            node,\n            suggest: [\n              {\n                messageId: 'suggestReplaceWrapper',\n                data: {\n                  wrapper: typeString,\n                  primitive: primitiveType,\n                },\n                fix: fixer => fixer.replaceText(node, primitiveType),\n              },\n            ],\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4165\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isAssignmentExpression } from 'eslint-plugin-sonarjs/lib/utils/nodes';\nimport CodePath = Rule.CodePath;\nimport Variable = Scope.Variable;\nimport Reference = Scope.Reference;\nimport CodePathSegment = Rule.CodePathSegment;\nimport {\n  getVariableFromIdentifier,\n  reachingDefinitions,\n  ReachingDefinitions,\n  resolveAssignedValues,\n  Values,\n} from './reachingDefinitions';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      reviewAssignment:\n        'Review this redundant assignment: \"{{symbol}}\" already holds the assigned value along all execution paths.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const codePathStack: CodePathContext[] = [];\n    const reachingDefsMap = new Map<string, ReachingDefinitions>();\n    // map from Variable to CodePath ids where variable is used\n    const variableUsages = new Map<Variable, Set<string>>();\n\n    return {\n      ':matches(AssignmentExpression, VariableDeclarator[init])': (node: estree.Node) => {\n        pushAssignmentContext(node as AssignmentLike);\n      },\n      ':matches(AssignmentExpression, VariableDeclarator[init]):exit': () => {\n        popAssignmentContext();\n      },\n      Identifier: (node: estree.Node) => {\n        if (isEnumConstant()) {\n          return;\n        }\n        checkIdentifierUsage(node as estree.Identifier);\n      },\n      'Program:exit': () => {\n        reachingDefinitions(reachingDefsMap);\n        reachingDefsMap.forEach(defs => {\n          checkSegment(defs);\n        });\n        reachingDefsMap.clear();\n        variableUsages.clear();\n        while (codePathStack.length > 0) {\n          codePathStack.pop();\n        }\n      },\n\n      // CodePath events\n      onCodePathSegmentStart: (segment: CodePathSegment) => {\n        reachingDefsMap.set(segment.id, new ReachingDefinitions(segment));\n      },\n      onCodePathStart: codePath => {\n        pushContext(new CodePathContext(codePath));\n      },\n      onCodePathEnd: () => {\n        popContext();\n      },\n    };\n\n    function popAssignmentContext() {\n      const assignment = peek(codePathStack).assignmentStack.pop()!;\n      assignment.rhs.forEach(r => processReference(r));\n      assignment.lhs.forEach(r => processReference(r));\n    }\n\n    function pushAssignmentContext(node: AssignmentLike) {\n      peek(codePathStack).assignmentStack.push(new AssignmentContext(node));\n    }\n\n    function checkSegment(reachingDefs: ReachingDefinitions) {\n      const assignedValuesMap = new Map<Variable, Values>(reachingDefs.in);\n      reachingDefs.references.forEach(ref => {\n        const variable = ref.resolved;\n        if (!variable || !ref.isWrite() || !shouldReport(ref)) {\n          return;\n        }\n        const lhsValues = assignedValuesMap.get(variable);\n        const rhsValues = resolveAssignedValues(\n          variable,\n          ref.writeExpr,\n          assignedValuesMap,\n          ref.from,\n        );\n        if (lhsValues?.type === 'AssignedValues' && lhsValues?.size === 1) {\n          const [lhsVal] = [...lhsValues];\n          checkRedundantAssignement(ref, ref.writeExpr, lhsVal, rhsValues, variable.name);\n        }\n        assignedValuesMap.set(variable, rhsValues);\n      });\n    }\n\n    function checkRedundantAssignement(\n      { resolved: variable }: Scope.Reference,\n      node: estree.Node | null,\n      lhsVal: string | Variable,\n      rhsValues: Values,\n      name: string,\n    ) {\n      if (rhsValues.type === 'UnknownValue' || rhsValues.size !== 1) {\n        return;\n      }\n      const [rhsVal] = [...rhsValues];\n      if (!isWrittenOnlyOnce(variable!) && lhsVal === rhsVal) {\n        context.report({\n          node: node!,\n          messageId: 'reviewAssignment',\n          data: {\n            symbol: name,\n          },\n        });\n      }\n    }\n\n    // to avoid raising on code like:\n    // while (cond) {  let x = 42; }\n    function isWrittenOnlyOnce(variable: Scope.Variable) {\n      return variable.references.filter(ref => ref.isWrite()).length === 1;\n    }\n\n    function shouldReport(ref: Reference) {\n      const variable = ref.resolved;\n      return variable && shouldReportReference(ref) && !variableUsedOutsideOfCodePath(variable);\n    }\n\n    function shouldReportReference(ref: Reference) {\n      const variable = ref.resolved;\n\n      return (\n        variable &&\n        !isDefaultParameter(ref) &&\n        !variable.name.startsWith('_') &&\n        !isCompoundAssignment(ref.writeExpr) &&\n        !isSelfAssignement(ref) &&\n        !variable.defs.some(\n          def => def.type === 'Parameter' || (def.type === 'Variable' && !def.node.init),\n        )\n      );\n    }\n\n    function isEnumConstant() {\n      return (context.getAncestors() as TSESTree.Node[]).some(n => n.type === 'TSEnumDeclaration');\n    }\n\n    function variableUsedOutsideOfCodePath(variable: Scope.Variable) {\n      return variableUsages.get(variable)!.size > 1;\n    }\n\n    function checkIdentifierUsage(node: estree.Identifier) {\n      const { ref, variable } = resolveReference(node);\n      if (ref) {\n        processReference(ref);\n      }\n      if (variable) {\n        updateVariableUsages(variable);\n      }\n    }\n\n    function processReference(ref: Reference) {\n      const assignmentStack = peek(codePathStack).assignmentStack;\n      if (assignmentStack.length > 0) {\n        const assignment = peek(assignmentStack);\n        assignment.add(ref);\n      } else {\n        peek(codePathStack).codePath.currentSegments.forEach(segment => {\n          const reachingDefs = reachingDefsForSegment(segment);\n          reachingDefs.add(ref);\n        });\n      }\n    }\n\n    function reachingDefsForSegment(segment: CodePathSegment) {\n      let defs;\n      if (reachingDefsMap.has(segment.id)) {\n        defs = reachingDefsMap.get(segment.id)!;\n      } else {\n        defs = new ReachingDefinitions(segment);\n        reachingDefsMap.set(segment.id, defs);\n      }\n      return defs;\n    }\n\n    function updateVariableUsages(variable: Scope.Variable) {\n      const codePathId = peek(codePathStack).codePath.id;\n      if (variableUsages.has(variable)) {\n        variableUsages.get(variable)!.add(codePathId);\n      } else {\n        variableUsages.set(variable, new Set<string>([codePathId]));\n      }\n    }\n\n    function pushContext(codePathContext: CodePathContext) {\n      codePathStack.push(codePathContext);\n    }\n\n    function popContext() {\n      codePathStack.pop();\n    }\n\n    function resolveReferenceRecursively(\n      node: estree.Identifier,\n      scope: Scope.Scope | null,\n    ): { ref: Reference | null; variable: Scope.Variable | null } {\n      if (scope === null) {\n        return { ref: null, variable: null };\n      }\n      const ref = scope.references.find(r => r.identifier === node);\n      if (ref) {\n        return { ref, variable: ref.resolved };\n      } else {\n        // if it's not a reference, it can be just declaration without initializer\n        const variable = scope.variables.find(v => v.defs.find(def => def.name === node));\n        if (variable) {\n          return { ref: null, variable };\n        }\n        // in theory we only need 1-level recursion, only for switch expression, which is likely a bug in eslint\n        // generic recursion is used for safety & readability\n        return resolveReferenceRecursively(node, scope.upper);\n      }\n    }\n\n    function resolveReference(node: estree.Identifier) {\n      return resolveReferenceRecursively(node, context.getScope());\n    }\n  },\n};\n\nclass CodePathContext {\n  reachingDefinitionsMap = new Map<string, ReachingDefinitions>();\n  reachingDefinitionsStack: ReachingDefinitions[] = [];\n  codePath: CodePath;\n  segments = new Map<string, CodePathSegment>();\n  assignmentStack: AssignmentContext[] = [];\n\n  constructor(codePath: CodePath) {\n    this.codePath = codePath;\n  }\n}\n\ntype AssignmentLike = TSESTree.AssignmentExpression | TSESTree.VariableDeclarator;\n\nclass AssignmentContext {\n  node: AssignmentLike;\n\n  constructor(node: AssignmentLike) {\n    this.node = node;\n  }\n\n  lhs = new Set<Reference>();\n  rhs = new Set<Reference>();\n\n  isRhs(node: TSESTree.Node) {\n    return isAssignmentExpression(this.node) ? this.node.right === node : this.node.init === node;\n  }\n\n  isLhs(node: TSESTree.Node) {\n    return isAssignmentExpression(this.node) ? this.node.left === node : this.node.id === node;\n  }\n\n  add(ref: Reference) {\n    let parent = ref.identifier as TSESTree.Node | undefined;\n    while (parent) {\n      if (this.isLhs(parent)) {\n        this.lhs.add(ref);\n        break;\n      }\n      if (this.isRhs(parent)) {\n        this.rhs.add(ref);\n        break;\n      }\n      parent = parent.parent;\n    }\n    if (parent === null) {\n      throw new Error('failed to find assignment lhs/rhs');\n    }\n  }\n}\n\nfunction peek<T>(arr: Array<T>) {\n  return arr[arr.length - 1];\n}\n\nfunction isSelfAssignement(ref: Reference) {\n  const lhs = ref.resolved;\n  if (ref.writeExpr?.type === 'Identifier') {\n    const rhs = getVariableFromIdentifier(ref.writeExpr, ref.from);\n    return lhs === rhs;\n  }\n  return false;\n}\n\nfunction isCompoundAssignment(writeExpr: estree.Node | null) {\n  if (writeExpr && writeExpr.hasOwnProperty('parent')) {\n    const node = (writeExpr as TSESTree.Node).parent;\n    return node && node.type === 'AssignmentExpression' && node.operator !== '=';\n  }\n  return false;\n}\n\nfunction isDefaultParameter(ref: Reference) {\n  if (ref.identifier.type !== 'Identifier') {\n    return false;\n  }\n  const parent = (ref.identifier as TSESTree.Identifier).parent;\n  return parent && parent.type === 'AssignmentPattern';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4782\n\nimport { Rule, AST } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isRequiredParserServices, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    if (!isRequiredParserServices(context.parserServices)) {\n      return {};\n    }\n\n    function checkProperty(node: estree.Node) {\n      const tsNode = node as TSESTree.Node as\n        | TSESTree.PropertyDefinition\n        | TSESTree.TSPropertySignature;\n      const optionalToken = context\n        .getSourceCode()\n        .getFirstToken(node, token => token.value === '?');\n      if (!tsNode.optional || !optionalToken) {\n        return;\n      }\n\n      const typeNode = getUndefinedTypeAnnotation(tsNode.typeAnnotation);\n      if (typeNode) {\n        const suggest = getQuickFixSuggestions(context, optionalToken, typeNode);\n        const secondaryLocations = [typeNode];\n        const message = toEncodedMessage(\n          \"Consider removing 'undefined' type or '?' specifier, one of them is redundant.\",\n          secondaryLocations,\n        );\n        context.report({\n          message,\n          loc: optionalToken.loc,\n          suggest,\n        });\n      }\n    }\n\n    return {\n      'PropertyDefinition, TSPropertySignature': (node: estree.Node) => checkProperty(node),\n    };\n  },\n};\n\nfunction getUndefinedTypeAnnotation(tsTypeAnnotation?: TSESTree.TSTypeAnnotation) {\n  if (tsTypeAnnotation) {\n    return getUndefinedTypeNode(tsTypeAnnotation.typeAnnotation);\n  }\n  return undefined;\n}\n\nfunction getUndefinedTypeNode(typeNode: TSESTree.TypeNode): TSESTree.TypeNode | undefined {\n  if (typeNode.type === 'TSUndefinedKeyword') {\n    return typeNode;\n  } else if (typeNode.type === 'TSUnionType') {\n    return typeNode.types.map(getUndefinedTypeNode).find(tpe => tpe !== undefined);\n  }\n  return undefined;\n}\n\nfunction getQuickFixSuggestions(\n  context: Rule.RuleContext,\n  optionalToken: AST.Token,\n  undefinedType: TSESTree.TypeNode,\n): Rule.SuggestionReportDescriptor[] {\n  const suggestions: Rule.SuggestionReportDescriptor[] = [\n    {\n      desc: 'Remove \"?\" operator',\n      fix: fixer => fixer.remove(optionalToken),\n    },\n  ];\n  if (undefinedType.parent?.type === 'TSUnionType') {\n    suggestions.push(getUndefinedRemovalSuggestion(context, undefinedType));\n  }\n  return suggestions;\n}\n\nfunction getUndefinedRemovalSuggestion(\n  context: Rule.RuleContext,\n  undefinedType: TSESTree.TypeNode,\n): Rule.SuggestionReportDescriptor {\n  return {\n    desc: 'Remove \"undefined\" type annotation',\n    fix: fixer => {\n      const fixes: Rule.Fix[] = [];\n      const unionType = undefinedType.parent as TSESTree.TSUnionType;\n      if (unionType.types.length === 2) {\n        const unionTypeNode = unionType as any as estree.Node;\n        const otherType =\n          unionType.types[0] === undefinedType ? unionType.types[1] : unionType.types[0];\n        const otherTypeText = context.getSourceCode().getText(otherType as any as estree.Node);\n        fixes.push(fixer.replaceText(unionTypeNode, otherTypeText));\n\n        const tokenBefore = context.getSourceCode().getTokenBefore(unionTypeNode);\n        const tokenAfter = context.getSourceCode().getTokenAfter(unionTypeNode);\n        if (tokenBefore?.value === '(' && tokenAfter?.value === ')') {\n          fixes.push(fixer.remove(tokenBefore));\n          fixes.push(fixer.remove(tokenAfter));\n        }\n      } else {\n        const index = unionType.types.indexOf(undefinedType);\n        if (index === 0) {\n          fixes.push(fixer.removeRange([undefinedType.range[0], unionType.types[1].range[0]]));\n        } else {\n          fixes.push(\n            fixer.removeRange([unionType.types[index - 1].range[1], undefinedType.range[1]]),\n          );\n        }\n      }\n      return fixes;\n    },\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S1110/javascript\n\nimport { AST, Rule, SourceCode } from 'eslint';\nimport * as estree from 'estree';\nimport { getParent, toEncodedMessage } from '../utils';\n\ninterface ParenthesesPair {\n  openingParenthesis: AST.Token;\n  closingParenthesis: AST.Token;\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n    hasSuggestions: true,\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      '*': function (node: estree.Node) {\n        checkRedundantParentheses(context.getSourceCode(), node, context);\n      },\n    };\n  },\n};\n\nfunction checkRedundantParentheses(\n  sourceCode: SourceCode,\n  node: estree.Node,\n  context: Rule.RuleContext,\n) {\n  const parenthesesPairsAroundNode = getParenthesesPairsAround(sourceCode, node, node);\n  const parent = getParent(context);\n\n  // Ignore parentheses pair from the parent node\n  if (!!parent && isInParentNodeParentheses(node, parent)) {\n    parenthesesPairsAroundNode.pop();\n  }\n  // One pair of parentheses is allowed for readability purposes\n  parenthesesPairsAroundNode.shift();\n\n  parenthesesPairsAroundNode.forEach(parentheses => {\n    context.report({\n      message: toEncodedMessage(`Remove these useless parentheses.`, [\n        parentheses.closingParenthesis,\n      ]),\n      loc: parentheses.openingParenthesis.loc,\n      suggest: [\n        {\n          desc: 'Remove these useless parentheses',\n          fix(fixer) {\n            return [\n              fixer.remove(parentheses.openingParenthesis),\n              fixer.remove(parentheses.closingParenthesis),\n            ];\n          },\n        },\n      ],\n    });\n  });\n}\n\nfunction getParenthesesPairsAround(\n  sourceCode: SourceCode,\n  start: estree.Node | AST.Token,\n  end: estree.Node | AST.Token,\n): ParenthesesPair[] {\n  const tokenBefore = sourceCode.getTokenBefore(start);\n  const tokenAfter = sourceCode.getTokenAfter(end);\n\n  if (!!tokenBefore && !!tokenAfter && tokenBefore.value === '(' && tokenAfter.value === ')') {\n    return [\n      { openingParenthesis: tokenBefore, closingParenthesis: tokenAfter },\n      ...getParenthesesPairsAround(sourceCode, tokenBefore, tokenAfter),\n    ];\n  }\n\n  return [];\n}\n\nfunction isInParentNodeParentheses(node: estree.Node, parent: estree.Node): boolean {\n  const nodeIsInConditionOfParent =\n    (parent.type === 'IfStatement' ||\n      parent.type === 'WhileStatement' ||\n      parent.type === 'DoWhileStatement') &&\n    parent.test === node;\n\n  const nodeIsArgumentOfCallExpression =\n    (parent.type === 'CallExpression' || parent.type === 'NewExpression') &&\n    parent.arguments.includes(node as estree.Expression);\n\n  return nodeIsInConditionOfParent || nodeIsArgumentOfCallExpression;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3827\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { findFirstMatchingAncestor, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const excludedNames = new Set();\n    const undeclaredIdentifiersByName: Map<string, estree.Identifier[]> = new Map();\n    return {\n      'Program:exit'() {\n        excludedNames.clear();\n        undeclaredIdentifiersByName.clear();\n        const globalScope = context.getScope();\n        globalScope.through.forEach(ref => {\n          const identifier = ref.identifier;\n          if (excludedNames.has(identifier.name)) {\n            return;\n          }\n          if (\n            ref.writeExpr ||\n            hasTypeOfOperator(identifier as TSESTree.Node) ||\n            isWithinWithStatement(identifier as TSESTree.Node)\n          ) {\n            excludedNames.add(identifier.name);\n            return;\n          }\n          const undeclaredIndentifiers = undeclaredIdentifiersByName.get(identifier.name);\n          if (!!undeclaredIndentifiers) {\n            undeclaredIndentifiers.push(identifier);\n          } else {\n            undeclaredIdentifiersByName.set(identifier.name, [identifier]);\n          }\n        });\n        undeclaredIdentifiersByName.forEach((identifiers, name) => {\n          context.report({\n            node: identifiers[0],\n            message: toEncodedMessage(\n              `\\\"${name}\\\" does not exist. Change its name or declare it so that its usage doesn't result in a \\\"ReferenceError\\\".`,\n              identifiers.slice(1),\n            ),\n          });\n        });\n      },\n    };\n  },\n};\n\nfunction isWithinWithStatement(node: TSESTree.Node) {\n  return !!findFirstMatchingAncestor(node, ancestor => ancestor.type === 'WithStatement');\n}\n\nfunction hasTypeOfOperator(node: TSESTree.Node) {\n  const parent = node.parent;\n  return parent?.type === 'UnaryExpression' && parent.operator === 'typeof';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5736\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfNode, getPropertyWithValue, getObjectExpressionProperty } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst POLICY = 'policy';\nconst REFERRER_POLICY = 'referrerPolicy';\nconst UNSAFE_REFERRER_POLICY_VALUES = ['', 'unsafe-url', 'no-referrer-when-downgrade'];\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findNoReferrerPolicyPropertyFromHelmet,\n  `Make sure disabling strict HTTP no-referrer policy is safe here.`,\n);\n\nfunction findNoReferrerPolicyPropertyFromHelmet(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  let sensitive: estree.Property | undefined;\n\n  const { callee, arguments: args } = node;\n  if (args.length === 1) {\n    const [options] = args;\n\n    /* helmet({ referrerPolicy: false }) or helmet.referrerPolicy({ policy: <unsafe_value> }) */\n    if (isHelmetModuleNode(context, callee) && options.type === 'ObjectExpression') {\n      sensitive = getPropertyWithValue(context, options, REFERRER_POLICY, false);\n    } else if (callee.type === 'MemberExpression') {\n      const { object, property } = callee;\n      if (\n        isHelmetModuleNode(context, object) &&\n        property.type === 'Identifier' &&\n        property.name === REFERRER_POLICY\n      ) {\n        const maybePolicy = getObjectExpressionProperty(options, POLICY);\n        if (maybePolicy && !isSafePolicy(maybePolicy)) {\n          sensitive = maybePolicy;\n        }\n      }\n    }\n  }\n\n  return sensitive ? [sensitive] : [];\n}\n\nfunction isHelmetModuleNode(context: Rule.RuleContext, node: estree.Node): boolean {\n  return node.type === 'Identifier' && getModuleNameOfNode(context, node)?.value === HELMET;\n}\n\nfunction isSafePolicy(policy: estree.Property): boolean {\n  const { value } = policy;\n  const values: Array<estree.Node | null> =\n    value.type === 'ArrayExpression' ? value.elements : [value];\n  const sensitiveValue = values.find(\n    v =>\n      v?.type === 'Literal' &&\n      typeof v.value === 'string' &&\n      UNSAFE_REFERRER_POLICY_VALUES.includes(v.value),\n  );\n  return !Boolean(sensitiveValue);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3533\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isRequiredParserServices, RequiredParserServices, isFunction, isString } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      standardImport: 'Use a standard \"import\" statement instead of \"{{adhocImport}}\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      'CallExpression[callee.type=\"Identifier\"]': (node: estree.Node) => {\n        if (context.getScope().type !== 'module' && context.getScope().type !== 'global') {\n          return;\n        }\n        const callExpression = node as estree.CallExpression;\n        const identifier = callExpression.callee as estree.Identifier;\n        if (\n          isAmdImport(callExpression, identifier, services) ||\n          isCommonJsImport(callExpression, identifier, services)\n        ) {\n          context.report({\n            node: identifier,\n            messageId: 'standardImport',\n            data: {\n              adhocImport: identifier.name,\n            },\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isCommonJsImport(\n  callExpression: estree.CallExpression,\n  identifier: estree.Identifier,\n  services: RequiredParserServices,\n): boolean {\n  return (\n    callExpression.arguments.length === 1 &&\n    isString(callExpression.arguments[0], services) &&\n    identifier.name === 'require'\n  );\n}\n\nfunction isAmdImport(\n  callExpression: estree.CallExpression,\n  identifier: estree.Identifier,\n  services: RequiredParserServices,\n): boolean {\n  if (identifier.name !== 'require' && identifier.name !== 'define') {\n    return false;\n  }\n  if (callExpression.arguments.length !== 2 && callExpression.arguments.length !== 3) {\n    return false;\n  }\n  return isFunction(callExpression.arguments[callExpression.arguments.length - 1], services);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4324\n\nimport { Rule } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isRequiredParserServices, RequiredParserServices } from '../utils';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\n\ntype ReturnedExpression = estree.Expression | undefined | null;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeOrChangeType: 'Remove this return type or change it to a more specific.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n\n    if (isRequiredParserServices(services)) {\n      const returnedExpressions: ReturnedExpression[][] = [];\n      return {\n        ReturnStatement(node: estree.Node) {\n          if (returnedExpressions.length > 0) {\n            returnedExpressions[returnedExpressions.length - 1].push(\n              (node as estree.ReturnStatement).argument,\n            );\n          }\n        },\n        FunctionDeclaration: function () {\n          returnedExpressions.push([]);\n        },\n        'FunctionDeclaration:exit': function (node: estree.Node) {\n          const returnType = (node as TSESTree.FunctionDeclaration).returnType;\n          if (\n            returnType &&\n            returnType.typeAnnotation.type === 'TSAnyKeyword' &&\n            returnedExpressions.length > 0 &&\n            allReturnTypesEqual(returnedExpressions[returnedExpressions.length - 1], services)\n          ) {\n            context.report({\n              messageId: 'removeOrChangeType',\n              loc: returnType.loc,\n            });\n          }\n          returnedExpressions.pop();\n        },\n      };\n    }\n    return {};\n  },\n};\n\nfunction allReturnTypesEqual(\n  returns: ReturnedExpression[],\n  services: RequiredParserServices,\n): boolean {\n  const firstReturnType = getTypeFromTreeNode(returns.pop(), services);\n  if (!!firstReturnType && !!isPrimitiveType(firstReturnType)) {\n    return returns.every(nextReturn => {\n      const nextReturnType = getTypeFromTreeNode(nextReturn, services);\n      return !!nextReturnType && nextReturnType.flags === firstReturnType.flags;\n    });\n  }\n  return false;\n}\n\nfunction getTypeFromTreeNode(node: ReturnedExpression, services: RequiredParserServices) {\n  const checker = services.program.getTypeChecker();\n  return checker.getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node));\n}\n\nfunction isPrimitiveType({ flags }: ts.Type) {\n  return (\n    flags & ts.TypeFlags.BooleanLike ||\n    flags & ts.TypeFlags.NumberLike ||\n    flags & ts.TypeFlags.StringLike ||\n    flags & ts.TypeFlags.EnumLike\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5863/javascript\n\nimport { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { areEquivalent } from 'eslint-plugin-sonarjs/lib/utils/equivalence';\nimport * as estree from 'estree';\nimport { Chai, isIdentifier, isLiteral, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    if (!Chai.isImported(context)) {\n      return {};\n    }\n    return {\n      ExpressionStatement(node: estree.Node) {\n        const { expression } = node as estree.ExpressionStatement;\n        checkExpect(context, expression);\n        checkShould(context, expression);\n        checkAssert(context, expression);\n      },\n    };\n  },\n};\n\nfunction checkAssert(context: Rule.RuleContext, expression: estree.Expression) {\n  if (expression.type === 'CallExpression') {\n    const { callee, arguments: args } = expression;\n    if (callee.type === 'MemberExpression' && isIdentifier(callee.object, 'assert')) {\n      findDuplicates(context, args);\n    }\n  }\n}\n\nfunction checkExpect(context: Rule.RuleContext, expression: estree.Expression) {\n  let currentExpression: estree.Node = expression;\n  let args: estree.Node[] = [];\n\n  while (true) {\n    if (currentExpression.type === 'CallExpression') {\n      args = [...currentExpression.arguments, ...args];\n      currentExpression = currentExpression.callee;\n    } else if (currentExpression.type === 'MemberExpression') {\n      currentExpression = currentExpression.object;\n    } else if (isIdentifier(currentExpression, 'expect')) {\n      break;\n    } else {\n      return;\n    }\n  }\n\n  findDuplicates(context, args);\n}\n\nfunction checkShould(context: Rule.RuleContext, expression: estree.Expression) {\n  let currentExpression: estree.Node = expression;\n  let args: estree.Node[] = [];\n  let hasShould = false;\n\n  while (true) {\n    if (currentExpression.type === 'CallExpression') {\n      args = [...currentExpression.arguments, ...args];\n      currentExpression = currentExpression.callee;\n    } else if (currentExpression.type === 'MemberExpression') {\n      if (isIdentifier(currentExpression.property, 'should')) {\n        hasShould = true;\n      }\n      currentExpression = currentExpression.object;\n    } else if (isIdentifier(currentExpression, 'should')) {\n      break;\n    } else if (hasShould) {\n      args = [currentExpression, ...args];\n      break;\n    } else {\n      return;\n    }\n  }\n\n  findDuplicates(context, args);\n}\n\nfunction findDuplicates(context: Rule.RuleContext, args: estree.Node[]) {\n  const castedContext = context.getSourceCode() as unknown as TSESLint.SourceCode;\n  for (let i = 0; i < args.length; i++) {\n    for (let j = i + 1; j < args.length; j++) {\n      const duplicates = areEquivalent(\n        args[i] as TSESTree.Node,\n        args[j] as TSESTree.Node,\n        castedContext,\n      );\n      if (duplicates && !isLiteral(args[i])) {\n        const message = toEncodedMessage(`Replace this argument or its duplicate.`, [args[j]]);\n        context.report({ message, node: args[i] });\n      }\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-105\n\nimport { Rule } from 'eslint';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      replaceTab: 'Replace all tab characters in this file by sequences of white-spaces.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'Program:exit': function () {\n        const firstTab = context\n          .getSourceCode()\n          .lines.map((content, line) => ({ content, line }))\n          .find(t => t.content.includes('\\t'));\n\n        if (firstTab !== undefined) {\n          context.report({\n            messageId: 'replaceTab',\n            loc: { line: firstTab.line + 1, column: 0 },\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4822\n\nimport { Rule, SourceCode } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isRequiredParserServices, isThenable, toEncodedMessage } from '../utils';\n\ntype CallLikeExpression =\n  | TSESTree.CallExpression\n  | TSESTree.NewExpression\n  | TSESTree.AwaitExpression;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (isRequiredParserServices(services)) {\n      return {\n        TryStatement: (node: estree.Node) =>\n          visitTryStatement(node as TSESTree.TryStatement, context, services),\n      };\n    }\n    return {};\n  },\n};\n\nfunction visitTryStatement(\n  tryStmt: TSESTree.TryStatement,\n  context: Rule.RuleContext,\n  services: any,\n) {\n  if (tryStmt.handler) {\n    // without '.catch()'\n    const openPromises: TSESTree.Node[] = [];\n    // with '.catch()'\n    const capturedPromises: TSESTree.Node[] = [];\n\n    let hasPotentiallyThrowingCalls = false;\n    CallLikeExpressionVisitor.getCallExpressions(tryStmt.block, context).forEach(callLikeExpr => {\n      if (\n        callLikeExpr.type === 'AwaitExpression' ||\n        !isThenable(callLikeExpr as estree.Node, services)\n      ) {\n        hasPotentiallyThrowingCalls = true;\n        return;\n      }\n\n      if (isAwaitLike(callLikeExpr) || isThened(callLikeExpr) || isCatch(callLikeExpr)) {\n        return;\n      }\n\n      (isCaught(callLikeExpr) ? capturedPromises : openPromises).push(callLikeExpr);\n    });\n\n    if (!hasPotentiallyThrowingCalls) {\n      checkForWrongCatch(tryStmt, openPromises, context);\n      checkForUselessCatch(tryStmt, openPromises, capturedPromises, context);\n    }\n  }\n}\n\nclass CallLikeExpressionVisitor {\n  private readonly callLikeExpressions: CallLikeExpression[] = [];\n\n  static getCallExpressions(node: TSESTree.Node, context: Rule.RuleContext) {\n    const visitor = new CallLikeExpressionVisitor();\n    visitor.visit(node, context);\n    return visitor.callLikeExpressions;\n  }\n\n  private visit(root: TSESTree.Node, context: Rule.RuleContext) {\n    const visitNode = (node: TSESTree.Node) => {\n      switch (node.type) {\n        case 'AwaitExpression':\n        case 'CallExpression':\n        case 'NewExpression':\n          this.callLikeExpressions.push(node);\n          break;\n        case 'FunctionDeclaration':\n        case 'FunctionExpression':\n        case 'ArrowFunctionExpression':\n          return;\n      }\n      childrenOf(node, context.getSourceCode().visitorKeys).forEach(visitNode);\n    };\n    visitNode(root);\n  }\n}\n\nfunction checkForWrongCatch(\n  tryStmt: TSESTree.TryStatement,\n  openPromises: TSESTree.Node[],\n  context: Rule.RuleContext,\n) {\n  if (openPromises.length > 0) {\n    const ending = openPromises.length > 1 ? 's' : '';\n    const message = `Consider using 'await' for the promise${ending} inside this 'try' or replace it with 'Promise.prototype.catch(...)' usage${ending}.`;\n    const token = context.getSourceCode().getFirstToken(tryStmt as estree.Node);\n    context.report({\n      message: toEncodedMessage(message, openPromises, Array(openPromises.length).fill('Promise')),\n      loc: token!.loc,\n    });\n  }\n}\n\nfunction checkForUselessCatch(\n  tryStmt: TSESTree.TryStatement,\n  openPromises: TSESTree.Node[],\n  capturedPromises: TSESTree.Node[],\n  context: Rule.RuleContext,\n) {\n  if (openPromises.length === 0 && capturedPromises.length > 0) {\n    const ending = capturedPromises.length > 1 ? 's' : '';\n    const message = `Consider removing this 'try' statement as promise${ending} rejection is already captured by '.catch()' method.`;\n    const token = context.getSourceCode().getFirstToken(tryStmt as estree.Node);\n    context.report({\n      message: toEncodedMessage(\n        message,\n        capturedPromises,\n        Array(capturedPromises.length).fill('Caught promise'),\n      ),\n      loc: token!.loc,\n    });\n  }\n}\n\nfunction isAwaitLike(callExpr: CallLikeExpression) {\n  return (\n    callExpr.parent &&\n    (callExpr.parent.type === 'AwaitExpression' || callExpr.parent.type === 'YieldExpression')\n  );\n}\n\nfunction isThened(callExpr: CallLikeExpression) {\n  return (\n    callExpr.parent &&\n    callExpr.parent.type === 'MemberExpression' &&\n    callExpr.parent.property.type === 'Identifier' &&\n    callExpr.parent.property.name === 'then'\n  );\n}\n\nfunction isCaught(callExpr: CallLikeExpression) {\n  return (\n    callExpr.parent &&\n    callExpr.parent.type === 'MemberExpression' &&\n    callExpr.parent.property.type === 'Identifier' &&\n    callExpr.parent.property.name === 'catch'\n  );\n}\n\nfunction isCatch(callExpr: CallLikeExpression) {\n  return (\n    callExpr.type === 'CallExpression' &&\n    callExpr.callee.type === 'MemberExpression' &&\n    callExpr.callee.property.type === 'Identifier' &&\n    callExpr.callee.property.name === 'catch'\n  );\n}\n\nfunction childrenOf(node: TSESTree.Node, visitorKeys: SourceCode.VisitorKeys) {\n  const keys = visitorKeys[node.type];\n  const children = [];\n  if (keys) {\n    for (const key of keys) {\n      const child = (node as any)[key];\n      if (Array.isArray(child)) {\n        children.push(...child);\n      } else {\n        children.push(child);\n      }\n    }\n  }\n  return children.filter(Boolean);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4623\n\nimport { Rule } from 'eslint';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isRequiredParserServices, RequiredParserServices } from '../utils';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      removeUndefined: 'Remove this redundant \"undefined\".',\n      suggestRemoveUndefined: 'Remove this redundant argument',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (isRequiredParserServices(services)) {\n      return {\n        CallExpression: (node: estree.Node) => {\n          const call = node as estree.CallExpression;\n          const { arguments: args } = call;\n          if (args.length === 0) {\n            return;\n          }\n\n          const lastArgument = args[args.length - 1];\n          if (isUndefined(lastArgument) && isOptionalParameter(args.length - 1, call, services)) {\n            context.report({\n              messageId: 'removeUndefined',\n              node: lastArgument,\n              suggest: [\n                {\n                  messageId: 'suggestRemoveUndefined',\n                  fix: fixer => {\n                    if (call.arguments.length === 1) {\n                      const openingParen = context.getSourceCode().getTokenAfter(call.callee)!;\n                      const closingParen = context.getSourceCode().getLastToken(node)!;\n                      const [, begin] = openingParen.range;\n                      const [end] = closingParen.range;\n                      return fixer.removeRange([begin, end]);\n                    } else {\n                      const [, begin] = args[args.length - 2].range!;\n                      const [, end] = lastArgument.range!;\n                      return fixer.removeRange([begin, end]);\n                    }\n                  },\n                },\n              ],\n            });\n          }\n        },\n      };\n    }\n    return {};\n  },\n};\n\nfunction isUndefined(node: estree.Node) {\n  return node.type === 'Identifier' && node.name === 'undefined';\n}\n\nfunction isOptionalParameter(\n  paramIndex: number,\n  node: estree.CallExpression,\n  services: RequiredParserServices,\n) {\n  const signature = services.program\n    .getTypeChecker()\n    .getResolvedSignature(\n      services.esTreeNodeToTSNodeMap.get(node as TSESTree.Node) as ts.CallLikeExpression,\n    );\n  if (signature) {\n    const declaration = signature.declaration;\n    if (declaration && isFunctionLikeDeclaration(declaration)) {\n      const { parameters } = declaration;\n      const parameter = parameters[paramIndex];\n      return parameter && (parameter.initializer || parameter.questionToken);\n    }\n  }\n  return false;\n}\n\nfunction isFunctionLikeDeclaration(\n  declaration: ts.Declaration,\n): declaration is ts.FunctionLikeDeclarationBase {\n  return [\n    ts.SyntaxKind.FunctionDeclaration,\n    ts.SyntaxKind.FunctionExpression,\n    ts.SyntaxKind.ArrowFunction,\n    ts.SyntaxKind.MethodDeclaration,\n    ts.SyntaxKind.Constructor,\n    ts.SyntaxKind.GetAccessor,\n    ts.SyntaxKind.SetAccessor,\n  ].includes(declaration.kind);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2138\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      useNull: 'Use null instead.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function raiseOnUndefined(node: estree.Node) {\n      if (node.type === 'Identifier' && node.name === 'undefined') {\n        context.report({\n          messageId: 'useNull',\n          node,\n        });\n      }\n    }\n    return {\n      VariableDeclarator: (node: estree.Node) => {\n        const { init } = node as estree.VariableDeclarator;\n        if (init) {\n          raiseOnUndefined(init);\n        }\n      },\n      AssignmentExpression: (node: estree.Node) => {\n        const { right } = node as estree.AssignmentExpression;\n        raiseOnUndefined(right);\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2681\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\nconst NestingStatementLike = [\n  'IfStatement',\n  'ForStatement',\n  'ForInStatement',\n  'ForOfStatement',\n  'WhileStatement',\n];\n\ntype Statement = estree.Statement | estree.ModuleDeclaration;\n\ntype NestingStatement =\n  | estree.IfStatement\n  | estree.ForStatement\n  | estree.ForInStatement\n  | estree.ForOfStatement\n  | estree.WhileStatement;\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    return {\n      Program: (node: estree.Node) => checkStatements((node as estree.Program).body, context),\n      BlockStatement: (node: estree.Node) =>\n        checkStatements((node as estree.BlockStatement).body, context),\n      TSModuleBlock: (node: estree.Node) =>\n        checkStatements((node as unknown as TSESTree.TSModuleBlock).body as Statement[], context),\n    };\n  },\n};\n\nfunction checkStatements(statements: Statement[], context: Rule.RuleContext) {\n  chain(statements)\n    .filter(chainedStatements => chainedStatements.areUnenclosed())\n    .forEach(unenclosedConsecutives => {\n      if (unenclosedConsecutives.areAdjacent()) {\n        raiseAdjacenceIssue(unenclosedConsecutives, context);\n      } else if (unenclosedConsecutives.areBothIndented()) {\n        raiseBlockIssue(\n          unenclosedConsecutives,\n          countStatementsInTheSamePile(unenclosedConsecutives.prev, statements),\n          context,\n        );\n      } else if (unenclosedConsecutives.areInlinedAndIndented()) {\n        raiseInlineAndIndentedIssue(unenclosedConsecutives, context);\n      }\n    });\n}\n\nfunction chain(statements: Statement[]): ChainedStatements[] {\n  return statements\n    .reduce((result, statement, i, array) => {\n      if (i < array.length - 1 && isNestingStatement(statement)) {\n        result.push({ prev: statement, next: array[i + 1] });\n      }\n      return result;\n    }, new Array<{ prev: NestingStatement; next: Statement }>())\n    .map(pair => {\n      return new ChainedStatements(pair.prev, extractLastBody(pair.prev), pair.next);\n    });\n}\n\nfunction extractLastBody(statement: NestingStatement) {\n  if (statement.type === 'IfStatement') {\n    if (statement.alternate) {\n      return statement.alternate;\n    } else {\n      return statement.consequent;\n    }\n  } else {\n    return statement.body;\n  }\n}\n\nfunction countStatementsInTheSamePile(reference: Statement, statements: Statement[]) {\n  const startOfPile = position(reference).start;\n  let lastLineOfPile = startOfPile.line;\n  for (const statement of statements) {\n    const currentPosition = position(statement);\n    const currentLine = currentPosition.end.line;\n    const currentIndentation = currentPosition.start.column;\n    if (currentLine > startOfPile.line) {\n      if (currentIndentation === startOfPile.column) {\n        lastLineOfPile = currentPosition.end.line;\n      } else {\n        break;\n      }\n    }\n  }\n  return lastLineOfPile - startOfPile.line + 1;\n}\n\nfunction raiseAdjacenceIssue(adjacentStatements: ChainedStatements, context: Rule.RuleContext) {\n  context.report({\n    message:\n      `This statement will not be executed ${adjacentStatements.includedStatementQualifier()}; only the first statement will be. ` +\n      `The rest will execute ${adjacentStatements.excludedStatementsQualifier()}.`,\n    node: adjacentStatements.next,\n  });\n}\n\nfunction raiseBlockIssue(\n  piledStatements: ChainedStatements,\n  sizeOfPile: number,\n  context: Rule.RuleContext,\n) {\n  context.report({\n    message:\n      `This line will not be executed ${piledStatements.includedStatementQualifier()}; only the first line of this ${sizeOfPile}-line block will be. ` +\n      `The rest will execute ${piledStatements.excludedStatementsQualifier()}.`,\n    node: piledStatements.next,\n  });\n}\n\nfunction raiseInlineAndIndentedIssue(\n  chainedStatements: ChainedStatements,\n  context: Rule.RuleContext,\n) {\n  context.report({\n    message:\n      `This line will not be executed ${chainedStatements.includedStatementQualifier()}; only the first statement will be. ` +\n      `The rest will execute ${chainedStatements.excludedStatementsQualifier()}.`,\n    node: chainedStatements.next,\n  });\n}\n\nfunction isNestingStatement(node: estree.Node): node is NestingStatement {\n  return NestingStatementLike.includes(node.type);\n}\n\nclass ChainedStatements {\n  private readonly positions: Positions;\n\n  constructor(\n    readonly topStatement: NestingStatement,\n    readonly prev: Statement,\n    readonly next: Statement,\n  ) {\n    const topPosition = position(topStatement);\n    const prevPosition = position(prev);\n    const nextPosition = position(next);\n    this.positions = {\n      prevTopStart: topPosition.start,\n      prevTopEnd: topPosition.end,\n      prevStart: prevPosition.start,\n      prevEnd: prevPosition.end,\n      nextStart: nextPosition.start,\n      nextEnd: nextPosition.end,\n    };\n  }\n\n  public areUnenclosed(): boolean {\n    return this.prev.type !== 'BlockStatement';\n  }\n\n  public areAdjacent(): boolean {\n    return this.positions.prevEnd.line === this.positions.nextStart.line;\n  }\n\n  public areBothIndented(): boolean {\n    return (\n      this.positions.prevStart.column === this.positions.nextStart.column && this.prevIsIndented()\n    );\n  }\n\n  public areInlinedAndIndented(): boolean {\n    return (\n      this.positions.prevStart.line === this.positions.prevTopEnd.line &&\n      this.positions.nextStart.column > this.positions.prevTopStart.column\n    );\n  }\n\n  public includedStatementQualifier(): string {\n    return this.topStatement.type === 'IfStatement' ? 'conditionally' : 'in a loop';\n  }\n\n  public excludedStatementsQualifier(): string {\n    return this.topStatement.type === 'IfStatement' ? 'unconditionally' : 'only once';\n  }\n\n  private prevIsIndented(): boolean {\n    return this.positions.prevStart.column > this.positions.prevTopStart.column;\n  }\n}\n\ntype Positions = {\n  prevTopStart: estree.Position;\n  prevTopEnd: estree.Position;\n  prevStart: estree.Position;\n  prevEnd: estree.Position;\n  nextStart: estree.Position;\n  nextEnd: estree.Position;\n};\n\nfunction position(node: estree.Node) {\n  return (node as TSESTree.Node).loc;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5042\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  isLiteral,\n  getImportDeclarations,\n  getRequireCalls,\n  isCallToFQN,\n  getValueOfExpression,\n  getModuleNameOfIdentifier,\n} from '../utils';\n\nconst ADM_ZIP = 'adm-zip';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeExpanding: 'Make sure that expanding this archive file is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function canBeProperty(prop: estree.Property | estree.SpreadElement, name: string) {\n      return (\n        prop.type === 'SpreadElement' ||\n        isIdentifier(prop.key, name) ||\n        (isLiteral(prop.key) && prop.key.value === name)\n      );\n    }\n\n    function isCallToAdmZipExtractAll({ callee }: estree.CallExpression) {\n      return callee.type === 'MemberExpression' && isIdentifier(callee.property, 'extractAllTo');\n    }\n\n    function isAdmZipLibraryInScope() {\n      return isAdmZipLibraryImported() || isAdmZipLibraryRequired();\n    }\n\n    function isAdmZipLibraryImported() {\n      return getImportDeclarations(context).some(i => i.source.value === ADM_ZIP);\n    }\n\n    function isAdmZipLibraryRequired() {\n      return getRequireCalls(context).some(\n        r => r.arguments[0].type === 'Literal' && r.arguments[0].value === ADM_ZIP,\n      );\n    }\n\n    function isSensiteTarCall(call: estree.CallExpression) {\n      if (isCallToFQN(context, call, 'tar', 'x')) {\n        const firstArg = call.arguments.length > 0 ? call.arguments[0] : null;\n        if (!firstArg) {\n          return false;\n        }\n        const firstArgValue = getValueOfExpression(context, firstArg, 'ObjectExpression');\n        return (\n          !!firstArgValue && !firstArgValue.properties.some(prop => canBeProperty(prop, 'filter'))\n        );\n      }\n      return false;\n    }\n\n    function isSensiteExtractZipCall(call: estree.CallExpression) {\n      if (\n        call.callee.type === 'Identifier' &&\n        getModuleNameOfIdentifier(context, call.callee)?.value === 'extract-zip'\n      ) {\n        const secondArg = call.arguments.length > 1 ? call.arguments[1] : null;\n        if (!secondArg) {\n          return false;\n        }\n        const secondArgValue = getValueOfExpression(context, secondArg, 'ObjectExpression');\n        return (\n          !!secondArgValue &&\n          !secondArgValue.properties.some(prop => canBeProperty(prop, 'onEntry'))\n        );\n      }\n      return false;\n    }\n\n    return {\n      CallExpression(node: estree.Node) {\n        const call = node as estree.CallExpression;\n        if (\n          isSensiteTarCall(call) ||\n          (isCallToAdmZipExtractAll(call) && isAdmZipLibraryInScope()) ||\n          isCallToFQN(context, call, 'jszip', 'loadAsync') ||\n          isCallToFQN(context, call, 'yauzl', 'open') ||\n          isSensiteExtractZipCall(call)\n        ) {\n          context.report({\n            messageId: 'safeExpanding',\n            node: call.callee,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3984\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getParent } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      throwOrRemoveError: 'Throw this error or remove this useless statement.',\n      suggestThrowError: 'Throw this error',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function looksLikeAnError(expression: estree.Expression | estree.Super): boolean {\n      const text = context.getSourceCode().getText(expression);\n      return text.endsWith('Error') || text.endsWith('Exception');\n    }\n\n    return {\n      'ExpressionStatement > NewExpression': function (node: estree.Node) {\n        const expression = (node as estree.NewExpression).callee;\n        if (looksLikeAnError(expression)) {\n          context.report({\n            messageId: 'throwOrRemoveError',\n            node,\n            suggest: [\n              {\n                messageId: 'suggestThrowError',\n                fix: fixer => fixer.insertTextBefore(getParent(context)!, 'throw '),\n              },\n            ],\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1172\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\n\ntype FunctionLike =\n  | TSESTree.ArrowFunctionExpression\n  | TSESTree.FunctionDeclaration\n  | TSESTree.FunctionExpression;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      removeOrRenameParameter:\n        'Remove the unused function parameter \"{{param}}\" or rename it to \"_{{param}}\" to make intention explicit.',\n      suggestRemoveParameter: 'Remove \"{{param}}\" (beware of call sites)',\n      suggestRenameParameter: 'Rename \"{{param}}\" to \"_{{param}}\"',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'FunctionDeclaration, FunctionExpression': function (node: estree.Node) {\n        reportUnusedArgument(\n          node,\n          (node as estree.FunctionDeclaration | estree.FunctionExpression).id,\n          context,\n        );\n      },\n      ArrowFunctionExpression: (node: estree.Node) => {\n        reportUnusedArgument(node, undefined, context);\n      },\n    };\n  },\n};\n\nfunction reportUnusedArgument(\n  node: estree.Node,\n  functionId: estree.Identifier | undefined | null,\n  context: Rule.RuleContext,\n) {\n  const parent = (node as TSESTree.Node).parent;\n  if (parent && parent.type === 'Property' && parent.kind === 'set') {\n    return;\n  }\n\n  if (\n    context\n      .getScope()\n      .variables.some(\n        v => v.name === 'arguments' && v.identifiers.length === 0 && v.references.length > 0,\n      )\n  ) {\n    return;\n  }\n\n  let parametersVariable = context.getDeclaredVariables(node);\n\n  if (functionId) {\n    parametersVariable = parametersVariable.filter(v => v.name !== functionId.name);\n  }\n\n  for (const param of parametersVariable) {\n    if (isUnusedVariable(param) && !isIgnoredParameter(param) && !isParameterProperty(param)) {\n      context.report({\n        messageId: 'removeOrRenameParameter',\n        node: param.identifiers[0],\n        data: {\n          param: param.name,\n        },\n        suggest: getSuggestions(param, context),\n      });\n    }\n  }\n}\n\nfunction getSuggestions(paramVariable: Scope.Variable, context: Rule.RuleContext) {\n  const paramIdentifier = paramVariable.identifiers[0];\n  const suggestions: Rule.SuggestionReportDescriptor[] = [\n    {\n      messageId: 'suggestRenameParameter',\n      data: {\n        param: paramVariable.name,\n      },\n      fix: fixer => fixer.insertTextBefore(paramIdentifier, '_'),\n    },\n  ];\n  const func = paramVariable.defs[0].node as FunctionLike;\n  if ((paramIdentifier as TSESTree.Node).parent === func) {\n    suggestions.push(getParameterRemovalSuggestion(func, paramVariable, paramIdentifier, context));\n  }\n  return suggestions;\n}\n\nfunction getParameterRemovalSuggestion(\n  func: FunctionLike,\n  paramVariable: Scope.Variable,\n  paramIdentifier: estree.Identifier,\n  context: Rule.RuleContext,\n): Rule.SuggestionReportDescriptor {\n  return {\n    messageId: 'suggestRemoveParameter',\n    data: {\n      param: paramVariable.name,\n    },\n    fix: fixer => {\n      const paramIndex = func.params.indexOf(paramIdentifier as TSESTree.Parameter);\n      const param = func.params[paramIndex] as estree.Node;\n      if (func.params.length === 1) {\n        const openingParenthesis = context.getSourceCode().getTokenBefore(param);\n        const closingParenthesis = context\n          .getSourceCode()\n          .getTokenAfter(param, token => token.value === ')');\n        let [start, end] = param.range!;\n        if (openingParenthesis && openingParenthesis.value === '(') {\n          start = openingParenthesis.range[0];\n          end = closingParenthesis!.range[1];\n        }\n        return fixer.replaceTextRange([start, end], '()');\n      } else if (func.params.length - 1 === paramIndex) {\n        const commaAfter = context\n          .getSourceCode()\n          .getTokenAfter(param, token => token.value === ',');\n        const commaBefore = context\n          .getSourceCode()\n          .getTokenBefore(param, token => token.value === ',')!;\n        let start = commaBefore.range[1];\n        let end = param.range![1];\n        if (commaAfter) {\n          end = commaAfter.range[1];\n        } else {\n          start = commaBefore.range[0];\n        }\n        return fixer.removeRange([start, end]);\n      } else {\n        const [start] = func.params[paramIndex].range;\n        const [end] = func.params[paramIndex + 1].range;\n        return fixer.removeRange([start, end]);\n      }\n    },\n  };\n}\n\nfunction isUnusedVariable(variable: Scope.Variable) {\n  const refs = variable.references;\n  //Parameter with default value has one reference, but should still be considered as unused.\n  return refs.length === 0 || (refs.length === 1 && refs[0].init);\n}\n\nfunction isIgnoredParameter(variable: Scope.Variable) {\n  return variable.name.startsWith('_');\n}\n\nfunction isParameterProperty(variable: Scope.Variable) {\n  return variable.defs.some(\n    def => (def.name as TSESTree.Node).parent?.type === 'TSParameterProperty',\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2123\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeIncrement: 'Remove this {{updateOperator}}rement or correct the code not to waste it.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function reportUpdateExpression(updateExpression: estree.UpdateExpression) {\n      const updateOperator = updateExpression.operator === '++' ? 'inc' : 'dec';\n      context.report({\n        messageId: 'removeIncrement',\n        data: {\n          updateOperator,\n        },\n        node: updateExpression,\n      });\n    }\n\n    return {\n      'ReturnStatement > UpdateExpression': function (node: estree.Node) {\n        const updateExpression = node as estree.UpdateExpression;\n        const argument = updateExpression.argument;\n        if (\n          !updateExpression.prefix &&\n          argument.type === 'Identifier' &&\n          isLocalIdentifier(argument, context.getScope())\n        ) {\n          reportUpdateExpression(updateExpression);\n        }\n      },\n      AssignmentExpression(node: estree.Node) {\n        const assignment = node as estree.AssignmentExpression;\n        const rhs = assignment.right;\n        if (rhs.type === 'UpdateExpression' && !rhs.prefix) {\n          const lhs = assignment.left;\n          if (\n            lhs.type === 'Identifier' &&\n            rhs.argument.type === 'Identifier' &&\n            rhs.argument.name === lhs.name\n          ) {\n            reportUpdateExpression(rhs);\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction isLocalIdentifier(id: estree.Identifier, scope: Scope.Scope) {\n  return scope.variables.some(v => v.identifiers.some(i => i.name === id.name));\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4335\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isRequiredParserServices } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeIntersection: 'Remove this type without members or change this type intersection.',\n      simplifyIntersection: 'Simplify this intersection as it always has type \"{{type}}\".',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (isRequiredParserServices(services)) {\n      return {\n        TSIntersectionType: (node: estree.Node) => {\n          const intersection = node as unknown as TSESTree.TSIntersectionType;\n          const anyOrNever = intersection.types.find(typeNode =>\n            ['TSAnyKeyword', 'TSNeverKeyword'].includes(typeNode.type),\n          );\n          if (anyOrNever) {\n            context.report({\n              messageId: 'simplifyIntersection',\n              data: {\n                type: anyOrNever.type === 'TSAnyKeyword' ? 'any' : 'never',\n              },\n              node,\n            });\n          } else {\n            intersection.types.forEach(typeNode => {\n              const tp: ts.Type = services.program\n                .getTypeChecker()\n                .getTypeAtLocation(services.esTreeNodeToTSNodeMap.get(typeNode));\n              if (isTypeWithoutMembers(tp)) {\n                context.report({\n                  messageId: 'removeIntersection',\n                  node: typeNode as unknown as estree.Node,\n                });\n              }\n            });\n          }\n        },\n      };\n    }\n    return {};\n  },\n};\n\nfunction isTypeWithoutMembers(tp: ts.Type): boolean {\n  return isNullLike(tp) || (isEmptyInterface(tp) && isStandaloneInterface(tp.symbol));\n}\n\nfunction isNullLike(tp: ts.Type): boolean {\n  return (\n    Boolean(tp.flags & ts.TypeFlags.Null) ||\n    Boolean(tp.flags & ts.TypeFlags.Undefined) ||\n    Boolean(tp.flags & ts.TypeFlags.Void)\n  );\n}\n\nfunction isEmptyInterface(tp: ts.Type): boolean {\n  return (\n    tp.getProperties().length === 0 &&\n    (!(tp as ts.InterfaceTypeWithDeclaredMembers).declaredIndexInfos ||\n      (tp as ts.InterfaceTypeWithDeclaredMembers).declaredIndexInfos.length === 0)\n  );\n}\n\nfunction isStandaloneInterface(typeSymbol: ts.Symbol) {\n  // there is no declarations for `{}`\n  // otherwise check that none of declarations has a heritage clause (`extends X` or `implements X`)\n  if (!typeSymbol) {\n    return false;\n  }\n  const { declarations } = typeSymbol;\n  return (\n    !declarations ||\n    declarations.every(declaration => {\n      return (\n        isInterfaceDeclaration(declaration) && (declaration.heritageClauses || []).length === 0\n      );\n    })\n  );\n}\n\nfunction isInterfaceDeclaration(\n  declaration: ts.Declaration,\n): declaration is ts.InterfaceDeclaration {\n  return declaration.kind === ts.SyntaxKind.InterfaceDeclaration;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1526\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    return {\n      \"VariableDeclaration[kind='var']\": (node: estree.Node) => {\n        const variables = context.getDeclaredVariables(node);\n        for (const variable of variables) {\n          const declaration = variable.identifiers[0];\n          const misused = variable.references\n            .filter(reference => !reference.init && comesBefore(reference.identifier, declaration))\n            .map(reference => reference.identifier);\n          if (misused.length > 0) {\n            context.report({\n              message: toEncodedMessage(\n                `Move the declaration of \\\"${declaration.name}\\\" before this usage.`,\n                [declaration as TSESTree.Node],\n                ['Declaration'],\n              ),\n              node: misused[0],\n            });\n          }\n        }\n      },\n    };\n  },\n};\n\nfunction comesBefore(node: estree.Node, other: estree.Node) {\n  const nodeLine = line(node),\n    otherLine = line(other);\n  return nodeLine < otherLine || (nodeLine === otherLine && column(node) < column(other));\n}\n\nfunction line(node: estree.Node) {\n  return node.loc!.start.line;\n}\n\nfunction column(node: estree.Node) {\n  return node.loc!.start.column;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport { Rule } from 'eslint';\nimport { AST } from 'vue-eslint-parser';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeVueBypassing: 'Make sure bypassing Vue built-in sanitization is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n\n    function attrsHref(calleeName: string) {\n      // select call expression with given name where second argument is object expression like { attrs: { href: 'bla' } }\n      return `CallExpression[callee.name='${calleeName}'] ObjectExpression.arguments:nth-child(2) > Property[key.name='attrs'] > ObjectExpression.value > Property[key.name='href']`;\n    }\n\n    const ruleListener: Rule.RuleListener = {\n      [\"JSXAttribute[name.name='domPropsInnerHTML'],\" +\n        \"Property[key.name='domProps'] > ObjectExpression.value > Property[key.name='innerHTML']\"](\n        node: estree.Node,\n      ) {\n        context.report({ node, messageId: 'safeVueBypassing' });\n      },\n      [`${attrsHref('createElement')},${attrsHref('h')}`](node: estree.Node) {\n        context.report({ node, messageId: 'safeVueBypassing' });\n      },\n    };\n\n    // @ts-ignore\n    if (services.defineTemplateBodyVisitor) {\n      // analyze <template> in .vue file\n      const templateBodyVisitor = context.parserServices.defineTemplateBodyVisitor({\n        [\"VAttribute[directive=true][key.name.name='html'],\" +\n          \"VAttribute[directive=true][key.argument.name='href']\"](node: AST.VAttribute) {\n          context.report({\n            loc: node.loc,\n            messageId: 'safeVueBypassing',\n          });\n        },\n      });\n      Object.assign(ruleListener, templateBodyVisitor);\n    }\n\n    return ruleListener;\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isCallToFQN, getValueOfExpression } from '../utils';\n\nconst WEAK_CIPHERS = ['bf', 'blowfish', 'des', 'rc2', 'rc4'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      strongerCipher: 'Use a strong cipher algorithm.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression(node: estree.Node) {\n        const callExpression = node as estree.CallExpression;\n        if (isCallToFQN(context, callExpression, 'crypto', 'createCipheriv')) {\n          const algorithm = getValueOfExpression(context, callExpression.arguments[0], 'Literal');\n          const algorithmValue = algorithm?.value?.toString().toLowerCase();\n          if (\n            algorithm &&\n            algorithmValue &&\n            WEAK_CIPHERS.findIndex(cipher => algorithmValue.startsWith(cipher)) >= 0\n          ) {\n            context.report({\n              messageId: 'strongerCipher',\n              node: algorithm,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4426\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, getValueOfExpression, getObjectExpressionProperty } from '../utils';\n\nconst MINIMAL_MODULUS_LENGTH = 2048;\nconst MINIMAL_DIVISOR_LENGTH = 224;\nconst WEAK_CURVES = [\n  'secp112r1',\n  'secp112r2',\n  'secp128r1',\n  'secp128r2',\n  'secp160k1',\n  'secp160r1',\n  'secp160r2',\n  'secp160r2',\n  'secp192k1',\n  'secp192r1',\n  'prime192v2',\n  'prime192v3',\n  'sect113r1',\n  'sect113r2',\n  'sect131r1',\n  'sect131r2',\n  'sect163k1',\n  'sect163r1',\n  'sect163r2',\n  'sect193r1',\n  'sect193r2',\n  'c2tnb191v1',\n  'c2tnb191v2',\n  'c2tnb191v3',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      modulusLength:\n        'Use a modulus length of at least {{minimalLength}} bits for {{algorithm}} cipher algorithm.',\n      divisorLength:\n        'Use a divisor length of at least {{minimalLength}} bits for {{algorithm}} cipher algorithm.',\n      strongerCurve: `{{curve}} doesn't provide enough security. Use a stronger curve.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function getNumericValue(node: estree.Node | undefined) {\n      const literal = getValueOfExpression(context, node, 'Literal');\n      if (literal && typeof literal.value === 'number') {\n        return literal.value;\n      }\n      return undefined;\n    }\n\n    function checkRsaAndDsaOptions(algorithm: string, options: estree.Node) {\n      const modulusProperty = getObjectExpressionProperty(options, 'modulusLength');\n      const modulusLength = getNumericValue(modulusProperty?.value);\n      if (modulusProperty && modulusLength && modulusLength < MINIMAL_MODULUS_LENGTH) {\n        context.report({\n          node: modulusProperty,\n          messageId: 'modulusLength',\n          data: {\n            minimalLength: MINIMAL_MODULUS_LENGTH.toString(),\n            algorithm,\n          },\n        });\n      }\n      const divisorProperty = getObjectExpressionProperty(options, 'divisorLength');\n      const divisorLength = getNumericValue(divisorProperty?.value);\n      if (divisorProperty && divisorLength && divisorLength < MINIMAL_DIVISOR_LENGTH) {\n        context.report({\n          node: divisorProperty,\n          messageId: 'divisorLength',\n          data: {\n            minimalLength: MINIMAL_DIVISOR_LENGTH.toString(),\n            algorithm,\n          },\n        });\n      }\n    }\n\n    function checkEcCurve(options: estree.Node) {\n      const namedCurveProperty = getObjectExpressionProperty(options, 'namedCurve');\n      const namedCurve = getValueOfExpression(\n        context,\n        namedCurveProperty?.value,\n        'Literal',\n      )?.value?.toString();\n      if (namedCurveProperty && namedCurve && WEAK_CURVES.includes(namedCurve)) {\n        context.report({\n          node: namedCurveProperty,\n          messageId: 'strongerCurve',\n          data: {\n            curve: namedCurve,\n          },\n        });\n      }\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        const { callee } = callExpression;\n        if (\n          callee.type === 'MemberExpression' &&\n          isIdentifier(callee.property, 'generateKeyPair', 'generateKeyPairSync')\n        ) {\n          if (callExpression.arguments.length < 2) {\n            return;\n          }\n          const [algorithmArg, options] = callExpression.arguments;\n          const optionsArg = getValueOfExpression(context, options, 'ObjectExpression');\n          if (!optionsArg) {\n            return;\n          }\n          const algorithm = getValueOfExpression(context, algorithmArg, 'Literal')?.value;\n          if (algorithm === 'rsa' || algorithm === 'dsa') {\n            checkRsaAndDsaOptions(algorithm, optionsArg);\n          } else if (algorithm === 'ec') {\n            checkEcCurve(optionsArg);\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2208\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      wildcardImport: 'Explicitly {{xPort}} the specific member needed.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function report(node: estree.Node, xPort: string) {\n      context.report({\n        messageId: 'wildcardImport',\n        data: { xPort },\n        node,\n      });\n    }\n\n    return {\n      ImportNamespaceSpecifier: (node: estree.Node) => report(node, 'import'),\n      ExportAllDeclaration: (node: estree.Node) => report(node, 'export'),\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3760\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport ts from 'typescript';\nimport {\n  isRequiredParserServices,\n  getTypeFromTreeNode,\n  isStringType,\n  toEncodedMessage,\n} from '../utils';\n\nconst MESSAGE = 'Convert this operand into a number.';\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    return {\n      BinaryExpression: (node: estree.Node) => {\n        const binaryExpression = node as estree.BinaryExpression;\n        const operator = binaryExpression.operator;\n        const leftType = getTypeFromTreeNode(binaryExpression.left, services);\n        const rightType = getTypeFromTreeNode(binaryExpression.right, services);\n        if (operator === '+') {\n          checkPlus(leftType, rightType, binaryExpression, context);\n        }\n        if (operator === '<' || operator === '>' || operator === '<=' || operator === '>=') {\n          checkComparison(leftType, rightType, binaryExpression, context);\n        }\n        if (operator === '-' || operator === '*' || operator === '/' || operator === '%') {\n          checkArithmetic(leftType, rightType, binaryExpression, context);\n        }\n      },\n      AssignmentExpression: (node: estree.Node) => {\n        const assignmentExpression = node as estree.AssignmentExpression;\n        const operator = assignmentExpression.operator;\n        const leftType = getTypeFromTreeNode(assignmentExpression.left, services);\n        const rightType = getTypeFromTreeNode(assignmentExpression.right, services);\n        if (operator === '+=') {\n          checkPlus(leftType, rightType, assignmentExpression, context);\n        }\n        if (operator === '-=' || operator === '*=' || operator === '/=' || operator === '%=') {\n          checkArithmetic(leftType, rightType, assignmentExpression, context);\n        }\n      },\n      'UnaryExpression[operator=\"-\"]': (node: estree.Node) => {\n        const unaryExpression = node as estree.UnaryExpression;\n        const type = getTypeFromTreeNode(unaryExpression.argument, services);\n        if (isBooleanStringOrDate(type)) {\n          context.report({\n            node: unaryExpression.argument,\n            message: toEncodedMessage(MESSAGE, []),\n          });\n        }\n      },\n      UpdateExpression: (node: estree.Node) => {\n        const updateExpression = node as estree.UpdateExpression;\n        const type = getTypeFromTreeNode(updateExpression.argument, services);\n        if (isBooleanStringOrDate(type)) {\n          context.report({\n            node: updateExpression.argument,\n            message: toEncodedMessage(MESSAGE, []),\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isDateMinusDateException(\n  leftType: ts.Type,\n  rightType: ts.Type,\n  operator: estree.BinaryOperator | estree.AssignmentOperator,\n) {\n  if (operator !== '-' && operator !== '-=') {\n    return false;\n  }\n  if (\n    leftType.symbol?.name === 'Date' &&\n    (rightType.symbol?.name === 'Date' || (rightType.flags & ts.TypeFlags.Any) > 0)\n  ) {\n    return true;\n  }\n  if (rightType.symbol?.name === 'Date' && (leftType.flags & ts.TypeFlags.Any) > 0) {\n    return true;\n  }\n  return false;\n}\n\nfunction checkPlus(\n  leftType: ts.Type,\n  rightType: ts.Type,\n  expression: estree.BinaryExpression | estree.AssignmentExpression,\n  context: Rule.RuleContext,\n) {\n  if (isNumber(leftType) && isBooleanOrDate(rightType)) {\n    context.report({\n      node: expression.right,\n      message: toEncodedMessage(MESSAGE, [expression.left]),\n    });\n  }\n  if (isNumber(rightType) && isBooleanOrDate(leftType)) {\n    context.report({\n      node: expression.left,\n      message: toEncodedMessage(MESSAGE, [expression.right]),\n    });\n  }\n}\n\nfunction checkComparison(\n  leftType: ts.Type,\n  rightType: ts.Type,\n  expression: estree.BinaryExpression | estree.AssignmentExpression,\n  context: Rule.RuleContext,\n) {\n  if (isBooleanOrNumber(leftType) && isBooleanStringOrDate(rightType)) {\n    context.report({\n      node: expression.right,\n      message: toEncodedMessage(MESSAGE, []),\n    });\n  } else if (isBooleanOrNumber(rightType) && isBooleanStringOrDate(leftType)) {\n    context.report({\n      node: expression.left,\n      message: toEncodedMessage(MESSAGE, []),\n    });\n  }\n}\n\nfunction checkArithmetic(\n  leftType: ts.Type,\n  rightType: ts.Type,\n  expression: estree.BinaryExpression | estree.AssignmentExpression,\n  context: Rule.RuleContext,\n) {\n  if (isDateMinusDateException(leftType, rightType, expression.operator)) {\n    return;\n  }\n  const secondaryLocations = [];\n  if (isBooleanStringOrDate(leftType)) {\n    secondaryLocations.push(expression.left);\n  }\n  if (isBooleanStringOrDate(rightType)) {\n    secondaryLocations.push(expression.right);\n  }\n  if (secondaryLocations.length !== 0) {\n    context.report({\n      node: expression,\n      message: toEncodedMessage(\n        'Convert the operands of this operation into numbers.',\n        secondaryLocations,\n      ),\n    });\n  }\n}\n\nfunction isBooleanOrDate(type: ts.Type) {\n  if (isBoolean(type)) {\n    return true;\n  }\n  return type.symbol?.name === 'Date';\n}\n\nfunction isBooleanOrNumber(type: ts.Type) {\n  return isBoolean(type) || isNumber(type);\n}\n\nfunction isBoolean(type: ts.Type) {\n  return (type.flags & ts.TypeFlags.BooleanLike) > 0 || type.symbol?.name === 'Boolean';\n}\n\nfunction isNumber(type: ts.Type) {\n  return (type.flags & ts.TypeFlags.NumberLike) > 0 || type.symbol?.name === 'Number';\n}\n\nfunction isBooleanStringOrDate(type: ts.Type) {\n  return isBoolean(type) || isStringType(type) || type.symbol?.name === 'Date';\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-22259\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport {\n  isRequiredParserServices,\n  functionLike,\n  isUndefinedOrNull,\n  findFirstMatchingAncestor,\n} from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      nullDereference: 'TypeError can be thrown as \"{{symbol}}\" might be null or undefined here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    const alreadyRaisedSymbols: Set<Scope.Variable> = new Set();\n\n    function checkNullDereference(node: estree.Node) {\n      if (node.type !== 'Identifier') {\n        return;\n      }\n      const scope = context.getScope();\n      const symbol = scope.references.find(v => v.identifier === node)?.resolved;\n      if (!symbol) {\n        return;\n      }\n\n      const enclosingFunction = context.getAncestors().find(n => functionLike.has(n.type));\n\n      if (\n        !alreadyRaisedSymbols.has(symbol) &&\n        !isWrittenInInnerFunction(symbol, enclosingFunction) &&\n        isUndefinedOrNull(node, services)\n      ) {\n        alreadyRaisedSymbols.add(symbol);\n        context.report({\n          messageId: 'nullDereference',\n          data: {\n            symbol: node.name,\n          },\n          node,\n        });\n      }\n    }\n\n    function isWrittenInInnerFunction(symbol: Scope.Variable, fn: estree.Node | undefined) {\n      return symbol.references.some(ref => {\n        if (ref.isWrite() && ref.identifier.hasOwnProperty('parent')) {\n          const enclosingFn = findFirstMatchingAncestor(ref.identifier as TSESTree.Node, node =>\n            functionLike.has(node.type),\n          );\n          return enclosingFn && enclosingFn !== fn;\n        }\n        return false;\n      });\n    }\n\n    return {\n      MemberExpression(node: estree.Node) {\n        const { object, optional } = node as estree.MemberExpression;\n        if (!optional) {\n          checkNullDereference(object);\n        }\n      },\n      ForOfStatement(node: estree.Node) {\n        const { right } = node as estree.ForOfStatement;\n        checkNullDereference(right);\n      },\n      'Program:exit'() {\n        alreadyRaisedSymbols.clear();\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3757\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport ts, { TypeFlags } from 'typescript';\nimport { isRequiredParserServices, getTypeFromTreeNode } from '../utils';\n\nconst BINARY_OPERATORS = ['/', '*', '%', '-', '-=', '*=', '/=', '%='];\nconst UNARY_OPERATORS = ['++', '--', '+', '-'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      noEvaluatedNaN:\n        'Change the expression which uses this operand so that it can\\'t evaluate to \"NaN\" (Not a Number).',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    function isObjectType(...types: ts.Type[]): boolean {\n      return types.some(\n        t => !!(t.getFlags() & TypeFlags.Object) && !isDate(t) && t.symbol?.name !== 'Number',\n      );\n    }\n\n    function isDate(type: ts.Type) {\n      const { typeToString } = services.program.getTypeChecker();\n      return typeToString(type) === 'Date';\n    }\n\n    return {\n      'BinaryExpression, AssignmentExpression': (node: estree.Node) => {\n        const expression = node as estree.BinaryExpression | estree.AssignmentExpression;\n        if (!BINARY_OPERATORS.includes(expression.operator)) {\n          return;\n        }\n        const leftType = getTypeFromTreeNode(expression.left, services);\n        const rightType = getTypeFromTreeNode(expression.right, services);\n        if (isObjectType(leftType)) {\n          context.report({ node: expression.left, messageId: 'noEvaluatedNaN' });\n        }\n        if (isObjectType(rightType)) {\n          context.report({ node: expression.right, messageId: 'noEvaluatedNaN' });\n        }\n      },\n      'UnaryExpression, UpdateExpression': (node: estree.Node) => {\n        const expr = node as estree.UpdateExpression | estree.UnaryExpression;\n        if (!UNARY_OPERATORS.includes(expr.operator)) {\n          return;\n        }\n        const argType = getTypeFromTreeNode(expr.argument, services);\n        if (isObjectType(argType)) {\n          context.report({ node, messageId: 'noEvaluatedNaN' });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4721\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  getModuleNameOfIdentifier,\n  getModuleNameOfImportedIdentifier,\n} from '../utils';\n\nconst EXEC_FUNCTIONS = ['exec', 'execSync'];\n\nconst SPAWN_EXEC_FILE_FUNCTIONS = ['spawn', 'spawnSync', 'execFile', 'execFileSync'];\n\nconst CHILD_PROCESS_MODULE = 'child_process';\n\ntype Argument = estree.Expression | estree.SpreadElement;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeOSCommand: 'Make sure that executing this OS command is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression: (node: estree.Node) =>\n        checkCallExpression(node as estree.CallExpression, context),\n    };\n  },\n};\n\nfunction checkCallExpression(\n  { callee, arguments: args }: estree.CallExpression,\n  context: Rule.RuleContext,\n) {\n  if (callee.type === 'MemberExpression') {\n    if (callee.object.type === 'Identifier') {\n      const moduleName = getModuleNameOfIdentifier(context, callee.object);\n      checkOSCommand(moduleName, callee.property, args, context);\n    }\n  } else if (callee.type === 'Identifier') {\n    const moduleName = getModuleNameOfImportedIdentifier(context, callee);\n    checkOSCommand(moduleName, callee, args, context);\n  }\n}\n\nfunction checkOSCommand(\n  moduleName: estree.Literal | undefined,\n  callee: estree.Expression | estree.PrivateIdentifier,\n  args: Argument[],\n  context: Rule.RuleContext,\n) {\n  if (moduleName && moduleName.value === CHILD_PROCESS_MODULE && isQuestionable(callee, args)) {\n    context.report({\n      node: callee,\n      messageId: 'safeOSCommand',\n    });\n  }\n}\n\nfunction isQuestionable(\n  expression: estree.Expression | estree.PrivateIdentifier,\n  [command, ...otherArguments]: Argument[],\n) {\n  // if command is hardcoded => no issue\n  if (!command || command.type === 'Literal') {\n    return false;\n  }\n  // for `spawn` and `execFile`, `shell` option must be set to `true`\n  if (isIdentifier(expression, ...SPAWN_EXEC_FILE_FUNCTIONS)) {\n    return containsShellOption(otherArguments);\n  }\n  return isIdentifier(expression, ...EXEC_FUNCTIONS);\n}\n\nfunction containsShellOption(otherArguments: Argument[]) {\n  return otherArguments.some(\n    arg =>\n      arg.type === 'ObjectExpression' &&\n      (arg.properties.filter(v => v.type === 'Property') as estree.Property[]).some(\n        ({ key, value }) =>\n          isIdentifier(key, 'shell') && value.type === 'Literal' && value.value === true,\n      ),\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2819\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport {\n  isRequiredParserServices,\n  getValueOfExpression,\n  getTypeAsString,\n  childrenOf,\n  resolveFunction,\n} from '../utils';\n\nconst POST_MESSAGE = 'postMessage';\nconst ADD_EVENT_LISTENER = 'addEventListener';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      specifyTarget: `Specify a target origin for this message.`,\n      verifyOrigin: `Verify the origin of the received message.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      [`CallExpression:matches([callee.name=\"${POST_MESSAGE}\"], [callee.property.name=\"${POST_MESSAGE}\"])`]:\n        (node: estree.Node) => {\n          checkPostMessageCall(node as estree.CallExpression, context);\n        },\n      [`CallExpression[callee.property.name=\"${ADD_EVENT_LISTENER}\"]`]: (node: estree.Node) => {\n        checkAddEventListenerCall(node as estree.CallExpression, context);\n      },\n    };\n  },\n};\n\nfunction isWindowObject(node: estree.Node, context: Rule.RuleContext) {\n  const type = getTypeAsString(node, context.parserServices);\n  const hasWindowName = WindowNameVisitor.containsWindowName(node, context);\n  return type.match(/window/i) || type.match(/globalThis/i) || hasWindowName;\n}\n\nfunction checkPostMessageCall(callExpr: estree.CallExpression, context: Rule.RuleContext) {\n  const { callee } = callExpr;\n  // Window.postMessage() can take 2 or 3 arguments\n  if (\n    ![2, 3].includes(callExpr.arguments.length) ||\n    getValueOfExpression(context, callExpr.arguments[1], 'Literal')?.value !== '*'\n  ) {\n    return;\n  }\n  if (callee.type === 'Identifier') {\n    context.report({\n      node: callee,\n      messageId: 'specifyTarget',\n    });\n  }\n  if (callee.type !== 'MemberExpression') {\n    return;\n  }\n  if (isWindowObject(callee.object, context)) {\n    context.report({\n      node: callee,\n      messageId: 'specifyTarget',\n    });\n  }\n}\n\nfunction checkAddEventListenerCall(callExpr: estree.CallExpression, context: Rule.RuleContext) {\n  const { callee, arguments: args } = callExpr;\n  if (\n    !isWindowObject(callee, context) ||\n    args.length < 2 ||\n    !isMessageTypeEvent(args[0], context)\n  ) {\n    return;\n  }\n  const listener = resolveFunction(context, args[1]);\n  if (!listener || listener.params.length === 0) {\n    return;\n  }\n  const event = listener.params[0];\n  if (event.type !== 'Identifier') {\n    return;\n  }\n  const hasVerifiedOrigin = EventListenerVisitor.isSenderIdentityVerified(\n    listener.body,\n    event,\n    context,\n  );\n  if (!hasVerifiedOrigin) {\n    context.report({\n      node: callee,\n      messageId: 'verifyOrigin',\n    });\n  }\n}\n\nfunction isMessageTypeEvent(eventNode: estree.Node, context: Rule.RuleContext) {\n  const eventValue = getValueOfExpression(context, eventNode, 'Literal');\n  return typeof eventValue?.value === 'string' && eventValue.value.toLowerCase() === 'message';\n}\n\nclass WindowNameVisitor {\n  private hasWindowName = false;\n\n  static containsWindowName(node: estree.Node, context: Rule.RuleContext) {\n    const visitor = new WindowNameVisitor();\n    visitor.visit(node, context);\n    return visitor.hasWindowName;\n  }\n\n  private visit(root: estree.Node, context: Rule.RuleContext) {\n    const visitNode = (node: estree.Node) => {\n      if (node.type === 'Identifier' && node.name.match(/window/i)) {\n        this.hasWindowName = true;\n      }\n      childrenOf(node, context.getSourceCode().visitorKeys).forEach(visitNode);\n    };\n    visitNode(root);\n  }\n}\n\nclass EventListenerVisitor {\n  private hasVerifiedOrigin = false;\n\n  static isSenderIdentityVerified(\n    node: estree.Node,\n    event: estree.Identifier,\n    context: Rule.RuleContext,\n  ) {\n    const visitor = new EventListenerVisitor();\n    visitor.visit(node, event, context);\n    return visitor.hasVerifiedOrigin;\n  }\n\n  private visit(root: estree.Node, event: estree.Identifier, context: Rule.RuleContext) {\n    const visitNode = (node: estree.Node) => {\n      if (this.hasVerifiedOrigin) {\n        return;\n      }\n      const n = node as TSESTree.Node;\n      if (n.type === 'MemberExpression' && n.parent?.type === 'BinaryExpression') {\n        const { object, property } = n;\n        if (\n          object.type === 'Identifier' &&\n          object.name === event.name &&\n          property.type === 'Identifier' &&\n          property.name === 'origin'\n        ) {\n          this.hasVerifiedOrigin = true;\n          return;\n        }\n      }\n      childrenOf(node, context.getSourceCode().visitorKeys).forEach(visitNode);\n    };\n    visitNode(root);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4524\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      defaultLast: 'Move this \"default\" clause to the end of this \"switch\" statement.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const sourceCode = context.getSourceCode();\n    return {\n      SwitchStatement(node: estree.Node) {\n        const cases = (node as estree.SwitchStatement).cases;\n        const defaultPosition = cases.findIndex(c => c.test === null);\n\n        if (defaultPosition >= 0 && defaultPosition !== cases.length - 1) {\n          context.report({\n            messageId: 'defaultLast',\n            loc: sourceCode.getFirstToken(cases[defaultPosition])!.loc,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4634\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isFunctionNode } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      promiseAction: 'Replace this trivial promise with \"Promise.{{action}}\".',\n      suggestPromiseAction: 'Replace with \"Promise.{{action}}\"',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      NewExpression: (node: estree.Node) => {\n        const newExpr = node as estree.NewExpression;\n        const executor = getPromiseExecutor(newExpr, context);\n        if (executor) {\n          checkExecutor(newExpr, executor, context);\n        }\n      },\n    };\n  },\n};\n\nfunction getPromiseExecutor(node: estree.NewExpression, context: Rule.RuleContext) {\n  if (\n    node.callee.type === 'Identifier' &&\n    context.getSourceCode().getText(node.callee) === 'Promise' &&\n    node.arguments.length === 1\n  ) {\n    return node.arguments[0];\n  }\n  return undefined;\n}\n\nfunction checkExecutor(\n  newExpr: estree.NewExpression,\n  executor: estree.Node,\n  context: Rule.RuleContext,\n) {\n  if (!isFunctionNode(executor)) {\n    return;\n  }\n  const { params, body } = executor;\n  const [resolveParameterDeclaration, rejectParameterDeclaration] = params;\n\n  const resolveParameterName = getParameterName(resolveParameterDeclaration);\n  const rejectParameterName = getParameterName(rejectParameterDeclaration);\n\n  const bodyExpression = getOnlyBodyExpression(body);\n  if (bodyExpression && bodyExpression.type === 'CallExpression') {\n    const { callee, arguments: args } = bodyExpression;\n    if (callee.type === 'Identifier') {\n      const action = getPromiseAction(callee.name, resolveParameterName, rejectParameterName);\n      if (action && args.length === 1) {\n        context.report({\n          messageId: 'promiseAction',\n          data: {\n            action,\n          },\n          node: newExpr.callee,\n          suggest: [\n            {\n              messageId: 'suggestPromiseAction',\n              data: {\n                action,\n              },\n              fix: fixer => {\n                const argText = context.getSourceCode().getText(args[0]);\n                return fixer.replaceText(newExpr, `Promise.${action}(${argText})`);\n              },\n            },\n          ],\n        });\n      }\n    }\n  }\n}\n\nfunction getOnlyBodyExpression(node: estree.Node) {\n  let bodyExpression: estree.Node | undefined;\n  if (node.type === 'BlockStatement') {\n    if (node.body.length === 1) {\n      const statement = node.body[0];\n      if (statement.type === 'ExpressionStatement') {\n        bodyExpression = statement.expression;\n      }\n    }\n  } else {\n    bodyExpression = node;\n  }\n  return bodyExpression;\n}\n\nfunction getPromiseAction(\n  callee: string,\n  resolveParameterName: string | undefined,\n  rejectParameterName: string | undefined,\n) {\n  switch (callee) {\n    case resolveParameterName:\n      return 'resolve';\n    case rejectParameterName:\n      return 'reject';\n    default:\n      return undefined;\n  }\n}\n\nfunction getParameterName(node: estree.Node | undefined) {\n  return node && node.type === 'Identifier' ? node.name : undefined;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S4322/javascript\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { getParent, RuleContext } from '../utils';\n\ntype FunctionLikeDeclaration = TSESTree.FunctionDeclaration | TSESTree.FunctionExpression;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    hasSuggestions: true,\n    messages: {\n      useTypePredicate:\n        'Declare this function return type using type predicate \"{{castedExpressionText}} is {{castedTypeText}}\".',\n      suggestTypePredicate: 'Use type predicate',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      \"MethodDefinition[kind='method'] FunctionExpression\": function (node: estree.Node) {\n        checkFunctionLikeDeclaration(node as FunctionLikeDeclaration, context);\n      },\n      FunctionDeclaration(node: estree.Node) {\n        checkFunctionLikeDeclaration(node as FunctionLikeDeclaration, context);\n      },\n    };\n  },\n};\n\nfunction checkFunctionLikeDeclaration(\n  functionDeclaration: FunctionLikeDeclaration,\n  context: Rule.RuleContext,\n) {\n  if (\n    functionDeclaration.returnType &&\n    functionDeclaration.returnType.typeAnnotation.type === 'TSTypePredicate'\n  ) {\n    return;\n  }\n\n  const body = functionDeclaration.body;\n  const returnedExpression = getReturnedExpression(body);\n  if (!returnedExpression) {\n    return;\n  }\n\n  if (isInequalityBinaryExpression(returnedExpression)) {\n    const { left, right } = returnedExpression;\n    if (isUndefined(right)) {\n      checkCastedType(functionDeclaration, left, context);\n    } else if (isUndefined(left)) {\n      checkCastedType(functionDeclaration, right, context);\n    }\n  } else if (isBooleanCall(returnedExpression)) {\n    checkCastedType(functionDeclaration, returnedExpression.arguments[0], context);\n  } else if (isNegation(returnedExpression) && isNegation(returnedExpression.argument)) {\n    checkCastedType(functionDeclaration, returnedExpression.argument.argument, context);\n  }\n}\n\nfunction getReturnedExpression(\n  block?: TSESTree.BlockStatement | null,\n): TSESTree.Expression | undefined | null {\n  if (block && block.body.length === 1) {\n    const statement = block.body[0];\n    if (statement.type === 'ReturnStatement') {\n      return statement.argument;\n    }\n  }\n  return undefined;\n}\n\nfunction isInequalityBinaryExpression(\n  returnExpression: TSESTree.Expression,\n): returnExpression is TSESTree.BinaryExpression {\n  return (\n    returnExpression.type === 'BinaryExpression' &&\n    (returnExpression.operator === '!==' || returnExpression.operator === '!=')\n  );\n}\n\nfunction checkCastedType(\n  node: FunctionLikeDeclaration,\n  expression: TSESTree.Node,\n  context: Rule.RuleContext,\n) {\n  const sourceCode = context.getSourceCode();\n  const castedType = getCastTupleFromMemberExpression(expression);\n  if (castedType && (castedType[1] as TSESTree.Node).type !== 'TSAnyKeyword') {\n    const nOfParam = node.params.length;\n    if (nOfParam === 1 || (nOfParam === 0 && castedType[0].type === 'ThisExpression')) {\n      const castedExpressionText = sourceCode.getText(castedType[0]);\n      const castedTypeText = sourceCode.getText(castedType[1]);\n      const predicate = `: ${castedExpressionText} is ${castedTypeText}`;\n      const suggest = getTypePredicateSuggestion(node, context, predicate);\n      context.report({\n        messageId: 'useTypePredicate',\n        data: {\n          castedExpressionText,\n          castedTypeText,\n        },\n        loc: getMainFunctionTokenLocation(\n          node as TSESTree.FunctionLike,\n          getParent(context) as TSESTree.Node,\n          context as unknown as RuleContext,\n        ),\n        suggest,\n      });\n    }\n  }\n}\n\nfunction getTypePredicateSuggestion(\n  node: FunctionLikeDeclaration,\n  context: Rule.RuleContext,\n  predicate: string,\n) {\n  const suggestions: Rule.SuggestionReportDescriptor[] = [];\n  let fix: (fixer: Rule.RuleFixer) => Rule.Fix;\n  if (node.returnType) {\n    fix = fixer => fixer.replaceText(node.returnType as unknown as estree.Node, predicate);\n  } else {\n    const closingParenthesis = context\n      .getSourceCode()\n      .getTokenBefore(node.body as estree.Node, token => token.value === ')')!;\n    fix = fixer => fixer.insertTextAfter(closingParenthesis, predicate);\n  }\n  suggestions.push({ messageId: 'suggestTypePredicate', fix });\n  return suggestions;\n}\n\nfunction getCastTupleFromMemberExpression(\n  node: TSESTree.Node,\n): [estree.Node, estree.Node] | undefined {\n  if (node.type === 'MemberExpression') {\n    const object = node.object as TSESTree.Node;\n    if (object.type === 'TSAsExpression' || object.type === 'TSTypeAssertion') {\n      return [object.expression as estree.Node, object.typeAnnotation as unknown as estree.Node];\n    }\n  }\n  return undefined;\n}\n\nfunction isNegation(node: TSESTree.Expression): node is TSESTree.UnaryExpression {\n  return node.type === 'UnaryExpression' && node.prefix && node.operator === '!';\n}\n\nfunction isUndefined(node: TSESTree.Node) {\n  return node.type === 'Identifier' && node.name === 'undefined';\n}\n\nfunction isBooleanCall(node: TSESTree.Expression): node is TSESTree.CallExpression {\n  if (node.type === 'CallExpression') {\n    const callee = node.callee;\n    return node.arguments.length === 1 && callee.type === 'Identifier' && callee.name === 'Boolean';\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4823\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isMemberExpression } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeArg: `Make sure that command line arguments are used safely here.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      MemberExpression(node: estree.Node) {\n        if (isMemberExpression(node, 'process', 'argv')) {\n          context.report({\n            messageId: 'safeArg',\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4507\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  flattenArgs,\n  getUniqueWriteUsageOrNode,\n  getModuleNameOfNode,\n} from '../utils';\n\nconst ERRORHANDLER_MODULE = 'errorhandler';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      deactivateDebug:\n        'Make sure this debug feature is deactivated before delivering the code in production.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression(node: estree.Node) {\n        const callExpression = node as estree.CallExpression;\n        // app.use(...)\n        checkErrorHandlerMiddleware(context, callExpression);\n      },\n    };\n  },\n};\n\nfunction checkErrorHandlerMiddleware(\n  context: Rule.RuleContext,\n  callExpression: estree.CallExpression,\n) {\n  const { callee, arguments: args } = callExpression;\n  if (\n    callee.type === 'MemberExpression' &&\n    isIdentifier(callee.property, 'use') &&\n    args.length > 0 &&\n    !isInsideConditional(context)\n  ) {\n    for (const m of flattenArgs(context, args)) {\n      const middleware = getUniqueWriteUsageOrNode(context, m);\n\n      if (\n        middleware &&\n        middleware.type === 'CallExpression' &&\n        getModuleNameOfNode(context, middleware.callee)?.value === ERRORHANDLER_MODULE\n      ) {\n        context.report({\n          node: middleware,\n          messageId: 'deactivateDebug',\n        });\n      }\n    }\n  }\n}\n\nfunction isInsideConditional(context: Rule.RuleContext) {\n  const ancestors = context.getAncestors();\n  return ancestors.some(ancestor => ancestor.type === 'IfStatement');\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2245\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isMemberExpression } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeGenerator: 'Make sure that using this pseudorandom number generator is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      CallExpression(node: estree.Node) {\n        const { callee } = node as estree.CallExpression;\n        if (isMemberExpression(callee, 'Math', 'random')) {\n          context.report({\n            messageId: 'safeGenerator',\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5443\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nconst UNIX_DIRECTORIES = [\n  '/tmp/',\n  '/var/tmp/',\n  '/usr/tmp/',\n  '/dev/shm/',\n  '/dev/mqueue/',\n  '/run/lock/',\n  '/var/run/lock/',\n  '/library/caches/',\n  '/users/shared/',\n  '/private/tmp/',\n  '/private/var/tmp/',\n].map(v => new RegExp(`^${v}`, 'i'));\n\nconst WINDOWS_DIRECTORIES_PATTERN = new RegExp(\n  '^[^\\\\\\\\]*(\\\\\\\\){1,2}(Windows(\\\\\\\\){1,2}Temp|Temp|TMP)(\\\\\\\\.*|$)',\n  'i',\n);\nconst SENSITIVE_ENV_VARIABLES = ['TMPDIR', 'TMP', 'TEMPDIR', 'TEMP'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeDirectory: 'Make sure publicly writable directories are used safely here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      Literal: (node: estree.Node) => {\n        const literal = node as estree.Literal;\n        // Using literal.raw instead of literal.value as the latter escapes backslashes\n        const value = literal.raw?.slice(1, literal.raw.length - 1);\n        if (\n          value &&\n          (UNIX_DIRECTORIES.find(i => value.match(i)) || value.match(WINDOWS_DIRECTORIES_PATTERN))\n        ) {\n          context.report({\n            node: literal,\n            messageId: 'safeDirectory',\n          });\n        }\n      },\n      MemberExpression: (node: estree.Node) => {\n        const memberExpression = node as estree.MemberExpression;\n        const { object, property } = memberExpression;\n        if (\n          property.type !== 'Identifier' ||\n          !SENSITIVE_ENV_VARIABLES.includes(property.name) ||\n          object.type !== 'MemberExpression'\n        ) {\n          return;\n        }\n        if (\n          object.property.type === 'Identifier' &&\n          object.property.name === 'env' &&\n          object.object.type === 'Identifier' &&\n          object.object.name === 'process'\n        ) {\n          context.report({ node: memberExpression, messageId: 'safeDirectory' });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5843\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as regexpp from 'regexpp';\nimport {\n  Assertion,\n  Backreference,\n  CapturingGroup,\n  CharacterClass,\n  Group,\n  LookaroundAssertion,\n  Pattern,\n  Quantifier,\n} from 'regexpp/ast';\nimport {\n  getParsedRegex,\n  getRegexpLocation,\n  getRegexpRange,\n  getUniqueWriteUsage,\n  isBinaryPlus,\n  isIdentifier,\n  isRegexLiteral,\n  isRegExpConstructor,\n  isRequiredParserServices,\n  isStaticTemplateLiteral,\n  isStringLiteral,\n  isStringRegexMethodCall,\n  LocationHolder,\n  toEncodedMessage,\n} from '../utils';\n\nconst DEFAULT_THESHOLD = 20;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      { type: 'integer' },\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const threshold = context.options.length > 0 ? context.options[0] : DEFAULT_THESHOLD;\n    const services = context.parserServices;\n    const regexNodes: estree.Node[] = [];\n    return {\n      'Literal[regex]:exit': (node: estree.Node) => {\n        regexNodes.push(node);\n      },\n      'NewExpression:exit': (node: estree.Node) => {\n        if (isRegExpConstructor(node)) {\n          regexNodes.push(node);\n        }\n      },\n      'CallExpression:exit': (node: estree.Node) => {\n        const callExpr = node as estree.CallExpression;\n        if (isRequiredParserServices(services) && isStringRegexMethodCall(callExpr, services)) {\n          regexNodes.push(callExpr.arguments[0]);\n        } else if (isRegExpConstructor(callExpr)) {\n          regexNodes.push(callExpr);\n        }\n      },\n      'Program:exit': () => {\n        regexNodes.forEach(regexNode => checkRegexComplexity(regexNode, threshold, context));\n      },\n    };\n  },\n};\n\nfunction checkRegexComplexity(\n  regexNode: estree.Node,\n  threshold: number,\n  context: Rule.RuleContext,\n) {\n  for (const regexParts of findRegexParts(regexNode, context)) {\n    let complexity = 0;\n    const secondaryLocations: LocationHolder[] = [];\n    const secondaryMessages: string[] = [];\n    for (const regexPart of regexParts) {\n      const calculator = new ComplexityCalculator(regexPart, context);\n      calculator.visit();\n      calculator.components.forEach(component => {\n        secondaryLocations.push(component.location);\n        secondaryMessages.push(component.message);\n      });\n      complexity += calculator.complexity;\n    }\n    if (complexity > threshold) {\n      context.report({\n        message: toEncodedMessage(\n          `Simplify this regular expression to reduce its complexity from ${complexity} to the ${threshold} allowed.`,\n          secondaryLocations,\n          secondaryMessages,\n          complexity - threshold,\n        ),\n        node: regexParts[0],\n      });\n    }\n  }\n}\n\ntype RegexPart = estree.Literal | estree.TemplateLiteral;\n\nfunction findRegexParts(node: estree.Node, context: Rule.RuleContext): RegexPart[][] {\n  const finder = new RegexPartFinder(context);\n  finder.find(node);\n  return finder.parts;\n}\n\nclass RegexPartFinder {\n  readonly parts: RegexPart[][] = [];\n  constructor(private readonly context: Rule.RuleContext) {}\n\n  find(node: estree.Node) {\n    if (isRegExpConstructor(node)) {\n      this.find(node.arguments[0]);\n    } else if (isRegexLiteral(node)) {\n      this.parts.push([node]);\n    } else if (isStringLiteral(node)) {\n      this.parts.push([node]);\n    } else if (isStaticTemplateLiteral(node)) {\n      this.parts.push([node]);\n    } else if (isIdentifier(node)) {\n      const initializer = getUniqueWriteUsage(this.context, node.name);\n      if (initializer) {\n        this.find(initializer);\n      }\n    } else if (isBinaryPlus(node)) {\n      const literals: estree.Literal[] = [];\n      this.findInStringConcatenation(node.left, literals);\n      this.findInStringConcatenation(node.right, literals);\n      if (literals.length > 0) {\n        this.parts.push(literals);\n      }\n    }\n  }\n\n  findInStringConcatenation(node: estree.Node, literals: estree.Literal[]) {\n    if (isStringLiteral(node)) {\n      literals.push(node);\n    } else if (isBinaryPlus(node)) {\n      this.findInStringConcatenation(node.left, literals);\n      this.findInStringConcatenation(node.right, literals);\n    } else {\n      this.find(node);\n    }\n  }\n}\n\ntype Disjunction = CapturingGroup | Group | LookaroundAssertion | Pattern;\n\nclass ComplexityCalculator {\n  nesting = 1;\n  complexity = 0;\n  components: { location: LocationHolder; message: string }[] = [];\n  regexPartAST: regexpp.AST.Node | null;\n\n  constructor(readonly regexPart: RegexPart, readonly context: Rule.RuleContext) {\n    this.regexPartAST = getParsedRegex(regexPart, context);\n  }\n\n  visit() {\n    if (!this.regexPartAST) {\n      return;\n    }\n    regexpp.visitRegExpAST(this.regexPartAST, {\n      onAssertionEnter: (node: Assertion) => {\n        /* lookaround */\n        if (node.kind === 'lookahead' || node.kind === 'lookbehind') {\n          const [start, end] = getRegexpRange(this.regexPart, node);\n          this.increaseComplexity(this.nesting, node, [\n            0,\n            -(end - start - 1) + (node.kind === 'lookahead' ? '?='.length : '?<='.length),\n          ]);\n          this.nesting++;\n          this.onDisjunctionEnter(node);\n        }\n      },\n      onAssertionLeave: (node: Assertion) => {\n        /* lookaround */\n        if (node.kind === 'lookahead' || node.kind === 'lookbehind') {\n          this.onDisjunctionLeave(node);\n          this.nesting--;\n        }\n      },\n      onBackreferenceEnter: (node: Backreference) => {\n        this.increaseComplexity(1, node);\n      },\n      onCapturingGroupEnter: (node: CapturingGroup) => {\n        /* disjunction */\n        this.onDisjunctionEnter(node);\n      },\n      onCapturingGroupLeave: (node: CapturingGroup) => {\n        /* disjunction */\n        this.onDisjunctionLeave(node);\n      },\n      onCharacterClassEnter: (node: CharacterClass) => {\n        /* character class */\n        const [start, end] = getRegexpRange(this.regexPart, node);\n        this.increaseComplexity(1, node, [0, -(end - start - 1)]);\n        this.nesting++;\n      },\n      onCharacterClassLeave: (_node: CharacterClass) => {\n        /* character class */\n        this.nesting--;\n      },\n      onGroupEnter: (node: Group) => {\n        /* disjunction */\n        this.onDisjunctionEnter(node);\n      },\n      onGroupLeave: (node: Group) => {\n        /* disjunction */\n        this.onDisjunctionLeave(node);\n      },\n      onPatternEnter: (node: Pattern) => {\n        /* disjunction */\n        this.onDisjunctionEnter(node);\n      },\n      onPatternLeave: (node: Pattern) => {\n        /* disjunction */\n        this.onDisjunctionLeave(node);\n      },\n      onQuantifierEnter: (node: Quantifier) => {\n        /* repetition */\n        const [start] = getRegexpRange(this.regexPart, node);\n        const [, end] = getRegexpRange(this.regexPart, node.element);\n        this.increaseComplexity(this.nesting, node, [end - start, 0]);\n        this.nesting++;\n      },\n      onQuantifierLeave: (_node: Quantifier) => {\n        /* repetition */\n        this.nesting--;\n      },\n    });\n  }\n\n  private increaseComplexity(increment: number, node: regexpp.AST.Node, offset?: number[]) {\n    this.complexity += increment;\n    let message = '+' + increment;\n    if (increment > 1) {\n      message += ` (incl ${increment - 1} for nesting)`;\n    }\n    const loc = getRegexpLocation(this.regexPart, node, this.context, offset);\n    this.components.push({\n      location: {\n        loc,\n      },\n      message,\n    });\n  }\n\n  private onDisjunctionEnter(node: Disjunction) {\n    if (node.alternatives.length > 1) {\n      let { alternatives } = node;\n      let increment = this.nesting;\n      while (alternatives.length > 1) {\n        const [start, end] = getRegexpRange(this.regexPart, alternatives[1]);\n        this.increaseComplexity(increment, alternatives[1], [-1, -(end - start)]);\n        increment = 1;\n        alternatives = alternatives.slice(1);\n      }\n      this.nesting++;\n    }\n  }\n\n  private onDisjunctionLeave(node: Disjunction) {\n    if (node.alternatives.length > 1) {\n      this.nesting--;\n    }\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4784\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, isMemberWithProperty } from '../utils';\n\nconst stringMethods = ['match', 'search', 'split'];\nconst minPatternLength = 3;\nconst specialChars = ['+', '*', '{'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeRegex: 'Make sure that using a regular expression is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      Literal(node: estree.Node) {\n        const { regex } = node as estree.RegExpLiteral;\n        if (regex) {\n          const { pattern } = regex;\n          if (isUnsafeRegexLiteral(pattern)) {\n            context.report({\n              messageId: 'safeRegex',\n              node,\n            });\n          }\n        }\n      },\n\n      CallExpression(node: estree.Node) {\n        const { callee, arguments: args } = node as estree.CallExpression;\n        if (isMemberWithProperty(callee, ...stringMethods)) {\n          checkFirstArgument(args, context);\n        }\n      },\n\n      NewExpression(node: estree.Node) {\n        const { callee, arguments: args } = node as estree.NewExpression;\n        if (isIdentifier(callee, 'RegExp')) {\n          checkFirstArgument(args, context);\n        }\n      },\n    };\n  },\n};\n\nfunction checkFirstArgument(args: estree.Node[], context: Rule.RuleContext) {\n  const firstArg = args[0];\n  if (\n    firstArg &&\n    firstArg.type === 'Literal' &&\n    typeof firstArg.value === 'string' &&\n    isUnsafeRegexLiteral(firstArg.value)\n  ) {\n    context.report({\n      messageId: 'safeRegex',\n      node: firstArg,\n    });\n  }\n}\n\nfunction isUnsafeRegexLiteral(value: string) {\n  return value.length >= minPatternLength && hasEnoughNumberOfSpecialChars(value);\n}\n\nfunction hasEnoughNumberOfSpecialChars(value: string) {\n  let numberOfSpecialChars = 0;\n  for (const c of value) {\n    if (specialChars.includes(c)) {\n      numberOfSpecialChars++;\n    }\n    if (numberOfSpecialChars === 2) {\n      return true;\n    }\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5876\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  childrenOf,\n  getPropertyWithValue,\n  isCallToFQN,\n  last,\n  getValueOfExpression,\n} from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      createSession:\n        'Create a new session during user authentication to prevent session fixation attacks.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let sessionRegenerate = false;\n\n    function isSessionRegenerate(node: estree.Node) {\n      return (\n        node.type === 'CallExpression' &&\n        node.callee.type === 'MemberExpression' &&\n        isIdentifier(node.callee.property, 'regenerate')\n      );\n    }\n\n    function visitCallback(node: estree.Node) {\n      if (sessionRegenerate) {\n        // terminate recursion once call is detected\n        return;\n      }\n      if (isSessionRegenerate(node)) {\n        sessionRegenerate = true;\n        return;\n      }\n      childrenOf(node, context.getSourceCode().visitorKeys).forEach(visitCallback);\n    }\n\n    function hasSessionFalseOption(callExpression: estree.CallExpression) {\n      const opt = callExpression.arguments[1];\n      if (opt?.type === 'ObjectExpression') {\n        const sessionProp = getPropertyWithValue(context, opt, 'session', false);\n        return !!sessionProp;\n      }\n      return false;\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (isCallToFQN(context, callExpression, 'passport', 'authenticate')) {\n          if (hasSessionFalseOption(callExpression)) {\n            return;\n          }\n          const parent = last(context.getAncestors());\n          if (parent.type === 'CallExpression') {\n            const callback = getValueOfExpression(\n              context,\n              (parent as estree.CallExpression).arguments[2],\n              'FunctionExpression',\n            );\n            if (callback && callback.type === 'FunctionExpression') {\n              sessionRegenerate = false;\n              visitCallback(callback);\n              if (!sessionRegenerate) {\n                context.report({ node: callback, messageId: 'createSession' });\n              }\n            }\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3499\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    function raiseIssue(\n      node: estree.ObjectExpression,\n      begin: number,\n      end: number,\n      positionMessage: string,\n    ) {\n      const properties = node.properties;\n      const secondaryNodes = [];\n      const secondaryMessages = [];\n\n      for (let i = begin; i < end; i++) {\n        const prop = properties[i] as estree.Property;\n        if (prop.shorthand) {\n          secondaryNodes.push(prop);\n          secondaryMessages.push(`Move to ${positionMessage}`);\n        }\n      }\n\n      const message = toEncodedMessage(\n        `Group all shorthand properties at ${positionMessage} of this object declaration.`,\n        secondaryNodes as TSESTree.Node[],\n        secondaryMessages,\n      );\n\n      context.report({\n        message,\n        loc: context.getSourceCode().getFirstToken(node)!.loc,\n      });\n    }\n    return {\n      ObjectExpression(node: estree.Node) {\n        const objectExpression = node as estree.ObjectExpression;\n        const objectExpressionProperties = objectExpression.properties;\n        if (objectExpressionProperties.some(p => p.type !== 'Property')) {\n          return;\n        }\n        const isShorthandPropertyList = objectExpressionProperties.map(\n          p => (p as estree.Property).shorthand,\n        );\n        const shorthandPropertiesNumber = isShorthandPropertyList.filter(b => b).length;\n\n        const numberOfShorthandAtBeginning = getNumberOfTrueAtBeginning(isShorthandPropertyList);\n        const numberOfShorthandAtEnd = getNumberOfTrueAtBeginning(\n          [...isShorthandPropertyList].reverse(),\n        );\n\n        const allAtBeginning = numberOfShorthandAtBeginning === shorthandPropertiesNumber;\n        const allAtEnd = numberOfShorthandAtEnd === shorthandPropertiesNumber;\n\n        const propertiesNumber = isShorthandPropertyList.length;\n\n        if (!allAtBeginning && numberOfShorthandAtBeginning > numberOfShorthandAtEnd) {\n          raiseIssue(\n            objectExpression,\n            numberOfShorthandAtBeginning,\n            propertiesNumber,\n            'the beginning',\n          );\n        } else if (!allAtEnd && numberOfShorthandAtEnd > numberOfShorthandAtBeginning) {\n          raiseIssue(objectExpression, 0, propertiesNumber - numberOfShorthandAtEnd, 'the end');\n        } else if (!allAtBeginning && !allAtEnd) {\n          raiseIssue(objectExpression, 0, propertiesNumber, 'either the beginning or end');\n        }\n      },\n    };\n  },\n};\n\nfunction getNumberOfTrueAtBeginning(list: Array<boolean>) {\n  let numberOfTrueAtBeginning = 0;\n  for (const b of list) {\n    if (b) {\n      numberOfTrueAtBeginning++;\n    } else {\n      break;\n    }\n  }\n  return numberOfTrueAtBeginning;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6035\n\nimport { Rule } from 'eslint';\nimport { AST } from 'regexpp';\nimport { Alternation } from '../utils';\nimport { createRegExpRule } from './regex-rule-template';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  function checkAlternation(alternation: Alternation) {\n    const { alternatives } = alternation;\n    if (alternatives.length <= 1) {\n      return;\n    }\n    if (\n      alternatives.every(alt => alt.elements.length === 1 && alt.elements[0].type === 'Character')\n    ) {\n      context.reportRegExpNode({\n        message: 'Replace this alternation with a character class.',\n        node: context.node,\n        regexpNode: alternation,\n      });\n    }\n  }\n  return {\n    onPatternEnter: checkAlternation,\n    onGroupEnter: checkAlternation,\n    onCapturingGroupEnter: checkAlternation,\n    onAssertionEnter(node: AST.Assertion) {\n      if (node.kind === 'lookahead' || node.kind === 'lookbehind') {\n        checkAlternation(node as Alternation);\n      }\n    },\n  };\n});\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5852\n\nimport { Rule } from 'eslint';\nimport { createRegExpRule } from './regex-rule-template';\nimport { RegExpLiteral } from 'regexpp/ast';\nimport { analyse } from 'scslre';\n\nconst message = `Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.`;\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  return {\n    onRegExpLiteralEnter: (node: RegExpLiteral) => {\n      const { reports } = analyse(node);\n      if (reports.length > 0) {\n        context.report({\n          message,\n          node: context.node,\n        });\n      }\n    },\n  };\n});\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4818\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getModuleNameOfIdentifier, getModuleNameOfImportedIdentifier } from '../utils';\n\nconst NET_MODULE = 'net';\n\nconst SOCKET_CREATION_FUNCTIONS = new Set(['createConnection', 'connect']);\n\nconst SOCKET_CONSTRUCTOR = 'Socket';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeSocket: 'Make sure that sockets are used safely here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      NewExpression: (node: estree.Node) =>\n        checkCallExpression(node as estree.NewExpression, context),\n      CallExpression: (node: estree.Node) =>\n        checkCallExpression(node as estree.CallExpression, context),\n    };\n  },\n};\n\nfunction checkCallExpression({ callee, type }: estree.CallExpression, context: Rule.RuleContext) {\n  let moduleName;\n  let expression: estree.Expression | estree.PrivateIdentifier | undefined;\n  if (callee.type === 'MemberExpression' && callee.object.type === 'Identifier') {\n    moduleName = getModuleNameOfIdentifier(context, callee.object);\n    expression = callee.property;\n  }\n\n  if (callee.type === 'Identifier') {\n    moduleName = getModuleNameOfImportedIdentifier(context, callee);\n    expression = callee;\n  }\n\n  if (expression && isQuestionable(expression, type === 'NewExpression', moduleName)) {\n    context.report({ messageId: 'safeSocket', node: callee });\n  }\n}\n\nfunction isQuestionable(\n  expression: estree.Expression | estree.PrivateIdentifier,\n  isConstructor: boolean,\n  moduleName?: estree.Literal,\n) {\n  if (!moduleName || moduleName.value !== NET_MODULE || expression.type !== 'Identifier') {\n    return false;\n  }\n\n  if (isConstructor) {\n    return expression.name === SOCKET_CONSTRUCTOR;\n  }\n\n  return SOCKET_CREATION_FUNCTIONS.has(expression.name);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2392\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    let scopeRanges: [number, number][] = [];\n    let reported: estree.Identifier[] = [];\n\n    function enterScope(node: estree.Node) {\n      scopeRanges.push(node.range!);\n    }\n\n    function exitScope() {\n      scopeRanges.pop();\n    }\n\n    return {\n      Program(node) {\n        scopeRanges = [node.range!];\n        reported = [];\n      },\n\n      BlockStatement: enterScope,\n      'BlockStatement:exit': exitScope,\n      ForStatement: enterScope,\n      'ForStatement:exit': exitScope,\n      ForInStatement: enterScope,\n      'ForInStatement:exit': exitScope,\n      ForOfStatement: enterScope,\n      'ForOfStatement:exit': exitScope,\n      SwitchStatement: enterScope,\n      'SwitchStatement:exit': exitScope,\n\n      VariableDeclaration: (node: estree.Node) => {\n        const varDeclaration = node as estree.VariableDeclaration;\n\n        if (varDeclaration.kind !== 'var') {\n          return;\n        }\n\n        const scopeRange = scopeRanges[scopeRanges.length - 1];\n\n        function isOutsideOfScope(reference: estree.Identifier) {\n          const idRange = reference.range!;\n          return idRange[0] < scopeRange[0] || idRange[1] > scopeRange[1];\n        }\n\n        context.getDeclaredVariables(node).forEach(variable => {\n          const referencesOutside = variable.references\n            .map(ref => ref.identifier)\n            .filter(isOutsideOfScope);\n          if (referencesOutside.length === 0) {\n            return;\n          }\n          const definition = variable.defs.find(def =>\n            varDeclaration.declarations.includes(def.node),\n          );\n          if (definition && !reported.includes(definition.name)) {\n            context.report({\n              node: definition.name,\n              message: toEncodedMessage(\n                `Consider moving declaration of '${variable.name}' ` +\n                  `as it is referenced outside current binding context.`,\n                referencesOutside as TSESTree.Node[],\n                Array(referencesOutside.length).fill('Outside reference.'),\n              ),\n            });\n            variable.defs.map(def => def.name).forEach(defId => reported.push(defId));\n          }\n        });\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// Greatly inspired by https://github.com/eslint/eslint/blob/561b6d4726f3e77dd40ba0d340ca7f08429cd2eb/lib/rules/max-lines-per-function.js\n// We had to fork the implementation to control the reporting (issue location), in order to provide a better user experience.\n\n// https://jira.sonarsource.com/browse/RSPEC-138\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { getMainFunctionTokenLocation } from 'eslint-plugin-sonarjs/lib/utils/locations';\nimport { getParent, RuleContext } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      functionMaxLine:\n        'This function has {{lineCount}} lines, which is greater than the {{threshold}} lines authorized. Split it into smaller functions.',\n    },\n    schema: [{ type: 'integer' }],\n  },\n  create(context: Rule.RuleContext) {\n    const [threshold] = context.options;\n\n    const sourceCode = context.getSourceCode();\n    const lines = sourceCode.lines;\n\n    const commentLineNumbers = getCommentLineNumbers(sourceCode.getAllComments());\n\n    return {\n      'FunctionDeclaration, FunctionExpression, ArrowFunctionExpression': (node: estree.Node) => {\n        const parent = getParent(context);\n\n        if (!node.loc || isIIFE(node, parent as estree.Node)) {\n          return;\n        }\n\n        const lineCount = getLocsNumber(node.loc, lines, commentLineNumbers);\n\n        if (lineCount > threshold) {\n          context.report({\n            messageId: 'functionMaxLine',\n            data: {\n              lineCount: lineCount.toString(),\n              threshold,\n            },\n            loc: getMainFunctionTokenLocation(\n              node as TSESTree.FunctionLike,\n              getParent(context) as TSESTree.Node,\n              context as unknown as RuleContext,\n            ),\n          });\n        }\n      },\n    };\n  },\n};\n\nexport function getLocsNumber(\n  loc: estree.SourceLocation,\n  lines: string[],\n  commentLineNumbers: Map<number, estree.Comment>,\n) {\n  let lineCount = 0;\n\n  for (let i = loc.start.line - 1; i < loc.end.line; ++i) {\n    const line = lines[i];\n    const comment = commentLineNumbers.get(i + 1);\n    if (comment && isFullLineComment(line, i + 1, comment)) {\n      continue;\n    }\n\n    if (line.match(/^\\s*$/u)) {\n      continue;\n    }\n\n    lineCount++;\n  }\n\n  return lineCount;\n}\n\nexport function getCommentLineNumbers(comments: estree.Comment[]): Map<number, estree.Comment> {\n  const map = new Map();\n\n  comments.forEach(comment => {\n    if (comment.loc) {\n      for (let i = comment.loc.start.line; i <= comment.loc.end.line; i++) {\n        map.set(i, comment);\n      }\n    }\n  });\n  return map;\n}\n\nfunction isFullLineComment(line: string, lineNumber: number, comment: estree.Comment) {\n  if (!comment.loc) {\n    return false;\n  }\n  const start = comment.loc.start,\n    end = comment.loc.end,\n    isFirstTokenOnLine = start.line === lineNumber && !line.slice(0, start.column).trim(),\n    isLastTokenOnLine = end.line === lineNumber && !line.slice(end.column).trim();\n\n  return (\n    comment &&\n    (start.line < lineNumber || isFirstTokenOnLine) &&\n    (end.line > lineNumber || isLastTokenOnLine)\n  );\n}\n\nfunction isIIFE(node: estree.Node, parent: estree.Node) {\n  return (\n    node.type === 'FunctionExpression' &&\n    parent &&\n    parent.type === 'CallExpression' &&\n    parent.callee === node\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-104\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getLocsNumber, getCommentLineNumbers } from './sonar-max-lines-per-function';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      maxFileLine:\n        'This file has {{lineCount}} lines, which is greater than {{threshold}} authorized. Split it into smaller files.',\n    },\n    schema: [{ type: 'integer' }],\n  },\n  create(context: Rule.RuleContext) {\n    const [threshold] = context.options;\n\n    const sourceCode = context.getSourceCode();\n    const lines = sourceCode.lines;\n\n    const commentLineNumbers = getCommentLineNumbers(sourceCode.getAllComments());\n\n    return {\n      'Program:exit': (node: estree.Node) => {\n        if (!node.loc) {\n          return;\n        }\n\n        const lineCount = getLocsNumber(node.loc, lines, commentLineNumbers);\n\n        if (lineCount > threshold) {\n          context.report({\n            messageId: 'maxFileLine',\n            data: {\n              lineCount: lineCount.toString(),\n              threshold,\n            },\n            loc: { line: 0, column: 0 },\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6324\n\nimport { Rule } from 'eslint';\nimport { Character } from 'regexpp/ast';\nimport { createRegExpRule } from './regex-rule-template';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  return {\n    onCharacterEnter: (character: Character) => {\n      const { value, raw } = character;\n      if (value >= 0x00 && value <= 0x1f && (raw.startsWith('\\\\x') || raw.startsWith('\\\\u'))) {\n        context.reportRegExpNode({\n          message: `Remove this control character: ${character.raw}.`,\n          node: context.node,\n          regexpNode: character,\n        });\n      }\n    },\n  };\n});\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-128\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { getParent } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      switchEnd:\n        'End this switch case with an unconditional break, continue, return or throw statement.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let currentCodePath: Rule.CodePath | null = null;\n    let currentCodeSegment: Rule.CodePathSegment | null = null;\n    let enteringSwitchCase = false;\n    const segmentsWithExit: Set<string> = new Set();\n    const initialSegmentBySwitchCase: Map<estree.SwitchCase, Rule.CodePathSegment> = new Map();\n    const switchCaseStack: estree.SwitchCase[] = [];\n\n    function noComment(node: estree.Node) {\n      return context.getSourceCode().getCommentsAfter(node).length === 0;\n    }\n\n    function isAfterProcessExitCall(\n      segment: Rule.CodePathSegment,\n      initialSegment: Rule.CodePathSegment,\n    ) {\n      const stack = [];\n      const visitedSegments: Set<string> = new Set();\n      stack.push(segment);\n      while (stack.length !== 0) {\n        const current = stack.pop()!;\n        visitedSegments.add(current.id);\n        if (!segmentsWithExit.has(current.id)) {\n          if (current === initialSegment) {\n            return false;\n          }\n          current.prevSegments.filter(p => !visitedSegments.has(p.id)).forEach(p => stack.push(p));\n        }\n      }\n      return true;\n    }\n\n    return {\n      onCodePathStart(codePath: Rule.CodePath) {\n        currentCodePath = codePath;\n      },\n      onCodePathEnd() {\n        currentCodePath = currentCodePath!.upper;\n      },\n      onCodePathSegmentStart(segment: Rule.CodePathSegment) {\n        currentCodeSegment = segment;\n        if (enteringSwitchCase) {\n          initialSegmentBySwitchCase.set(\n            switchCaseStack.pop() as estree.SwitchCase,\n            currentCodeSegment,\n          );\n          enteringSwitchCase = false;\n        }\n      },\n      CallExpression(node: estree.Node) {\n        const callExpr = node as estree.CallExpression;\n        if (isProcessExitCall(callExpr)) {\n          segmentsWithExit.add(currentCodeSegment!.id);\n        }\n      },\n      SwitchCase(node: estree.Node) {\n        enteringSwitchCase = true;\n        switchCaseStack.push(node as estree.SwitchCase);\n      },\n      'SwitchCase:exit'(node: estree.Node) {\n        const switchCase = node as estree.SwitchCase;\n        const initialSegment: Rule.CodePathSegment = initialSegmentBySwitchCase.get(switchCase)!;\n        const isReachable = currentCodePath!.currentSegments.some(\n          s => s.reachable && !isAfterProcessExitCall(s, initialSegment),\n        );\n        const { cases } = getParent(context) as estree.SwitchStatement;\n        if (\n          isReachable &&\n          switchCase.consequent.length > 0 &&\n          cases[cases.length - 1] !== node &&\n          noComment(switchCase)\n        ) {\n          context.report({\n            messageId: 'switchEnd',\n            loc: context.getSourceCode().getFirstToken(node)!.loc,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isProcessExitCall(callExpr: estree.CallExpression) {\n  return (\n    callExpr.callee.type === 'MemberExpression' &&\n    callExpr.callee.object.type === 'Identifier' &&\n    callExpr.callee.object.name === 'process' &&\n    callExpr.callee.property.type === 'Identifier' &&\n    callExpr.callee.property.name === 'exit'\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5856/javascript\n\nimport { Rule } from 'eslint';\nimport {\n  getTypeFromTreeNode,\n  isIdentifier,\n  isRequiredParserServices,\n  isStringLiteral,\n  isStringType,\n} from '../utils';\nimport * as estree from 'estree';\nimport { RegExpValidator } from 'regexpp';\n\nconst validator = new RegExpValidator();\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    function getFlags(node: estree.CallExpression): string | null {\n      if (node.arguments.length < 2) {\n        return '';\n      }\n\n      if (isStringLiteral(node.arguments[1])) {\n        return node.arguments[1].value as string;\n      }\n\n      return null;\n    }\n\n    function validateRegExpPattern(pattern: string, uFlag: boolean): string | null {\n      try {\n        validator.validatePattern(pattern, undefined, undefined, uFlag);\n        return null;\n      } catch (err) {\n        return err.message;\n      }\n    }\n\n    function validateRegExpFlags(flags: string) {\n      try {\n        validator.validateFlags(flags);\n        return null;\n      } catch {\n        return `Invalid flags supplied to RegExp constructor '${flags}'`;\n      }\n    }\n\n    function isRegExpConstructor(call: estree.CallExpression) {\n      const { callee } = call;\n      return callee.type === 'Identifier' && callee.name === 'RegExp';\n    }\n\n    function isStringMatch(call: estree.CallExpression) {\n      const services = context.parserServices;\n      if (!isRequiredParserServices(services)) {\n        return false;\n      }\n      const { callee } = call;\n      return (\n        callee.type === 'MemberExpression' &&\n        isStringType(getTypeFromTreeNode(callee.object, services)) &&\n        isIdentifier(callee.property, 'match')\n      );\n    }\n\n    function getPattern(call: estree.CallExpression): string | null {\n      if (isStringLiteral(call.arguments[0])) {\n        return call.arguments[0].value as string;\n      }\n      return null;\n    }\n\n    return {\n      'CallExpression, NewExpression'(node: estree.Node) {\n        const call = node as estree.CallExpression;\n        if (!isRegExpConstructor(call) && !isStringMatch(call)) {\n          return;\n        }\n        const pattern = getPattern(call);\n        if (!pattern) {\n          return;\n        }\n        const flags = getFlags(call);\n\n        const message =\n          (flags && validateRegExpFlags(flags)) ||\n          // If flags are unknown, report the regex only if its pattern is invalid both with and without the \"u\" flag\n          (flags === null\n            ? validateRegExpPattern(pattern, true) && validateRegExpPattern(pattern, false)\n            : validateRegExpPattern(pattern, flags.includes('u')));\n\n        if (message) {\n          context.report({\n            node,\n            message,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5868\n\nimport { Rule } from 'eslint';\nimport { createRegExpRule } from './regex-rule-template';\nimport { Character, CharacterClassElement } from 'regexpp/ast';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  function characters(nodes: CharacterClassElement[]): Character[][] {\n    let current: Character[] = [];\n    const sequences: Character[][] = [current];\n    for (const node of nodes) {\n      if (node.type === 'Character') {\n        current.push(node);\n      } else if (node.type === 'CharacterClassRange') {\n        // for following regexp [xa-z] we produce [[xa],[z]]\n        // we would report for example if instead of 'xa' there would be unicode combined class\n        current.push(node.min);\n        current = [node.max];\n        sequences.push(current);\n      } else if (node.type === 'CharacterSet' && current.length > 0) {\n        // CharacterSet is for example [\\d], ., or \\p{ASCII}\n        // see https://github.com/mysticatea/regexpp/blob/master/src/ast.ts#L222\n        current = [];\n        sequences.push(current);\n      }\n    }\n    return sequences;\n  }\n\n  return {\n    onCharacterClassEnter(ccNode) {\n      for (const chars of characters(ccNode.elements)) {\n        const idx = chars.findIndex(\n          (c, i) =>\n            i !== 0 && isCombiningCharacter(c.value) && !isCombiningCharacter(chars[i - 1].value),\n        );\n        if (idx >= 0) {\n          const combinedChar = chars[idx - 1].raw + chars[idx].raw;\n          const message = `Move this Unicode combined character '${combinedChar}' outside of [...]`;\n          context.reportRegExpNode({ regexpNode: chars[idx], node: context.node, message });\n        }\n      }\n    },\n  };\n});\n\nfunction isCombiningCharacter(codePoint: number) {\n  return /^[\\p{Mc}\\p{Me}\\p{Mn}]$/u.test(String.fromCodePoint(codePoint));\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6326\n\nimport { Rule } from 'eslint';\nimport { createRegExpRule } from './regex-rule-template';\nimport * as regexpp from 'regexpp';\n\nexport const rule: Rule.RuleModule = createRegExpRule(context => {\n  let rawPattern: string;\n\n  return {\n    onRegExpLiteralEnter: (node: regexpp.AST.RegExpLiteral) => {\n      rawPattern = node.raw;\n    },\n    onCharacterEnter: (node: regexpp.AST.Character) => {\n      if (node.raw !== ' ' || node.parent.type === 'CharacterClass') {\n        return;\n      }\n\n      const nextChar = rawPattern[node.start + 1];\n      if (nextChar !== ' ') {\n        const spacesBefore = countSpacesBefore(rawPattern, node.start);\n        if (spacesBefore > 0) {\n          const spacesNumber = spacesBefore + 1;\n          context.reportRegExpNode({\n            message: `If multiple spaces are required here, use number quantifier ({${spacesNumber}}).`,\n            regexpNode: node,\n            offset: [-spacesNumber + 1, 0],\n            node: context.node,\n          });\n        }\n      }\n    },\n  };\n});\n\nfunction countSpacesBefore(pattern: string, index: number) {\n  let counter = 0;\n  for (let i = index - 1; i > 0; i--) {\n    if (pattern[i] === ' ') {\n      counter++;\n    } else {\n      break;\n    }\n  }\n\n  return counter;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1481\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      unusedFunction: `Remove unused function '{{symbol}}'.`,\n      unusedVariable: `Remove the declaration of the unused '{{symbol}}' variable.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let toIgnore: estree.Identifier[] = [];\n    let jsxComponentsToIgnore: string[] = [];\n\n    function checkVariable(v: Scope.Variable, toCheck: 'let-const-function' | 'all') {\n      if (v.defs.length === 0) {\n        return;\n      }\n      const type = v.defs[0].type;\n      if (type !== 'Variable' && type !== 'FunctionName') {\n        return;\n      }\n      if (toCheck === 'let-const-function') {\n        const def = v.defs[0];\n        if (def.parent && def.parent.type === 'VariableDeclaration' && def.parent.kind === 'var') {\n          return;\n        }\n      }\n\n      const defs = v.defs.map(def => def.name);\n      const unused = v.references.every(ref => defs.includes(ref.identifier));\n\n      if (unused && !toIgnore.includes(defs[0]) && !jsxComponentsToIgnore.includes(v.name)) {\n        const messageAndData = getMessageAndData(v.name, type === 'FunctionName');\n        defs.forEach(def =>\n          context.report({\n            node: def,\n            ...messageAndData,\n          }),\n        );\n      }\n    }\n\n    function isParentOfModuleScope(scope: Scope.Scope) {\n      return scope.childScopes.some(s => s.type === 'module');\n    }\n\n    function checkScope(\n      scope: Scope.Scope,\n      checkedInParent: 'nothing' | 'let-const-function' | 'all',\n    ) {\n      let toCheck = checkedInParent;\n      if (scope.type === 'function' && !isParentOfModuleScope(scope)) {\n        toCheck = 'all';\n      } else if (checkedInParent === 'nothing' && scope.type === 'block') {\n        toCheck = 'let-const-function';\n      }\n\n      if (toCheck !== 'nothing' && scope.type !== 'function-expression-name') {\n        scope.variables.forEach(v => checkVariable(v, toCheck as 'let-const-function' | 'all'));\n      }\n\n      scope.childScopes.forEach(childScope => checkScope(childScope, toCheck));\n    }\n\n    return {\n      ObjectPattern: (node: estree.Node) => {\n        const elements = (node as estree.ObjectPattern).properties;\n        const hasRest = elements.some(element => (element as any).type === 'RestElement');\n\n        if (!hasRest) {\n          return;\n        }\n\n        elements.forEach(element => {\n          if (\n            element.type === 'Property' &&\n            element.shorthand &&\n            element.value.type === 'Identifier'\n          ) {\n            toIgnore.push(element.value);\n          }\n        });\n      },\n\n      JSXIdentifier: (node: estree.Node) => {\n        // using 'any' as standard typings for AST don't provide types for JSX\n        jsxComponentsToIgnore.push((node as any).name);\n      },\n\n      'Program:exit': () => {\n        checkScope(context.getScope(), 'nothing');\n        toIgnore = [];\n        jsxComponentsToIgnore = [];\n      },\n    };\n  },\n};\n\nfunction getMessageAndData(name: string, isFunction: boolean) {\n  if (isFunction) {\n    return { messageId: 'unusedFunction', data: { symbol: name } };\n  } else {\n    return { messageId: 'unusedVariable', data: { symbol: name } };\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2077\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isRequireModule, isMemberWithProperty } from '../utils';\n\nconst dbModules = ['pg', 'mysql', 'mysql2', 'sequelize'];\n\ntype Argument = estree.Expression | estree.SpreadElement;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeQuery: `Make sure that executing SQL queries is safe here.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let isDbModuleImported = false;\n\n    return {\n      Program() {\n        // init flag for each file\n        isDbModuleImported = false;\n      },\n\n      ImportDeclaration(node: estree.Node) {\n        const { source } = node as estree.ImportDeclaration;\n        if (dbModules.includes(String(source.value))) {\n          isDbModuleImported = true;\n        }\n      },\n\n      CallExpression(node: estree.Node) {\n        const call = node as estree.CallExpression;\n        const { callee, arguments: args } = call;\n\n        if (isRequireModule(call, ...dbModules)) {\n          isDbModuleImported = true;\n          return;\n        }\n\n        if (\n          isDbModuleImported &&\n          isMemberWithProperty(callee, 'query') &&\n          isQuestionable(args[0])\n        ) {\n          context.report({\n            messageId: 'safeQuery',\n            node: callee,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isQuestionable(sqlQuery: Argument | undefined) {\n  if (!sqlQuery) {\n    return false;\n  }\n  if (isTemplateWithVar(sqlQuery)) {\n    return true;\n  }\n  if (isConcatenation(sqlQuery)) {\n    return isVariableConcat(sqlQuery);\n  }\n  return (\n    sqlQuery.type === 'CallExpression' && isMemberWithProperty(sqlQuery.callee, 'concat', 'replace')\n  );\n}\n\nfunction isVariableConcat(node: estree.BinaryExpression): boolean {\n  const { left, right } = node;\n  if (!isHardcodedLiteral(right)) {\n    return true;\n  }\n  if (isConcatenation(left)) {\n    return isVariableConcat(left);\n  }\n  return !isHardcodedLiteral(left);\n}\n\nfunction isTemplateWithVar(node: estree.Node) {\n  return node.type === 'TemplateLiteral' && node.expressions.length !== 0;\n}\n\nfunction isTemplateWithoutVar(node: estree.Node) {\n  return node.type === 'TemplateLiteral' && node.expressions.length === 0;\n}\n\nfunction isConcatenation(node: estree.Node): node is estree.BinaryExpression {\n  return node.type === 'BinaryExpression' && node.operator === '+';\n}\n\nfunction isHardcodedLiteral(node: estree.Node) {\n  return node.type === 'Literal' || isTemplateWithoutVar(node);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4829\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isMemberExpression } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      safeStdin: `Make sure that reading the standard input is safe here.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      MemberExpression(node: estree.Node) {\n        if (isMemberExpression(node, 'process', 'stdin')) {\n          context.report({\n            messageId: 'safeStdin',\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S6351\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  functionLike,\n  getFlags,\n  getParent,\n  getUniqueWriteUsage,\n  getVariableFromName,\n  isCallingMethod,\n  isDotNotation,\n  isMethodCall,\n  isRegexLiteral,\n  isRegExpConstructor,\n  toEncodedMessage,\n} from '../utils';\n\ntype RegexInfo = { node: estree.Node; flags: string };\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const invocations = new Map<Scope.Variable, estree.CallExpression[]>();\n    const regexes: RegexInfo[] = [];\n    const resets = new Set<Scope.Variable>();\n    return {\n      'Literal:exit': (node: estree.Node) => {\n        extractRegex(node, regexes);\n      },\n      'CallExpression:exit': (node: estree.Node) => {\n        const callExpr = node as estree.CallExpression;\n        extractRegex(node, regexes);\n        extractRegexInvocation(callExpr, regexes, invocations, context);\n        checkWhileConditionRegex(callExpr, context);\n      },\n      'MemberExpression:exit': (node: estree.Node) => {\n        extractResetRegex(node, regexes, resets, context);\n      },\n      'NewExpression:exit': (node: estree.Node) => {\n        extractRegex(node, regexes);\n      },\n      'Program:exit': () => {\n        regexes.forEach(regex => checkGlobalStickyRegex(regex, context));\n        invocations.forEach((usages, regex) =>\n          checkMultipleInputsRegex(regex, usages, resets, context),\n        );\n      },\n    };\n  },\n};\n\nfunction extractRegex(node: estree.Node, acc: RegexInfo[]) {\n  if (isRegexLiteral(node)) {\n    const { flags } = node.regex;\n    acc.push({ node, flags });\n  } else if (isRegExpConstructor(node)) {\n    const flags = getFlags(node) || '';\n    acc.push({ node, flags });\n  }\n}\n\nfunction extractRegexInvocation(\n  callExpr: estree.CallExpression,\n  regexes: RegexInfo[],\n  invocations: Map<Scope.Variable, estree.CallExpression[]>,\n  context: Rule.RuleContext,\n) {\n  if (\n    isCallingMethod(callExpr, 1, 'exec', 'test') &&\n    callExpr.callee.object.type === 'Identifier'\n  ) {\n    const { object } = callExpr.callee;\n    const variable = getVariableFromName(context, object.name);\n    if (variable) {\n      const value = getUniqueWriteUsage(context, variable.name);\n      const regex = regexes.find(r => r.node === value);\n      if (regex && regex.flags.includes('g')) {\n        const usages = invocations.get(variable);\n        if (usages) {\n          usages.push(callExpr);\n        } else {\n          invocations.set(variable, [callExpr]);\n        }\n      }\n    }\n  }\n}\n\nfunction extractResetRegex(\n  node: estree.Node,\n  regexes: RegexInfo[],\n  resets: Set<Scope.Variable>,\n  context: Rule.RuleContext,\n) {\n  /* RegExp.prototype.lastIndex = ... */\n  if (\n    isDotNotation(node) &&\n    node.object.type === 'Identifier' &&\n    node.property.name === 'lastIndex'\n  ) {\n    const parent = getParent(context);\n    if (parent?.type === 'AssignmentExpression' && parent.left === node) {\n      const variable = getVariableFromName(context, node.object.name);\n      if (variable) {\n        const value = getUniqueWriteUsage(context, variable.name);\n        const regex = regexes.find(r => r.node === value);\n        if (regex) {\n          resets.add(variable);\n        }\n      }\n    }\n  }\n}\n\nfunction checkWhileConditionRegex(callExpr: estree.CallExpression, context: Rule.RuleContext) {\n  /* RegExp.prototype.exec() within while conditions */\n  if (isMethodCall(callExpr)) {\n    const { object, property } = callExpr.callee;\n    if ((isRegexLiteral(object) || isRegExpConstructor(object)) && property.name === 'exec') {\n      const flags = object.type === 'Literal' ? object.regex.flags : getFlags(object);\n      if (flags && flags.includes('g') && isWithinWhileCondition(callExpr, context)) {\n        context.report({\n          message: toEncodedMessage('Extract this regular expression to avoid infinite loop.', []),\n          node: object,\n        });\n      }\n    }\n  }\n}\n\nfunction checkGlobalStickyRegex(regex: RegexInfo, context: Rule.RuleContext) {\n  /* RegExp with `g` and `y` flags */\n  if (regex.flags.includes('g') && regex.flags.includes('y')) {\n    context.report({\n      message: toEncodedMessage(\n        `Remove the 'g' flag from this regex as it is shadowed by the 'y' flag.`,\n        [],\n      ),\n      node: regex.node,\n    });\n  }\n}\n\nfunction checkMultipleInputsRegex(\n  regex: Scope.Variable,\n  usages: estree.CallExpression[],\n  resets: Set<Scope.Variable>,\n  context: Rule.RuleContext,\n) {\n  /* RegExp.prototype.exec(input) / RegExp.prototype.test(input) */\n  if (!resets.has(regex)) {\n    const definition = regex.defs.find(def => def.type === 'Variable' && def.node.init);\n    const uniqueInputs = new Set<string>(\n      usages.map(callExpr => context.getSourceCode().getText(callExpr.arguments[0])),\n    );\n    const regexReset = uniqueInputs.has(`''`) || uniqueInputs.has(`\"\"`);\n    if (definition && uniqueInputs.size > 1 && !regexReset) {\n      const pattern = definition.node.init as estree.Expression;\n      context.report({\n        message: toEncodedMessage(\n          `Remove the 'g' flag from this regex as it is used on different inputs.`,\n          usages,\n          usages.map((_, idx) => `Usage ${idx + 1}`),\n        ),\n        node: pattern,\n      });\n    }\n  }\n}\n\nfunction isWithinWhileCondition(node: estree.Node, context: Rule.RuleContext) {\n  const ancestors = context.getAncestors();\n  let parent: estree.Node | undefined;\n  let child: estree.Node = node;\n  while ((parent = ancestors.pop()) !== undefined) {\n    if (functionLike.has(parent.type)) {\n      break;\n    }\n    if (parent.type === 'WhileStatement' || parent.type === 'DoWhileStatement') {\n      return parent.test === child;\n    }\n    child = parent;\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5734\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getModuleNameOfNode,\n  getPropertyWithValue,\n  getObjectExpressionProperty,\n  getValueOfExpression,\n} from '../utils';\nimport { Express } from './utils-express';\n\nconst HSTS = 'hsts';\nconst HELMET = 'helmet';\nconst MAX_AGE = 'maxAge';\nconst INCLUDE_SUB_DOMAINS = 'includeSubDomains';\nconst RECOMMENDED_MAX_AGE = 15552000;\n\nexport const rule: Rule.RuleModule = Express.SensitiveMiddlewarePropertyRule(\n  findSensitiveTransportSecurityPolicyProperty,\n  `Disabling Strict-Transport-Security policy is security-sensitive.`,\n);\n\nfunction findSensitiveTransportSecurityPolicyProperty(\n  context: Rule.RuleContext,\n  node: estree.CallExpression,\n): estree.Property[] {\n  const sensitiveFinders = [findSensitiveHsts, findSensitiveMaxAge, findSensitiveIncludeSubDomains];\n  const sensitives: estree.Property[] = [];\n  const { callee, arguments: args } = node;\n  if (args.length === 1 && args[0].type === 'ObjectExpression') {\n    const [options] = args;\n    for (const finder of sensitiveFinders) {\n      const maybeSensitive = finder(context, callee, options);\n      if (maybeSensitive) {\n        sensitives.push(maybeSensitive);\n      }\n    }\n  }\n  return sensitives;\n}\n\nfunction findSensitiveHsts(\n  context: Rule.RuleContext,\n  middleware: estree.Node,\n  options: estree.ObjectExpression,\n): estree.Property | undefined {\n  if (isModuleNode(context, middleware, HELMET)) {\n    return getPropertyWithValue(context, options, HSTS, false);\n  }\n  return undefined;\n}\n\nfunction findSensitiveMaxAge(\n  context: Rule.RuleContext,\n  middleware: estree.Node,\n  options: estree.ObjectExpression,\n): estree.Property | undefined {\n  if (isHstsMiddlewareNode(context, middleware)) {\n    const maybeMaxAgeProperty = getObjectExpressionProperty(options, MAX_AGE);\n    if (maybeMaxAgeProperty) {\n      const maybeMaxAgeValue = getValueOfExpression(context, maybeMaxAgeProperty.value, 'Literal');\n      if (\n        typeof maybeMaxAgeValue?.value === 'number' &&\n        maybeMaxAgeValue.value < RECOMMENDED_MAX_AGE\n      ) {\n        return maybeMaxAgeProperty;\n      }\n    }\n  }\n  return undefined;\n}\n\nfunction findSensitiveIncludeSubDomains(\n  context: Rule.RuleContext,\n  middleware: estree.Node,\n  options: estree.ObjectExpression,\n): estree.Property | undefined {\n  if (isHstsMiddlewareNode(context, middleware)) {\n    return getPropertyWithValue(context, options, INCLUDE_SUB_DOMAINS, false);\n  }\n  return undefined;\n}\n\nfunction isHstsMiddlewareNode(context: Rule.RuleContext, node: estree.Node): boolean {\n  return (\n    isModuleNode(context, node, HSTS) ||\n    (node.type === 'MemberExpression' &&\n      isModuleNode(context, node.object, HELMET) &&\n      node.property.type === 'Identifier' &&\n      node.property.name === HSTS)\n  );\n}\n\nfunction isModuleNode(context: Rule.RuleContext, node: estree.Node, moduleName: string): boolean {\n  return node.type === 'Identifier' && getModuleNameOfNode(context, node)?.value === moduleName;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3003\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isString, isRequiredParserServices, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      BinaryExpression: (node: estree.Node) => {\n        const { operator, left, right } = node as estree.BinaryExpression;\n        if (\n          ['<', '<=', '>', '>='].includes(operator) &&\n          isString(left, services) &&\n          isString(right, services) &&\n          !isLiteralException(left) &&\n          !isLiteralException(right) &&\n          !isWithinSortCallback(context)\n        ) {\n          context.report({\n            message: toEncodedMessage(\n              `Convert operands of this use of \"${operator}\" to number type.`,\n              [left, right],\n            ),\n            loc: context\n              .getSourceCode()\n              .getTokensBetween(left, right)\n              .find(token => token.type === 'Punctuator' && token.value === operator)!.loc,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isLiteralException(node: estree.Node) {\n  return node.type === 'Literal' && node.raw!.length === 3;\n}\n\nfunction isWithinSortCallback(context: Rule.RuleContext) {\n  const ancestors = context.getAncestors().reverse();\n  const maybeCallback = ancestors.find(node =>\n    ['ArrowFunctionExpression', 'FunctionExpression'].includes(node.type),\n  );\n  if (maybeCallback) {\n    const callback = maybeCallback as TSESTree.Node;\n    const parent = callback.parent;\n    if (parent?.type === 'CallExpression') {\n      const { callee, arguments: args } = parent;\n      let funcName: string | undefined;\n      if (callee.type === 'Identifier') {\n        funcName = callee.name;\n      } else if (callee.type === 'MemberExpression' && callee.property.type === 'Identifier') {\n        funcName = callee.property.name;\n      }\n      return funcName && funcName.match(/sort/i) && args.some(arg => arg === callback);\n    }\n  }\n  return false;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3854\n\nimport { Linter, Rule } from 'eslint';\n\nconst rules = new Linter().getRules();\nconst constructorSuperRule = rules.get('constructor-super')!;\nconst noThisBeforeSuperRule = rules.get('no-this-before-super')!;\n\nexport const rule: Rule.RuleModule = {\n  // meta of constructor-super and no-this-before-super is required for issue messages\n  meta: {\n    messages: { ...constructorSuperRule.meta!.messages, ...noThisBeforeSuperRule.meta!.messages },\n  },\n  create(context: Rule.RuleContext) {\n    const constructorSuperListener: Rule.RuleListener = constructorSuperRule.create(context);\n    const notThisBeforeSuperListener: Rule.RuleListener = noThisBeforeSuperRule.create(context);\n\n    return mergeRules(constructorSuperListener, notThisBeforeSuperListener);\n  },\n};\n\nfunction mergeRules(rule1: Rule.RuleListener, rule2: Rule.RuleListener): Rule.RuleListener {\n  const merged = { ...rule1, ...rule2 };\n  for (const listener in merged) {\n    if (rule1.hasOwnProperty(listener) && rule2.hasOwnProperty(listener)) {\n      merged[listener] = mergeListeners(rule1[listener], rule2[listener]);\n    }\n  }\n  return merged;\n}\n\nfunction mergeListeners(listener1: Function | undefined, listener2: Function | undefined) {\n  return (...args: any[]) => {\n    if (listener1) {\n      listener1(...args);\n    }\n    if (listener2) {\n      listener2(...args);\n    }\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-131\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      switchDefault: `Add a \"default\" clause to this \"switch\" statement.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      SwitchStatement(node: estree.Node) {\n        const { cases } = node as estree.SwitchStatement;\n        const defaultClause = cases.find(c => c.test === null);\n        if (!defaultClause) {\n          const switchKeyword = context\n            .getSourceCode()\n            .getFirstToken(node, token => token.type === 'Keyword' && token.value === 'switch')!;\n          context.report({\n            messageId: 'switchDefault',\n            loc: switchKeyword.loc,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5958/javascript\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isIdentifier, Mocha } from '../utils';\nimport { getVariableFromIdentifier } from './reachingDefinitions';\n\nexport const rule: Rule.RuleModule = {\n  create(context: Rule.RuleContext) {\n    let catchWithDone = false;\n\n    function isInsideTest() {\n      return context\n        .getAncestors()\n        .some(n => n.type === 'CallExpression' && Mocha.isTestConstruct(n));\n    }\n\n    return {\n      'CatchClause CallExpression[callee.name=\"done\"]': (_node: estree.Node) => {\n        catchWithDone = true;\n      },\n      'CatchClause:exit': (node: estree.Node) => {\n        if (!catchWithDone || !isInsideTest()) {\n          return;\n        }\n        catchWithDone = false;\n        const { param } = node as estree.CatchClause;\n        if (param && param.type === 'Identifier') {\n          const exception = getVariableFromIdentifier(param, context.getScope());\n          if (exception && exception.references.length === 0) {\n            context.report({\n              node: param,\n              message:\n                'Either the exception should be passed to \"done(e)\", or the exception should be tested further.',\n            });\n          }\n        }\n      },\n      CallExpression(node: estree.Node) {\n        const callExpr = node as estree.CallExpression;\n        if (\n          isInsideTest() &&\n          isThrowAssertWithoutNot(callExpr) &&\n          (callExpr.arguments.length === 0 ||\n            (callExpr.arguments.length === 1 && isIdentifier(callExpr.arguments[0], 'Error')))\n        ) {\n          context.report({\n            node: callExpr.callee.property,\n            message: 'Assert more concrete exception type or assert the message of exception.',\n          });\n        }\n      },\n    };\n  },\n};\n\n// find nodes in shape expect(...).a.b.c.throw() or a.should.throw()\nfunction isThrowAssertWithoutNot(\n  node: estree.CallExpression,\n): node is estree.CallExpression & { callee: estree.MemberExpression } {\n  if (node.callee.type !== 'MemberExpression') {\n    return false;\n  }\n  let { object, property } = node.callee;\n  if (!isIdentifier(property, 'throw')) {\n    return false;\n  }\n  while (object.type === 'MemberExpression') {\n    if (isIdentifier(object.property, 'not')) {\n      return false;\n    }\n    if (isIdentifier(object.property, 'should')) {\n      return true;\n    }\n    object = object.object;\n  }\n  return object.type === 'CallExpression' && isIdentifier(object.callee, 'expect');\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    let jumpTargets: JumpTarget[] = [];\n\n    function enterScope() {\n      jumpTargets.push(new JumpTarget());\n    }\n\n    function leaveScope() {\n      jumpTargets.pop();\n    }\n\n    function increateNumberOfJumpsInScopes(jump: estree.Node, label?: string) {\n      for (const jumpTarget of [...jumpTargets].reverse()) {\n        jumpTarget.jumps.push(jump);\n        if (label === jumpTarget.label) {\n          break;\n        }\n      }\n    }\n\n    function leaveScopeAndCheckNumberOfJumps(node: estree.Node) {\n      const jumps = jumpTargets.pop()?.jumps;\n      if (jumps && jumps.length > 1) {\n        const sourceCode = context.getSourceCode();\n        const firstToken = sourceCode.getFirstToken(node);\n        context.report({\n          loc: firstToken!.loc,\n          message: toEncodedMessage(\n            'Reduce the total number of \"break\" and \"continue\" statements in this loop to use one at most.',\n            jumps,\n            jumps.map(jmp =>\n              jmp.type === 'BreakStatement' ? '\"break\" statement.' : '\"continue\" statement.',\n            ),\n          ),\n        });\n      }\n    }\n\n    return {\n      Program: () => {\n        jumpTargets = [];\n      },\n      BreakStatement: (node: estree.Node) => {\n        const breakStatement = node as estree.BreakStatement;\n        increateNumberOfJumpsInScopes(breakStatement, breakStatement.label?.name);\n      },\n      ContinueStatement: (node: estree.Node) => {\n        const continueStatement = node as estree.ContinueStatement;\n        increateNumberOfJumpsInScopes(continueStatement, continueStatement.label?.name);\n      },\n      SwitchStatement: enterScope,\n      'SwitchStatement:exit': leaveScope,\n      ForStatement: enterScope,\n      'ForStatement:exit': leaveScopeAndCheckNumberOfJumps,\n      ForInStatement: enterScope,\n      'ForInStatement:exit': leaveScopeAndCheckNumberOfJumps,\n      ForOfStatement: enterScope,\n      'ForOfStatement:exit': leaveScopeAndCheckNumberOfJumps,\n      WhileStatement: enterScope,\n      'WhileStatement:exit': leaveScopeAndCheckNumberOfJumps,\n      DoWhileStatement: enterScope,\n      'DoWhileStatement:exit': leaveScopeAndCheckNumberOfJumps,\n      LabeledStatement: (node: estree.Node) => {\n        const labeledStatement = node as estree.LabeledStatement;\n        jumpTargets.push(new JumpTarget(labeledStatement.label.name));\n      },\n      'LabeledStatement:exit': leaveScope,\n    };\n  },\n};\n\nclass JumpTarget {\n  label?: string;\n  jumps: estree.Node[] = [];\n\n  constructor(label?: string) {\n    this.label = label;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5867\n\nimport { Rule } from 'eslint';\nimport { createRegExpRule } from './regex-rule-template';\nimport { Character, Quantifier, RegExpLiteral } from 'regexpp/ast';\nimport { SourceLocation } from 'estree';\nimport { getRegexpLocation, toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = createRegExpRule(\n  context => {\n    const unicodeProperties: { character: Character; offset: number }[] = [];\n    const unicodeCharacters: Quantifier[] = [];\n    let rawPattern: string;\n    let isUnicodeEnabled = false;\n    return {\n      onRegExpLiteralEnter: (node: RegExpLiteral) => {\n        rawPattern = node.raw;\n        isUnicodeEnabled = node.flags.unicode;\n      },\n      onQuantifierEnter: (quantifier: Quantifier) => {\n        if (isUnicodeEnabled) {\n          return;\n        }\n        /* \\u{hhhh}, \\u{hhhhh} */\n        const { raw, min: hex } = quantifier;\n        if (\n          raw.startsWith('\\\\u') &&\n          !raw.includes(',') &&\n          ['hhhh'.length, 'hhhhh'.length].includes(hex.toString().length)\n        ) {\n          unicodeCharacters.push(quantifier);\n        }\n      },\n      onCharacterEnter: (character: Character) => {\n        if (isUnicodeEnabled) {\n          return;\n        }\n        const c = character.raw;\n        if (c !== '\\\\p' && c !== '\\\\P') {\n          return;\n        }\n        let state:\n          | 'start'\n          | 'openingBracket'\n          | 'alpha'\n          | 'equal'\n          | 'alpha1'\n          | 'closingBracket'\n          | 'end' = 'start';\n        let offset = character.start + c.length;\n        let nextChar: string;\n        do {\n          nextChar = rawPattern[offset];\n          offset++;\n          switch (state) {\n            case 'start':\n              if (nextChar === '{') {\n                state = 'openingBracket';\n              } else {\n                state = 'end';\n              }\n              break;\n            case 'openingBracket':\n              if (/[a-zA-Z]/.test(nextChar)) {\n                state = 'alpha';\n              } else {\n                state = 'end';\n              }\n              break;\n            case 'alpha':\n              if (/[a-zA-Z]/.test(nextChar)) {\n                state = 'alpha';\n              } else if (nextChar === '=') {\n                state = 'equal';\n              } else if (nextChar === '}') {\n                state = 'closingBracket';\n              } else {\n                state = 'end';\n              }\n              break;\n            case 'equal':\n              if (/[a-zA-Z]/.test(nextChar)) {\n                state = 'alpha1';\n              } else {\n                state = 'end';\n              }\n              break;\n            case 'alpha1':\n              if (/[a-zA-Z]/.test(nextChar)) {\n                state = 'alpha1';\n              } else if (nextChar === '}') {\n                state = 'closingBracket';\n              } else {\n                state = 'end';\n              }\n              break;\n            case 'closingBracket':\n              state = 'end';\n              unicodeProperties.push({ character, offset: offset - c.length - 1 });\n              break;\n          }\n        } while (state !== 'end');\n      },\n      onRegExpLiteralLeave: (regexp: RegExpLiteral) => {\n        if (!isUnicodeEnabled && (unicodeProperties.length > 0 || unicodeCharacters.length > 0)) {\n          const secondaryLocations: { loc: SourceLocation }[] = [];\n          const secondaryMessages: string[] = [];\n          unicodeProperties.forEach(p => {\n            secondaryLocations.push({\n              loc: getRegexpLocation(context.node, p.character, context, [0, p.offset]),\n            });\n            secondaryMessages.push('Unicode property');\n          });\n          unicodeCharacters.forEach(c => {\n            secondaryLocations.push({ loc: getRegexpLocation(context.node, c, context) });\n            secondaryMessages.push('Unicode character');\n          });\n          context.reportRegExpNode({\n            message: toEncodedMessage(\n              `Enable the 'u' flag for this regex using Unicode constructs.`,\n              secondaryLocations,\n              secondaryMessages,\n            ),\n            node: context.node,\n            regexpNode: regexp,\n          });\n        }\n      },\n    };\n  },\n  {\n    meta: {\n      schema: [\n        {\n          // internal parameter for rules having secondary locations\n          enum: ['sonar-runtime'],\n        },\n      ],\n    },\n  },\n);\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as estree from 'estree';\nimport { Rule } from 'eslint';\n\nexport function removeNodeWithLeadingWhitespaces(\n  context: Rule.RuleContext,\n  node: estree.Node,\n  fixer: Rule.RuleFixer,\n  removeUntil?: number,\n) {\n  const previousComments = context.getSourceCode().getCommentsBefore(node);\n  let start = 0;\n  if (previousComments.length === 0) {\n    const previousToken = context.getSourceCode().getTokenBefore(node);\n    if (previousToken) {\n      start = previousToken.range[1];\n    }\n  } else {\n    start = previousComments[previousComments.length - 1].range![1];\n  }\n\n  const end = removeUntil ? removeUntil : node.range![1];\n  return fixer.removeRange([start, end]);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1128\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { AST } from 'vue-eslint-parser';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isRequiredParserServices } from '../utils';\nimport { removeNodeWithLeadingWhitespaces } from '../utils/utils-quick-fix';\n\nconst EXCLUDED_IMPORTS = ['React'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeUnusedImport: `Remove this unused import of '{{symbol}}'.`,\n      suggestRemoveWholeStatement: `Remove this import statement`,\n      suggestRemoveOneVariable: `Remove this variable import`,\n    },\n    hasSuggestions: true,\n  },\n  create(context: Rule.RuleContext) {\n    const isJsxPragmaSet =\n      context\n        .getSourceCode()\n        .getAllComments()\n        .findIndex(comment => comment.value.includes('@jsx jsx')) > -1;\n    const unusedImports: { id: estree.Identifier; importDecl: estree.ImportDeclaration }[] = [];\n    const vueIdentifiers: Set<string> = new Set();\n    const tsTypeIdentifiers: Set<string> = new Set();\n    const saveTypeIdentifier = (node: estree.Identifier) => tsTypeIdentifiers.add(node.name);\n\n    function isExcluded(variable: Scope.Variable) {\n      return EXCLUDED_IMPORTS.includes(variable.name);\n    }\n\n    function isUnused(variable: Scope.Variable) {\n      return variable.references.length === 0;\n    }\n\n    function isImplicitJsx(variable: Scope.Variable) {\n      return variable.name === 'jsx' && isJsxPragmaSet;\n    }\n\n    function getJsxFactories() {\n      const factories = new Set<string>();\n      const parserServices = context.parserServices;\n      if (isRequiredParserServices(parserServices)) {\n        const compilerOptions = parserServices.program.getCompilerOptions();\n        if (compilerOptions.jsxFactory) {\n          factories.add(compilerOptions.jsxFactory);\n        }\n        if (compilerOptions.jsxFragmentFactory) {\n          factories.add(compilerOptions.jsxFragmentFactory);\n        }\n      }\n      return factories;\n    }\n\n    const ruleListener = {\n      ImportDeclaration: (node: estree.Node) => {\n        const variables = context.getDeclaredVariables(node);\n        for (const variable of variables) {\n          if (!isExcluded(variable) && !isImplicitJsx(variable) && isUnused(variable)) {\n            unusedImports.push({\n              id: variable.identifiers[0],\n              importDecl: node as estree.ImportDeclaration,\n            });\n          }\n        }\n      },\n      'TSTypeReference > Identifier, TSClassImplements > Identifier, TSInterfaceHeritage > Identifier':\n        (node: estree.Node) => {\n          saveTypeIdentifier(node as estree.Identifier);\n        },\n      \"TSQualifiedName[left.type = 'Identifier']\": (node: estree.Node) => {\n        saveTypeIdentifier((node as any as TSESTree.TSQualifiedName).left as estree.Identifier);\n      },\n      \"TSInterfaceHeritage > MemberExpression[object.type = 'Identifier'], TSClassImplements > MemberExpression[object.type = 'Identifier']\":\n        (node: estree.Node) => {\n          saveTypeIdentifier(\n            (node as any as TSESTree.MemberExpression).object as estree.Identifier,\n          );\n        },\n      'Program:exit': () => {\n        const jsxFactories = getJsxFactories();\n        const jsxIdentifiers = context\n          .getSourceCode()\n          .ast.tokens.filter(token => token.type === 'JSXIdentifier')\n          .map(token => token.value);\n        unusedImports\n          .filter(\n            ({ id: unused }) =>\n              !jsxIdentifiers.includes(unused.name) &&\n              !tsTypeIdentifiers.has(unused.name) &&\n              !vueIdentifiers.has(unused.name) &&\n              !jsxFactories.has(unused.name),\n          )\n          .forEach(unused =>\n            context.report({\n              messageId: 'removeUnusedImport',\n              data: {\n                symbol: unused.id.name,\n              },\n              node: unused.id,\n              suggest: [getSuggestion(context, unused)],\n            }),\n          );\n      },\n    };\n\n    // @ts-ignore\n    if (context.parserServices.defineTemplateBodyVisitor) {\n      return context.parserServices.defineTemplateBodyVisitor(\n        {\n          VElement: (node: AST.VElement) => {\n            const { rawName } = node;\n            if (startsWithUpper(rawName)) {\n              vueIdentifiers.add(rawName);\n            } else if (isKebabCase(rawName)) {\n              vueIdentifiers.add(toPascalCase(rawName));\n            }\n          },\n          Identifier: (node: AST.ESLintIdentifier) => {\n            vueIdentifiers.add(node.name);\n          },\n        },\n        ruleListener,\n        { templateBodyTriggerSelector: 'Program' },\n      );\n    }\n\n    return ruleListener;\n  },\n};\n\nfunction startsWithUpper(str: string) {\n  return str.charAt(0) === str.charAt(0).toUpperCase();\n}\n\nfunction isKebabCase(str: string) {\n  return str.includes('-');\n}\n\nfunction toPascalCase(str: string) {\n  return str\n    .replace(/\\w+/g, word => word[0].toUpperCase() + word.slice(1).toLowerCase())\n    .replace('-', '');\n}\n\nfunction getSuggestion(\n  context: Rule.RuleContext,\n  { id, importDecl }: { id: estree.Identifier; importDecl: estree.ImportDeclaration },\n): Rule.SuggestionReportDescriptor {\n  const variables = context.getDeclaredVariables(importDecl);\n  if (variables.length === 1) {\n    return {\n      messageId: 'suggestRemoveWholeStatement',\n      fix: fixer => {\n        return removeNodeWithLeadingWhitespaces(context, importDecl, fixer);\n      },\n    };\n  }\n\n  const specifiers = importDecl.specifiers;\n  const unusedSpecifier = specifiers.find(specifier => specifier.local === id)!;\n  const code = context.getSourceCode();\n  let range: [number, number];\n\n  switch (unusedSpecifier.type) {\n    case 'ImportDefaultSpecifier':\n      const tokenAfter = code.getTokenAfter(id)!;\n      // default import is always first\n      range = [id.range![0], code.getTokenAfter(tokenAfter)!.range![0]];\n      break;\n\n    case 'ImportNamespaceSpecifier':\n      // namespace import is always second\n      range = [code.getTokenBefore(unusedSpecifier)!.range![0], unusedSpecifier.range![1]];\n      break;\n\n    case 'ImportSpecifier':\n      const simpleSpecifiers = specifiers.filter(specifier => specifier.type === 'ImportSpecifier');\n      const index = simpleSpecifiers.findIndex(specifier => specifier === unusedSpecifier);\n      if (simpleSpecifiers.length === 1) {\n        range = [specifiers[0].range![1], code.getTokenAfter(unusedSpecifier)!.range![1]];\n      } else if (index === 0) {\n        range = [simpleSpecifiers[0].range![0], simpleSpecifiers[1].range![0]];\n      } else {\n        range = [simpleSpecifiers[index - 1].range![1], simpleSpecifiers[index].range![1]];\n      }\n  }\n\n  return {\n    messageId: 'suggestRemoveOneVariable',\n    fix: fixer => {\n      return fixer.removeRange(range);\n    },\n  };\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://sonarsource.github.io/rspec/#/rspec/S5860\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport * as regexpp from 'regexpp';\nimport { Backreference, CapturingGroup, RegExpLiteral } from 'regexpp/ast';\nimport {\n  getLhsVariable,\n  getParsedRegex,\n  getRegexpLocation,\n  getUniqueWriteUsage,\n  getValueOfExpression,\n  getVariableFromName,\n  isDotNotation,\n  isMethodCall,\n  isObjectDestructuring,\n  isRequiredParserServices,\n  isString,\n  isStringRegexMethodCall,\n  RequiredParserServices,\n  toEncodedMessage,\n} from '../utils';\nimport { extractReferences, isStringReplaceCall } from '../utils/utils-string-replace';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    const intellisense = new RegexIntelliSense(services, context);\n    return {\n      'Literal[regex]:exit': (literal: estree.Literal) => {\n        /* /regex/ */\n        intellisense.collectKnowledge(literal);\n      },\n      'NewExpression:exit': (newExpr: estree.NewExpression) => {\n        /* new RegExp(regex) */\n        intellisense.collectKnowledge(newExpr);\n      },\n      'CallExpression:exit': (callExpr: estree.CallExpression) => {\n        /* RegExp(regex), implicit regex e.g. str.match('regex') */\n        intellisense.collectKnowledge(callExpr);\n        /* str.match(pattern) / pattern.exec(str) */\n        intellisense.collectPatternMatcher(callExpr);\n        /* str.replace(pattern, substr) */\n        checkStringReplaceGroupReferences(callExpr, intellisense);\n      },\n      'MemberExpression:exit': (memberExpr: estree.MemberExpression) => {\n        if (memberExpr.computed) {\n          /* matcher[index] */\n          checkIndexBasedGroupReference(memberExpr, intellisense);\n        } else {\n          /* matcher.groups.<name> / matcher.indices.groups.<name> */\n          checkNonExistingGroupReference(memberExpr, intellisense);\n        }\n      },\n      'Program:exit': () => {\n        checkUnusedGroups(intellisense);\n        checkIndexedGroups(intellisense);\n      },\n    };\n  },\n};\n\nfunction checkStringReplaceGroupReferences(\n  callExpr: estree.CallExpression,\n  intellisense: RegexIntelliSense,\n) {\n  if (isStringReplaceCall(callExpr, intellisense.services)) {\n    const [pattern, substr] = callExpr.arguments;\n    const regex = intellisense.findRegex(pattern);\n    if (regex) {\n      const references = extractReferences(substr);\n      const indexes = new Set<number>();\n      const names = new Set<string>();\n      references.forEach(ref =>\n        isNaN(Number(ref.value)) ? names.add(ref.value) : indexes.add(Number(ref.value)),\n      );\n      regex.groups.forEach(group => {\n        group.used ||= names.has(group.name);\n        group.used ||= indexes.has(group.index);\n      });\n      const indexedGroups = regex.groups.filter(group => indexes.has(group.index));\n      if (indexedGroups.length > 0) {\n        intellisense.context.report({\n          message: toEncodedMessage(\n            `Directly use the group names instead of their numbers.`,\n            indexedGroups.map(group => ({\n              loc: getRegexpLocation(regex.node, group.node, intellisense.context),\n            })),\n            indexedGroups.map(group => `Group '${group.name}'`),\n          ),\n          node: substr,\n        });\n      }\n    }\n  }\n}\n\nfunction checkIndexBasedGroupReference(\n  memberExpr: estree.MemberExpression,\n  intellisense: RegexIntelliSense,\n) {\n  const { object: matcher, property } = memberExpr;\n  const regex = intellisense.resolve(matcher);\n  if (regex) {\n    const maybeIndex = getValueOfExpression(intellisense.context, property, 'Literal');\n    if (maybeIndex && typeof maybeIndex.value === 'number') {\n      const index = maybeIndex.value;\n      const group = regex.groups.find(grp => grp.index === index);\n      if (group) {\n        group.used = true;\n        intellisense.context.report({\n          message: toEncodedMessage(\n            `Directly use '${group.name}' instead of its group number.`,\n            [{ loc: getRegexpLocation(regex.node, group.node, intellisense.context) }],\n            [`Group '${group.name}'`],\n          ),\n          node: property,\n        });\n      }\n    }\n  }\n}\n\nfunction checkNonExistingGroupReference(\n  memberExpr: estree.MemberExpression,\n  intellisense: RegexIntelliSense,\n) {\n  const { object: matcher } = memberExpr;\n  const regex = intellisense.resolve(matcher);\n  if (regex) {\n    /* matcher.groups.<name> / matcher.indices.groups.<name>  */\n    const groupNodes = extractGroupNodes(memberExpr, intellisense);\n    for (const groupNode of groupNodes) {\n      const group = regex.groups.find(grp => grp.name === groupNode.name);\n      if (group) {\n        group.used = true;\n      } else {\n        intellisense.context.report({\n          message: toEncodedMessage(\n            `There is no group named '${groupNode.name}' in the regular expression.`,\n            regex.groups.map(grp => ({\n              loc: getRegexpLocation(regex.node, grp.node, intellisense.context),\n            })),\n            regex.groups.map(grp => `Named group '${grp.name}'`),\n          ),\n          node: groupNode,\n        });\n      }\n    }\n  }\n}\n\nfunction extractGroupNodes(\n  memberExpr: estree.MemberExpression,\n  intellisense: RegexIntelliSense,\n): estree.Identifier[] {\n  if (isDotNotation(memberExpr)) {\n    const { property } = memberExpr;\n    const ancestors = intellisense.context.getAncestors();\n    let parent = ancestors.pop();\n    if (parent) {\n      switch (property.name) {\n        case 'groups':\n          /* matcher.groups.<name> */\n          return extractNamedOrDestructuredGroupNodes(parent);\n        case 'indices':\n          /* matcher.indices.groups.<name> */\n          if (isDotNotation(parent) && parent.property.name === 'groups') {\n            parent = ancestors.pop();\n            if (parent) {\n              return extractNamedOrDestructuredGroupNodes(parent);\n            }\n          }\n      }\n    }\n  }\n  return [];\n}\n\nfunction extractNamedOrDestructuredGroupNodes(node: estree.Node): estree.Identifier[] {\n  if (isDotNotation(node)) {\n    /* matcher.groups.<name> */\n    return [node.property];\n  } else if (isObjectDestructuring(node)) {\n    /* { <name1>,..<nameN> } = matcher.groups */\n    const destructuredGroups: estree.Identifier[] = [];\n    const pattern = node.type === 'VariableDeclarator' ? node.id : node.left;\n    for (const property of pattern.properties) {\n      if (property.type === 'Property' && property.key.type === 'Identifier') {\n        destructuredGroups.push(property.key);\n      }\n    }\n    return destructuredGroups;\n  } else {\n    return [];\n  }\n}\n\nfunction checkUnusedGroups(intellisense: RegexIntelliSense) {\n  intellisense.getKnowledge().forEach(regex => {\n    if (regex.matched) {\n      const unusedGroups = regex.groups.filter(group => !group.used);\n      if (unusedGroups.length) {\n        intellisense.context.report({\n          message: toEncodedMessage(\n            'Use the named groups of this regex or remove the names.',\n            unusedGroups.map(grp => ({\n              loc: getRegexpLocation(regex.node, grp.node, intellisense.context),\n            })),\n            unusedGroups.map(grp => `Named group '${grp.name}'`),\n          ),\n          node: regex.node,\n        });\n      }\n    }\n  });\n}\n\nfunction checkIndexedGroups(intellisense: RegexIntelliSense) {\n  intellisense.getKnowledge().forEach(regex => {\n    regex.groups.forEach(group =>\n      group.node.references.forEach(reference => {\n        if (typeof reference.ref === 'number') {\n          intellisense.context.report({\n            message: toEncodedMessage(\n              `Directly use '${group.name}' instead of its group number.`,\n              [{ loc: getRegexpLocation(regex.node, group.node, intellisense.context) }],\n              [`Group '${group.name}'`],\n            ),\n            loc: getRegexpLocation(regex.node, reference, intellisense.context),\n          });\n        }\n      }),\n    );\n  });\n}\n\ninterface RegexKnowledge {\n  node: estree.Node;\n  regexp: RegExpLiteral;\n  groups: GroupKnowledge[];\n  matched: boolean;\n}\n\ninterface GroupKnowledge {\n  node: CapturingGroup;\n  name: string;\n  used: boolean;\n  index: number;\n}\n\nfunction makeRegexKnowledge(node: estree.Node, regexp: RegExpLiteral): RegexKnowledge {\n  const capturingGroups: CapturingGroup[] = [];\n  const backreferences: Backreference[] = [];\n  regexpp.visitRegExpAST(regexp, {\n    onBackreferenceEnter: reference => reference.resolved.name && backreferences.push(reference),\n    onCapturingGroupEnter: group => capturingGroups.push(group),\n  });\n  const groups: GroupKnowledge[] = [];\n  capturingGroups.forEach(\n    (group, index) =>\n      group.name && groups.push(makeGroupKnowledge(group, backreferences, index + 1)),\n  );\n  return { node, regexp, groups, matched: false };\n}\n\nfunction makeGroupKnowledge(\n  node: CapturingGroup,\n  backreferences: Backreference[],\n  index: number,\n): GroupKnowledge {\n  const name = node.name!;\n  const used = backreferences.some(backreference => backreference.resolved === node);\n  return { node, name, used, index };\n}\n\nclass RegexIntelliSense {\n  private readonly knowledge: RegexKnowledge[] = [];\n  private readonly bindings = new Map<Scope.Variable, RegexKnowledge>();\n\n  constructor(readonly services: RequiredParserServices, readonly context: Rule.RuleContext) {}\n\n  getKnowledge() {\n    return this.knowledge;\n  }\n\n  collectKnowledge(node: estree.Node) {\n    let regexNode = node;\n    if (node.type === 'CallExpression' && isStringRegexMethodCall(node, this.services)) {\n      /* implicit regex */\n      regexNode = node.arguments[0];\n    }\n    const regex = getParsedRegex(regexNode, this.context);\n    if (regex !== null) {\n      this.knowledge.push(makeRegexKnowledge(regexNode, regex));\n    }\n  }\n\n  collectPatternMatcher(callExpr: estree.CallExpression) {\n    const { callee, arguments: args } = callExpr;\n    if (isMethodCall(callExpr) && args.length > 0) {\n      const target = (callee as estree.MemberExpression).object;\n      const matcher = getLhsVariable(this.context);\n      if (matcher) {\n        const method = (callee as estree.MemberExpression).property as estree.Identifier;\n        if (isString(target, this.services) && ['match', 'matchAll'].includes(method.name)) {\n          /* str.match(pattern) */\n          const [pattern] = args;\n          this.bind(pattern, matcher);\n        } else if (method.name === 'exec' && isString(args[0], this.services)) {\n          /* pattern.exec(str) */\n          const pattern = target;\n          this.bind(pattern, matcher);\n        }\n      }\n    }\n  }\n\n  resolve(matcher: estree.Node): RegexKnowledge | null {\n    const variable = this.findVariable(matcher);\n    if (variable) {\n      return this.bindings.get(variable) || null;\n    } else {\n      return null;\n    }\n  }\n\n  findRegex(node: estree.Node): RegexKnowledge | undefined {\n    return this.findRegexRec(node, new Set<estree.Node>());\n  }\n\n  private findRegexRec(node: estree.Node, visited: Set<estree.Node>): RegexKnowledge | undefined {\n    if (!visited.has(node)) {\n      visited.add(node);\n      const variable = this.findVariable(node);\n      if (variable) {\n        const value = getUniqueWriteUsage(this.context, variable.name);\n        if (value) {\n          const regex = this.findRegexRec(value, visited);\n          if (regex) {\n            return regex;\n          }\n        }\n      }\n    }\n    return this.knowledge.find(regex => regex.node === node);\n  }\n\n  private bind(pattern: estree.Node, matcher: Scope.Variable) {\n    const regex = this.findRegex(pattern);\n    if (regex) {\n      regex.matched = true;\n      this.bindings.set(matcher, regex);\n    }\n  }\n\n  private findVariable(node: estree.Node) {\n    if (node.type === 'Identifier') {\n      return getVariableFromName(this.context, node.name);\n    }\n    return null;\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4830\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getValueOfExpression,\n  getPropertyWithValue,\n  isCallToFQN,\n  toEncodedMessage,\n} from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const MESSAGE = 'Enable server certificate validation on this SSL/TLS connection.';\n    const SECONDARY_MESSAGE = 'Set \"rejectUnauthorized\" to \"true\".';\n    function checkSensitiveArgument(\n      callExpression: estree.CallExpression,\n      sensitiveArgumentIndex: number,\n    ) {\n      if (callExpression.arguments.length < sensitiveArgumentIndex + 1) {\n        return;\n      }\n      const sensitiveArgument = callExpression.arguments[sensitiveArgumentIndex];\n      const secondaryLocations: estree.Node[] = [];\n      const secondaryMessages: (string | undefined)[] = [];\n      const argumentValue = getValueOfExpression(context, sensitiveArgument, 'ObjectExpression');\n      if (!argumentValue) {\n        return;\n      }\n      if (sensitiveArgument !== argumentValue) {\n        secondaryLocations.push(argumentValue);\n        secondaryMessages.push(undefined);\n      }\n      const unsafeRejectUnauthorizedConfiguration = getPropertyWithValue(\n        context,\n        argumentValue,\n        'rejectUnauthorized',\n        false,\n      );\n      if (unsafeRejectUnauthorizedConfiguration) {\n        secondaryLocations.push(unsafeRejectUnauthorizedConfiguration);\n        secondaryMessages.push(SECONDARY_MESSAGE);\n        context.report({\n          node: callExpression.callee,\n          message: toEncodedMessage(MESSAGE, secondaryLocations, secondaryMessages),\n        });\n      }\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (isCallToFQN(context, callExpression, 'https', 'request')) {\n          checkSensitiveArgument(callExpression, 0);\n        }\n        if (isCallToFQN(context, callExpression, 'request', 'get')) {\n          checkSensitiveArgument(callExpression, 0);\n        }\n        if (isCallToFQN(context, callExpression, 'tls', 'connect')) {\n          checkSensitiveArgument(callExpression, 2);\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5667\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isCallToFQN,\n  getValueOfExpression,\n  getPropertyWithValue,\n  getObjectExpressionProperty,\n  childrenOf,\n  toEncodedMessage,\n} from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    const MESSAGE = 'Enable server hostname verification on this SSL/TLS connection.';\n    const SECONDARY_MESSAGE = 'Set \"rejectUnauthorized\" to \"true\".';\n    function checkSensitiveArgument(\n      callExpression: estree.CallExpression,\n      sensitiveArgumentIndex: number,\n    ) {\n      if (callExpression.arguments.length < sensitiveArgumentIndex + 1) {\n        return;\n      }\n      const sensitiveArgument = callExpression.arguments[sensitiveArgumentIndex];\n      const secondaryLocations: estree.Node[] = [];\n      const secondaryMessages: (string | undefined)[] = [];\n      let shouldReport = false;\n      const argumentValue = getValueOfExpression(context, sensitiveArgument, 'ObjectExpression');\n      if (!argumentValue) {\n        return;\n      }\n      if (sensitiveArgument !== argumentValue) {\n        secondaryLocations.push(argumentValue);\n        secondaryMessages.push(undefined);\n      }\n      const unsafeRejectUnauthorizedConfiguration = getPropertyWithValue(\n        context,\n        argumentValue,\n        'rejectUnauthorized',\n        false,\n      );\n      if (unsafeRejectUnauthorizedConfiguration) {\n        secondaryLocations.push(unsafeRejectUnauthorizedConfiguration);\n        secondaryMessages.push(SECONDARY_MESSAGE);\n        shouldReport = true;\n      }\n      const checkServerIdentityProperty = getObjectExpressionProperty(\n        argumentValue,\n        'checkServerIdentity',\n      );\n      if (\n        checkServerIdentityProperty &&\n        shouldReportOnCheckServerIdentityCallBack(checkServerIdentityProperty)\n      ) {\n        secondaryLocations.push(checkServerIdentityProperty);\n        secondaryMessages.push(undefined);\n        shouldReport = true;\n      }\n      if (shouldReport) {\n        context.report({\n          node: callExpression.callee,\n          message: toEncodedMessage(MESSAGE, secondaryLocations, secondaryMessages),\n        });\n      }\n    }\n\n    function shouldReportOnCheckServerIdentityCallBack(\n      checkServerIdentityProperty: estree.Property,\n    ) {\n      let baseFunction: estree.BaseFunction | undefined;\n      baseFunction = getValueOfExpression(\n        context,\n        checkServerIdentityProperty.value,\n        'FunctionExpression',\n      );\n      if (!baseFunction) {\n        baseFunction = getValueOfExpression(\n          context,\n          checkServerIdentityProperty.value,\n          'ArrowFunctionExpression',\n        );\n      }\n      if (baseFunction?.body.type === 'BlockStatement') {\n        const returnStatements = ReturnStatementsVisitor.getReturnStatements(\n          baseFunction.body,\n          context,\n        );\n        if (\n          returnStatements.length === 0 ||\n          returnStatements.every(r => {\n            return (\n              !r.argument || getValueOfExpression(context, r.argument, 'Literal')?.value === true\n            );\n          })\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        if (isCallToFQN(context, callExpression, 'https', 'request')) {\n          checkSensitiveArgument(callExpression, 0);\n        }\n        if (isCallToFQN(context, callExpression, 'request', 'get')) {\n          checkSensitiveArgument(callExpression, 0);\n        }\n        if (isCallToFQN(context, callExpression, 'tls', 'connect')) {\n          checkSensitiveArgument(callExpression, 2);\n        }\n      },\n    };\n  },\n};\n\nclass ReturnStatementsVisitor {\n  private readonly returnStatements: estree.ReturnStatement[] = [];\n\n  static getReturnStatements(node: estree.Node, context: Rule.RuleContext) {\n    const visitor = new ReturnStatementsVisitor();\n    visitor.visit(node, context);\n    return visitor.returnStatements;\n  }\n\n  private visit(root: estree.Node, context: Rule.RuleContext) {\n    const visitNode = (node: estree.Node) => {\n      switch (node.type) {\n        case 'ReturnStatement':\n          this.returnStatements.push(node);\n          break;\n        case 'FunctionDeclaration':\n        case 'FunctionExpression':\n        case 'ArrowFunctionExpression':\n          return;\n      }\n      childrenOf(node, context.getSourceCode().visitorKeys).forEach(visitNode);\n    };\n    visitNode(root);\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3500\n\nimport { Rule, Scope } from 'eslint';\nimport * as estree from 'estree';\nimport { toEncodedMessage } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      'VariableDeclaration[kind=\"const\"]': (node: estree.Node) => {\n        context.getDeclaredVariables(node).forEach(variable =>\n          variable.references.filter(isModifyingReference).forEach(reference =>\n            context.report({\n              message: toEncodedMessage(\n                `Correct this attempt to modify \"${reference.identifier.name}\" or use \"let\" in its declaration.`,\n                [node],\n                ['Const declaration'],\n              ),\n              node: reference.identifier,\n            }),\n          ),\n        );\n      },\n    };\n  },\n};\n\nfunction isModifyingReference(\n  reference: Scope.Reference,\n  index: number,\n  references: Scope.Reference[],\n) {\n  const identifier = reference.identifier;\n  const modifyingDifferentIdentifier =\n    index === 0 || references[index - 1].identifier !== identifier;\n  return (\n    identifier && reference.init === false && reference.isWrite() && modifyingDifferentIdentifier\n  );\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2310\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage, getVariableFromName, resolveIdentifiers, getParent } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n\n  create(context: Rule.RuleContext) {\n    function checkLoop<T>(\n      updateNode: T,\n      extractCounters: (updateNode: T, counters: estree.Identifier[]) => void,\n      loopBody: estree.Node,\n    ) {\n      const counters: estree.Identifier[] = [];\n      extractCounters(updateNode, counters);\n      counters.forEach(counter => checkCounter(counter, loopBody as estree.BlockStatement));\n    }\n\n    function checkCounter(counter: estree.Identifier, block: estree.Node) {\n      const variable = getVariableFromName(context, counter.name);\n      if (!variable) {\n        return;\n      }\n      variable.references.forEach(ref => {\n        if (ref.isWrite() && isUsedInsideBody(ref.identifier, block)) {\n          context.report({\n            node: ref.identifier,\n            message: toEncodedMessage(\n              `Remove this assignment of \"${counter.name}\".`,\n              [counter as TSESTree.Node],\n              ['Counter variable update'],\n            ),\n          });\n        }\n      });\n    }\n\n    return {\n      'ForStatement > BlockStatement': (node: estree.Node) => {\n        const forLoop = getParent(context) as estree.ForStatement;\n        if (forLoop.update) {\n          checkLoop(forLoop.update, collectCountersFor, node);\n        }\n      },\n      'ForInStatement > BlockStatement, ForOfStatement > BlockStatement': (node: estree.Node) => {\n        const { left } = getParent(context) as estree.ForOfStatement | estree.ForInStatement;\n        checkLoop(left, collectCountersForX, node);\n      },\n    };\n  },\n};\n\nfunction collectCountersForX(\n  updateExpression: estree.Pattern | estree.VariableDeclaration,\n  counters: estree.Identifier[],\n) {\n  if (updateExpression.type === 'VariableDeclaration') {\n    updateExpression.declarations.forEach(decl => collectCountersForX(decl.id, counters));\n  } else {\n    resolveIdentifiers(updateExpression as TSESTree.Node, true).forEach(id => counters.push(id));\n  }\n}\n\nfunction collectCountersFor(updateExpression: estree.Expression, counters: estree.Identifier[]) {\n  let counter: estree.Node | null | undefined = undefined;\n\n  if (updateExpression.type === 'AssignmentExpression') {\n    counter = updateExpression.left;\n  } else if (updateExpression.type === 'UpdateExpression') {\n    counter = updateExpression.argument;\n  } else if (updateExpression.type === 'SequenceExpression') {\n    updateExpression.expressions.forEach(e => collectCountersFor(e, counters));\n  }\n\n  if (counter && counter.type === 'Identifier') {\n    counters.push(counter);\n  }\n}\n\nfunction isUsedInsideBody(id: estree.Identifier, loopBody: estree.Node) {\n  const bodyRange = loopBody.range;\n  return id.range && bodyRange && id.range[0] > bodyRange[0] && id.range[1] < bodyRange[1];\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4323\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { toEncodedMessage } from '../utils';\n\nconst TYPE_THRESHOLD = 2;\nconst USAGE_THRESHOLD = 2;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    let usage: Map<string, TSESTree.Node[]>;\n    return {\n      Program: () => (usage = new Map<string, TSESTree.Node[]>()),\n      'Program:exit': () =>\n        usage.forEach(nodes => {\n          if (nodes.length > USAGE_THRESHOLD) {\n            const [node, ...rest] = nodes;\n            const kind = node.type === 'TSUnionType' ? 'union' : 'intersection';\n            const message = toEncodedMessage(\n              `Replace this ${kind} type with a type alias.`,\n              rest,\n              Array(rest.length).fill('Following occurrence.'),\n            );\n            context.report({ message, loc: node.loc });\n          }\n        }),\n      'TSUnionType, TSIntersectionType': (node: estree.Node) => {\n        const ancestors = context.getAncestors();\n        const declaration = ancestors.find(\n          ancestor => (ancestor as TSESTree.Node).type === 'TSTypeAliasDeclaration',\n        );\n        if (!declaration) {\n          const composite = node as unknown as TSESTree.TSUnionType | TSESTree.TSIntersectionType;\n          if (composite.types.length > TYPE_THRESHOLD) {\n            const text = composite.types\n              .map(typeNode => context.getSourceCode().getText(typeNode as unknown as estree.Node))\n              .sort((a, b) => a.localeCompare(b))\n              .join('|');\n            let occurrences = usage.get(text);\n            if (!occurrences) {\n              occurrences = [composite];\n              usage.set(text, occurrences);\n            } else {\n              occurrences.push(composite);\n            }\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-1154\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport { isRequiredParserServices, getTypeFromTreeNode } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      uselessStringOp:\n        '{{symbol}} is an immutable object; you must either store or return the result of the operation.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    function isString(node: estree.Node) {\n      const type = getTypeFromTreeNode(node, services);\n      return (type.flags & ts.TypeFlags.StringLike) !== 0;\n    }\n\n    function getVariable(node: estree.Node) {\n      let variable = context.getSourceCode().getText(node);\n      if (variable.length > 30) {\n        variable = 'String';\n      }\n      return variable;\n    }\n\n    return {\n      'ExpressionStatement > CallExpression[callee.type=\"MemberExpression\"]': (\n        node: estree.Node,\n      ) => {\n        const { object, property } = (node as estree.CallExpression)\n          .callee as estree.MemberExpression;\n        if (isString(object) && property.type === 'Identifier') {\n          context.report({\n            messageId: 'uselessStringOp',\n            data: {\n              symbol: getVariable(object),\n            },\n            node: property,\n          });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3758\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport * as ts from 'typescript';\nimport {\n  isRequiredParserServices,\n  RequiredParserServices,\n  getTypeFromTreeNode,\n  isStringType,\n} from '../utils';\n\nconst comparisonOperators = new Set(['>', '<', '>=', '<=']);\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      reEvaluateDataFlow:\n        'Re-evaluate the data flow; this operand of a numeric comparison could be of type {{type}}.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services: RequiredParserServices = context.parserServices;\n\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n\n    return {\n      BinaryExpression(node: estree.Node) {\n        const { left, operator, right } = node as estree.BinaryExpression;\n        if (!comparisonOperators.has(operator)) {\n          return;\n        }\n        if (left.type === 'MemberExpression' || right.type === 'MemberExpression') {\n          // avoid FPs on field access\n          return;\n        }\n        const checker = services.program.getTypeChecker();\n        const leftType = getTypeFromTreeNode(left, services);\n        const rightType = getTypeFromTreeNode(right, services);\n        if (isStringType(leftType) || isStringType(rightType)) {\n          return;\n        }\n\n        const isLeftConvertibleToNumber = isConvertibleToNumber(leftType, checker);\n        const isRightConvertibleToNumber = isConvertibleToNumber(rightType, checker);\n        if (!isLeftConvertibleToNumber) {\n          context.report({\n            messageId: 'reEvaluateDataFlow',\n            data: {\n              type: checker.typeToString(leftType),\n            },\n            node: left,\n          });\n        }\n        if (!isRightConvertibleToNumber) {\n          context.report({\n            messageId: 'reEvaluateDataFlow',\n            data: {\n              type: checker.typeToString(rightType),\n            },\n            node: right,\n          });\n        }\n      },\n    };\n  },\n};\n\nfunction isConvertibleToNumber(typ: ts.Type, checker: ts.TypeChecker) {\n  const flags = typ.getFlags();\n  if ((flags & ts.TypeFlags.BooleanLike) !== 0) {\n    return true;\n  }\n  if ((flags & ts.TypeFlags.Undefined) !== 0) {\n    return false;\n  }\n  const valueOfSignatures = getValueOfSignatures(typ, checker);\n  return (\n    valueOfSignatures.length === 0 ||\n    valueOfSignatures.some(signature => isNumberLike(signature.getReturnType()))\n  );\n}\n\nfunction getValueOfSignatures(typ: ts.Type, checker: ts.TypeChecker) {\n  const valueOfSymbol = typ.getProperty('valueOf');\n  if (!valueOfSymbol) {\n    return [];\n  }\n  const declarations = valueOfSymbol.getDeclarations() || [];\n  return declarations\n    .map(declaration => checker.getTypeAtLocation(declaration).getCallSignatures())\n    .reduce((result, decl) => result.concat(decl), []);\n}\n\nfunction isNumberLike(typ: ts.Type) {\n  return (typ.getFlags() & ts.TypeFlags.NumberLike) !== 0;\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-117\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { resolveIdentifiers } from '../utils';\n\ninterface FunctionLike {\n  declare?: boolean;\n  params: TSESTree.Parameter[];\n}\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      renameSymbol: `Rename this {{symbolType}} \"{{symbol}}\" to match the regular expression {{format}}.`,\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      VariableDeclaration: (node: estree.Node) =>\n        checkVariable(node as TSESTree.VariableDeclaration, context),\n      'FunctionDeclaration, FunctionExpression, ArrowFunctionExpression, TSDeclareFunction, TSMethodSignature, TSConstructSignatureDeclaration, TSEmptyBodyFunctionExpression':\n        (node: estree.Node) => checkFunction(node as FunctionLike, context),\n      PropertyDefinition: (node: estree.Node) =>\n        checkProperty(node as unknown as TSESTree.PropertyDefinition, context),\n      CatchClause: (node: estree.Node) => checkCatch(node as TSESTree.CatchClause, context),\n    };\n  },\n};\n\nfunction checkVariable(decl: TSESTree.VariableDeclaration, context: Rule.RuleContext) {\n  if (decl.declare) {\n    return;\n  }\n  decl.declarations.forEach(declaration =>\n    resolveIdentifiers(declaration.id).forEach(id =>\n      raiseOnInvalidIdentifier(id, 'local variable', context),\n    ),\n  );\n}\n\nfunction checkFunction(func: FunctionLike, context: Rule.RuleContext) {\n  if (func.declare) {\n    return;\n  }\n  func.params.forEach(param =>\n    resolveIdentifiers(param).forEach(id => raiseOnInvalidIdentifier(id, 'parameter', context)),\n  );\n}\n\nfunction checkProperty(prop: TSESTree.PropertyDefinition, context: Rule.RuleContext) {\n  if (prop.key.type === 'Identifier') {\n    raiseOnInvalidIdentifier(prop.key, 'property', context);\n  }\n}\n\nfunction checkCatch(catchh: TSESTree.CatchClause, context: Rule.RuleContext) {\n  if (catchh.param) {\n    resolveIdentifiers(catchh.param).forEach(id =>\n      raiseOnInvalidIdentifier(id, 'parameter', context),\n    );\n  }\n}\n\nfunction raiseOnInvalidIdentifier(\n  id: TSESTree.Identifier,\n  idType: string,\n  context: Rule.RuleContext,\n) {\n  const [{ format }] = context.options;\n  const { name } = id;\n  if (!name.match(format)) {\n    context.report({\n      messageId: 'renameSymbol',\n      data: {\n        symbol: name,\n        symbolType: idType,\n        format,\n      },\n      node: id,\n    });\n  }\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-3735\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isRequiredParserServices, isThenable } from '../utils';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      removeVoid: 'Remove this use of the \"void\" operator.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    function checkNode(node: estree.Node) {\n      const unaryExpression: estree.UnaryExpression = node as estree.UnaryExpression;\n      if (isVoid0(unaryExpression) || isIIFE(unaryExpression) || isPromiseLike(unaryExpression)) {\n        return;\n      }\n      const operatorToken = context.getSourceCode().getTokenBefore(unaryExpression.argument);\n      context.report({\n        loc: operatorToken!.loc, // cannot be null due to previous checks\n        messageId: 'removeVoid',\n      });\n    }\n\n    function isVoid0(expr: estree.UnaryExpression) {\n      return expr.argument.type === 'Literal' && 0 === expr.argument.value;\n    }\n\n    function isIIFE(expr: estree.UnaryExpression) {\n      return (\n        expr.argument.type === 'CallExpression' &&\n        ['ArrowFunctionExpression', 'FunctionExpression'].includes(expr.argument.callee.type)\n      );\n    }\n\n    function isPromiseLike(expr: estree.UnaryExpression) {\n      return isRequiredParserServices(services) && isThenable(expr.argument, services);\n    }\n\n    return {\n      'UnaryExpression[operator=\"void\"]': checkNode,\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4423\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  getModuleNameOfNode,\n  isCallToFQN,\n  getObjectExpressionProperty,\n  getValueOfExpression,\n} from '../utils';\n\nconst SECURE_PROTOCOL_ALLOWED_VALUES = [\n  'TLSv1_2_method',\n  'TLSv1_2_client_method',\n  'TLSv1_2_server_method',\n  'TLS_method',\n  'TLS_client_method',\n  'TLS_server_method',\n];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      useMinimumTLS: \"Change '{{option}}' to use at least TLS v1.2.\",\n      useSecureTLS: \"Change '{{option}}' to allow only secure TLS versions.\",\n    },\n  },\n  create(context: Rule.RuleContext) {\n    function getValueOfProperty(\n      objectExpression: estree.ObjectExpression | undefined,\n      propertyName: string,\n    ) {\n      const unsafeProperty = getObjectExpressionProperty(objectExpression, propertyName);\n      if (unsafeProperty) {\n        return getValueOfExpression(context, unsafeProperty.value, 'Literal');\n      }\n      return undefined;\n    }\n\n    function checkMinMaxVersion(propertyName: string, property: estree.Literal | undefined) {\n      if (property && (property.value === 'TLSv1.1' || property.value === 'TLSv1')) {\n        context.report({\n          node: property,\n          messageId: 'useMinimumTLS',\n          data: {\n            option: propertyName,\n          },\n        });\n      }\n    }\n\n    function checkSslOptions(optionsNode: estree.Node | undefined) {\n      const options = getValueOfExpression(context, optionsNode, 'ObjectExpression');\n      const minVersion = getValueOfProperty(options, 'minVersion');\n      const maxVersion = getValueOfProperty(options, 'maxVersion');\n      checkMinMaxVersion('minVersion', minVersion);\n      checkMinMaxVersion('maxVersion', maxVersion);\n\n      const secureProtocol = getValueOfProperty(options, 'secureProtocol');\n      const secureProtocolValue = secureProtocol?.value?.toString() ?? '';\n      if (secureProtocol && !SECURE_PROTOCOL_ALLOWED_VALUES.includes(secureProtocolValue)) {\n        context.report({\n          node: secureProtocol,\n          messageId: 'useMinimumTLS',\n          data: {\n            option: 'secureProtocol',\n          },\n        });\n      }\n\n      const secureOptions = getObjectExpressionProperty(options, 'secureOptions');\n      if (secureOptions && !isValidSecureOptions(secureOptions.value)) {\n        context.report({\n          node: secureOptions,\n          messageId: 'useSecureTLS',\n          data: {\n            option: 'secureOptions',\n          },\n        });\n      }\n    }\n\n    function isValidSecureOptions(options: estree.Node) {\n      const flags: string[] = [];\n      collectIdentifiersFromBinary(options, flags);\n      return (\n        flags[0] === null ||\n        (flags.includes('SSL_OP_NO_TLSv1') && flags.includes('SSL_OP_NO_TLSv1_1'))\n      );\n    }\n\n    function collectIdentifiersFromBinary(node: estree.Node, acc: (string | null)[]) {\n      if (node.type === 'BinaryExpression') {\n        collectIdentifiersFromBinary(node.left, acc);\n        collectIdentifiersFromBinary(node.right, acc);\n      } else if (\n        node.type === 'MemberExpression' &&\n        getModuleNameOfNode(context, node.object)?.value === 'constants' &&\n        node.property.type === 'Identifier'\n      ) {\n        acc.push(node.property.name);\n      } else {\n        // if part of expression is some complex node like function call, we set null on index 0\n        acc[0] = null;\n      }\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        // https://nodejs.org/api/https.html#https_https_get_options_callback\n        if (isCallToFQN(context, callExpression, 'https', 'request')) {\n          checkSslOptions(callExpression.arguments[0]);\n          checkSslOptions(callExpression.arguments[1]);\n        }\n        // https://github.com/request/request#tlsssl-protocol\n        if (isCallToFQN(context, callExpression, 'request', 'get')) {\n          checkSslOptions(callExpression.arguments[0]);\n        }\n        // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n        if (isCallToFQN(context, callExpression, 'tls', 'connect')) {\n          checkSslOptions(callExpression.arguments[0]);\n          checkSslOptions(callExpression.arguments[1]);\n          checkSslOptions(callExpression.arguments[2]);\n        }\n        // https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options\n        if (isCallToFQN(context, callExpression, 'tls', 'createSecureContext')) {\n          checkSslOptions(callExpression.arguments[0]);\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2817\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isIdentifier,\n  isRequiredParserServices,\n  getSymbolAtLocation,\n  getTypeAsString,\n} from '../utils';\n\nconst OPEN_DATABASE = 'openDatabase';\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      convertWebSQLUse: 'Convert this use of a Web SQL database to another technology.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    const services = context.parserServices;\n    if (!isRequiredParserServices(services)) {\n      return {};\n    }\n    return {\n      CallExpression: (node: estree.Node) => {\n        const callExpression = node as estree.CallExpression;\n        const { callee } = callExpression;\n        const symbol = getSymbolAtLocation(callee, services);\n        if (!!symbol) {\n          return;\n        }\n        if (isIdentifier(callee, OPEN_DATABASE)) {\n          context.report({ node: callee, messageId: 'convertWebSQLUse' });\n        }\n        if (callee.type !== 'MemberExpression' || !isIdentifier(callee.property, OPEN_DATABASE)) {\n          return;\n        }\n        const typeName = getTypeAsString(callee.object, services);\n        if (typeName.match(/window/i) || typeName.match(/globalThis/i)) {\n          context.report({ node: callee, messageId: 'convertWebSQLUse' });\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-5689\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport { isMethodInvocation, getModuleNameOfNode } from '../utils';\nimport { Express } from './utils-express';\n\nconst HELMET = 'helmet';\nconst HIDE_POWERED_BY = 'hide-powered-by';\nconst HEADER_X_POWERED_BY = 'X-Powered-By'.toLowerCase();\nconst PROTECTING_MIDDLEWARES = [HELMET, HIDE_POWERED_BY];\n/** Expected number of arguments in `app.set`. */\nconst APP_SET_NUM_ARGS = 2;\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      disclosingFingerprinting:\n        'Make sure disclosing the fingerprinting of this web technology is safe here.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    let appInstantiation: estree.Identifier | null = null;\n    let isSafe = false;\n    return {\n      Program() {\n        appInstantiation = null;\n        isSafe = false;\n      },\n      CallExpression: (node: estree.Node) => {\n        if (!isSafe && appInstantiation) {\n          const callExpr = node as estree.CallExpression;\n          isSafe =\n            Express.isUsingMiddleware(context, callExpr, appInstantiation, isProtecting(context)) ||\n            isDisabledXPoweredBy(callExpr, appInstantiation) ||\n            isSetFalseXPoweredBy(callExpr, appInstantiation) ||\n            isAppEscaping(callExpr, appInstantiation);\n        }\n      },\n      VariableDeclarator: (node: estree.Node) => {\n        if (!isSafe && !appInstantiation) {\n          const varDecl = node as estree.VariableDeclarator;\n          const app = Express.attemptFindAppInstantiation(varDecl, context);\n          if (app) {\n            appInstantiation = app;\n          }\n        }\n      },\n      ReturnStatement: (node: estree.Node) => {\n        if (!isSafe && appInstantiation) {\n          const ret = node as estree.ReturnStatement;\n          isSafe = isAppEscapingThroughReturn(ret, appInstantiation);\n        }\n      },\n      'Program:exit'() {\n        if (!isSafe && appInstantiation) {\n          context.report({\n            node: appInstantiation,\n            messageId: 'disclosingFingerprinting',\n          });\n        }\n      },\n    };\n  },\n};\n\n/**\n * Checks whether node looks like `helmet.hidePoweredBy()`.\n */\nfunction isHidePoweredByFromHelmet(context: Rule.RuleContext, n: estree.Node): boolean {\n  if (n.type === 'CallExpression') {\n    const callee = n.callee;\n    return (\n      callee.type === 'MemberExpression' &&\n      getModuleNameOfNode(context, callee.object)?.value === HELMET &&\n      callee.property.type === 'Identifier' &&\n      callee.property.name === 'hidePoweredBy'\n    );\n  }\n  return false;\n}\n\nfunction isProtecting(context: Rule.RuleContext): (n: estree.Node) => boolean {\n  return (n: estree.Node) =>\n    Express.isMiddlewareInstance(context, PROTECTING_MIDDLEWARES, n) ||\n    isHidePoweredByFromHelmet(context, n);\n}\n\nfunction isDisabledXPoweredBy(\n  callExpression: estree.CallExpression,\n  app: estree.Identifier,\n): boolean {\n  if (isMethodInvocation(callExpression, app.name, 'disable', 1)) {\n    const arg0 = callExpression.arguments[0];\n    return arg0.type === 'Literal' && String(arg0.value).toLowerCase() === HEADER_X_POWERED_BY;\n  }\n  return false;\n}\n\nfunction isSetFalseXPoweredBy(\n  callExpression: estree.CallExpression,\n  app: estree.Identifier,\n): boolean {\n  if (isMethodInvocation(callExpression, app.name, 'set', APP_SET_NUM_ARGS)) {\n    const [headerName, onOff] = callExpression.arguments;\n    return (\n      headerName.type === 'Literal' &&\n      String(headerName.value).toLowerCase() === HEADER_X_POWERED_BY &&\n      onOff.type === 'Literal' &&\n      onOff.value === false\n    );\n  }\n  return false;\n}\n\nfunction isAppEscaping(callExpr: estree.CallExpression, app: estree.Identifier): boolean {\n  return Boolean(\n    callExpr.arguments.find(arg => arg.type === 'Identifier' && arg.name === app.name),\n  );\n}\n\nfunction isAppEscapingThroughReturn(ret: estree.ReturnStatement, app: estree.Identifier): boolean {\n  const arg = ret.argument;\n  return Boolean(arg && arg.type === 'Identifier' && arg.name === app.name);\n}\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-2755\n\nimport { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\nimport { toEncodedMessage } from '../utils';\nimport * as estree from 'estree';\nimport { getImportDeclarations, getRequireCalls, getObjectExpressionProperty } from '../utils';\n\nconst XML_LIBRARY = 'libxmljs';\nconst XML_PARSERS = ['parseXml', 'parseXmlString'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    schema: [\n      {\n        // internal parameter for rules having secondary locations\n        enum: ['sonar-runtime'],\n      },\n    ],\n  },\n  create(context: Rule.RuleContext) {\n    function isXmlParserCall(call: estree.CallExpression) {\n      return (\n        ((call.callee.type === 'Identifier' && XML_PARSERS.includes(call.callee.name)) ||\n          (call.callee.type === 'MemberExpression' &&\n            call.callee.property.type === 'Identifier' &&\n            XML_PARSERS.includes(call.callee.property.name))) &&\n        call.arguments.length > 1\n      );\n    }\n\n    function isXmlLibraryInScope() {\n      return isXmlLibraryImported() || isXmlLibraryRequired();\n    }\n\n    function isXmlLibraryImported() {\n      return getImportDeclarations(context).findIndex(i => i.source.value === XML_LIBRARY) > -1;\n    }\n\n    function isXmlLibraryRequired() {\n      return (\n        getRequireCalls(context).findIndex(\n          r => r.arguments[0].type === 'Literal' && r.arguments[0].value === XML_LIBRARY,\n        ) > -1\n      );\n    }\n\n    function isNoEntSet(property: estree.Property) {\n      return property.value.type === 'Literal' && property.value.raw === 'true';\n    }\n\n    return {\n      CallExpression: (node: estree.Node) => {\n        const call = node as estree.CallExpression;\n        if (isXmlParserCall(call) && isXmlLibraryInScope()) {\n          const noent = getObjectExpressionProperty(call.arguments[1], 'noent');\n          if (noent && isNoEntSet(noent)) {\n            context.report({\n              message: toEncodedMessage('Disable access to external entities in XML parsing.', [\n                call.callee as TSESTree.Node,\n              ]),\n              node: noent,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n","/*\n * SonarQube JavaScript Plugin\n * Copyright (C) 2011-2022 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// https://jira.sonarsource.com/browse/RSPEC-4817\n\nimport { Rule } from 'eslint';\nimport * as estree from 'estree';\nimport {\n  isMemberExpression,\n  isMemberWithProperty,\n  isLiteral,\n  getModuleAndCalledMethod,\n} from '../utils';\n\nconst xpathModule = 'xpath';\n\nconst xpathEvalMethods = ['select', 'select1', 'evaluate'];\nconst ieEvalMethods = ['selectNodes', 'SelectSingleNode'];\n\nexport const rule: Rule.RuleModule = {\n  meta: {\n    messages: {\n      checkXPath: 'Make sure that executing this XPATH expression is safe.',\n    },\n  },\n  create(context: Rule.RuleContext) {\n    return {\n      MemberExpression: (node: estree.Node) => {\n        if (isMemberExpression(node, 'document', 'evaluate')) {\n          context.report({ messageId: 'checkXPath', node });\n        }\n      },\n      CallExpression: (node: estree.Node) =>\n        checkCallExpression(node as estree.CallExpression, context),\n    };\n  },\n};\n\nfunction checkCallExpression(\n  { callee, arguments: args }: estree.CallExpression,\n  context: Rule.RuleContext,\n) {\n  if (args.length > 0 && isLiteral(args[0])) {\n    return;\n  }\n\n  // IE\n  if (isMemberWithProperty(callee, ...ieEvalMethods) && args.length === 1) {\n    context.report({ messageId: 'checkXPath', node: callee });\n    return;\n  }\n\n  // Document.evaluate\n  if (\n    isMemberWithProperty(callee, 'evaluate') &&\n    !isMemberExpression(callee, 'document', 'evaluate') &&\n    args.length >= 4\n  ) {\n    const resultTypeArgument = args[3];\n    const argumentAsText = context.getSourceCode().getText(resultTypeArgument);\n    if (argumentAsText.includes('XPathResult')) {\n      context.report({ messageId: 'checkXPath', node: callee });\n      return;\n    }\n  }\n\n  // \"xpath\" module\n  const { module, method } = getModuleAndCalledMethod(callee, context);\n  if (\n    method &&\n    module &&\n    module.value === xpathModule &&\n    method.type === 'Identifier' &&\n    xpathEvalMethods.includes(method.name)\n  ) {\n    context.report({ messageId: 'checkXPath', node: callee });\n  }\n}\n","export const camelCase = (value: string) =>\n  value.replace(/-[a-z]/g, matched => matched[1].toUpperCase())\n\nexport const kebabCase = (value: string) =>\n  value.replace(/[A-Z]/g, matched => '-' + matched.toLowerCase())\n\nexport const normalizeModules = <T>(modules: Record<string, T>) =>\n  Object.entries(modules).reduce<Record<string, T>>(\n    (acc, [name, module]) =>\n      Object.assign(acc, {\n        [kebabCase(name)]: module,\n      }),\n    {},\n  )\n","import * as _configs from './configs'\nimport * as _rules from './rules'\nimport { normalizeModules } from './utils'\n\nexport * from './rules'\nexport * from './utils'\n\nexport const configs = normalizeModules(_configs)\nexport const rules = normalizeModules(_rules)\n"],"names":["functionLike","isMemberWithProperty","isLiteral","toEncodedMessage","last","toSecondaryLocation","isRequire","getTypeFromTreeNode","isString","ts","isNumber","isStringType","isFunction","isAny","childrenOf","rule","isIdentifier","MESSAGE","message","reportIssue","HELMET","checkCallExpression","FORMIDABLE_MODULE","MULTER_MODULE","formidableObjects","visitAssignment","report","checkFormidable","checkMulter","CONTENT_SECURITY_POLICY","path","HELMET_CSP","DIRECTIVES","isValidHelmetModuleCall","isNullLike","isUnion","isHardcodedLiteral","raiseIssue","getMessageAndData","equals","peek","CodePathContext","AssignmentContext","getSuggestions","isUsedInsideBody","isConcatenation","tsTypes","isUndefined","isQuestionable","rules"],"mappings":"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"}