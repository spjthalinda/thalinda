{
  "manifest": {
    "name": "remark-message-control",
    "version": "7.1.1",
    "description": "remark plugin to enable, disable, and ignore messages with remark",
    "license": "MIT",
    "keywords": [
      "unified",
      "remark",
      "remark-plugin",
      "plugin",
      "mdast",
      "markdown",
      "comment",
      "message",
      "marker",
      "control"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/remarkjs/remark-message-control.git"
    },
    "bugs": {
      "url": "https://github.com/remarkjs/remark-message-control/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "Christian Murphy",
        "email": "christian.murphy.42@gmail.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/mdast": "^3.0.0",
      "mdast-comment-marker": "^2.0.0",
      "unified": "^10.0.0",
      "unified-message-control": "^4.0.0",
      "vfile": "^5.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "prettier": "^2.0.0",
      "remark": "^14.0.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "remark-toc": "^8.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.46.0"
    },
    "scripts": {
      "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --conditions development test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-remark-message-control-7.1.1-71e9b757b835fad2ac14fafa8b432f51b9b9bf52-integrity/node_modules/remark-message-control/package.json",
    "readmeFilename": "readme.md",
    "readme": "<!--lint disable no-html-->\n\n# remark-message-control\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[remark][]** plugin to enable, disable, and ignore messages.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`unified().use(remarkMessageControl, options)`](#unifieduseremarkmessagecontrol-options)\n*   [Syntax](#syntax)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [unified][] ([remark][]) plugin that lets authors write\ncomments in markdown to show and hide messages.\n\n**unified** is a project that transforms content with abstract syntax trees\n(ASTs).\n**remark** adds support for markdown to unified.\n**mdast** is the markdown AST that remark uses.\nremark plugins can inspect the tree and emit warnings and other messages.\nThis is a remark plugin that gives authors the ability to configure those\nmessages from markdown.\n\n## When should I use this?\n\nYou can use this package when you’re building a linter such as\n[`remark-lint`][remark-lint].\nBut you probably don’t need to, because `remark-lint` already exists and it uses\nthis package.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install remark-message-control\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport remarkMessageControl from 'https://cdn.skypack.dev/remark-message-control@7?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import remarkMessageControl from 'https://cdn.skypack.dev/remark-message-control@7?min'\n</script>\n```\n\n## Use\n\nSay we have the following file `example.md`:\n\n```markdown\n<!--foo ignore-->\n\n## Heading\n```\n\nAnd our module `example.js` looks as follows:\n\n```js\nimport {read} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport {remark} from 'remark'\nimport remarkMessageControl from 'remark-message-control'\n\nmain()\n\nasync function main() {\n  const file = await remark()\n    .use(() => (tree, file) => {\n      file.message('Whoops!', tree.children[1], 'foo:thing')\n    })\n    .use(remarkMessageControl, {name: 'foo'})\n    .process(await read('example.md'))\n\n  console.error(reporter(file))\n}\n```\n\nNow running `node example.js` yields:\n\n```markdown\nexample.md: no issues found\n```\n\n## API\n\nThis package exports no identifiers.\nThe default export is `remarkMessageControl`.\n\n### `unified().use(remarkMessageControl, options)`\n\nPlugin to enable, disable, and ignore messages.\n\n##### `options`\n\nConfiguration (required).\n\n###### `options.name`\n\nName of markers that can control the message sources (`string`).\n\nFor example, `{name: 'alpha'}` controls `alpha` markers:\n\n```markdown\n<!--alpha ignore-->\n```\n\n###### `options.known`\n\nList of allowed `ruleId`s (`Array<string>`, optional).\nWhen given, a warning is shown when someone tries to control an unknown rule.\n\nFor example, `{name: 'alpha', known: ['bravo']}` results in a warning if\n`charlie` is configured:\n\n```markdown\n<!--alpha ignore charlie-->\n```\n\n###### `options.reset`\n\nWhether to treat all messages as turned off initially (`boolean`, default:\n`false`).\n\n###### `options.enable`\n\nList of `ruleId`s to initially turn on if `reset: true` (`Array<string>`,\noptional).\nAll rules are turned on by default (`reset: false`).\n\n###### `options.disable`\n\nList of `ruleId`s to turn on if `reset: false` (`Array<string>`, optional).\n\n###### `options.sources`\n\nSources that can be controlled with `name` markers (`string` or\n`Array<string>`, default: `options.name`).\n\n<!--Old name of section-->\n\n<a name=\"markers\"></a>\n\n## Syntax\n\nThis plugin looks for comments in markdown (MDX is also supported).\nIf the first word in those comments does not match `options.name`, the comment\nis skipped.\nThe second word is expected to be `disable`, `enable`, or `ignore`.\nFurther words are rule identifiers of messages which are configurated.\n\nIn EBNF, the grammar looks as follows:\n\n<pre><code class=language-ebnf><a id=s-marker href=#s-marker>marker</a> ::= <a href=#s-identifier>identifier</a> <a href=#s-whitespace>whitespace</a>+ <a href=#s-keyword>keyword</a> <a href=#s-ruleidentifiers>ruleIdentifiers</a>?\n<a id=s-identifier href=#s-identifier>identifier</a> ::= <a href=#s-word>word</a>+ /* restriction: must match `options.name` */\n<a id=s-keyword href=#s-keyword>keyword</a> ::= 'enable' | 'disable' | 'ignore'\n<a id=s-ruleidentifiers href=#s-ruleidentifiers>ruleIdentifiers</a> ::= <a href=#s-word>word</a>+ (<a href=#s-whitespace>whitespace</a>+ <a href=#s-word>word</a>+)*\n<a id=s-whitespace href=#s-whitespace>whitespace</a> ::= ' ' | '\\t' | '\\r' | '\\n' | '\\f'\n<a id=s-word href=#s-word>word</a> ::= <a href=#s-letter>letter</a> | <a href=#s-digit>digit</a> | <a href=#s-punctuation>punctuation</a>\n<a id=s-letter href=#s-letter>letter</a> ::= <a href=#s-letterlowercase>letterLowercase</a> | <a href=#s-letteruppercase>letterUppercase</a>\n<a id=s-punctuation href=#s-punctuation>punctuation</a> ::= '-' | '_'\n<a id=s-letterlowercase href=#s-letterlowercase>letterLowercase</a> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\n<a id=s-letteruppercase href=#s-letteruppercase>letterUppercase</a> ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\n<a id=s-digit href=#s-digit>digit</a> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\n</code></pre>\n\nWhich keyword is used defines how messages with those rule identifiers are\nhandled:\n\n###### `disable`\n\nThe **disable** keyword turns off all messages of the given rule identifiers.\nWhen without identifiers, all messages are turned off.\n\nFor example, to turn off certain messages:\n\n```markdown\n<!--lint disable list-item-bullet-indent strong-marker-->\n\n*   **foo**\n\nA paragraph, and now another list.\n\n  * __bar__\n```\n\n###### `enable`\n\nThe **enable** keyword turns on all messages of the given rule identifiers.\nWhen without identifiers, all messages are turned on.\n\nFor example, to enable certain messages:\n\n```markdown\n<!--lint enable strong-marker-->\n\n**foo** and __bar__.\n```\n\n###### `ignore`\n\nThe **ignore** keyword turns off all messages of the given `ruleId`s occurring\nin the following node.\nWhen without `ruleId`s, all messages are ignored.\n\nMessages are turned on again after the end of the following node.\n\nFor example, to turn off certain messages for the next node:\n\n```markdown\n<!--lint ignore list-item-bullet-indent strong-marker-->\n\n*   **foo**\n  * __bar__\n```\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nAn extra `Options` type is exported which models the interface of the accepted\noptions.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\nThis plugin works with `unified` version 6+ and `remark` version 7+.\n\n## Security\n\nUse of `remark-message-control` does not involve **[rehype][]** (**[hast][]**)\nor user content so there are no openings for [cross-site scripting (XSS)][xss]\nattacks.\nMessages may be hidden from user content though, causing builds to fail or pass,\nor changing a report.\n\n## Related\n\n*   [`remark-lint`][remark-lint]\n    — plugin to lint code style\n*   [`mdast-comment-marker`](https://github.com/syntax-tree/mdast-comment-marker)\n    — mdast utility to parse comment markers\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/remarkjs/remark-message-control/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/remark-message-control/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark-message-control.svg\n\n[coverage]: https://codecov.io/github/remarkjs/remark-message-control\n\n[downloads-badge]: https://img.shields.io/npm/dm/remark-message-control.svg\n\n[downloads]: https://www.npmjs.com/package/remark-message-control\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/remark-message-control.svg\n\n[size]: https://bundlephobia.com/result?p=remark-message-control\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[remark]: https://github.com/remarkjs/remark\n\n[unified]: https://github.com/unifiedjs/unified\n\n[typescript]: https://www.typescriptlang.org\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[hast]: https://github.com/syntax-tree/hast\n\n[remark-lint]: https://github.com/remarkjs/remark-lint\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/remark-message-control/-/remark-message-control-7.1.1.tgz#71e9b757b835fad2ac14fafa8b432f51b9b9bf52",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/remark-message-control/-/remark-message-control-7.1.1.tgz",
    "hash": "71e9b757b835fad2ac14fafa8b432f51b9b9bf52",
    "integrity": "sha512-xKRWl1NTBOKed0oEtCd8BUfH5m4s8WXxFFSoo7uUwx6GW/qdCy4zov5LfPyw7emantDmhfWn5PdIZgcbVcWMDQ==",
    "registry": "npm",
    "packageName": "remark-message-control",
    "cacheIntegrity": "sha512-xKRWl1NTBOKed0oEtCd8BUfH5m4s8WXxFFSoo7uUwx6GW/qdCy4zov5LfPyw7emantDmhfWn5PdIZgcbVcWMDQ== sha1-cem3V7g1+tKsFPr6i0MvUbm5v1I="
  },
  "registry": "npm",
  "hash": "71e9b757b835fad2ac14fafa8b432f51b9b9bf52"
}