{
  "manifest": {
    "name": "unist-util-visit-parents",
    "version": "5.1.0",
    "description": "unist utility to recursively walk over nodes, with ancestral information",
    "license": "MIT",
    "keywords": [
      "unist",
      "unist-util",
      "util",
      "utility",
      "tree",
      "ast",
      "visit",
      "traverse",
      "walk",
      "check",
      "parent",
      "parents"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/unist-util-visit-parents.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/unist-util-visit-parents/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "browser": {
      "./color.js": "./color.browser.js"
    },
    "react-native": {
      "./color.js": "./color.browser.js"
    },
    "types": "index.d.ts",
    "files": [
      "color.d.ts",
      "color.js",
      "color.browser.d.ts",
      "color.browser.js",
      "complex-types.d.ts",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/unist": "^2.0.0",
      "unist-util-is": "^5.0.0"
    },
    "devDependencies": {
      "@types/hast": "^2.0.0",
      "@types/mdast": "^3.0.0",
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "prettier": "^2.0.0",
      "remark": "^14.0.0",
      "remark-cli": "^10.0.0",
      "remark-gfm": "^2.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "strip-ansi": "^7.0.0",
      "tape": "^5.0.0",
      "tsd": "^0.17.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.44.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{color,color.browser,index,test}.d.ts\" && tsc && tsd && type-coverage",
      "format": "remark . -qfo && prettier . --write --loglevel warn && xo --fix",
      "test-api": "node test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "#": "needed `any`s",
      "ignoreFiles": [
        "complex-types.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-unist-util-visit-parents-5.1.0-44bbc5d25f2411e7dfc5cecff12de43296aa8521-integrity/node_modules/unist-util-visit-parents/package.json",
    "readmeFilename": "readme.md",
    "readme": "# unist-util-visit-parents\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**unist**][unist] utility to visit nodes, with ancestral information.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install unist-util-visit-parents\n```\n\n## Use\n\n```js\nimport {visitParents} from 'unist-util-visit-parents'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\nconst tree = fromMarkdown('Some _emphasis_, **importance**, and `code`.')\n\nvisitParents(tree, 'strong', (node, ancestors) => {\n  console.log(node.type, ancestors)\n})\n```\n\nYields:\n\n```js\nstrong\n[\n  {\n    type: 'root',\n    children: [[Object]],\n    position: {start: [Object], end: [Object]}\n  },\n  {\n    type: 'paragraph',\n    children: [\n      [Object],\n      [Object],\n      [Object],\n      [Object],\n      [Object],\n      [Object],\n      [Object]\n    ],\n    position: {start: [Object], end: [Object]}\n  }\n]\n```\n\n## API\n\nThis package exports the following identifiers: `visitParents`, `SKIP`,\n`CONTINUE`, and `EXIT`.\nThere is no default export.\n\n### `visitParents(tree[, test], visitor[, reverse])`\n\nVisit nodes ([*inclusive descendants*][descendant] of [`tree`][tree]), with\nancestral information.\nOptionally filtering nodes.\nOptionally in reverse.\n\nThis algorithm performs [*depth-first*][depth-first]\n[*tree traversal*][tree-traversal] in [*preorder*][preorder] (**NLR**), or\nif `reverse` is given, in *reverse preorder* (**NRL**).\n\nWalking the tree is an intensive task.\nMake use of the return values of the visitor when possible.\nInstead of walking a tree multiple times with different `test`s, walk it once\nwithout a test, and use [`unist-util-is`][is] to check if a node matches a test,\nand then perform different operations.\n\n###### Parameters\n\n*   `tree` ([`Node`][node]) — [Tree][] to traverse\n*   `test` ([`Test`][is], optional) — [`is`][is]-compatible test (such as a\n    [type][])\n*   `visitor` ([Function][visitor]) — Function invoked when a node is found\n    that passes `test`\n*   `reverse` (`boolean`, default: `false`) — The tree is traversed in\n    [preorder][] (NLR), visiting the node itself, then its [head][], etc.\n    When `reverse` is passed, the tree is traversed in reverse preorder (NRL):\n    the node itself is visited, then its [tail][], etc.\n\n#### `next? = visitor(node, ancestors)`\n\nInvoked when a node (matching `test`, if given) is found.\n\nVisitors are free to transform `node`.\nThey can also transform the [parent][] of node (the last of `ancestors`).\nReplacing `node` itself, if `SKIP` is not returned, still causes its\n[descendant][]s to be visited.\nIf adding or removing previous [sibling][]s (or next siblings, in case of\n`reverse`) of `node`, `visitor` should return a new [`index`][index] (`number`)\nto specify the sibling to traverse after `node` is traversed.\nAdding or removing next siblings of `node` (or previous siblings, in case of\nreverse) is handled as expected without needing to return a new `index`.\nRemoving the `children` property of an ancestor still results in them being\ntraversed.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Found node\n*   `ancestors` (`Array.<Node>`) — [Ancestor][]s of `node`\n\n##### Returns\n\nThe return value can have the following forms:\n\n*   [`index`][index] (`number`) — Treated as a tuple of `[CONTINUE, index]`\n*   `action` (`*`) — Treated as a tuple of `[action]`\n*   `tuple` (`Array.<*>`) — List with one or two values, the first an `action`,\n    the second and `index`.\n    Note that passing a tuple only makes sense if the `action` is `SKIP`.\n    If the `action` is `EXIT`, that action can be returned.\n    If the `action` is `CONTINUE`, `index` can be returned.\n\n###### `action`\n\nAn action can have the following values:\n\n*   `EXIT` (`false`) — Stop traversing immediately\n*   `CONTINUE` (`true`) — Continue traversing as normal (same behaviour\n    as not returning anything)\n*   `SKIP` (`'skip'`) — Do not traverse this node’s children; continue\n    with the specified index\n\n###### `index`\n\n[`index`][index] (`number`) — Move to the sibling at `index` next (after `node`\nitself is completely traversed).\nUseful if mutating the tree, such as removing the node the visitor is currently\non, or any of its previous siblings (or next siblings, in case of `reverse`)\nResults less than `0` or greater than or equal to `children.length` stop\ntraversing the parent\n\n## Related\n\n*   [`unist-util-visit`](https://github.com/syntax-tree/unist-util-visit)\n    — Like `visit-parents`, but with one parent\n*   [`unist-util-filter`](https://github.com/syntax-tree/unist-util-filter)\n    — Create a new tree with all nodes that pass a test\n*   [`unist-util-map`](https://github.com/syntax-tree/unist-util-map)\n    — Create a new tree with all nodes mapped by a given function\n*   [`unist-util-flatmap`](https://gitlab.com/staltz/unist-util-flatmap)\n    — Create a new tree by mapping (to an array) with the given function\n*   [`unist-util-remove`](https://github.com/syntax-tree/unist-util-remove)\n    — Remove nodes from a tree that pass a test\n*   [`unist-util-select`](https://github.com/syntax-tree/unist-util-select)\n    — Select nodes with CSS-like selectors\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definition -->\n\n[build-badge]: https://github.com/syntax-tree/unist-util-visit-parents/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/unist-util-visit-parents/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-visit-parents.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/unist-util-visit-parents\n\n[downloads-badge]: https://img.shields.io/npm/dm/unist-util-visit-parents.svg\n\n[downloads]: https://www.npmjs.com/package/unist-util-visit-parents\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unist-util-visit-parents.svg\n\n[size]: https://bundlephobia.com/result?p=unist-util-visit-parents\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[unist]: https://github.com/syntax-tree/unist\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[visitor]: #next--visitornode-ancestors\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[is]: https://github.com/syntax-tree/unist-util-is\n\n[depth-first]: https://github.com/syntax-tree/unist#depth-first-traversal\n\n[tree-traversal]: https://github.com/syntax-tree/unist#tree-traversal\n\n[preorder]: https://github.com/syntax-tree/unist#preorder\n\n[descendant]: https://github.com/syntax-tree/unist#descendant\n\n[head]: https://github.com/syntax-tree/unist#head\n\n[tail]: https://github.com/syntax-tree/unist#tail\n\n[parent]: https://github.com/syntax-tree/unist#parent-1\n\n[sibling]: https://github.com/syntax-tree/unist#sibling\n\n[index]: https://github.com/syntax-tree/unist#index\n\n[ancestor]: https://github.com/syntax-tree/unist#ancestor\n\n[tree]: https://github.com/syntax-tree/unist#tree\n\n[type]: https://github.com/syntax-tree/unist#type\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-5.1.0.tgz#44bbc5d25f2411e7dfc5cecff12de43296aa8521",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-5.1.0.tgz",
    "hash": "44bbc5d25f2411e7dfc5cecff12de43296aa8521",
    "integrity": "sha512-y+QVLcY5eR/YVpqDsLf/xh9R3Q2Y4HxkZTp7ViLDU6WtJCEcPmRzW1gpdWDCDIqIlhuPDXOgttqPlykrHYDekg==",
    "registry": "npm",
    "packageName": "unist-util-visit-parents",
    "cacheIntegrity": "sha512-y+QVLcY5eR/YVpqDsLf/xh9R3Q2Y4HxkZTp7ViLDU6WtJCEcPmRzW1gpdWDCDIqIlhuPDXOgttqPlykrHYDekg== sha1-RLvF0l8kEeffxc7P8S3kMpaqhSE="
  },
  "registry": "npm",
  "hash": "44bbc5d25f2411e7dfc5cecff12de43296aa8521"
}