"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSpecs = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const ml_config_1 = require("@markuplint/ml-config");
const caches = new Map();
/**
 * Loading and importing form specs.
 *
 * Import a package or load a local file if regexp matches `filePath`.
 * ```json
 * {
 *   "specs": {
 *     "\\.html$": "aaa-aaa",
 *     "\\.ext$": "./bbb-bbb.json"
 *   },
 * }
 * ```
 *
 * The below ways are deprecated.
 *
 * ```json
 * {
 *   "specs": "xxx-xxx",
 * }
 * ```
 * ```json
 * {
 *   "specs": ["xxx-xxx", "./yyy-yyy.json"],
 * }
 * ```
 *
 * @param filePath The lintee file path
 * @param specConfig The `spec` property part of the config
 * @returns
 */
async function resolveSpecs(filePath, specConfig) {
    const htmlSpec = await importSpecs('@markuplint/html-spec');
    const extendedSpecs = [];
    if (specConfig) {
        if (typeof specConfig === 'string') {
            const spec = await importSpecs(specConfig);
            extendedSpecs.push(spec);
        }
        else if (Array.isArray(specConfig)) {
            for (const specModName of specConfig) {
                const spec = await importSpecs(specModName);
                extendedSpecs.push(spec);
            }
        }
        else {
            for (const pattern of Object.keys(specConfig)) {
                if (path_1.default.basename(filePath).match((0, ml_config_1.toRegxp)(pattern))) {
                    const specModName = specConfig[pattern];
                    const spec = await importSpecs(specModName);
                    extendedSpecs.push(spec);
                }
            }
        }
    }
    const schemas = [htmlSpec, ...extendedSpecs];
    return {
        schemas,
    };
}
exports.resolveSpecs = resolveSpecs;
async function importSpecs(specModName) {
    {
        // @ts-ignore
        const spec = caches.get(specModName);
        if (spec) {
            return spec;
        }
    }
    const spec = (await Promise.resolve().then(() => tslib_1.__importStar(require(specModName)))).default;
    caches.set(specModName, spec);
    return spec;
}
