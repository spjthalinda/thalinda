"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolvePlugins = void 0;
const cache = new Map();
async function resolvePlugins(pluginPaths) {
    if (!pluginPaths) {
        return [];
    }
    const plugins = await Promise.all(pluginPaths.map(p => importPlugin(p)));
    // Clone
    return plugins.slice();
}
exports.resolvePlugins = resolvePlugins;
async function importPlugin(pluginPath) {
    const config = getPluginConfig(pluginPath);
    const cached = cache.get(config.name);
    if (cached) {
        return cached;
    }
    const pluginCreator = await failSafeImport(config.name);
    if (!pluginCreator) {
        return {
            name: config.name,
        };
    }
    const plugin = {
        name: pluginCreator.name,
        ...pluginCreator.create(config.settings),
    };
    cache.set(plugin.name, plugin);
    if (!plugin.name) {
        plugin.name = config.name
            .toLowerCase()
            .replace(/^(?:markuplint-rule-|@markuplint\/rule-)/i, '')
            .replace(/\s+|\/|\\|\./g, '-');
        // eslint-disable-next-line no-console
        console.info(`The plugin name became "${plugin.name}"`);
    }
    return plugin;
}
function getPluginConfig(pluginPath) {
    if (typeof pluginPath === 'string') {
        return { name: pluginPath, settings: {} };
    }
    return pluginPath;
}
async function failSafeImport(name) {
    const res = await Promise.resolve().then(() => __importStar(require(name))).catch(e => e);
    if ('code' in res && res === 'MODULE_NOT_FOUND') {
        return null;
    }
    return res.default;
}
