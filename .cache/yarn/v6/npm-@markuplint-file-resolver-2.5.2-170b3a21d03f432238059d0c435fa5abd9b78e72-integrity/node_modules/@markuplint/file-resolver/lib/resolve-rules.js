"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveRules = void 0;
const ml_core_1 = require("@markuplint/ml-core");
const auto_load_rules_1 = require("./auto-load-rules");
let cachedPresetRules = null;
async function resolveRules(plugins, ruleset, importPreset, 
/**
 * @deprecated
 */
autoLoad) {
    const rules = importPreset ? await importPresetRules() : [];
    plugins.forEach(plugin => {
        if (!plugin.rules) {
            return;
        }
        Object.entries(plugin.rules).forEach(([name, seed]) => {
            const rule = new ml_core_1.MLRule({
                name: `${plugin.name}/${name}`,
                ...seed,
            });
            rules.push(rule);
        });
    });
    if (autoLoad) {
        const { rules: additionalRules } = await (0, auto_load_rules_1.autoLoadRules)(ruleset);
        additionalRules.forEach(rule => {
            rules.push(rule);
        });
    }
    // Clone
    return rules.slice();
}
exports.resolveRules = resolveRules;
async function importPresetRules() {
    if (cachedPresetRules) {
        return cachedPresetRules.slice();
    }
    const modName = '@markuplint/rules';
    const presetRules = (await Promise.resolve().then(() => __importStar(require(modName)))).default;
    const ruleList = Object.entries(presetRules).map(([name, seed]) => {
        const rule = new ml_core_1.MLRule({
            name,
            ...seed,
        });
        return rule;
    });
    cachedPresetRules = ruleList;
    // Clone
    return ruleList.slice();
}
