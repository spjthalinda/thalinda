"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoLoadRules = void 0;
const ml_core_1 = require("@markuplint/ml-core");
const cache = new Map();
/**
 * @deprecated
 */
async function autoLoadRules(ruleset) {
    const rules = [];
    const errors = [];
    for (const ruleName of Object.keys(ruleset.rules)) {
        const cached = cache.get(ruleName);
        if (cached) {
            rules.push(cached);
            continue;
        }
        let seed = null;
        try {
            const _module = await Promise.resolve().then(() => __importStar(require(`@markuplint/rule-${ruleName}`)));
            seed = _module.default;
            if (!(seed && 'defaultValue' in seed && 'defaultOptions' in seed && 'verify' in seed)) {
                seed = null;
            }
        }
        catch (e) {
            errors.push(e);
        }
        if (seed) {
            const rule = new ml_core_1.MLRule({
                name: ruleName,
                ...seed,
            });
            cache.set(ruleName, rule);
            rules.push(rule);
            continue;
        }
        try {
            const _module = await Promise.resolve().then(() => __importStar(require(`markuplint-rule-${ruleName}`)));
            seed = _module.default;
            if (!(seed && 'defaultValue' in seed && 'defaultOptions' in seed && 'verify' in seed)) {
                seed = null;
            }
        }
        catch (e) {
            errors.push(e);
        }
        if (seed) {
            const rule = new ml_core_1.MLRule({
                name: ruleName,
                ...seed,
            });
            cache.set(ruleName, rule);
            rules.push(rule);
            continue;
        }
    }
    return {
        // Clone
        rules: rules.slice(),
        // Clone
        errors: errors.slice(),
    };
}
exports.autoLoadRules = autoLoadRules;
