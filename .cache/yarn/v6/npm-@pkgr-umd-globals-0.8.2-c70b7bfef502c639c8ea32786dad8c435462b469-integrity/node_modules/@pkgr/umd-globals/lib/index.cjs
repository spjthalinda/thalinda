'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const AS_IS_PKGS = [
  "dayjs",
  "moment",
  "prettier",
  "rxjs",
  "tslib"
];
const UPPER_CAMEL_CASE_PKGS = ["react", "react-router", "redux", "vue"];
const normalizePkg = (pkg) => {
  if (pkg.startsWith("@")) {
    pkg = pkg.split("/").slice(1).join("/");
  }
  return pkg;
};
const asIsReducer = (globals2, pkg) => __spreadValues(__spreadValues({}, typeof globals2 === "string" ? {
  [globals2]: normalizePkg(globals2)
} : globals2), pkg && {
  [pkg]: normalizePkg(pkg)
});
const upperCamelCase = (pkg) => pkg.replace(/(^|-)([a-z])/g, (_, _$1, $2) => $2.toUpperCase());
const upperCamelCaseReducer = (globals2, pkg) => __spreadValues(__spreadValues({}, typeof globals2 === "string" ? {
  [globals2]: upperCamelCase(normalizePkg(globals2))
} : globals2), pkg && {
  [pkg]: upperCamelCase(normalizePkg(pkg))
});
const GLOBALS = {
  lodash: "_",
  qrcode: "QRCode",
  qrious: "QRious",
  "react-dom": "ReactDOM",
  underscore: "_"
};
const getGlobals = ({
  asIsPkgs,
  upperCamelCasePkgs,
  globals: globals2
} = {}) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, GLOBALS), AS_IS_PKGS.reduce(asIsReducer, {})), UPPER_CAMEL_CASE_PKGS.reduce(upperCamelCaseReducer, {})), (asIsPkgs != null ? asIsPkgs : []).reduce(asIsReducer, {})), (upperCamelCasePkgs != null ? upperCamelCasePkgs : []).reduce(upperCamelCaseReducer, {})), globals2);
const globals = getGlobals();

exports.AS_IS_PKGS = AS_IS_PKGS;
exports.UPPER_CAMEL_CASE_PKGS = UPPER_CAMEL_CASE_PKGS;
exports.asIsReducer = asIsReducer;
exports["default"] = globals;
exports.getGlobals = getGlobals;
exports.globals = globals;
exports.normalizePkg = normalizePkg;
exports.upperCamelCase = upperCamelCase;
exports.upperCamelCaseReducer = upperCamelCaseReducer;
