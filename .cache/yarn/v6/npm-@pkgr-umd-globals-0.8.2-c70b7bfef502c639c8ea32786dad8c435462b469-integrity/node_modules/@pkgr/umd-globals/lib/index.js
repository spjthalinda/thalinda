export const AS_IS_PKGS = [
    'dayjs',
    'moment',
    'prettier',
    'rxjs',
    // pkgs which has no umd module actually for now
    'tslib',
];
export const UPPER_CAMEL_CASE_PKGS = ['react', 'react-router', 'redux', 'vue'];
export const normalizePkg = (pkg) => {
    if (pkg.startsWith('@')) {
        pkg = pkg.split('/').slice(1).join('/');
    }
    return pkg;
};
export const asIsReducer = (globals, pkg) => (Object.assign(Object.assign({}, (typeof globals === 'string'
    ? {
        [globals]: normalizePkg(globals),
    }
    : globals)), (pkg && {
    [pkg]: normalizePkg(pkg),
})));
export const upperCamelCase = (pkg) => pkg.replace(/(^|-)([a-z])/g, (_, _$1, $2) => $2.toUpperCase());
export const upperCamelCaseReducer = (globals, pkg) => (Object.assign(Object.assign({}, (typeof globals === 'string'
    ? {
        [globals]: upperCamelCase(normalizePkg(globals)),
    }
    : globals)), (pkg && {
    [pkg]: upperCamelCase(normalizePkg(pkg)),
})));
const GLOBALS = {
    lodash: '_',
    qrcode: 'QRCode',
    qrious: 'QRious',
    'react-dom': 'ReactDOM',
    underscore: '_',
};
export const getGlobals = ({ asIsPkgs, upperCamelCasePkgs, globals, } = {}) => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, GLOBALS), AS_IS_PKGS.reduce(asIsReducer, {})), UPPER_CAMEL_CASE_PKGS.reduce(upperCamelCaseReducer, {})), (asIsPkgs !== null && asIsPkgs !== void 0 ? asIsPkgs : []).reduce(asIsReducer, {})), (upperCamelCasePkgs !== null && upperCamelCasePkgs !== void 0 ? upperCamelCasePkgs : []).reduce(upperCamelCaseReducer, {})), globals));
export const globals = getGlobals();
export { globals as default };
//# sourceMappingURL=index.js.map