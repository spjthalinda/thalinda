const jsonMessageHandlers = /* @__PURE__ */ new Map();
const registerJsonMessageHandler = (ruleId, handler) => {
  if (jsonMessageHandlers.has(ruleId)) {
    console.warn(`The ruleId ${ruleId} has already been registered, please mark sure you know what you're doing!`);
  }
  jsonMessageHandlers.set(ruleId, handler);
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const jsonMessage = {
  supportsAutofix: true,
  postprocess(messagesList) {
    return messagesList.flatMap((messages) => messages.map((lintMessage) => {
      const { ruleId, message } = lintMessage;
      if (!ruleId || !jsonMessageHandlers.has(ruleId)) {
        return lintMessage;
      }
      const handler = jsonMessageHandlers.get(ruleId);
      try {
        return __spreadValues(__spreadValues({}, lintMessage), handler(JSON.parse(message), lintMessage));
      } catch (err) {
        console.error(`Error occurred on processing ruleId: ${ruleId} and message: ${message}.`);
        throw err;
      }
    }));
  }
};

var processors = /*#__PURE__*/Object.freeze({
  __proto__: null,
  jsonMessage: jsonMessage
});

export { jsonMessageHandlers, processors, registerJsonMessageHandler };
