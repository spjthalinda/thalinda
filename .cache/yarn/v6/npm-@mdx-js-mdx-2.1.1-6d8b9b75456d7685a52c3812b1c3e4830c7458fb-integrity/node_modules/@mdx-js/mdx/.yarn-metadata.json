{
  "manifest": {
    "name": "@mdx-js/mdx",
    "version": "2.1.1",
    "description": "MDX compiler",
    "license": "MIT",
    "keywords": [
      "mdx",
      "markdown",
      "jsx",
      "remark",
      "mdxast"
    ],
    "homepage": "https://mdxjs.com/",
    "repository": {
      "type": "git",
      "url": "https://github.com/mdx-js/mdx",
      "directory": "packages/mdx"
    },
    "bugs": {
      "url": "https://github.com/mdx-js/mdx/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "John Otander",
      "email": "johnotander@gmail.com",
      "url": "https://johno.com"
    },
    "contributors": [
      {
        "name": "John Otander",
        "email": "johnotander@gmail.com",
        "url": "https://johno.com"
      },
      {
        "name": "Tim Neutkens",
        "email": "tim@vercel.com"
      },
      {
        "name": "Matija Marohnić",
        "email": "matija.marohnic@gmail.com"
      },
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "JounQin",
        "email": "admin@1stg.me",
        "url": "https://www.1stg.me"
      },
      {
        "name": "Christian Murphy",
        "email": "christian.murphy.42@gmail.com"
      }
    ],
    "type": "module",
    "sideEffects": false,
    "main": "index.js",
    "types": "index.d.ts",
    "browser": {
      "./lib/condition.js": "./lib/condition.browser.js"
    },
    "react-native": {
      "./lib/condition.js": "./lib/condition.browser.js"
    },
    "files": [
      "lib/",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/estree-jsx": "^0.0.1",
      "@types/mdx": "^2.0.0",
      "astring": "^1.6.0",
      "estree-util-build-jsx": "^2.0.0",
      "estree-util-is-identifier-name": "^2.0.0",
      "estree-walker": "^3.0.0",
      "hast-util-to-estree": "^2.0.0",
      "markdown-extensions": "^1.0.0",
      "periscopic": "^3.0.0",
      "remark-mdx": "^2.0.0",
      "remark-parse": "^10.0.0",
      "remark-rehype": "^10.0.0",
      "unified": "^10.0.0",
      "unist-util-position-from-estree": "^1.0.0",
      "unist-util-stringify-position": "^3.0.0",
      "unist-util-visit": "^4.0.0",
      "vfile": "^5.0.0"
    },
    "devDependencies": {
      "@emotion/react": "^11.0.0",
      "@mdx-js/react": "^2.0.0",
      "nanoid": "^3.0.0",
      "preact": "^10.0.0",
      "preact-render-to-string": "^5.0.0",
      "react": "^18.0.0-beta-24dd07bd2-20211208",
      "react-dom": "^18.0.0-beta-24dd07bd2-20211208",
      "rehype-katex": "^6.0.0",
      "rehype-raw": "^6.0.0",
      "remark-frontmatter": "^4.0.0",
      "remark-gfm": "^3.0.0",
      "remark-math": "^5.0.0",
      "source-map": "^0.7.0",
      "source-map-support": "^0.5.0",
      "unist-util-remove-position": "^4.0.0"
    },
    "scripts": {
      "prepack": "npm run build",
      "build": "rimraf \"lib/**/*.d.ts\" \"test/**/*.d.ts\" \"*.d.ts\" && tsc && type-coverage",
      "test-api": "uvu test \"^(compile|evaluate)\\.js$\"",
      "test-coverage": "c8 --check-coverage --100 --reporter lcov npm run test-api",
      "test": "npm run build && npm run test-coverage"
    },
    "xo": false,
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "ignoreFiles": [
        "lib/util/resolve-evaluate-options.{d.ts,js}"
      ]
    },
    "gitHead": "bf7deab69996449cb99c2217dff75e65855eb2c1",
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-@mdx-js-mdx-2.1.1-6d8b9b75456d7685a52c3812b1c3e4830c7458fb-integrity/node_modules/@mdx-js/mdx/package.json",
    "readmeFilename": "readme.md",
    "readme": "# `@mdx-js/mdx`\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\nMDX compiler.\n\n<!-- more -->\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`compile(file, options?)`](#compilefile-options)\n    *   [`compileSync(file, options?)`](#compilesyncfile-options)\n    *   [`evaluate(file, options)`](#evaluatefile-options)\n    *   [`evaluateSync(file, options)`](#evaluatesyncfile-options)\n    *   [`run(functionBody, options)`](#runfunctionbody-options)\n    *   [`runSync(functionBody, options)`](#runsyncfunctionbody-options)\n    *   [`createProcessor(options)`](#createprocessoroptions)\n*   [Types](#types)\n*   [Architecture](#architecture)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a compiler that turns MDX into JavaScript.\nIt can also evaluate MDX code.\n\n## When should I use this?\n\nThis is the core compiler for turning MDX into JavaScript and which gives you\nthe most control.\nIf you’re using a bundler (webpack, Rollup, esbuild), or a site builder (Gatsby,\nNext.js) or build system (Vite, WMR) which comes with a bundler, you’re better\noff using an integration: see [§ Integrations][integrations].\n\n## Install\n\nThis package is [ESM only][esm]:\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install @mdx-js/mdx\n```\n\n[yarn][]:\n\n```sh\nyarn add @mdx-js/mdx\n```\n\n## Use\n\nSay we have an MDX document, `example.mdx`:\n\n```mdx\nexport const Thing = () => <>World!</>\n\n# Hello, <Thing />\n```\n\nAdd some code in `example.js` to compile `example.mdx` to JavaScript:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {compile} from '@mdx-js/mdx'\n\nmain()\n\nasync function main() {\n  const compiled = await compile(await fs.readFile('example.mdx'))\n  console.log(String(compiled))\n}\n```\n\nYields roughly:\n\n```js\n/* @jsxRuntime automatic @jsxImportSource react */\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n\nexport const Thing = () => _jsx(_Fragment, {children: 'World!'})\n\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({})\n  return MDXLayout\n    ? _jsx(MDXLayout, Object.assign({}, props, {children: _jsx(_createMdxContent, {})}))\n    : _createMdxContent()\n  function _createMdxContent() {\n     const _components = Object.assign({h1: 'h1'}, props.components)\n     return _jsxs(_components.h1, {children: ['Hello, ', _jsx(Thing, {})]})\n   }\n}\n\nexport default MDXContent\n```\n\nSee [§ Using MDX][using-mdx] for more on how MDX work and how to use the result.\n\n## API\n\nThis package exports the following identifiers:\n[`compile`][compile],\n[`compileSync`][compile-sync],\n[`evaluate`][eval],\n[`evaluateSync`](#evaluatesyncfile-options),\n[`run`][run],\n[`runSync`](#runsyncfunctionbody-options), and\n[`createProcessor`][create-processor].\nThere is no default export.\n\n### `compile(file, options?)`\n\nCompile MDX to JS.\n\n###### `file`\n\nMDX document to parse (`string`, [`Buffer`][buffer] in UTF-8, [`vfile`][vfile],\nor anything that can be given to `vfile`).\n\n<details>\n<summary>Example</summary>\n\n```js\nimport {VFile} from 'vfile'\nimport {compile} from '@mdx-js/mdx'\n\nawait compile(':)')\nawait compile(Buffer.from(':-)'))\nawait compile({path: 'path/to/file.mdx', value: '🥳'})\nawait compile(new VFile({path: 'path/to/file.mdx', value: '🤭'}))\n```\n\n</details>\n\n###### `options.remarkPlugins`\n\nList of [remark plugins][remark-plugins], presets, and pairs.\n\n<details>\n<summary>Example</summary>\n\n```js\nimport remarkFrontmatter from 'remark-frontmatter' // YAML and such.\nimport remarkGfm from 'remark-gfm' // Tables, footnotes, strikethrough, task lists, literal URLs.\n\nawait compile(file, {remarkPlugins: [remarkGfm]}) // One plugin.\nawait compile(file, {remarkPlugins: [[remarkFrontmatter, 'toml']]}) // A plugin with options.\nawait compile(file, {remarkPlugins: [remarkGfm, remarkFrontmatter]}) // Two plugins.\nawait compile(file, {remarkPlugins: [[remarkGfm, {singleTilde: false}], remarkFrontmatter]}) // Two plugins, first w/ options.\n```\n\n</details>\n\n###### `options.rehypePlugins`\n\nList of [rehype plugins][rehype-plugins], presets, and pairs.\n\n<details>\n<summary>Example</summary>\n\n```js\nimport rehypeKatex from 'rehype-katex' // Render math with KaTeX.\nimport remarkMath from 'remark-math' // Support math like `$so$`.\n\nawait compile(file, {remarkPlugins: [remarkMath], rehypePlugins: [rehypeKatex]})\n\nawait compile(file, {\n  remarkPlugins: [remarkMath],\n  // A plugin with options:\n  rehypePlugins: [[rehypeKatex, {throwOnError: true, strict: true}]]\n})\n```\n\n</details>\n\n###### `options.recmaPlugins`\n\nList of recma plugins.\nThis is a new ecosystem, currently in beta, to transform [esast][] trees\n(JavaScript).\n\n###### `options.remarkRehypeOptions`\n\nOptions to pass through to [`remark-rehype`][remark-rehype].\nThe option `allowDangerousHtml` will always be set to `true` and the MDX nodes\nare passed through.\nIn particular, you might want to pass `clobberPrefix`, `footnoteLabel`, and\n`footnoteBackLabel`.\n\n<details>\n<summary>Example</summary>\n\n```js\ncompile({value: '…'}, {remarkRehypeOptions: {clobberPrefix: 'comment-1'}})\n```\n\n</details>\n\n###### `options.mdExtensions`\n\nList of markdown extensions, with dot (`Array<string>`, default: `['.md',\n'.markdown', '.mdown', '.mkdn', '.mkd', '.mdwn', '.mkdown', '.ron']`).\n\n###### `options.mdxExtensions`\n\nList of MDX extensions, with dot (`Array<string>`, default: `['.mdx']`).\nHas no effect in `compile` or `evaluate` but does affect\n[§ Integrations][integrations].\n\n###### `options.format`\n\nFormat the file is in (`'detect' | 'mdx' | 'md'`, default: `'detect'`).\n\n*   `'detect'` — use `'markdown'` for files with an extension in `mdExtensions`\n    and `'mdx'` otherwise\n*   `'mdx'` — treat file as [MDX][mdx-syntax]\n*   `'md'` — treat file as plain vanilla markdown\n\nThe format cannot be detected if a file is passed without a path or extension:\n`mdx` will be assumed.\nSo pass a full vfile (with `path`) or an object with a path.\n\n<details>\n<summary>Example</summary>\n\n```js\ncompile({value: '…'}) // Seen as MDX\ncompile({value: '…'}, {format: 'md'}) // Seen as markdown\ncompile({value: '…', path: 'readme.md'}) // Seen as markdown\n\n// Please do not use `.md` for MDX as other tools won’t know how to handle it.\ncompile({value: '…', path: 'readme.md'}, {format: 'mdx'}) // Seen as MDX\ncompile({value: '…', path: 'readme.md'}, {mdExtensions: []}) // Seen as MDX\n```\n\n</details>\n\nThis option mostly affects [§ Integrations][integrations]\nbecause in those it affects *which* files are “registered”:\n\n*   `format: 'mdx'` registers the extensions in `options.mdxExtensions`\n*   `format: 'md'` registers the extensions in `options.mdExtensions`\n*   `format: 'detect'` registers both lists of extensions\n\n###### `options.outputFormat`\n\nOutput format to generate (`'program' | 'function-body'`, default: `'program'`).\nIn most cases `'program'` should be used, as it results in a whole program.\nInternally, [`evaluate`][eval] uses `outputFormat: 'function-body'` to compile\nto code that can be `eval`ed with [`run`][run].\nIn some cases, you might want to do what `evaluate` does in separate steps\nyourself, such as when compiling on the server and running on the client.\n\nThe `'program'` format will use import statements to import the runtime (and\noptionally provider) and use an export statement to yield the `MDXContent`\ncomponent.\n\nThe `'function-body'` format will get the runtime (and optionally provider) from\n`arguments[0]`, rewrite export statements, and use a return statement to yield\nwhat was exported.\nNormally, this output format will throw on `import` (and `export … from`)\nstatements, but you can support them by setting\n[`options.useDynamicImport`][usedynamicimport].\n\n<details>\n<summary>Example</summary>\n\nA module `example.js`:\n\n```js\nimport {compile} from '@mdx-js/mdx'\n\nmain('export const no = 3.14\\n\\n# hi {no}')\n\nasync function main(code) {\n  console.log(String(await compile(code, {outputFormat: 'program'}))) // Default\n  console.log(String(await compile(code, {outputFormat: 'function-body'})))\n}\n```\n\n…yields:\n\n```js\nimport {Fragment as _Fragment, jsx as _jsx} from 'react/jsx-runtime'\nexport const no = 3.14\nfunction MDXContent(props = {}) { /* … */ }\nexport default MDXContent\n```\n\n```js\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0]\nconst no = 3.14\nfunction MDXContent(props = {}) { /* … */ }\nreturn {no, default: MDXContent}\n```\n\n</details>\n\n###### `options.useDynamicImport`\n\nWhether to compile to dynamic import expressions (`boolean`, default: `false`).\nThis option applies when [`options.outputFormat`][outputformat] is\n`'function-body'`.\n\n`@mdx-js/mdx` can turn import statements (`import x from 'y'`) into dynamic\nimports (`const {x} = await import('y')`).\nThis is useful because import statements only work at the top level of\nJavaScript modules, whereas `import()` is available inside function bodies.\n\nWhen you turn `useDynamicImport` on, you should probably set [`options.baseUrl`][baseurl] too.\n\n<details>\n<summary>Example</summary>\n\nSay we have a couple modules:\n\n```js\n// meta.js:\nexport const title = 'World'\n\n// numbers.js:\nexport const no = 3.14\n\n// example.js:\nimport {compileSync} from '@mdx-js/mdx'\n\nconst code = `import {name} from './meta.js'\nexport {no} from './numbers.js'\n\n# hi {name}!`\n\nconsole.log(String(compileSync(code, {outputFormat: 'function-body', useDynamicImport: true})))\n```\n\n…now running `node example.js` yields:\n\n```js\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0]\nconst {name} = await import('./meta.js')\nconst {no} = await import('./numbers.js')\nfunction MDXContent(props = {}) { /* … */ }\nreturn {no, default: MDXContent}\n```\n\n</details>\n\n###### `options.baseUrl`\n\nResolve relative `import` (and `export … from`) from this URL (`string?`,\nexample: `import.meta.url`).\n\nRelative specifiers are non-absolute URLs that start with `/`, `./`, or `../`.\nFor example: `/index.js`, `./folder/file.js`, or `../main.js`.\n\nThis option is useful when code will run in a different place.\nOne example is when `.mdx` files are in path *a* but compiled to path *b* and\nimports should run relative the path *b*.\nAnother example is when evaluating code, whether in Node or a browser.\n\n<details>\n<summary>Example</summary>\n\nSay we have a module `example.js`:\n\n```js\nimport {compile} from '@mdx-js/mdx'\n\nmain()\n\nasync function main() {\n  const code = 'export {number} from \"./data.js\"\\n\\n# hi'\n  const baseUrl = 'https://a.full/url' // Typically `import.meta.url`\n  console.log(String(await compile(code, {baseUrl})))\n}\n```\n\n…now running `node example.js` yields:\n\n```js\nimport {Fragment as _Fragment, jsx as _jsx} from 'react/jsx-runtime'\nexport {number} from 'https://a.full/data.js'\nfunction MDXContent(props = {}) { /* … */ }\nexport default MDXContent\n```\n\n</details>\n\n###### `options.development`\n\nWhether to add extra information to error messages in generated code\n(`boolean?`, default: `false`).\nThe default can be set to `true` in Node.js through environment variables: set\n`NODE_ENV=development`.\n\n<details>\n<summary>Example</summary>\n\nSay we had some MDX that references a component that can be passed or provided\nat runtime:\n\n```mdx\n**Note**<NoteIcon />: some stuff.\n```\n\nAnd a module to evaluate that:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport * as runtime from 'react/jsx-runtime'\nimport {evaluate} from '@mdx-js/mdx'\n\nmain()\n\nasync function main() {\n  const path = 'example.mdx'\n  const value = await fs.readFile(path)\n  const MDXContent = (await evaluate({path, value}, runtime)).default\n  console.log(MDXContent())\n}\n```\n\nRunning that would normally (production) yield:\n\n```txt\nError: Expected component `NoteIcon` to be defined: you likely forgot to import, pass, or provide it.\n    at _missingMdxReference (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:27:9)\n    at _createMdxContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:15:20)\n    at MDXContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:9:9)\n    at main (…/example.js:11:15)\n```\n\nBut if we change add `development: true` to our example:\n\n```diff\n@@ -7,6 +7,6 @@ main()\n async function main() {\n   const path = 'example.mdx'\n   const value = await fs.readFile(path)\n-  const MDXContent = (await evaluate({path, value}, runtime)).default\n+  const MDXContent = (await evaluate({path, value}, {development: true, ...runtime})).default\n   console.log(MDXContent({}))\n }\n```\n\nAnd we’d run it again, we’d get:\n\n```txt\nError: Expected component `NoteIcon` to be defined: you likely forgot to import, pass, or provide it.\nIt’s referenced in your code at `1:9-1:21` in `example.mdx`\nprovide it.\n    at _missingMdxReference (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:27:9)\n    at _createMdxContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:15:20)\n    at MDXContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:9:9)\n    at main (…/example.js:11:15)\n```\n\n</details>\n\n###### `options.SourceMapGenerator`\n\nThe `SourceMapGenerator` class from [`source-map`][source-map] (optional).\nWhen given, the resulting file will have a `map` field set to a source map (in\nobject form).\n\n<details>\n<summary>Example</summary>\n\nAssuming `example.mdx` from [§ Use][use] exists, then:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {SourceMapGenerator} from 'source-map'\nimport {compile} from '@mdx-js/mdx'\n\nmain()\n\nasync function main() {\n  const file = await compile(\n    {path: 'example.mdx', value: await fs.readFile('example.mdx')},\n    {SourceMapGenerator}\n  )\n\n  console.log(file.map)\n}\n```\n\n…yields:\n\n```js\n{\n  version: 3,\n  sources: ['example.mdx'],\n  names: ['Thing'],\n  mappings: ';;aAAaA,QAAQ;YAAQ;;;;;;;;iBAE3B',\n  file: 'example.mdx'\n}\n```\n\n</details>\n\n###### `options.providerImportSource`\n\nPlace to import a provider from (`string?`, example: `'@mdx-js/react'`).\nUseful for runtimes that support context (React, Preact).\nThe provider must export a `useMDXComponents`, which is called to access an\nobject of components.\n\n<details>\n<summary>Example</summary>\n\nIf `file` is the contents of `example.mdx` from [§ Use][use], then:\n\n```js\ncompile(file, {providerImportSource: '@mdx-js/react'})\n```\n\n…yields this difference:\n\n```diff\n /* @jsxRuntime automatic @jsxImportSource react */\n import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+import {useMDXComponents as _provideComponents} from '@mdx-js/react'\n\n export const Thing = () => _jsx(_Fragment, {children: 'World!'})\n\n function MDXContent(props = {}) {\n-  const {wrapper: MDXLayout} = props.components || ({})\n+  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components)\n   return MDXLayout\n     ? _jsx(MDXLayout, Object.assign({}, props, {children: _jsx(_createMdxContent, {})}))\n     : _createMdxContent()\n   function _createMdxContent() {\n-    const _components = Object.assign({h1: 'h1'}, props.components)\n+    const _components = Object.assign({h1: 'h1'}, _provideComponents(), props.components)\n     return _jsxs(_components.h1, {children: ['Hello, ', _jsx(Thing, {})]})\n   }\n }\n\n export default MDXContent\n```\n\n</details>\n\n###### `options.jsx`\n\nWhether to keep JSX (`boolean?`, default: `false`).\nThe default is to compile JSX away so that the resulting file is immediately\nrunnable.\n\n<details>\n<summary>Example</summary>\n\nIf `file` is the contents of `example.mdx` from [§ Use][use], then:\n\n```js\ncompile(file, {jsx: true})\n```\n\n…yields this difference:\n\n```diff\n /* @jsxRuntime automatic @jsxImportSource react */\n-import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n\n-export const Thing = () => _jsx(_Fragment, {children: 'World!'})\n+export const Thing = () => <>World!</>\n\n function MDXContent(props = {}) {\n   const {wrapper: MDXLayout} = props.components || ({})\n   return MDXLayout\n-    ? _jsx(MDXLayout, Object.assign({}, props, {children: _jsx(_createMdxContent, {})}))\n+    ? <MDXLayout {...props}><_createMdxContent /></MDXLayout>\n     : _createMdxContent()\n   function _createMdxContent() {\n     const _components = Object.assign({h1: 'h1'}, props.components)\n-    return _jsxs(_components.h1, {children: ['Hello, ', _jsx(Thing, {})]})\n+    return <_components.h1>{\"Hello, \"}<Thing /></_components.h1>\n   }\n }\n\n export default MDXContent\n```\n\n</details>\n\n###### `options.jsxRuntime`\n\nJSX runtime to use (`'automatic' | 'classic'`, default: `'automatic'`).\nThe classic runtime compiles to calls such as `h('p')`, the automatic runtime\ncompiles to `import _jsx from '$importSource/jsx-runtime'\\n_jsx('p')`.\n\n<details>\n<summary>Example</summary>\n\nIf `file` is the contents of `example.mdx` from [§ Use][use], then:\n\n```js\ncompile(file, {jsxRuntime: 'classic'})\n```\n\n…yields this difference:\n\n```diff\n-/* @jsxRuntime automatic @jsxImportSource react */\n-import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+/* @jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment */\n+import React from 'react'\n\n-export const Thing = () => _jsx(_Fragment, {children: 'World!'})\n+export const Thing = () => React.createElement(React.Fragment, null, 'World!')\n…\n```\n\n</details>\n\n###### `options.jsxImportSource`\n\nPlace to import automatic JSX runtimes from (`string?`, default: `'react'`).\nWhen in the `automatic` runtime, this is used to define an import for\n`_Fragment`, `_jsx`, and `_jsxs`.\n\n<details>\n<summary>Example</summary>\n\nIf `file` is the contents of `example.mdx` from [§ Use][use], then:\n\n```js\ncompile(file, {jsxImportSource: 'preact'})\n```\n\n…yields this difference:\n\n```diff\n-/* @jsxRuntime automatic @jsxImportSource react */\n-import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+/* @jsxRuntime automatic @jsxImportSource preact */\n+import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from 'preact/jsx-runtime'\n```\n\n</details>\n\n###### `options.pragma`\n\nPragma for JSX (`string?`, default: `'React.createElement'`).\nWhen in the `classic` runtime, this is used as an identifier for function calls:\n`<x />` to `React.createElement('x')`.\n\nYou should most probably define `pragmaFrag` and `pragmaImportSource` too when\nchanging this.\n\n<details>\n<summary>Example</summary>\n\nIf `file` is the contents of `example.mdx` from [§ Use][use], then:\n\n```js\ncompile(file, {\n  jsxRuntime: 'classic',\n  pragma: 'preact.createElement',\n  pragmaFrag: 'preact.Fragment',\n  pragmaImportSource: 'preact/compat'\n})\n```\n\n…yields this difference:\n\n```diff\n-/* @jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment */\n-import React from 'react'\n+/* @jsxRuntime classic @jsx preact.createElement @jsxFrag preact.Fragment */\n+import preact from 'preact/compat'\n\n-export const Thing = () => React.createElement(React.Fragment, null, 'World!')\n+export const Thing = () => preact.createElement(preact.Fragment, null, 'World!')\n…\n```\n\n</details>\n\n###### `options.pragmaFrag`\n\nPragma for JSX fragments (`string?`, default: `'React.Fragment'`).\nWhen in the `classic` runtime, this is used as an identifier for fragments: `<>`\nto `React.createElement(React.Fragment)`.\n\nSee `options.pragma` for an example.\n\n###### `options.pragmaImportSource`\n\nWhere to import the identifier of `pragma` from (`string?`, default: `'react'`).\nWhen in the `classic` runtime, this is used to import the `pragma` function.\nTo illustrate with an example: when `pragma` is `'a.b'` and `pragmaImportSource`\nis `'c'` this following will be generated: `import a from 'c'`.\n\nSee `options.pragma` for an example.\n\n###### Returns\n\n`Promise<VFile>` — Promise that resolves to the compiled JS as a [vfile][].\n\n<details>\n<summary>Example</summary>\n\n```js\nimport remarkPresetLintConsistent from 'remark-preset-lint-consistent' // Lint rules to check for consistent markdown.\nimport {reporter} from 'vfile-reporter'\nimport {compile} from '@mdx-js/mdx'\n\nmain()\n\nasync function main() {\n  const file = await compile('*like this* or _like this_?', {remarkPlugins: [remarkPresetLintConsistent]})\n  console.error(reporter(file))\n}\n```\n\nYields:\n\n```txt\n  1:16-1:27  warning  Emphasis should use `*` as a marker  emphasis-marker  remark-lint\n\n⚠ 1 warning\n```\n\n</details>\n\n### `compileSync(file, options?)`\n\nCompile MDX to JS.\nSynchronous version of `compile`.\nWhen possible please use the async `compile`.\n\n### `evaluate(file, options)`\n\n> ☢️ **Danger**: It’s called **evaluate** because it `eval`s JavaScript.\n\n[Compile][] and [run][] MDX.\nWhen possible, please use `compile`, write to a file, and then run with Node,\nor use one of the\n[§ Integrations][integrations].\nBut if you trust your content, `evaluate` can work.\n\nTypically, `import` (or `export … from`) do not work here.\nThey can be compiled to dynamic `import()` by passing\n[`options.useDynamicImport`][usedynamicimport].\n\n###### `file`\n\nSee [`compile`][compile].\n\n###### `options`\n\nMost options are the same as [`compile`][compile], with the following\nexceptions:\n\n*   `providerImportSource` is replaced by `useMDXComponents`\n*   `jsx*` and `pragma*` options are replaced by `jsx`, `jsxs`, and `Fragment`\n*   `outputFormat` is set to `function-body`\n\n###### `options.jsx`\n\n###### `options.jsxs`\n\n###### `options.Fragment`\n\nThese three options are required.\nThey come from an automatic JSX runtime that you must import yourself.\n\n<details>\n<summary>Example</summary>\n\n```js\nimport * as runtime from 'react/jsx-runtime'\n\nconst {default: Content} = await evaluate('# hi', {...runtime, ...otherOptions})\n```\n\n</details>\n\n###### `options.useMDXComponents`\n\nNeeded if you want to support a provider.\n\n<details>\n<summary>Example</summary>\n\n```js\nimport * as provider from '@mdx-js/react'\nimport * as runtime from 'react/jsx-runtime'\n\nconst {default: Content} = await evaluate('# hi', {...provider, ...runtime, ...otherOptions})\n```\n\n</details>\n\n###### Returns\n\n`Promise<OMDXModule>` — Promise that resolves to something that looks a bit like\na module: an object with a `default` field set to the component and anything\nelse that was exported from the MDX file available too.\n\n<details>\n<summary>Example</summary>\n\nAssuming the contents of `example.mdx` from [§ Use][use] was in `file`, then:\n\n```js\nimport * as runtime from 'react/jsx-runtime'\nimport {evaluate} from '@mdx-js/mdx'\n\nconsole.log(await evaluate(file, {...runtime}))\n```\n\n…yields:\n\n```js\n{Thing: [Function: Thing], default: [Function: MDXContent]}\n```\n\n</details>\n\n###### Note: Performance\n\nCompiling (and running) MDX takes time.\nIf you’re live-rendering a string of MDX that often changes using a virtual DOM\nbased framework (such as React), one performance improvement is to call the\n`MDXContent` component yourself.\nThe reason is that the `evaluate` creates a new function each time, which cannot\nbe diffed:\n\n```diff\n const {default: MDXContent} = await evaluate('…')\n\n-<MDXContent {...props} />\n+MDXContent(props)\n```\n\n### `evaluateSync(file, options)`\n\n> ☢️ **Danger**: It’s called **evaluate** because it `eval`s JavaScript.\n\nCompile and run MDX.\nSynchronous version of [`evaluate`][eval].\nWhen possible please use the async `evaluate`.\n\n### `run(functionBody, options)`\n\n> ☢️ **Danger**: This `eval`s JavaScript.\n\nRun MDX compiled as [`options.outputFormat: 'function-body'`][outputformat].\n\n###### `options`\n\nYou can pass `jsx`, `jsxs`, and `Fragment` from an automatic JSX runtime as\n`options`.\nYou can also pass `useMDXComponents` from a provider in options if the MDX is\ncompiled with `options.providerImportSource: '#'` (the exact value of this\ncompile option doesn’t matter).\nAll other options have to be passed to `compile` instead.\n\n###### Returns\n\n`Promise<MDXModule>` — See `evaluate`\n\n<details>\n<summary>Example</summary>\n\nOn the server:\n\n```js\nimport {compile} from '@mdx-js/mdx'\n\nconst code = String(await compile('# hi', {outputFormat: 'function-body'}))\n// To do: send `code` to the client somehow.\n```\n\nOn the client:\n\n```js\nimport * as runtime from 'react/jsx-runtime'\nimport {run} from '@mdx-js/mdx'\n\nconst code = '' // To do: get `code` from server somehow.\n\nconst {default: Content} = await run(code, runtime)\n```\n\n…yields:\n\n```js\n[Function: MDXContent]\n```\n\n</details>\n\n### `runSync(functionBody, options)`\n\n> ☢️ **Danger**: This `eval`s JavaScript.\n\nRun MDX.\nSynchronous version of [`run`][run].\nWhen possible please use the async `run`.\n\n### `createProcessor(options)`\n\nCreate a unified processor to compile MDX to JS.\nHas the same options as [`compile`][compile], but returns a configured\n[`processor`][processor].\n\nNote that `format: 'detect'` does not work here: only `'md'` or `'mdx'` are\nallowed (and `'mdx'` is the default).\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nSee [§ Types][types] on our website for information.\n\nAdditional `CompileOptions`, `EvaluateOptions`, and `ProcessorOptions` types\nare exported, which represents acceptable configuration for their respective\nmethods.\n\n## Architecture\n\nTo understand what this project does, it’s very important to first understand\nwhat unified does: please read through the [`unifiedjs/unified`][unified] readme\n(the part until you hit the API section is required reading).\n\n`@mdx-js/mdx` is a unified pipeline — wrapped so that most folks don’t need to\nknow about unified: [`core.js#L65`][core].\nThe processor goes through these steps:\n\n1.  Parse MDX (serialized markdown with embedded JSX, ESM, and expressions)\n    to mdast (markdown syntax tree)\n2.  Transform through remark (markdown ecosystem)\n3.  Transform mdast to hast (HTML syntax tree)\n4.  Transform through rehype (HTML ecosystem)\n5.  Transform hast to esast (JS syntax tree)\n6.  Do the work needed to get a component\n7.  Transform through recma (JS ecosystem)\n8.  Serialize esast as JavaScript\n\nThe *input* is MDX (serialized markdown with embedded JSX, ESM, and\nexpressions).\nThe markdown is parsed with [`micromark/micromark`][micromark] and the embedded\nJS with one of its extensions\n[`micromark/micromark-extension-mdxjs`][micromark-extension-mdxjs] (which in\nturn uses [acorn][]).\nThen [`syntax-tree/mdast-util-from-markdown`][mdast-util-from-markdown] and its\nextension [`syntax-tree/mdast-util-mdx`][mdast-util-mdx] are used to turn the\nresults from the parser into a syntax tree: [mdast][].\n\nMarkdown is closest to the source format.\nThis is where [remark plugins][remark-plugins] come in.\nTypically, there shouldn’t be much going on here.\nBut perhaps you want to support GFM (tables and such) or frontmatter?\nThen you can add a plugin here: `remark-gfm` or `remark-frontmatter`,\nrespectively.\n\nAfter markdown, we go to [hast][] (HTML).\nThis transformation is done by\n[`syntax-tree/mdast-util-to-hast`][mdast-util-to-hast].\nWait, why, what does HTML have to do with it?\nPart of the reason is that we care about HTML semantics: we want to know that\nsomething is an `<a>`, not whether it’s a link with a resource (`[text](url)`)\nor a reference to a defined link definition (`[text][id]\\n\\n[id]: url`).\nSo an HTML AST is *closer* to where we want to go.\nAnother reason is that there are many things folks need when they go MDX -> JS,\nmarkdown -> HTML, or even folks who only process their HTML -> HTML: use cases\nother than MDX.\nBy having a single AST in these cases and writing a plugin that works on that\nAST, that plugin can supports *all* these use cases (for example,\n[`rehypejs/rehype-highlight`][rehype-highlight] for syntax highlighting or\n[`rehypejs/rehype-katex`][rehype-katex] for math).\nSo, this is where [rehype plugins][rehype-plugins] come in: most of the plugins,\nprobably.\n\nThen we go to JavaScript: [esast][] (JS; an\nAST which is compatible with estree but looks a bit more like other unist ASTs).\nThis transformation is done by\n[`syntax-tree/hast-util-to-estree`][hast-util-to-estree].\nThis is a new ecosystem that does not have utilities or plugins yet.\nBut it’s where `@mdx-js/mdx` does its thing: where it adds imports/exports,\nwhere it compiles JSX away into `_jsx()` calls, and where it does the other cool\nthings that it provides.\n\nFinally, The output is serialized JavaScript.\nThat final step is done by [astring][], a\nsmall and fast JS generator.\n\n## Security\n\nSee [§ Security][security] on our website for information.\n\n## Contribute\n\nSee [§ Contribute][contribute] on our website for ways to get started.\nSee [§ Support][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][] © Compositor and [Vercel][]\n\n[build-badge]: https://github.com/mdx-js/mdx/workflows/main/badge.svg\n\n[build]: https://github.com/mdx-js/mdx/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/mdx-js/mdx/main.svg\n\n[coverage]: https://codecov.io/github/mdx-js/mdx\n\n[downloads-badge]: https://img.shields.io/npm/dm/@mdx-js/mdx.svg\n\n[downloads]: https://www.npmjs.com/package/@mdx-js/mdx\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/@mdx-js/mdx.svg\n\n[size]: https://bundlephobia.com/result?p=@mdx-js/mdx\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/mdx-js/mdx/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[yarn]: https://classic.yarnpkg.com/docs/cli/add/\n\n[contribute]: https://mdxjs.com/community/contribute/\n\n[support]: https://mdxjs.com/community/support/\n\n[coc]: https://github.com/mdx-js/.github/blob/main/code-of-conduct.md\n\n[mit]: https://github.com/mdx-js/mdx/blob/main/packages/mdx/license\n\n[vercel]: https://vercel.com\n\n[compile]: #compilefile-options\n\n[compile-sync]: #compilesyncfile-options\n\n[eval]: #evaluatefile-options\n\n[run]: #runfunctionbody-options\n\n[create-processor]: #createprocessoroptions\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[source-map]: https://github.com/mozilla/source-map\n\n[vfile]: https://github.com/vfile/vfile\n\n[remark-plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype-plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[mdx-syntax]: https://mdxjs.com/docs/what-is-mdx/#mdx-syntax\n\n[use]: #use\n\n[outputformat]: #optionsoutputformat\n\n[baseurl]: #optionsbaseurl\n\n[usedynamicimport]: #optionsusedynamicimport\n\n[unified]: https://github.com/unifiedjs/unified\n\n[processor]: https://github.com/unifiedjs/unified#processor\n\n[core]: https://github.com/mdx-js/mdx/blob/main/packages/mdx/lib/core.js#L65\n\n[micromark]: https://github.com/micromark/micromark\n\n[acorn]: https://github.com/acornjs/acorn\n\n[micromark-extension-mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[mdast-util-from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[mdast-util-mdx]: https://github.com/syntax-tree/mdast-util-mdx\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[mdast-util-to-hast]: https://github.com/syntax-tree/mdast-util-to-hast\n\n[hast]: https://github.com/syntax-tree/hast\n\n[hast-util-to-estree]: https://github.com/syntax-tree/hast-util-to-estree\n\n[rehype-highlight]: https://github.com/rehypejs/rehype-highlight\n\n[rehype-katex]: https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex\n\n[esast]: https://github.com/syntax-tree/esast\n\n[astring]: https://github.com/davidbonnet/astring\n\n[integrations]: https://mdxjs.com/getting-started/#integrations\n\n[using-mdx]: https://mdxjs.com/docs/using-mdx/\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[types]: https://mdxjs.com/getting-started/#types\n\n[security]: https://mdxjs.com/getting-started/#security\n\n[typescript]: https://www.typescriptlang.org\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Compositor, Inc. and Vercel, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@mdx-js/mdx/-/mdx-2.1.1.tgz#6d8b9b75456d7685a52c3812b1c3e4830c7458fb",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@mdx-js/mdx/-/mdx-2.1.1.tgz",
    "hash": "6d8b9b75456d7685a52c3812b1c3e4830c7458fb",
    "integrity": "sha512-SXC18cChut3F2zkVXwsb2no0fzTQ1z6swjK13XwFbF5QU/SFQM0orAItPypSdL3GvqYyzVJtz8UofzJhPEQtMw==",
    "registry": "npm",
    "packageName": "@mdx-js/mdx",
    "cacheIntegrity": "sha512-SXC18cChut3F2zkVXwsb2no0fzTQ1z6swjK13XwFbF5QU/SFQM0orAItPypSdL3GvqYyzVJtz8UofzJhPEQtMw== sha1-bYubdUVtdoWlLDgSscPkgwx0WPs="
  },
  "registry": "npm",
  "hash": "6d8b9b75456d7685a52c3812b1c3e4830c7458fb"
}