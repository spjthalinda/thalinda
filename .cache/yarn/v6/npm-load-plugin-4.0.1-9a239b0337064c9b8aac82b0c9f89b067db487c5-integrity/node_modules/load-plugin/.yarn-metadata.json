{
  "manifest": {
    "name": "load-plugin",
    "version": "4.0.1",
    "description": "Load a submodule, plugin, or file",
    "license": "MIT",
    "keywords": [
      "load",
      "submodule",
      "package",
      "plugin"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/wooorm/load-plugin.git"
    },
    "bugs": {
      "url": "https://github.com/wooorm/load-plugin/issues"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/wooorm"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "import-meta-resolve": "^1.0.0",
      "libnpmconfig": "^1.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^9.0.0",
      "remark-lint": "^8.0.0",
      "remark-preset-wooorm": "^8.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.39.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{test/**,}*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node test/index.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test/index.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "no-await-in-loop": "off"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-load-plugin-4.0.1-9a239b0337064c9b8aac82b0c9f89b067db487c5-integrity/node_modules/load-plugin/package.json",
    "readmeFilename": "readme.md",
    "readme": "# load-plugin\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n\nLoad a submodule, plugin, or file.\nLike Node’s `require` and `require.resolve`, but from one or more places, and\noptionally global too.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install load-plugin\n```\n\n## Use\n\nSay we’re in this project (with dependencies installed):\n\n```js\nimport {loadPlugin, resolvePlugin} from 'load-plugin'\n\nmain()\n\nasync function main() {\n  await resolvePlugin('lint', {prefix: 'remark'})\n  // => '/Users/tilde/projects/oss/load-plugin/node_modules/remark-lint/index.js'\n\n  await resolvePlugin('@babel/function-name', {prefix: 'helper'})\n  // => '/Users/tilde/projects/oss/load-plugin/node_modules/@babel/helper-function-name/lib/index.js'\n\n  await resolvePlugin('./index.js', {prefix: 'remark'})\n  // => '/Users/tilde/projects/oss/load-plugin/index.js'\n\n  await loadPlugin('lint', {prefix: 'remark'})\n  // => [Function: lint]\n}\n```\n\n## API\n\nThis package exports the following identifiers: `loadPlugin`, `resolvePlugin`.\nThere is no default export.\n\n### `loadPlugin(name[, options])`\n\nUses Node’s [resolution algorithm][algo] (through\n[`import-meta-resolve`][import-meta-resolve]) to load CJS and ESM packages and\nfiles to import `name` in each given `cwd` (and optionally the global\n`node_modules` directory).\n\nIf a `prefix` is given and `name` is not a path, `$prefix-$name` is also\nsearched (preferring these over non-prefixed modules).\nIf `name` starts with a scope (`@scope/name`), the prefix is applied after it:\n`@scope/$prefix-name`.\n\n##### `options`\n\n###### `options.prefix`\n\nPrefix to search for (`string`, optional).\n\n###### `options.cwd`\n\nPlace or places to search from (`string`, `Array.<string>`, default:\n`process.cwd()`).\n\n###### `options.global`\n\nWhether to look for `name` in [global places][global] (`boolean`, optional,\ndefaults to whether global is detected).\nIf this is nullish, `load-plugin` will detect if it’s currently running in\nglobal mode: either because it’s in Electron, or because a globally installed\npackage is running it.\n\nNote: Electron runs its own version of Node instead of your system Node.\nThat means global packages cannot be found, unless you’ve [set-up][] a [`prefix`\nin your `.npmrc`][prefix] or are using [nvm][] to manage your system node.\n\n###### `options.key`\n\nIdentifier to take from the exports (`string` or `false`, default: `'default'`).\nFor example when given `'whatever'`, the value of `export const whatever = 1`\nwill be returned, when given `'default'`, the value of `export default …` is\nused, and when `false` the whole module object is returned.\n\n###### Returns\n\n`Promise.<unknown>` — Promise yielding the results of `require`ing the first\npath that exists.\nThe promise rejects if `require`ing an existing path fails, or if no existing\npath exists.\n\n### `resolvePlugin(name[, options])`\n\nSearch for `name`.\nAccepts the same parameters as [`loadPlugin`][load-plugin] (except `key`) but\nreturns a promise resolving to an absolute path for `name` instead of importing\nit.\nThrows if `name` cannot be found.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/load-plugin/actions/workflows/main.yml/badge.svg\n\n[build]: https://github.com/wooorm/load-plugin/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/load-plugin.svg\n\n[coverage]: https://codecov.io/github/wooorm/load-plugin\n\n[downloads-badge]: https://img.shields.io/npm/dm/load-plugin.svg\n\n[downloads]: https://www.npmjs.com/package/load-plugin\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[global]: https://docs.npmjs.com/files/folders#node-modules\n\n[load-plugin]: #loadpluginname-options\n\n[prefix]: https://docs.npmjs.com/misc/config#prefix\n\n[set-up]: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\n\n[nvm]: https://github.com/creationix/nvm\n\n[algo]: https://nodejs.org/api/esm.html#esm_resolution_algorithm\n\n[import-meta-resolve]: https://github.com/wooorm/import-meta-resolve\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/load-plugin/-/load-plugin-4.0.1.tgz#9a239b0337064c9b8aac82b0c9f89b067db487c5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/load-plugin/-/load-plugin-4.0.1.tgz",
    "hash": "9a239b0337064c9b8aac82b0c9f89b067db487c5",
    "integrity": "sha512-4kMi+mOSn/TR51pDo4tgxROHfBHXsrcyEYSGHcJ1o6TtRaP2PsRM5EwmYbj1uiLDvbfA/ohwuSWZJzqGiai8Dw==",
    "registry": "npm",
    "packageName": "load-plugin",
    "cacheIntegrity": "sha512-4kMi+mOSn/TR51pDo4tgxROHfBHXsrcyEYSGHcJ1o6TtRaP2PsRM5EwmYbj1uiLDvbfA/ohwuSWZJzqGiai8Dw== sha1-miObAzcGTJuKrIKwyfibBn20h8U="
  },
  "registry": "npm",
  "hash": "9a239b0337064c9b8aac82b0c9f89b067db487c5"
}