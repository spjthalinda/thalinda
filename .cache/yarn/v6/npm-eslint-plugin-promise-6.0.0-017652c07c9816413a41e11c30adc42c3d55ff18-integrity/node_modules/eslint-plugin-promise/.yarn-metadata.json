{
  "manifest": {
    "name": "eslint-plugin-promise",
    "version": "6.0.0",
    "description": "Enforce best practices for JavaScript promises",
    "keywords": [
      "eslint",
      "eslintplugin",
      "eslint-plugin",
      "promise",
      "promises"
    ],
    "author": {
      "name": "jden",
      "email": "jason@denizac.org"
    },
    "contributors": [
      {
        "name": "Brett Zamir"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/xjamundx/eslint-plugin-promise"
    },
    "homepage": "https://github.com/xjamundx/eslint-plugin-promise",
    "bugs": {
      "url": "https://github.com/xjamundx/eslint-plugin-promise/issues"
    },
    "scripts": {
      "format": "prettier --write .",
      "lint": "eslint .",
      "prepare": "husky install",
      "test": "jest --coverage"
    },
    "dependencies": {},
    "devDependencies": {
      "doctoc": "^2.1.0",
      "eslint": "^8.5.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-eslint-plugin": "^4.1.0",
      "eslint-plugin-jest": "^25.3.0",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-prettier": "^4.0.0",
      "husky": "^7.0.4",
      "jest": "^27.4.5",
      "jest-runner-eslint": "^1.0.0",
      "lint-staged": "^12.1.2",
      "prettier": "^2.5.1"
    },
    "peerDependencies": {
      "eslint": "^7.0.0 || ^8.0.0"
    },
    "engines": {
      "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
    },
    "license": "ISC",
    "lint-staged": {
      "{README.md,CONTRIBUTING.md}": [
        "doctoc --maxlevel 3 --notitle"
      ],
      "*.js": [
        "prettier --write",
        "eslint --fix"
      ],
      "*.+(json|md)": [
        "prettier --write"
      ]
    },
    "prettier": {
      "semi": false,
      "singleQuote": true,
      "proseWrap": "always"
    },
    "jest": {
      "coverageThreshold": {
        "global": {
          "branches": 100,
          "functions": 100,
          "lines": 100,
          "statements": 100
        }
      },
      "projects": [
        {
          "displayName": "test",
          "testEnvironment": "node"
        },
        {
          "runner": "jest-runner-eslint",
          "displayName": "lint",
          "testMatch": [
            "<rootDir>/rules/**/*.js",
            "<rootDir>/__tests__/**/*.js",
            "<rootDir>/index.js"
          ]
        }
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-eslint-plugin-promise-6.0.0-017652c07c9816413a41e11c30adc42c3d55ff18-integrity/node_modules/eslint-plugin-promise/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-plugin-promise\n\nEnforce best practices for JavaScript promises.\n\n[![travis-ci](https://travis-ci.org/xjamundx/eslint-plugin-promise.svg)](https://travis-ci.org/xjamundx/eslint-plugin-promise)\n[![npm version](https://badge.fury.io/js/eslint-plugin-promise.svg)](https://www.npmjs.com/package/eslint-plugin-promise)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Rules](#rules)\n- [Maintainers](#maintainers)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nYou'll first need to install [ESLint](http://eslint.org):\n\n```\n$ npm install eslint --save-dev\n```\n\nNext, install `eslint-plugin-promise`:\n\n```\n$ npm install eslint-plugin-promise --save-dev\n```\n\n**Note:** If you installed ESLint globally (using the `-g` flag) then you must\nalso install `eslint-plugin-promise` globally.\n\n## Usage\n\nAdd `promise` to the plugins section of your `.eslintrc.json` configuration\nfile. You can omit the `eslint-plugin-` prefix:\n\n```json\n{\n  \"plugins\": [\"promise\"]\n}\n```\n\nThen configure the rules you want to use under the rules section.\n\n```json\n{\n  \"rules\": {\n    \"promise/always-return\": \"error\",\n    \"promise/no-return-wrap\": \"error\",\n    \"promise/param-names\": \"error\",\n    \"promise/catch-or-return\": \"error\",\n    \"promise/no-native\": \"off\",\n    \"promise/no-nesting\": \"warn\",\n    \"promise/no-promise-in-callback\": \"warn\",\n    \"promise/no-callback-in-promise\": \"warn\",\n    \"promise/avoid-new\": \"warn\",\n    \"promise/no-new-statics\": \"error\",\n    \"promise/no-return-in-finally\": \"warn\",\n    \"promise/valid-params\": \"warn\"\n  }\n}\n```\n\nor start with the recommended rule set:\n\n```json\n{\n  \"extends\": [\"plugin:promise/recommended\"]\n}\n```\n\n## Rules\n\n| rule                                                     | description                                                                      | recommended | fixable  |\n| -------------------------------------------------------- | -------------------------------------------------------------------------------- | ----------- | -------- |\n| [`catch-or-return`][catch-or-return]                     | Enforces the use of `catch()` on un-returned promises.                           | :bangbang:  |          |\n| [`no-return-wrap`][no-return-wrap]                       | Avoid wrapping values in `Promise.resolve` or `Promise.reject` when not needed.  | :bangbang:  |          |\n| [`param-names`][param-names]                             | Enforce consistent param names and ordering when creating new promises.          | :bangbang:  |          |\n| [`always-return`][always-return]                         | Return inside each `then()` to create readable and reusable Promise chains.      | :bangbang:  |          |\n| [`no-native`][no-native]                                 | In an ES5 environment, make sure to create a `Promise` constructor before using. |             |          |\n| [`no-nesting`][no-nesting]                               | Avoid nested `then()` or `catch()` statements                                    | :warning:   |          |\n| [`no-promise-in-callback`][no-promise-in-callback]       | Avoid using promises inside of callbacks                                         | :warning:   |          |\n| [`no-callback-in-promise`][no-callback-in-promise]       | Avoid calling `cb()` inside of a `then()` (use [nodeify][] instead)              | :warning:   |          |\n| [`avoid-new`][avoid-new]                                 | Avoid creating `new` promises outside of utility libs (use [pify][] instead)     |             |          |\n| [`no-new-statics`][no-new-statics]                       | Avoid calling `new` on a Promise static method                                   | :bangbang:  | :wrench: |\n| [`no-return-in-finally`][no-return-in-finally]           | Disallow return statements in `finally()`                                        | :warning:   |          |\n| [`valid-params`][valid-params]                           | Ensures the proper number of arguments are passed to Promise functions           | :warning:   |          |\n| [`prefer-await-to-then`][prefer-await-to-then]           | Prefer `await` to `then()`/`catch()`/`finally()` for reading Promise values      | :seven:     |          |\n| [`prefer-await-to-callbacks`][prefer-await-to-callbacks] | Prefer async/await to the callback pattern                                       | :seven:     |          |\n\n**Key**\n\n| icon       | description                                     |\n| ---------- | ----------------------------------------------- |\n| :bangbang: | Reports as error in recommended configuration   |\n| :warning:  | Reports as warning in recommended configuration |\n| :seven:    | ES2017 Async Await rules                        |\n| :wrench:   | Rule is fixable with `eslint --fix`             |\n\n## Maintainers\n\n- Jamund Ferguson - [@xjamundx][]\n- Macklin Underdown - [@macklinu][]\n\n## License\n\n- (c) MMXV jden <mailto:jason@denizac.org> - ISC license.\n- (c) 2016 Jamund Ferguson <mailto:jamund@gmail.com> - ISC license.\n\n[catch-or-return]: docs/rules/catch-or-return.md\n[no-return-wrap]: docs/rules/no-return-wrap.md\n[param-names]: docs/rules/param-names.md\n[always-return]: docs/rules/always-return.md\n[no-native]: docs/rules/no-native.md\n[no-nesting]: docs/rules/no-nesting.md\n[no-promise-in-callback]: docs/rules/no-promise-in-callback.md\n[no-callback-in-promise]: docs/rules/no-callback-in-promise.md\n[avoid-new]: docs/rules/avoid-new.md\n[no-new-statics]: docs/rules/no-new-statics.md\n[no-return-in-finally]: docs/rules/no-return-in-finally.md\n[valid-params]: docs/rules/valid-params.md\n[prefer-await-to-then]: docs/rules/prefer-await-to-then.md\n[prefer-await-to-callbacks]: docs/rules/prefer-await-to-callbacks.md\n[nodeify]: https://www.npmjs.com/package/nodeify\n[pify]: https://www.npmjs.com/package/pify\n[@macklinu]: https://github.com/macklinu\n[@xjamundx]: https://github.com/xjamundx\n",
    "licenseText": "Copyright (c) 2020, Jamund Ferguson\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-6.0.0.tgz#017652c07c9816413a41e11c30adc42c3d55ff18",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-6.0.0.tgz",
    "hash": "017652c07c9816413a41e11c30adc42c3d55ff18",
    "integrity": "sha512-7GPezalm5Bfi/E22PnQxDWH2iW9GTvAlUNTztemeHb6c1BniSyoeTrM87JkC0wYdi6aQrZX9p2qEiAno8aTcbw==",
    "registry": "npm",
    "packageName": "eslint-plugin-promise",
    "cacheIntegrity": "sha512-7GPezalm5Bfi/E22PnQxDWH2iW9GTvAlUNTztemeHb6c1BniSyoeTrM87JkC0wYdi6aQrZX9p2qEiAno8aTcbw== sha1-AXZSwHyYFkE6QeEcMK3ELD1V/xg="
  },
  "registry": "npm",
  "hash": "017652c07c9816413a41e11c30adc42c3d55ff18"
}