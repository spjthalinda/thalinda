"use strict";
var _MLCore_filename, _MLCore_document, _MLCore_parser, _MLCore_sourceCode, _MLCore_ast, _MLCore_ruleset, _MLCore_locale, _MLCore_rules, _MLCore_schemas, _MLCore_ignoreFrontMatter;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLCore = void 0;
const tslib_1 = require("tslib");
const parser_utils_1 = require("@markuplint/parser-utils");
const debug_1 = require("./debug");
const ml_dom_1 = require("./ml-dom");
const resultLog = debug_1.log.extend('result');
class MLCore {
    constructor({ parser, sourceCode, ruleset, rules, locale, schemas, parserOptions, filename, debug }) {
        var _a, _b, _c;
        _MLCore_filename.set(this, void 0);
        _MLCore_document.set(this, void 0);
        _MLCore_parser.set(this, void 0);
        _MLCore_sourceCode.set(this, void 0);
        _MLCore_ast.set(this, null);
        _MLCore_ruleset.set(this, void 0);
        _MLCore_locale.set(this, void 0);
        _MLCore_rules.set(this, void 0);
        _MLCore_schemas.set(this, void 0);
        _MLCore_ignoreFrontMatter.set(this, void 0);
        if (debug) {
            (0, debug_1.enableDebug)();
        }
        tslib_1.__classPrivateFieldSet(this, _MLCore_parser, parser, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_sourceCode, sourceCode, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_ignoreFrontMatter, !!parserOptions.ignoreFrontMatter, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_ruleset, {
            rules: (_a = ruleset.rules) !== null && _a !== void 0 ? _a : {},
            nodeRules: (_b = ruleset.nodeRules) !== null && _b !== void 0 ? _b : [],
            childNodeRules: (_c = ruleset.childNodeRules) !== null && _c !== void 0 ? _c : [],
        }, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_locale, locale, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_schemas, schemas, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_filename, filename, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_rules, rules, "f");
        this._parse();
        this._createDocument();
    }
    get document() {
        return tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f");
    }
    async verify(fix = false) {
        (0, debug_1.log)('verify: start');
        const violations = [];
        if (tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f") instanceof parser_utils_1.ParserError) {
            violations.push({
                ruleId: 'parse-error',
                severity: 'error',
                message: tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f").message,
                col: tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f").col,
                line: tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f").line,
                raw: tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f").raw,
            });
            (0, debug_1.log)('verify: error %o', tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f").message);
            return violations;
        }
        for (const rule of tslib_1.__classPrivateFieldGet(this, _MLCore_rules, "f")) {
            const ruleInfo = rule.getRuleInfo(tslib_1.__classPrivateFieldGet(this, _MLCore_ruleset, "f"), rule.name);
            if (ruleInfo.disabled && ruleInfo.nodeRules.length === 0 && ruleInfo.childNodeRules.length === 0) {
                continue;
            }
            (0, debug_1.log)('%s Rule: verify', rule.name);
            const results = await rule.verify(tslib_1.__classPrivateFieldGet(this, _MLCore_document, "f"), tslib_1.__classPrivateFieldGet(this, _MLCore_locale, "f"), ruleInfo, fix).catch(e => {
                if (e instanceof parser_utils_1.ParserError) {
                    return e;
                }
                throw e;
            });
            if (results instanceof parser_utils_1.ParserError) {
                (0, debug_1.log)('%s Rule: verify error %o', rule.name, results.message);
                violations.push({
                    ruleId: 'parse-error',
                    severity: 'error',
                    message: results.message,
                    col: results.col,
                    line: results.line,
                    raw: results.raw,
                });
            }
            else {
                violations.push(...results);
            }
            (0, debug_1.log)('%s Rule: verify end', rule.name);
        }
        if (resultLog.enabled) {
            const { e, w, i } = violations.reduce((c, v) => {
                if (v.severity === 'error')
                    c.e += 1;
                if (v.severity === 'warning')
                    c.w += 1;
                if (v.severity === 'info')
                    c.i += 1;
                return c;
            }, { e: 0, w: 0, i: 0 });
            resultLog('Error: %d', e);
            resultLog('Warning: %d', w);
            resultLog('Info: %d', i);
        }
        (0, debug_1.log)('verify: end');
        return violations;
    }
    setCode(sourceCode) {
        tslib_1.__classPrivateFieldSet(this, _MLCore_sourceCode, sourceCode, "f");
        this._parse();
        this._createDocument();
    }
    update({ parser, ruleset, rules, locale, schemas, parserOptions }) {
        var _a, _b, _c;
        tslib_1.__classPrivateFieldSet(this, _MLCore_parser, parser !== null && parser !== void 0 ? parser : tslib_1.__classPrivateFieldGet(this, _MLCore_parser, "f"), "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_ruleset, {
            rules: (_a = ruleset === null || ruleset === void 0 ? void 0 : ruleset.rules) !== null && _a !== void 0 ? _a : tslib_1.__classPrivateFieldGet(this, _MLCore_ruleset, "f").rules,
            nodeRules: (_b = ruleset === null || ruleset === void 0 ? void 0 : ruleset.nodeRules) !== null && _b !== void 0 ? _b : tslib_1.__classPrivateFieldGet(this, _MLCore_ruleset, "f").nodeRules,
            childNodeRules: (_c = ruleset === null || ruleset === void 0 ? void 0 : ruleset.childNodeRules) !== null && _c !== void 0 ? _c : tslib_1.__classPrivateFieldGet(this, _MLCore_ruleset, "f").childNodeRules,
        }, "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_rules, rules !== null && rules !== void 0 ? rules : tslib_1.__classPrivateFieldGet(this, _MLCore_rules, "f"), "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_locale, locale !== null && locale !== void 0 ? locale : tslib_1.__classPrivateFieldGet(this, _MLCore_locale, "f"), "f");
        tslib_1.__classPrivateFieldSet(this, _MLCore_schemas, schemas !== null && schemas !== void 0 ? schemas : tslib_1.__classPrivateFieldGet(this, _MLCore_schemas, "f"), "f");
        if (parserOptions && parserOptions.ignoreFrontMatter !== tslib_1.__classPrivateFieldGet(this, _MLCore_ignoreFrontMatter, "f")) {
            this._parse();
        }
        this._createDocument();
    }
    _parse() {
        try {
            tslib_1.__classPrivateFieldSet(this, _MLCore_ast, tslib_1.__classPrivateFieldGet(this, _MLCore_parser, "f").parse(tslib_1.__classPrivateFieldGet(this, _MLCore_sourceCode, "f"), 0, 0, 0, tslib_1.__classPrivateFieldGet(this, _MLCore_ignoreFrontMatter, "f")), "f");
        }
        catch (err) {
            (0, debug_1.log)('Caught the parse error: %O', err);
            tslib_1.__classPrivateFieldSet(this, _MLCore_ast, null, "f");
            if (err instanceof parser_utils_1.ParserError) {
                tslib_1.__classPrivateFieldSet(this, _MLCore_document, err, "f");
            }
            else {
                throw err;
            }
        }
    }
    _createDocument() {
        if (!tslib_1.__classPrivateFieldGet(this, _MLCore_ast, "f")) {
            return;
        }
        try {
            tslib_1.__classPrivateFieldSet(this, _MLCore_document, new ml_dom_1.Document(tslib_1.__classPrivateFieldGet(this, _MLCore_ast, "f"), tslib_1.__classPrivateFieldGet(this, _MLCore_ruleset, "f"), tslib_1.__classPrivateFieldGet(this, _MLCore_schemas, "f"), {
                filename: tslib_1.__classPrivateFieldGet(this, _MLCore_filename, "f"),
                tagNameCaseSensitive: tslib_1.__classPrivateFieldGet(this, _MLCore_parser, "f").tagNameCaseSensitive,
                endTag: tslib_1.__classPrivateFieldGet(this, _MLCore_parser, "f").endTag,
            }), "f");
        }
        catch (err) {
            if (err instanceof parser_utils_1.ParserError) {
                tslib_1.__classPrivateFieldSet(this, _MLCore_document, err, "f");
            }
            else {
                throw err;
            }
        }
    }
}
exports.MLCore = MLCore;
_MLCore_filename = new WeakMap(), _MLCore_document = new WeakMap(), _MLCore_parser = new WeakMap(), _MLCore_sourceCode = new WeakMap(), _MLCore_ast = new WeakMap(), _MLCore_ruleset = new WeakMap(), _MLCore_locale = new WeakMap(), _MLCore_rules = new WeakMap(), _MLCore_schemas = new WeakMap(), _MLCore_ignoreFrontMatter = new WeakMap();
