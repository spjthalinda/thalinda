"use strict";
var _MLDOMAbstractElement_fixedNodeName, _MLDOMAbstractElement_getChildElementsAndTextNodeWithoutWhitespacesCache, _MLDOMAbstractElement_normalizedString;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ml_spec_1 = require("@markuplint/ml-spec");
const helper_1 = require("../helper");
const accname_1 = require("../helper/accname");
const walkers_1 = require("../helper/walkers");
const node_1 = tslib_1.__importDefault(require("./node"));
class MLDOMAbstractElement extends node_1.default {
    constructor(astNode, document) {
        super(astNode, document);
        this.nodeType = 1;
        this.attributes = [];
        this.hasSpreadAttr = false;
        this.ownModels = new Set();
        this.childModels = new Set();
        this.descendantModels = new Set();
        _MLDOMAbstractElement_fixedNodeName.set(this, void 0);
        _MLDOMAbstractElement_getChildElementsAndTextNodeWithoutWhitespacesCache.set(this, null);
        _MLDOMAbstractElement_normalizedString.set(this, null);
        this.nodeName = astNode.nodeName;
        tslib_1.__classPrivateFieldSet(this, _MLDOMAbstractElement_fixedNodeName, astNode.nodeName, "f");
        this.namespaceURI = astNode.namespace;
        this.isForeignElement = this.namespaceURI !== 'http://www.w3.org/1999/xhtml';
        this.isCustomElement = astNode.isCustomElement;
        this.isInFragmentDocument = document.isFragment;
    }
    get tagName() {
        return this.nodeName;
    }
    get children() {
        return this.childNodes.filter((node) => {
            return node.type === 'Element' || node.type === 'OmittedElement';
        });
    }
    get nextElementSibling() {
        var _a, _b;
        let nextNode = this.nextNode;
        while (nextNode) {
            if ((((this.parentNode === null && nextNode.parentNode === null) ||
                ((_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.uuid) === ((_b = nextNode.parentNode) === null || _b === void 0 ? void 0 : _b.uuid)) &&
                nextNode.type === 'Element') ||
                nextNode.type === 'OmittedElement') {
                return nextNode;
            }
            nextNode = nextNode.nextNode;
        }
        return null;
    }
    get previousElementSibling() {
        var _a, _b;
        let prevNode = this.prevNode;
        while (prevNode) {
            if ((((this.parentNode === null && prevNode.parentNode === null) ||
                ((_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.uuid) === ((_b = prevNode.parentNode) === null || _b === void 0 ? void 0 : _b.uuid)) &&
                prevNode.type === 'Element') ||
                prevNode.type === 'OmittedElement') {
                return prevNode;
            }
            prevNode = prevNode.prevNode;
        }
        return null;
    }
    get ns() {
        if (/[a-z]:[a-z]/i.test(this.nodeName)) {
            return this.nodeName.split(':')[0];
        }
        return (0, ml_spec_1.getNS)(this.namespaceURI);
    }
    get nameWithNS() {
        if (/[a-z]:[a-z]/i.test(this.nodeName)) {
            return this.nodeName;
        }
        const ns = (0, ml_spec_1.getNS)(this.namespaceURI);
        if (ns === 'html') {
            return this.nodeName.toLowerCase();
        }
        return `${ns}:${this.nodeName}`;
    }
    get classList() {
        const classList = [];
        const classAttrs = this.getAttributeToken('class');
        for (const classAttr of classAttrs) {
            const value = classAttr.attrType === 'html-attr' ? classAttr.value : classAttr.potentialValue;
            classList.push(...value
                .split(/\s+/g)
                .map(c => c.trim())
                .filter(c => c));
        }
        return classList;
    }
    get id() {
        return this.getAttribute('id') || '';
    }
    get fixedNodeName() {
        return tslib_1.__classPrivateFieldGet(this, _MLDOMAbstractElement_fixedNodeName, "f");
    }
    get textContent() {
        return this.childNodes.map(child => child.textContent || '').join('');
    }
    querySelectorAll(selector) {
        const matchedNodes = [];
        const selecor = (0, helper_1.createSelector)(selector);
        (0, walkers_1.syncWalk)(this.childNodes, node => {
            if (node.type === 'Element' && selecor.match(node, this)) {
                matchedNodes.push(node);
            }
            if (selector === '#text' && node.type === 'Text' && !node.isWhitespace()) {
                matchedNodes.push(node);
            }
        });
        return matchedNodes;
    }
    closest(selector) {
        const selecor = (0, helper_1.createSelector)(selector);
        let el = this;
        do {
            if (selecor.match(el, this)) {
                return el;
            }
            el = el.getParentElement();
        } while (el !== null && el.type === 'Element');
        return null;
    }
    getAttributeToken(attrName) {
        const attrs = [];
        attrName = attrName.toLowerCase();
        for (const attr of this.attributes) {
            if (attr.potentialName === attrName) {
                attrs.push(attr);
            }
        }
        return attrs;
    }
    getAttributeNode(attrName) {
        return this.getAttributeToken(attrName)[0] || null;
    }
    getAttribute(attrName) {
        attrName = attrName.toLowerCase();
        for (const attr of this.attributes) {
            if (attr.potentialName === attrName) {
                if (attr.attrType === 'html-attr') {
                    return attr.value ? attr.value : null;
                }
                else {
                    return attr.potentialValue;
                }
            }
        }
        return null;
    }
    hasAttribute(attrName) {
        return !!this.getAttributeToken(attrName).length;
    }
    matches(selector) {
        return !!(0, helper_1.createSelector)(selector).match(this);
    }
    fixNodeName(name) {
        tslib_1.__classPrivateFieldSet(this, _MLDOMAbstractElement_fixedNodeName, name, "f");
    }
    getChildElementsAndTextNodeWithoutWhitespaces() {
        if (tslib_1.__classPrivateFieldGet(this, _MLDOMAbstractElement_getChildElementsAndTextNodeWithoutWhitespacesCache, "f")) {
            return tslib_1.__classPrivateFieldGet(this, _MLDOMAbstractElement_getChildElementsAndTextNodeWithoutWhitespacesCache, "f");
        }
        const filteredNodes = [];
        this.childNodes.forEach(node => {
            if (node.type === 'Element') {
                filteredNodes.push(node);
            }
            if (node.type === 'Text' && !node.isWhitespace()) {
                filteredNodes.push(node);
            }
            if (node.type === 'OmittedElement') {
                const children = node.getChildElementsAndTextNodeWithoutWhitespaces();
                filteredNodes.push(...children);
            }
        });
        tslib_1.__classPrivateFieldSet(this, _MLDOMAbstractElement_getChildElementsAndTextNodeWithoutWhitespacesCache, filteredNodes, "f");
        return filteredNodes;
    }
    /**
     * This element has "Preprocessor Specific Block". In other words, Its children are potentially mutable.
     */
    hasMutableChildren(attr = false) {
        for (const child of this.childNodes) {
            if (child.type === 'PSBlock') {
                return true;
            }
            if (child.type === 'Element' || child.type === 'OmittedElement') {
                if (attr && child.hasMutableAttributes()) {
                    return true;
                }
                if (child.hasMutableChildren()) {
                    return true;
                }
            }
        }
        return false;
    }
    hasMutableAttributes() {
        for (const attr of this.attributes) {
            if (attr.attrType === 'ps-attr') {
                return true;
            }
            if (attr.isDynamicValue) {
                return true;
            }
        }
        return false;
    }
    isDescendantByUUIDList(uuidList) {
        let el = this.getParentElement();
        if (el === null) {
            return false;
        }
        do {
            if (uuidList.includes(el.uuid)) {
                return true;
            }
            el = el.getParentElement();
        } while (el !== null && el.type === 'Element');
        return false;
    }
    getAccessibleName() {
        return (0, accname_1.getAccname)(this);
    }
    toNormalizeString() {
        if (tslib_1.__classPrivateFieldGet(this, _MLDOMAbstractElement_normalizedString, "f")) {
            return tslib_1.__classPrivateFieldGet(this, _MLDOMAbstractElement_normalizedString, "f");
        }
        const children = this.getChildElementsAndTextNodeWithoutWhitespaces();
        const attrs = this.attributes.map(attr => attr.toNormalizeString());
        const attrString = attrs.length ? ' ' + attrs.join('') : '';
        const startTag = `<${this.nodeName}${attrString}>`;
        const childNodes = children.map(node => {
            if (node.type === 'Element') {
                return node.toNormalizeString();
            }
            return node.originRaw;
        });
        const endTag = `</${this.nodeName}>`;
        const normalizedString = `${startTag}${childNodes.join('')}${endTag}`;
        tslib_1.__classPrivateFieldSet(this, _MLDOMAbstractElement_normalizedString, normalizedString, "f");
        return normalizedString;
    }
}
exports.default = MLDOMAbstractElement;
_MLDOMAbstractElement_fixedNodeName = new WeakMap(), _MLDOMAbstractElement_getChildElementsAndTextNodeWithoutWhitespacesCache = new WeakMap(), _MLDOMAbstractElement_normalizedString = new WeakMap();
