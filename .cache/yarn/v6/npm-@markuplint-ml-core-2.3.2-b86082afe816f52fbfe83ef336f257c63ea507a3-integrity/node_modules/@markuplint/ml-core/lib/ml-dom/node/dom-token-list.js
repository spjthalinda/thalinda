"use strict";
var _MLDomTokenList_set;
Object.defineProperty(exports, "__esModule", { value: true });
exports.toDOMTokenList = exports.MLDomTokenList = void 0;
const tslib_1 = require("tslib");
const unexpected_call_error_1 = tslib_1.__importDefault(require("./unexpected-call-error"));
class MLDomTokenList extends Array {
    constructor(tokens) {
        const list = tokens
            .split(/\s+/)
            .map(t => t.trim())
            .filter(t => !!t);
        super(...list);
        _MLDomTokenList_set.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _MLDomTokenList_set, new Set(list), "f");
    }
    get value() {
        return this.join(' ');
    }
    add(...tokens) {
        for (const token of tokens) {
            if (tslib_1.__classPrivateFieldGet(this, _MLDomTokenList_set, "f").has(token)) {
                continue;
            }
            tslib_1.__classPrivateFieldGet(this, _MLDomTokenList_set, "f").add(token);
            this.push(token);
        }
    }
    contains(token) {
        return tslib_1.__classPrivateFieldGet(this, _MLDomTokenList_set, "f").has(token);
    }
    forEach(callbackfn, thisArg) {
        this.forEach.bind(this)((v, i) => callbackfn(v, i, thisArg !== null && thisArg !== void 0 ? thisArg : this));
    }
    item(index) {
        var _a;
        return (_a = this[index]) !== null && _a !== void 0 ? _a : null;
    }
    remove(...tokens) {
        throw new unexpected_call_error_1.default('Not supported "remove" method');
    }
    replace(token, newToken) {
        throw new unexpected_call_error_1.default('Not supported "replace" method');
    }
    supports(token) {
        throw new unexpected_call_error_1.default('Not supported "supports" method');
    }
    toggle(token, force) {
        throw new unexpected_call_error_1.default('Not supported "toggle" method');
    }
    toString() {
        return this.value;
    }
}
exports.MLDomTokenList = MLDomTokenList;
_MLDomTokenList_set = new WeakMap();
function toDOMTokenList(tokens) {
    const tokenList = new MLDomTokenList(tokens);
    return tokenList;
}
exports.toDOMTokenList = toDOMTokenList;
