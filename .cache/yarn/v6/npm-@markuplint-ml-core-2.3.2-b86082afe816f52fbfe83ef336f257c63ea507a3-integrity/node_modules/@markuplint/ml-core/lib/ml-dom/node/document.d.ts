import type { MLRule } from '../../ml-rule';
import type Ruleset from '../../ruleset';
import type { Walker } from '../helper/walkers';
import type { MLToken } from '../token/token';
import type { MLAttr } from './attr';
import type { MLComment } from './comment';
import type { MLDocumentType } from './document-type';
import type { MLElement } from './element';
import type { MLNode } from './node';
import type { MLText } from './text';
import type { DocumentNodeType } from './types';
import type { MLASTDocument } from '@markuplint/ml-ast';
import type { RuleConfigValue } from '@markuplint/ml-config';
import type { ExtendedSpec, MLMLSpec } from '@markuplint/ml-spec';
import { MLParentNode } from './parent-node';
export declare class MLDocument<T extends RuleConfigValue, O = null> extends MLParentNode<T, O> implements Document {
    #private;
    /**
     *
     */
    currentRule: MLRule<T, O> | null;
    /**
     *
     */
    readonly endTag: 'xml' | 'omittable' | 'never';
    /**
     *
     */
    readonly isFragment: boolean;
    /**
     * An array of markuplint DOM nodes
     */
    readonly nodeList: ReadonlyArray<MLNode<T, O>>;
    readonly ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    /**
     *
     */
    readonly specs: Readonly<MLMLSpec>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get activeElement(): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get alinkColor(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get all(): HTMLAllCollection;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get anchors(): HTMLCollectionOf<HTMLAnchorElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get applets(): HTMLCollection;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get bgColor(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get body(): HTMLElement;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get characterSet(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get charset(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get compatMode(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get contentType(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get cookie(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get currentScript(): HTMLOrSVGScriptElement | null;
    /**
     * Window object for calling the `getComputedStyle` and the `getPropertyValue` that
     * are needed by **Accessible Name and Description Computation**.
     * But it always returns the empty object.
     * (It may improve to possible to compute the name from the `style` attribute in the future.)
     *
     * @implements DOM API: `Document`
     */
    get defaultView(): any;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get designMode(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get dir(): string;
    /**
     * @implements DOM API: `Document`
     */
    get doctype(): MLDocumentType<T, O> | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get documentElement(): HTMLElement;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get documentURI(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get domain(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get embeds(): HTMLCollectionOf<HTMLEmbedElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fgColor(): string;
    /**
     * It could be used in rule, make sure it is immutable
     *
     * @implements `@markuplint/ml-core` API: `MLDOMDocument`
     */
    get filename(): string | undefined;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fonts(): FontFaceSet;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get forms(): HTMLCollectionOf<HTMLFormElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fullscreen(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fullscreenElement(): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fullscreenEnabled(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get head(): HTMLHeadElement;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get hidden(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get images(): HTMLCollectionOf<HTMLImageElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get implementation(): DOMImplementation;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get inputEncoding(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get lastModified(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get linkColor(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get links(): HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get location(): Location;
    /**
     * Returns a string appropriate for the type of node as `Document`
     *
     * @see https://dom.spec.whatwg.org/#ref-for-document%E2%91%A8
     */
    get nodeName(): "#document";
    /**
     * Returns a number appropriate for the type of `Document`
     */
    get nodeType(): DocumentNodeType;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onabort(): ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationcancel(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationend(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationiteration(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationstart(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onauxclick(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onblur(): ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncanplay(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncanplaythrough(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onclick(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onclose(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncontextmenu(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncopy(): ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncuechange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncut(): ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondblclick(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondrag(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragend(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragenter(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragleave(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragover(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragstart(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondrop(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondurationchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onemptied(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onended(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onerror(): OnErrorEventHandler;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onfocus(): ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onformdata(): ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onfullscreenchange(): ((this: Document, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onfullscreenerror(): ((this: Document, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ongotpointercapture(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oninput(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oninvalid(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onkeydown(): ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onkeypress(): ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onkeyup(): ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onload(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onloadeddata(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onloadedmetadata(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onloadstart(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onlostpointercapture(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmousedown(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseenter(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseleave(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmousemove(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseout(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseover(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseup(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpaste(): ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpause(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onplay(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onplaying(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointercancel(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerdown(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerenter(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerleave(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerlockchange(): ((this: Document, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerlockerror(): ((this: Document, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointermove(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerout(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerover(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerup(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onprogress(): ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onratechange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onreadystatechange(): ((this: Document, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onreset(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onresize(): ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onscroll(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onsecuritypolicyviolation(): ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onseeked(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onseeking(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onselect(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onselectionchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onselectstart(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onslotchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onstalled(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onsubmit(): ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onsuspend(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontimeupdate(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontoggle(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitioncancel(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitionend(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitionrun(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitionstart(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onvisibilitychange(): ((this: Document, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onvolumechange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwaiting(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkitanimationend(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkitanimationiteration(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkitanimationstart(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkittransitionend(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwheel(): ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
    get ownerDocument(): null;
    get ownerMLDocument(): MLDocument<T, O>;
    /**
     * @implements DOM API: `Document`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentnode%E2%91%A0
     */
    get parentNode(): null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get pictureInPictureElement(): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get pictureInPictureEnabled(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get plugins(): HTMLCollectionOf<HTMLEmbedElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get pointerLockElement(): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get readyState(): DocumentReadyState;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get referrer(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get rootElement(): SVGSVGElement | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get scripts(): HTMLCollectionOf<HTMLScriptElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get scrollingElement(): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get styleSheets(): StyleSheetList;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get timeline(): DocumentTimeline;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get title(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get URL(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get visibilityState(): DocumentVisibilityState;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get vlinkColor(): string;
    /**
     *
     * @param ast node list of markuplint AST
     * @param ruleset ruleset object
     */
    constructor(ast: MLASTDocument, ruleset: Ruleset, schemas: readonly [MLMLSpec, ...ExtendedSpec[]], options?: {
        filename?: string;
        endTag?: 'xml' | 'omittable' | 'never';
    });
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    adoptNode<T extends Node>(node: T): T;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    captureEvents(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    caretRangeFromPoint(x: number, y: number): Range | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    clear(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    close(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createAttribute(localName: string): Attr;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createAttributeNS(namespace: string | null, qualifiedName: string): Attr;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createCDATASection(data: string): CDATASection;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createComment(data: string): Comment;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createDocumentFragment(): DocumentFragment;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createElement(tagName: any, options?: any): any;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createElementNS(namespace: any, qualifiedName: any, options?: any): any;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createEvent(eventInterface: any): any;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createExpression(expression: string, resolver?: XPathNSResolver | null): XPathExpression;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter | null): NodeIterator;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createNSResolver(nodeResolver: Node): XPathNSResolver;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createProcessingInstruction(target: string, data: string): ProcessingInstruction;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createRange(): Range;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createTextNode(data: string): Text;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter | null): TreeWalker;
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    debugMap(): string[];
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    elementFromPoint(x: number, y: number): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    elementsFromPoint(x: number, y: number): Element[];
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver | null, type?: number, result?: XPathResult | null): XPathResult;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    exitFullscreen(): Promise<void>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    exitPictureInPicture(): Promise<void>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    exitPointerLock(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getAnimations(): Animation[];
    /**
     * @implements DOM API: `Document`
     */
    getElementById(elementId: string): MLElement<T, O> | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByClassName(classNames: string): HTMLCollectionOf<MLElement<T, O>>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByName(elementName: string): NodeListOf<HTMLElement>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<MLElement<T, O>>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByTagNameNS(namespace: any, localName: any): any;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getSelection(): Selection | null;
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    getTokenList(): readonly MLToken<import("@markuplint/ml-ast").MLToken>[];
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    hasFocus(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    hasStorageAccess(): Promise<boolean>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    importNode<T extends Node>(node: T, deep?: boolean): T;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    open(url?: any, name?: any, features?: any): any;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandEnabled(commandId: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandIndeterm(commandId: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandState(commandId: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandSupported(commandId: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandValue(commandId: string): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    releaseEvents(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    requestStorageAccess(): Promise<void>;
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    setRule(rule: MLRule<T, O> | null): void;
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    toString(): string;
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    walkOn(type: 'Element', walker: Walker<T, O, MLElement<T, O>>, skipWhenRuleIsDisabled?: boolean): Promise<void>;
    walkOn(type: 'Text', walker: Walker<T, O, MLText<T, O>>, skipWhenRuleIsDisabled?: boolean): Promise<void>;
    walkOn(type: 'Comment', walker: Walker<T, O, MLComment<T, O>>, skipWhenRuleIsDisabled?: boolean): Promise<void>;
    walkOn(type: 'Attr', walker: Walker<T, O, MLAttr<T, O>>, skipWhenRuleIsDisabled?: boolean): Promise<void>;
    walkOn(type: 'ElementCloseTag', walker: Walker<T, O, MLToken>, skipWhenRuleIsDisabled?: boolean): Promise<void>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    write(...text: string[]): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    writeln(...text: string[]): void;
    private _ruleMapping;
}
