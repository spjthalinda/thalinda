"use strict";
var _MLNode_childNodes, _MLNode_ownerDocument, _MLNode_prevToken;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLNode = void 0;
const tslib_1 = require("tslib");
const token_1 = require("../token/token");
const child_node_1 = require("./child-node");
const node_list_1 = require("./node-list");
const node_store_1 = require("./node-store");
const unexpected_call_error_1 = tslib_1.__importDefault(require("./unexpected-call-error"));
class MLNode extends token_1.MLToken {
    constructor(astNode, document) {
        super(astNode);
        /**
         * Cached `childNodes` property
         */
        _MLNode_childNodes.set(this, void 0);
        /**
         * Owner `Document`
         *
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#ref-for-dom-node-ownerdocument
         */
        _MLNode_ownerDocument.set(this, void 0);
        /**
         * Cached `prevToken` property
         */
        _MLNode_prevToken.set(this, void 0);
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ATTRIBUTE_NODE = 2;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.CDATA_SECTION_NODE = 4;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.COMMENT_NODE = 8;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.DOCUMENT_FRAGMENT_NODE = 11;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.DOCUMENT_NODE = 9;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_contained_by
         */
        this.DOCUMENT_POSITION_CONTAINED_BY = 16;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_contains
         */
        this.DOCUMENT_POSITION_CONTAINS = 8;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_disconnected
         */
        this.DOCUMENT_POSITION_DISCONNECTED = 0b1;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_following
         */
        this.DOCUMENT_POSITION_FOLLOWING = 0b100;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_implementation_specific
         */
        this.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_preceding
         */
        this.DOCUMENT_POSITION_PRECEDING = 0b10;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.DOCUMENT_TYPE_NODE = 10;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ELEMENT_NODE = 1;
        /**
         * @deprecated
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ENTITY_NODE = 6;
        /**
         * @deprecated
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ENTITY_REFERENCE_NODE = 5;
        /**
         * @implements `@markuplint/ml-core` API: `MLNode`
         */
        this.MARKUPLINT_PREPROCESSOR_BLOCK = 101;
        /**
         * @deprecated
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.NOTATION_NODE = 12;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.PROCESSING_INSTRUCTION_NODE = 7;
        this.rules = {};
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.TEXT_NODE = 3;
        this._astToken = astNode;
        tslib_1.__classPrivateFieldSet(this, _MLNode_ownerDocument, document, "f");
        node_store_1.nodeStore.setNode(astNode, this);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-baseuri%E2%91%A0
     */
    get baseURI() {
        throw new unexpected_call_error_1.default('Not supported "baseURI" property');
    }
    /**
     * The list of child nodes that contains `Element`, `Text`, and `Comment`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-childnodes%E2%91%A0
     */
    get childNodes() {
        if (tslib_1.__classPrivateFieldGet(this, _MLNode_childNodes, "f") != null) {
            return tslib_1.__classPrivateFieldGet(this, _MLNode_childNodes, "f");
        }
        if (this.is(this.DOCUMENT_NODE)) {
            const childNodes = [];
            for (const node of this.nodeList) {
                if ((0, child_node_1.isChildNode)(node) && (node.parentNode === this || node.parentNode === null)) {
                    childNodes.push(node);
                }
            }
            // Cache
            tslib_1.__classPrivateFieldSet(this, _MLNode_childNodes, (0, node_list_1.toNodeList)(childNodes), "f");
            return tslib_1.__classPrivateFieldGet(this, _MLNode_childNodes, "f");
        }
        if (this.is(this.DOCUMENT_FRAGMENT_NODE) ||
            this.is(this.ELEMENT_NODE) ||
            this.is(this.MARKUPLINT_PREPROCESSOR_BLOCK)) {
            // @ts-ignore
            const astChildren = this._astToken.childNodes || [];
            const childNodes = astChildren
                .map(node => node_store_1.nodeStore.getNode(node))
                .filter((node) => (0, child_node_1.isChildNode)(node));
            // Cache
            tslib_1.__classPrivateFieldSet(this, _MLNode_childNodes, (0, node_list_1.toNodeList)(childNodes), "f");
            return tslib_1.__classPrivateFieldGet(this, _MLNode_childNodes, "f");
        }
        // Cache
        tslib_1.__classPrivateFieldSet(this, _MLNode_childNodes, (0, node_list_1.toNodeList)([]), "f");
        return tslib_1.__classPrivateFieldGet(this, _MLNode_childNodes, "f");
    }
    /**
     * The first node that may be `Element`, `Text`, and `CommentNode`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-firstchild%E2%91%A0
     */
    get firstChild() {
        return this.childNodes[0] || null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-isconnected%E2%91%A0
     */
    get isConnected() {
        throw new unexpected_call_error_1.default('Not supported "isConnected" property');
    }
    /**
     * The last node that may be `Element`, `Text`, and `CommentNode`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-lastchild%E2%91%A0
     */
    get lastChild() {
        return this.childNodes[this.childNodes.length - 1] || null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get nextNode() {
        if (!this._astToken.nextNode) {
            return null;
        }
        return node_store_1.nodeStore.getNode(this._astToken.nextNode);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nextsibling%E2%91%A0
     */
    get nextSibling() {
        throw new unexpected_call_error_1.default('Not supported "nextSibling" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * It must not call from the instance of the `MLNode` class.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nodename%E2%91%A0
     */
    get nodeName() {
        throw new Error('It must not call from the instance of the `MLNode` class');
    }
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nodetype%E2%91%A0
     */
    get nodeType() {
        return -1;
    }
    /**
     * The nodeValue getter steps are to return the following, switching on the interface this implements:
     *
     * - `Attr`: this’s value.
     * - `CharacterData`: this’s data.
     * - _Otherwise_: Null.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-nodevalue
     */
    get nodeValue() {
        return null;
    }
    /**
     * The `Document` that this node belongs to.
     *
     * @deprecated
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-ownerdocument%E2%91%A0
     */
    get ownerDocument() {
        return tslib_1.__classPrivateFieldGet(this, _MLNode_ownerDocument, "f");
    }
    get ownerMLDocument() {
        return tslib_1.__classPrivateFieldGet(this, _MLNode_ownerDocument, "f");
    }
    /**
     * The parent element.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentelement%E2%91%A0
     */
    get parentElement() {
        let parent = this.parentNode;
        while (parent) {
            if (parent.is(parent.ELEMENT_NODE)) {
                return parent;
            }
            parent = parent.parentNode;
        }
        return null;
    }
    /**
     * The parent node that may be `Element`, `Document`, `DocumentFragment`, and `null`.
     *
     * ## HTML:
     *
     * ```html
     * <html> // => #document
     *   <body></body> // => <html>
     * </html>
     * ```
     *
     * ---
     *
     * ```html
     * <div> // => null
     *   <span></span> // => <div>
     * </div>
     * ```
     *
     * ## JSX:
     *
     * ```jsx
     * <> // => null
     *   <div> // => #document-fragment
     *     {items.map(item => {
     *       return (
     *         <span /> // => null
     *       )
     *     })}
     *   </div>
     * </>
     * ```
     *
     * ## Pug
     *
     * ```jade
     * //- null
     * div
     *   //- <div>
     *   if foo
     *     //- null
     *     span
     * ```
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentnode%E2%91%A0
     */
    get parentNode() {
        const parentNode = this.syntaxicalParentNode;
        if (!parentNode) {
            return null;
        }
        if (parentNode.is(parentNode.MARKUPLINT_PREPROCESSOR_BLOCK)) {
            if (parentNode.isTransparent) {
                return parentNode.parentNode;
            }
            return null;
        }
        if (parentNode.is(parentNode.ELEMENT_NODE) || parentNode.is(parentNode.DOCUMENT_FRAGMENT_NODE)) {
            return parentNode;
        }
        if (parentNode.is(parentNode.DOCUMENT_NODE) && parentNode.isFragment) {
            return null;
        }
        return parentNode;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-previoussibling%E2%91%A0
     */
    get previousSibling() {
        throw new unexpected_call_error_1.default('Not supported "previousSibling" property');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get prevNode() {
        if (!this._astToken.prevNode) {
            return null;
        }
        return node_store_1.nodeStore.getNode(this._astToken.prevNode);
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get prevToken() {
        if (tslib_1.__classPrivateFieldGet(this, _MLNode_prevToken, "f") !== undefined) {
            return tslib_1.__classPrivateFieldGet(this, _MLNode_prevToken, "f");
        }
        let index = -1;
        for (let i = 0; i < this.ownerMLDocument.nodeList.length; i++) {
            const node = this.ownerMLDocument.nodeList[i];
            if (!node) {
                continue;
            }
            if (node.is(this.ELEMENT_NODE) && node.isOmitted) {
                continue;
            }
            if (node.uuid === this.uuid) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            tslib_1.__classPrivateFieldSet(this, _MLNode_prevToken, null, "f");
            return tslib_1.__classPrivateFieldGet(this, _MLNode_prevToken, "f");
        }
        tslib_1.__classPrivateFieldSet(this, _MLNode_prevToken, this.ownerMLDocument.nodeList[index - 1] || null, "f");
        return tslib_1.__classPrivateFieldGet(this, _MLNode_prevToken, "f") || null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get rule() {
        if (!this.ownerMLDocument.currentRule) {
            throw new Error('Invalid call: Some rule evaluations may not be running asynchronously.');
        }
        const name = this.ownerMLDocument.currentRule.name;
        const rule = this.rules[name];
        return this.ownerMLDocument.currentRule.optimizeOption(rule);
    }
    /**
     * Returns a syntaxical parent node
     *
     * ## HTML:
     *
     * ```html
     * <html> // => #document
     *   <body></body> // => <html>
     * </html>
     * ```
     *
     * ## JSX:
     *
     * ```jsx
     * <> // => #document
     *   <div> // => #document-fragment
     *     {items.map(item => {
     *       return (
     *         <span /> // => #ml-block
     *       )
     *     })}
     *   </div>
     * </>
     * ```
     *
     * ## Pug
     *
     * ```jade
     * //- #document
     * div
     *   //- <div>
     *   if foo
     *     //- #ml-block
     *     span
     * ```
     *
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get syntaxicalParentNode() {
        if (!this._astToken.parentNode) {
            return this.ownerMLDocument;
        }
        return node_store_1.nodeStore.getNode(this._astToken.parentNode);
    }
    /**
     * Return the text content.
     *
     * - If the node is a `Comment`, or `Text`, textContent returns, or sets, the text inside the node, i.e., the Node.nodeValue.
     * - For other node types, textContent returns the concatenation of the textContent of every child node, excluding comments and processing instructions. (This is an empty string if the node has no children.)
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-textcontent
     */
    get textContent() {
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-addeventlistener%E2%91%A2
     */
    addEventListener(type, callback, options = {}) {
        throw new unexpected_call_error_1.default('Not supported "addEventListener" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-appendchild
     */
    appendChild(node) {
        throw new unexpected_call_error_1.default('Not supported "appendChild" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-clonenode%E2%91%A0
     */
    cloneNode(deep) {
        throw new unexpected_call_error_1.default('Not supported "appendChild" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-comparedocumentposition%E2%91%A0
     */
    compareDocumentPosition(other) {
        throw new unexpected_call_error_1.default('Not supported "compareDocumentPosition" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-contains%E2%91%A0
     */
    contains(other) {
        throw new unexpected_call_error_1.default('Not supported "contains" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-dispatchevent%E2%91%A2
     */
    dispatchEvent(event) {
        throw new unexpected_call_error_1.default('Not supported "dispatchEvent" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-getrootnode%E2%91%A0
     */
    getRootNode(options) {
        if (options) {
            throw new unexpected_call_error_1.default('Not supported options');
        }
        let parent = this.parentNode;
        while (parent) {
            if (!parent.parentNode) {
                return parent;
            }
            parent = parent.parentNode;
        }
        return parent || this;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-haschildnodes%E2%91%A0
     */
    hasChildNodes() {
        throw new unexpected_call_error_1.default('Not supported "hasChildNodes" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-insertbefore
     */
    insertBefore(node, child) {
        throw new unexpected_call_error_1.default('Not supported "insertBefore" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    is(nodeType) {
        return this.nodeType === nodeType;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-isdefaultnamespace
     */
    isDefaultNamespace(namespace) {
        throw new unexpected_call_error_1.default('Not supported "isDefaultNamespace" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-isequalnode%E2%91%A0
     */
    isEqualNode(otherNode) {
        throw new unexpected_call_error_1.default('Not supported "isEqualNode" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    isInFragmentDocument() {
        return this.ownerMLDocument.isFragment;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-issamenode
     */
    isSameNode(otherNode) {
        throw new unexpected_call_error_1.default('Not supported "isSameNode" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-lookupnamespaceuri
     */
    lookupNamespaceURI(prefix) {
        throw new unexpected_call_error_1.default('Not supported "lookupNamespaceURI" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
     */
    lookupPrefix(namespace) {
        throw new unexpected_call_error_1.default('Not supported "lookupPrefix" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-normalize%E2%91%A0
     */
    normalize() {
        throw new unexpected_call_error_1.default('Not supported "normalize" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-removechild
     */
    removeChild(child) {
        throw new unexpected_call_error_1.default('Not supported "removeChild" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-removeeventlistener%E2%91%A1
     */
    removeEventListener(type, callback, options = {}) {
        throw new unexpected_call_error_1.default('Not supported "removeEventListener" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-replacechild
     */
    replaceChild(node, child) {
        throw new unexpected_call_error_1.default('Not supported "removeChild" method');
    }
}
exports.MLNode = MLNode;
_MLNode_childNodes = new WeakMap(), _MLNode_ownerDocument = new WeakMap(), _MLNode_prevToken = new WeakMap();
