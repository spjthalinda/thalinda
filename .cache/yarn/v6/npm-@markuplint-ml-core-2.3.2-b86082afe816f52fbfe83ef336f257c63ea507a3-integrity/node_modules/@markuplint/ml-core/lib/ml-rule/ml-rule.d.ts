import type { Ruleset } from '..';
import type Document from '../ml-dom/document';
import type { RuleSeed } from './types';
import type { LocaleSet } from '@markuplint/i18n';
import type { GlobalRuleInfo, RuleConfig, RuleConfigValue, RuleInfo, Rules, Severity, Violation } from '@markuplint/ml-config';
export declare class MLRule<T extends RuleConfigValue, O = null> {
    #private;
    readonly name: string;
    readonly defaultServerity: Severity;
    readonly defaultValue: T;
    readonly defaultOptions: O;
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    protected get v(): RuleSeed<T, O>['verify'];
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    protected get f(): RuleSeed<T, O>['fix'];
    constructor(o: RuleSeed<T, O> & {
        name: string;
    });
    verify(document: Document<T, O>, locale: LocaleSet, globalRule: RuleInfo<T, O>, fix: boolean): Promise<Violation[]>;
    getRuleInfo(ruleSet: Ruleset, ruleName: string): GlobalRuleInfo<T, O>;
    _optimize(rules: Rules | undefined, ruleName: string): RuleInfo<T, O>;
    optimizeOption(configSettings: T | RuleConfig<T, O> | undefined): RuleInfo<T, O>;
}
export declare type AnyMLRule = MLRule<RuleConfigValue, unknown>;
