import type { RuleInfo } from '../..';
import type { MLBlock } from './block';
import type { MLChildNode } from './child-node';
import type { MLDocument } from './document';
import type { MLDocumentFragment } from './document-fragment';
import type { MLElement } from './element';
import type { MarkuplintPreprocessorBlockType, NodeType, NodeTypeOf } from './types';
import type { MLASTAbstructNode } from '@markuplint/ml-ast';
import type { AnyRule, RuleConfigValue } from '@markuplint/ml-config';
import { MLToken } from '../token/token';
export declare abstract class MLNode<T extends RuleConfigValue, O = null, A extends MLASTAbstructNode = MLASTAbstructNode> extends MLToken<A> implements Node {
    #private;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly ATTRIBUTE_NODE = 2;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly CDATA_SECTION_NODE = 4;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly COMMENT_NODE = 8;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly DOCUMENT_FRAGMENT_NODE = 11;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly DOCUMENT_NODE = 9;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-document_position_contained_by
     */
    readonly DOCUMENT_POSITION_CONTAINED_BY = 16;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-document_position_contains
     */
    readonly DOCUMENT_POSITION_CONTAINS = 8;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-document_position_disconnected
     */
    readonly DOCUMENT_POSITION_DISCONNECTED = 1;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-document_position_following
     */
    readonly DOCUMENT_POSITION_FOLLOWING = 4;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-document_position_implementation_specific
     */
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-document_position_preceding
     */
    readonly DOCUMENT_POSITION_PRECEDING = 2;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly DOCUMENT_TYPE_NODE = 10;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly ELEMENT_NODE = 1;
    /**
     * @deprecated
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly ENTITY_NODE = 6;
    /**
     * @deprecated
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly ENTITY_REFERENCE_NODE = 5;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    readonly MARKUPLINT_PREPROCESSOR_BLOCK: MarkuplintPreprocessorBlockType;
    /**
     * @deprecated
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly NOTATION_NODE = 12;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly PROCESSING_INSTRUCTION_NODE = 7;
    readonly rules: Record<string, AnyRule>;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#interface-node
     */
    readonly TEXT_NODE = 3;
    protected _astToken: A;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-baseuri%E2%91%A0
     */
    get baseURI(): string;
    /**
     * The list of child nodes that contains `Element`, `Text`, and `Comment`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-childnodes%E2%91%A0
     */
    get childNodes(): NodeListOf<MLChildNode<T, O>>;
    /**
     * The first node that may be `Element`, `Text`, and `CommentNode`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-firstchild%E2%91%A0
     */
    get firstChild(): MLChildNode<T, O>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-isconnected%E2%91%A0
     */
    get isConnected(): boolean;
    /**
     * The last node that may be `Element`, `Text`, and `CommentNode`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-lastchild%E2%91%A0
     */
    get lastChild(): MLChildNode<T, O>;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get nextNode(): MLNode<T, O> | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nextsibling%E2%91%A0
     */
    get nextSibling(): ChildNode | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * It must not call from the instance of the `MLNode` class.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nodename%E2%91%A0
     */
    get nodeName(): string;
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nodetype%E2%91%A0
     */
    get nodeType(): NodeType | -1;
    /**
     * The nodeValue getter steps are to return the following, switching on the interface this implements:
     *
     * - `Attr`: this’s value.
     * - `CharacterData`: this’s data.
     * - _Otherwise_: Null.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-nodevalue
     */
    get nodeValue(): string | null;
    /**
     * The `Document` that this node belongs to.
     *
     * @deprecated
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-ownerdocument%E2%91%A0
     */
    get ownerDocument(): any;
    get ownerMLDocument(): MLDocument<T, O>;
    /**
     * The parent element.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentelement%E2%91%A0
     */
    get parentElement(): MLElement<T, O> | null;
    /**
     * The parent node that may be `Element`, `Document`, `DocumentFragment`, and `null`.
     *
     * ## HTML:
     *
     * ```html
     * <html> // => #document
     *   <body></body> // => <html>
     * </html>
     * ```
     *
     * ---
     *
     * ```html
     * <div> // => null
     *   <span></span> // => <div>
     * </div>
     * ```
     *
     * ## JSX:
     *
     * ```jsx
     * <> // => null
     *   <div> // => #document-fragment
     *     {items.map(item => {
     *       return (
     *         <span /> // => null
     *       )
     *     })}
     *   </div>
     * </>
     * ```
     *
     * ## Pug
     *
     * ```jade
     * //- null
     * div
     *   //- <div>
     *   if foo
     *     //- null
     *     span
     * ```
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentnode%E2%91%A0
     */
    get parentNode(): MLDocument<any, any> | MLDocumentFragment<any, any> | MLElement<T, O> | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-previoussibling%E2%91%A0
     */
    get previousSibling(): ChildNode | null;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get prevNode(): MLNode<T, O> | null;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get prevToken(): MLNode<T, O> | null;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get rule(): RuleInfo<T, O>;
    /**
     * Returns a syntaxical parent node
     *
     * ## HTML:
     *
     * ```html
     * <html> // => #document
     *   <body></body> // => <html>
     * </html>
     * ```
     *
     * ## JSX:
     *
     * ```jsx
     * <> // => #document
     *   <div> // => #document-fragment
     *     {items.map(item => {
     *       return (
     *         <span /> // => #ml-block
     *       )
     *     })}
     *   </div>
     * </>
     * ```
     *
     * ## Pug
     *
     * ```jade
     * //- #document
     * div
     *   //- <div>
     *   if foo
     *     //- #ml-block
     *     span
     * ```
     *
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get syntaxicalParentNode(): MLDocument<any, any> | MLDocumentFragment<any, any> | MLElement<T, O> | MLBlock<T, O> | null;
    /**
     * Return the text content.
     *
     * - If the node is a `Comment`, or `Text`, textContent returns, or sets, the text inside the node, i.e., the Node.nodeValue.
     * - For other node types, textContent returns the concatenation of the textContent of every child node, excluding comments and processing instructions. (This is an empty string if the node has no children.)
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-textcontent
     */
    get textContent(): string | null;
    constructor(astNode: A, document: MLDocument<T, O>);
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-addeventlistener%E2%91%A2
     */
    addEventListener(type: string, callback?: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-appendchild
     */
    appendChild<T extends Node>(node: T): T;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-clonenode%E2%91%A0
     */
    cloneNode(deep?: boolean): Node;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-comparedocumentposition%E2%91%A0
     */
    compareDocumentPosition(other: Node): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-contains%E2%91%A0
     */
    contains(other: Node | null): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-dispatchevent%E2%91%A2
     */
    dispatchEvent(event: Event): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-getrootnode%E2%91%A0
     */
    getRootNode(options?: GetRootNodeOptions): MLNode<T, O>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-haschildnodes%E2%91%A0
     */
    hasChildNodes(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-insertbefore
     */
    insertBefore<T extends Node>(node: T, child: Node | null): T;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    is<NType extends NodeType>(nodeType: NType): this is NodeTypeOf<NType, T, O>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-isdefaultnamespace
     */
    isDefaultNamespace(namespace: string | null): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-isequalnode%E2%91%A0
     */
    isEqualNode(otherNode: Node | null): boolean;
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    isInFragmentDocument(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-issamenode
     */
    isSameNode(otherNode: Node | null): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-lookupnamespaceuri
     */
    lookupNamespaceURI(prefix: string | null): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
     */
    lookupPrefix(namespace: string | null): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-normalize%E2%91%A0
     */
    normalize(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-removechild
     */
    removeChild<T extends Node>(child: T): T;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-removeeventlistener%E2%91%A1
     */
    removeEventListener(type: string, callback?: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-replacechild
     */
    replaceChild<T extends Node>(node: Node, child: T): T;
}
