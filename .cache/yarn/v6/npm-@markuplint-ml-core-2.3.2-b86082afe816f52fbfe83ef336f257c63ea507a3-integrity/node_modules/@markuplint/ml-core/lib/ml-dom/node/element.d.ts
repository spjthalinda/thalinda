import type { MLDocument } from './document';
import type { MLNamedNodeMap } from './named-node-map';
import type { MLText } from './text';
import type { ElementNodeType } from './types';
import type { MLASTElement } from '@markuplint/ml-ast';
import type { RuleConfigValue } from '@markuplint/ml-config';
import { MLToken } from '../token/token';
import { MLAttr } from './attr';
import { MLParentNode } from './parent-node';
export declare class MLElement<T extends RuleConfigValue, O = null> extends MLParentNode<T, O, MLASTElement> implements Element, HTMLOrSVGElement, HTMLElement {
    #private;
    readonly closeTag: MLToken | null;
    readonly endSpace: MLToken | null;
    readonly hasSpreadAttr: boolean;
    readonly isCustomElement: boolean;
    readonly isForeignElement: boolean;
    readonly isOmitted: boolean;
    readonly namespaceURI: string | null;
    readonly ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    readonly selfClosingSolidus: MLToken | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get accessKey(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get accessKeyLabel(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaAtomic(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaAutoComplete(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaBusy(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaChecked(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColCount(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColIndex(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColSpan(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaCurrent(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaDisabled(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaExpanded(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaHasPopup(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaHidden(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaKeyShortcuts(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaLabel(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaLevel(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaLive(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaModal(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaMultiLine(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaMultiSelectable(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaOrientation(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaPlaceholder(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaPosInSet(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaPressed(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaReadOnly(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRequired(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRoleDescription(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowCount(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowIndex(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowSpan(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaSelected(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaSetSize(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaSort(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueMax(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueMin(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueNow(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueText(): string | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-slotable-assignedslot
     */
    get assignedSlot(): HTMLSlotElement | null;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-attributes
     */
    get attributes(): MLNamedNodeMap<T, O>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get autocapitalize(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get autofocus(): boolean;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-classlist%E2%91%A0
     */
    get classList(): DOMTokenList;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-classname%E2%91%A0
     */
    get className(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clientheight-1
     */
    get clientHeight(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clientleft-1
     */
    get clientLeft(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clienttop-1
     */
    get clientTop(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clientwidth-1
     */
    get clientWidth(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get contentEditable(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get dataset(): DOMStringMap;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get dir(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get draggable(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get enterKeyHint(): string;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    get fixedNodeName(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get hidden(): boolean;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-id%E2%91%A0
     */
    get id(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml
     */
    get innerHTML(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get innerText(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get inputMode(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get isContentEditable(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get lang(): string;
    /**
     * Returns a lowercase name if it is an HTML element.
     *
     * ```html
     * <div> => "div"
     * <DIV> => "div"
     * <svg> => "svg"
     * <foreignObject> => "foreignObject"
     * <x-foo> => "x-foo"
     * <X-FOO> => "x-foo"
     * ```
     *
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-localname%E2%91%A0
     */
    get localName(): string;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    get nameWithNS(): string;
    /**
     * The element immediately following the specified one in its parent's children list.
     *
     * @readonly
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-nextelementsibling%E2%91%A1
     */
    get nextElementSibling(): MLElement<T, O> | null;
    /**
     * Returns a string appropriate for the type of node as `Element`
     *
     * @see https://dom.spec.whatwg.org/#ref-for-element%E2%91%A2%E2%93%AA
     */
    get nodeName(): string;
    /**
     * Returns a number appropriate for the type of `Element`
     */
    get nodeType(): ElementNodeType;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get nonce(): string | undefined;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    get ns(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetHeight(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetLeft(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetParent(): Element | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetTop(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetWidth(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onabort(): ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationcancel(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationend(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationiteration(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationstart(): ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onauxclick(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onblur(): ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncanplay(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncanplaythrough(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onclick(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onclose(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncontextmenu(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncopy(): ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncuechange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncut(): ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondblclick(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondrag(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragend(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragenter(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragleave(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragover(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragstart(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondrop(): ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondurationchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onemptied(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onended(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onerror(): OnErrorEventHandler;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onfocus(): ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onformdata(): ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onfullscreenchange(): ((this: Element, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onfullscreenerror(): ((this: Element, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ongotpointercapture(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oninput(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oninvalid(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onkeydown(): ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onkeypress(): ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onkeyup(): ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onload(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onloadeddata(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onloadedmetadata(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onloadstart(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onlostpointercapture(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmousedown(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseenter(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseleave(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmousemove(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseout(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseover(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseup(): ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpaste(): ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpause(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onplay(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onplaying(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointercancel(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerdown(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerenter(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerleave(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointermove(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerout(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerover(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerup(): ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onprogress(): ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onratechange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onreset(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onresize(): ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onscroll(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onsecuritypolicyviolation(): ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onseeked(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onseeking(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onselect(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onselectionchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onselectstart(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onslotchange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onstalled(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onsubmit(): ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onsuspend(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontimeupdate(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontoggle(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitioncancel(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitionend(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitionrun(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitionstart(): ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onvolumechange(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwaiting(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkitanimationend(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkitanimationiteration(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkitanimationstart(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkittransitionend(): ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwheel(): ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/DOM-Parsing/#dom-element-outerhtml
     */
    get outerHTML(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get outerText(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/css-shadow-parts-1/#idl
     */
    get part(): DOMTokenList;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-prefix%E2%91%A0
     */
    get prefix(): string | null;
    /**
     * The element immediately prior the specified one in its parent's children list.
     *
     * @readonly
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-previouselementsibling%E2%91%A1
     */
    get previousElementSibling(): MLElement<T, O> | null;
    get raw(): string;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    get rawName(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrollheight-1
     */
    get scrollHeight(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrollleft-1
     */
    get scrollLeft(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrolltop-1
     */
    get scrollTop(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrollwidth-1
     */
    get scrollWidth(): number;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-shadowroot%E2%91%A0
     */
    get shadowRoot(): ShadowRoot | null;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-slot%E2%91%A0
     */
    get slot(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get spellcheck(): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get style(): CSSStyleDeclaration;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get tabIndex(): number;
    /**
     * Returns the HTML-uppercased qualified name.
     *
     * If this is in the HTML namespace and its node document is an HTML document, then set qualifiedName to qualifiedName in ASCII uppercase.
     *
     * (In markuplint evaluation, the node document always is an HTML document.)
     *
     * ```html
     * <div> => "DIV"
     * <svg> => "svg"
     * <x-foo> => "X-FOO"
     * ```
     *
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-tagname%E2%91%A0
     */
    get tagName(): string;
    get textContent(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get title(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get translate(): boolean;
    constructor(astNode: MLASTElement, document: MLDocument<T, O>);
    /**
     * @implements DOM API: `Element`
     */
    after(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/web-animations-1/#dom-animatable-animate
     */
    animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    attachInternals(): ElementInternals;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-attachshadow%E2%91%A0
     */
    attachShadow(init: ShadowRootInit): ShadowRoot;
    /**
     * @implements DOM API: `Element`
     */
    before(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    blur(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    click(): void;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-closest%E2%91%A0
     */
    closest(selectors: string): MLElement<T, O> | null;
    fixNodeName(name: string): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    focus(options?: FocusOptions): void;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAccessibleName(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/web-animations-1/#dom-animatable-getanimations
     */
    getAnimations(options?: GetAnimationsOptions): Animation[];
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getattribute%E2%91%A0
     */
    getAttribute(attrName: string): string | null;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getattributenames%E2%91%A0
     */
    getAttributeNames(): string[];
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getattributenode
     */
    getAttributeNode(qualifiedName: string): MLAttr<T, O> | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getattributenodens
     */
    getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getattributenodens
     */
    getAttributeNS(namespace: string | null, localName: string): string | null;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAttributeToken(attrName: string): MLAttr<T, O>[];
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAttributeTokens(): readonly MLAttr<T, O>[];
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-getboundingclientrect-1
     */
    getBoundingClientRect(): DOMRect;
    getChildElementsAndTextNodeWithoutWhitespaces(): (MLElement<T, O> | MLText<T, O>)[];
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-getclientrects-1
     */
    getClientRects(): DOMRectList;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getelementsbyclassname
     */
    getElementsByClassName(classNames: string): HTMLCollectionOf<MLElement<T, O>>;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getelementsbyclassname
     */
    getElementsByTagName(qualifiedName: string): ReturnType<typeof Element['prototype']['getElementsByTagName']>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getelementsbytagnamens
     */
    getElementsByTagNameNS(namespace: any, localName: any): any;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getNameLocation(): {
        offset: number;
        line: number;
        col: number;
    };
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-hasattribute%E2%91%A0
     */
    hasAttribute(qualifiedName: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-hasattributens%E2%91%A0
     */
    hasAttributeNS(namespace: string | null, localName: string): boolean;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-hasattributes
     */
    hasAttributes(): boolean;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    hasMutableAttributes(): boolean;
    /**
     * This element has "Preprocessor Specific Block". In other words, Its children are potentially mutable.
     *
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    hasMutableChildren(attr?: boolean): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/pointerevents2/#dom-element-haspointercapture
     */
    hasPointerCapture(pointerId: number): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-insertadjacentelement
     */
    insertAdjacentElement(where: InsertPosition, element: MLElement<T, O>): MLElement<T, O> | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/DOM-Parsing/#widl-Element-insertAdjacentHTML-void-DOMString-position-DOMString-text
     */
    insertAdjacentHTML(position: InsertPosition, text: string): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-insertadjacenttext
     */
    insertAdjacentText(where: InsertPosition, data: string): void;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    isDescendantByUUIDList(uuidList: string[]): boolean;
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-matches%E2%91%A0
     */
    matches(selector: string): boolean;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/pointerevents2/#dom-element-releasepointercapture
     */
    releasePointerCapture(pointerId: number): void;
    /**
     * @implements DOM API: `Element`
     */
    remove(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-removeattribute
     */
    removeAttribute(qualifiedName: string): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-D589198
     */
    removeAttributeNode(attr: Attr): Attr;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-removeattributens%E2%91%A0
     */
    removeAttributeNS(namespace: string | null, localName: string): void;
    /**
     * @implements DOM API: `Element`
     */
    replaceWith(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen
     */
    requestFullscreen(options?: FullscreenOptions): Promise<void>;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/pointerlock/#dom-element-requestpointerlock
     */
    requestPointerLock(): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scroll
     */
    scroll(x?: any, y?: any): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scrollby
     */
    scrollBy(x?: any, y?: any): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scrollintoview
     */
    scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scrollto
     */
    scrollTo(x?: any, y?: any): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-setattribute%E2%91%A0
     */
    setAttribute(qualifiedName: string, value: string): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-setattributenode
     */
    setAttributeNode(attr: Attr): Attr | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-setattributenodens
     */
    setAttributeNodeNS(attr: Attr): Attr | null;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-setattributens%E2%91%A0
     */
    setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/pointerevents2/#idl-def-element-setpointercapture-pointerid
     */
    setPointerCapture(pointerId: number): void;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-toggleattribute%E2%91%A0
     */
    toggleAttribute(qualifiedName: string, force?: boolean): boolean;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    toNormalizeString(): string;
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    toString(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    webkitMatchesSelector(selectors: string): boolean;
}
