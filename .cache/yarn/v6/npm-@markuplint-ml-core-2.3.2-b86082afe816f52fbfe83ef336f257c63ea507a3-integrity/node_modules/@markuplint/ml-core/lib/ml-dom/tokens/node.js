"use strict";
var _MLDOMNode_prevToken;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const token_1 = tslib_1.__importDefault(require("./token"));
class MLDOMNode extends token_1.default {
    constructor(astNode, document) {
        super(astNode);
        // https://dom.spec.whatwg.org/#interface-node
        this.ELEMENT_NODE = 1;
        this.ATTRIBUTE_NODE = 2;
        this.TEXT_NODE = 3;
        this.CDATA_SECTION_NODE = 4;
        this.ENTITY_REFERENCE_NODE = 5; // legacy
        this.ENTITY_NODE = 6; // legacy
        this.PROCESSING_INSTRUCTION_NODE = 7;
        this.COMMENT_NODE = 8;
        this.DOCUMENT_NODE = 9;
        this.DOCUMENT_TYPE_NODE = 10;
        this.DOCUMENT_FRAGMENT_NODE = 11;
        this.NOTATION_NODE = 12; // legacy
        this.type = 'Node';
        this.rules = {};
        /**
         * prevToken cache props
         */
        _MLDOMNode_prevToken.set(this, void 0);
        this._astToken = astNode;
        this.ownerDocument = document;
        this.ownerDocument.nodeStore.setNode(astNode, this);
    }
    get childNodes() {
        if (this._astToken.type === 'starttag' || this._astToken.type === 'omittedtag') {
            // @ts-ignore
            const astChildren = this._astToken.childNodes || [];
            return astChildren.map(node => this.nodeStore.getNode(node));
        }
        return [];
    }
    get parentNode() {
        if (!this._astToken.parentNode) {
            return null;
        }
        return this.ownerDocument.nodeStore.getNode(this._astToken.parentNode);
    }
    get prevNode() {
        if (!this._astToken.prevNode) {
            return null;
        }
        return this.ownerDocument.nodeStore.getNode(this._astToken.prevNode);
    }
    get nextNode() {
        if (!this._astToken.nextNode) {
            return null;
        }
        return this.ownerDocument.nodeStore.getNode(this._astToken.nextNode);
    }
    get syntaxicalParentNode() {
        let parentNode = this.parentNode;
        while (parentNode && parentNode.type === 'OmittedElement') {
            parentNode = parentNode.parentNode;
        }
        return parentNode;
    }
    get prevToken() {
        if (tslib_1.__classPrivateFieldGet(this, _MLDOMNode_prevToken, "f") !== undefined) {
            return tslib_1.__classPrivateFieldGet(this, _MLDOMNode_prevToken, "f");
        }
        let index = -1;
        for (let i = 0; i < this.ownerDocument.nodeList.length; i++) {
            const node = this.ownerDocument.nodeList[i];
            if (!node) {
                continue;
            }
            if (node.type === 'OmittedElement') {
                continue;
            }
            if (node.uuid === this.uuid) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            tslib_1.__classPrivateFieldSet(this, _MLDOMNode_prevToken, null, "f");
            return tslib_1.__classPrivateFieldGet(this, _MLDOMNode_prevToken, "f");
        }
        tslib_1.__classPrivateFieldSet(this, _MLDOMNode_prevToken, this.ownerDocument.nodeList[index - 1] || null, "f");
        return tslib_1.__classPrivateFieldGet(this, _MLDOMNode_prevToken, "f");
    }
    get nodeStore() {
        return this.ownerDocument.nodeStore;
    }
    get rule() {
        if (!this.ownerDocument.currentRule) {
            throw new Error('Invalid call.');
        }
        const name = this.ownerDocument.currentRule.name;
        const rule = this.rules[name];
        return this.ownerDocument.currentRule.optimizeOption(rule);
    }
    get textContent() {
        return null;
    }
    getParentElement() {
        let parent = this.parentNode;
        if (!parent) {
            return null;
        }
        while (parent) {
            if (parent.type === 'PSBlock') {
                parent = parent.parentNode;
                continue;
            }
            return parent;
        }
        return null;
    }
    is(type) {
        return this.type === type;
    }
    toString() {
        return this.raw;
    }
}
exports.default = MLDOMNode;
_MLDOMNode_prevToken = new WeakMap();
