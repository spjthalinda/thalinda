"use strict";
var _MLParentNode_children, _MLParentNode_selectedElements;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLParentNode = void 0;
const tslib_1 = require("tslib");
const walkers_1 = require("../helper/walkers");
const get_children_1 = require("../manipulations/get-children");
const node_1 = require("./node");
const node_list_1 = require("./node-list");
const unexpected_call_error_1 = tslib_1.__importDefault(require("./unexpected-call-error"));
/**
 *
 * @see https://dom.spec.whatwg.org/#interface-parentnode
 */
class MLParentNode extends node_1.MLNode {
    constructor() {
        super(...arguments);
        /**
         * Cached `children`
         */
        _MLParentNode_children.set(this, null);
        /**
         * Cached elements that created from `querySelectorAll`
         */
        _MLParentNode_selectedElements.set(this, new Map());
    }
    /**
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#dom-parentnode-childelementcount
     */
    get childElementCount() {
        return this.children.length;
    }
    /**
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-children%E2%91%A0
     */
    get children() {
        if (tslib_1.__classPrivateFieldGet(this, _MLParentNode_children, "f")) {
            return tslib_1.__classPrivateFieldGet(this, _MLParentNode_children, "f");
        }
        const children = (0, get_children_1.getChildren)(this);
        tslib_1.__classPrivateFieldSet(this, _MLParentNode_children, children, "f");
        return tslib_1.__classPrivateFieldGet(this, _MLParentNode_children, "f");
    }
    /**
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-firstelementchild%E2%91%A0
     */
    get firstElementChild() {
        return this.children[0] || null;
    }
    /**
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-lastelementchild%E2%91%A0
     */
    get lastElementChild() {
        return this.children[0] || null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-append%E2%91%A0
     */
    append(...nodes) {
        throw new unexpected_call_error_1.default('Not supported "append" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-prepend%E2%91%A0
     */
    prepend(...nodes) {
        throw new unexpected_call_error_1.default('Not supported "prepend" method');
    }
    /**
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-queryselector%E2%91%A0
     */
    querySelector(selectors) {
        const selected = this.querySelectorAll(selectors);
        return selected[0] || null;
    }
    /**
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-queryselectorall%E2%91%A0
     */
    querySelectorAll(selectors) {
        const selected = tslib_1.__classPrivateFieldGet(this, _MLParentNode_selectedElements, "f").get(selectors);
        if (selected) {
            return selected;
        }
        const elements = (0, node_list_1.toNodeList)(this._descendantsToArray(node => {
            if (node.is(node.ELEMENT_NODE) && node.matches(selectors)) {
                return node;
            }
        }));
        tslib_1.__classPrivateFieldGet(this, _MLParentNode_selectedElements, "f").set(selectors, elements);
        return elements;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`, `Document`, `DocumentFragment`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-parentnode-replacechildren%E2%91%A0
     */
    replaceChildren(...nodes) {
        throw new unexpected_call_error_1.default('Not supported "replaceChildren" method');
    }
    _descendantsToArray(filter) {
        const nodeList = [];
        (0, walkers_1.syncWalk)(Array.from(this.childNodes), node => {
            if (filter) {
                const filtered = filter(node);
                if (filtered) {
                    nodeList.push(filtered);
                }
                return;
            }
            return node;
        });
        return Object.freeze(nodeList);
    }
}
exports.MLParentNode = MLParentNode;
_MLParentNode_children = new WeakMap(), _MLParentNode_selectedElements = new WeakMap();
