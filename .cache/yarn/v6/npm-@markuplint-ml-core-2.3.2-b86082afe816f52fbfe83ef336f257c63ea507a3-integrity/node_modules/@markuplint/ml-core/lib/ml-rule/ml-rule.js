"use strict";
var _MLRule_v, _MLRule_f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLRule = void 0;
const tslib_1 = require("tslib");
const ml_rule_context_1 = require("./ml-rule-context");
class MLRule {
    constructor(o) {
        var _a, _b;
        _MLRule_v.set(this, void 0);
        _MLRule_f.set(this, void 0);
        this.name = o.name;
        this.defaultServerity = o.defaultServerity || 'error';
        this.defaultValue = (_a = o.defaultValue) !== null && _a !== void 0 ? _a : true;
        this.defaultOptions = (_b = o.defaultOptions) !== null && _b !== void 0 ? _b : null;
        tslib_1.__classPrivateFieldSet(this, _MLRule_v, o.verify, "f");
        tslib_1.__classPrivateFieldSet(this, _MLRule_f, o.fix, "f");
    }
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    get v() {
        return tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f");
    }
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    get f() {
        return tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f");
    }
    async verify(document, locale, globalRule, fix) {
        if (!tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f")) {
            return [];
        }
        document.setRule(this);
        const context = new ml_rule_context_1.MLRuleContext(document, locale, globalRule);
        const providableContext = context.provide();
        await tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f").call(this, providableContext);
        if (tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f") && fix) {
            await tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f").call(this, providableContext);
        }
        const violation = context.reports.map(report => {
            if ('scope' in report) {
                let line = report.scope.startLine;
                let col = report.scope.startCol;
                let raw = report.scope.raw;
                if ('line' in report) {
                    line = report.line;
                    col = report.col;
                    raw = report.raw;
                }
                const violation = {
                    severity: report.scope.rule.severity,
                    message: report.message,
                    line,
                    col,
                    raw,
                    ruleId: this.name,
                };
                if (report.scope.rule.reason || globalRule.reason) {
                    violation.reason = report.scope.rule.reason || globalRule.reason;
                }
                return violation;
            }
            const violation = {
                severity: globalRule.severity,
                message: report.message,
                line: report.line,
                col: report.col,
                raw: report.raw,
                ruleId: this.name,
            };
            if (globalRule.reason) {
                violation.reason = globalRule.reason;
            }
            return violation;
        });
        document.setRule(null);
        return violation;
    }
    getRuleInfo(ruleSet, ruleName) {
        const info = this._optimize(ruleSet.rules, ruleName);
        return {
            ...info,
            nodeRules: ruleSet.nodeRules.map(r => this._optimize(r.rules, ruleName)).filter(r => !r.disabled),
            childNodeRules: ruleSet.childNodeRules.map(r => this._optimize(r.rules, ruleName)).filter(r => !r.disabled),
        };
    }
    _optimize(rules, ruleName) {
        const rule = (rules && rules[ruleName]) || false;
        const info = this.optimizeOption(rule);
        return info;
    }
    optimizeOption(configSettings) {
        if (configSettings === undefined || typeof configSettings === 'boolean') {
            return {
                disabled: !configSettings,
                severity: this.defaultServerity,
                value: this.defaultValue,
                option: this.defaultOptions,
                reason: undefined,
            };
        }
        if (!Array.isArray(configSettings) && typeof configSettings === 'object' && configSettings !== null) {
            return {
                disabled: false,
                severity: configSettings.severity || this.defaultServerity,
                value: configSettings.value !== undefined ? configSettings.value : this.defaultValue,
                option: Array.isArray(this.defaultOptions)
                    ? configSettings.option
                        ? // prettier-ignore
                            // @ts-ignore for "as" casting
                            this.defaultOptions.concat(configSettings.option)
                        : this.defaultOptions
                    : this.defaultOptions !== null &&
                        typeof this.defaultOptions === 'object' &&
                        // for example `configSettings.option === true`
                        (configSettings.option == null || typeof configSettings.option === 'object')
                        ? { ...this.defaultOptions, ...(configSettings.option || {}) }
                        : configSettings.option || this.defaultOptions,
                reason: configSettings.reason,
            };
        }
        return {
            disabled: false,
            severity: this.defaultServerity,
            // @ts-ignore TODO: Wait for fix to bug of type guards in TypeScript
            value: configSettings == null ? this.defaultValue : configSettings,
            option: this.defaultOptions,
            reason: undefined,
        };
    }
}
exports.MLRule = MLRule;
_MLRule_v = new WeakMap(), _MLRule_f = new WeakMap();
