import type { MLDocument } from './document';
import type { MLElement } from './element';
import type { MarkuplintPreprocessorBlockType } from './types';
import type { MLASTPreprocessorSpecificBlock } from '@markuplint/ml-ast';
import type { RuleConfigValue } from '@markuplint/ml-config';
import { MLNode } from './node';
export declare class MLBlock<T extends RuleConfigValue, O = null> extends MLNode<T, O, MLASTPreprocessorSpecificBlock> {
    readonly isTransparent: boolean;
    /**
     * Returns a string appropriate for the type of node as `MLBlock`
     *
     * @implements `@markuplint/ml-core` API: `MLBlock`
     */
    get nodeName(): "#ml-block";
    /**
     * Returns a number appropriate for the type of `MLBlock`
     *
     * @implements `@markuplint/ml-core` API: `MLBlock`
     */
    get nodeType(): MarkuplintPreprocessorBlockType;
    constructor(astNode: MLASTPreprocessorSpecificBlock, document: MLDocument<T, O>);
    /**
     * @implements DOM API: `ChildNode`
     */
    after(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * @implements DOM API: `ChildNode`
     */
    before(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * @implements DOM API: `ChildNode`
     */
    remove(): void;
    /**
     * @implements DOM API: `ChildNode`
     */
    replaceWith(...nodes: (string | MLElement<any, any>)[]): void;
}
