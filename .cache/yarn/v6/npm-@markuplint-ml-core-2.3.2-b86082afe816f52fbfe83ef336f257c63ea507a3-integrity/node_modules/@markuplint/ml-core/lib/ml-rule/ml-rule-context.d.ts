import type Document from '../ml-dom/document';
import type { LocaleSet, Translator } from '@markuplint/i18n';
import type { Report, RuleConfigValue, RuleInfo } from '@markuplint/ml-config';
export declare class MLRuleContext<T extends RuleConfigValue, O = null> {
    #private;
    readonly document: Document<T, O>;
    readonly globalRule: RuleInfo<T, O>;
    readonly translate: Translator;
    readonly locale: string;
    constructor(document: Document<T, O>, locale: LocaleSet, rule: RuleInfo<T, O>);
    get reports(): ({
        message: string;
        line: number;
        col: number;
        raw: string;
    } | {
        message: string;
        scope: import("@markuplint/ml-config").Scope<T, O>;
    } | {
        message: string;
        scope: import("@markuplint/ml-config").Scope<T, O>;
        line: number;
        col: number;
        raw: string;
    })[];
    report(report: Report<T, O>): void;
    provide(): {
        document: Document<T, O>;
        translate: Translator;
        t: Translator;
        globalRule: RuleInfo<T, O>;
        reports: ({
            message: string;
            line: number;
            col: number;
            raw: string;
        } | {
            message: string;
            scope: import("@markuplint/ml-config").Scope<T, O>;
        } | {
            message: string;
            scope: import("@markuplint/ml-config").Scope<T, O>;
            line: number;
            col: number;
            raw: string;
        })[];
        report: (report: Report<T, O>) => void;
    };
}
