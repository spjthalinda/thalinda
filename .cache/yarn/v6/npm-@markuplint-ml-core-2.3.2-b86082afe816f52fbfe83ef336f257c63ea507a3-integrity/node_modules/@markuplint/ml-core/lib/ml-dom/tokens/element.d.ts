import type { Document } from '../';
import type { IMLDOMElement } from '../types';
import type { MLDOMElementCloseTag, MLDOMText } from './';
import type { MLASTElement, MLToken } from '@markuplint/ml-ast';
import type { RuleConfigValue } from '@markuplint/ml-config';
import MLDOMAbstractElement from './abstract-element';
import MLDOMToken from './token';
export default class MLDOMElement<T extends RuleConfigValue, O = null> extends MLDOMAbstractElement<T, O, MLASTElement> implements IMLDOMElement {
    #private;
    readonly type = "Element";
    readonly hasSpreadAttr: boolean;
    readonly closeTag: MLDOMElementCloseTag<T, O> | null;
    readonly selfClosingSolidus: MLDOMToken<MLToken> | null;
    readonly endSpace: MLDOMToken<MLToken> | null;
    constructor(astNode: MLASTElement, document: Document<T, O>);
    get raw(): string;
    querySelectorAll(selector: string): (MLDOMElement<T, O> | MLDOMText<T, O>)[];
    getNameLocation(): {
        offset: number;
        line: number;
        col: number;
    };
}
