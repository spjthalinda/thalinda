"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toNamedNodeMap = exports.MLNamedNodeMap = void 0;
const tslib_1 = require("tslib");
const unexpected_call_error_1 = tslib_1.__importDefault(require("./unexpected-call-error"));
class MLNamedNodeMap extends Array {
    getNamedItem(qualifiedName) {
        return this.find(attr => attr.name === qualifiedName) || null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `NamedNodeMap`
     */
    getNamedItemNS(namespace, localName) {
        throw new unexpected_call_error_1.default('Not supported "getNamedItemNS" method');
    }
    item(index) {
        return this[index];
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `NamedNodeMap`
     */
    removeNamedItem(qualifiedName) {
        throw new unexpected_call_error_1.default('Not supported "removeNamedItem" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `NamedNodeMap`
     */
    removeNamedItemNS(namespace, localName) {
        throw new unexpected_call_error_1.default('Not supported "removeNamedItemNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `NamedNodeMap`
     */
    setNamedItem(attr) {
        throw new unexpected_call_error_1.default('Not supported "setNamedItem" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `NamedNodeMap`
     */
    setNamedItemNS(attr) {
        throw new unexpected_call_error_1.default('Not supported "setNamedItemNS" method');
    }
}
exports.MLNamedNodeMap = MLNamedNodeMap;
function toNamedNodeMap(nodes) {
    const namedNodeMap = new MLNamedNodeMap(...nodes);
    return namedNodeMap;
}
exports.toNamedNodeMap = toNamedNodeMap;
