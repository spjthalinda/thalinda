"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLCharacterData = void 0;
const tslib_1 = require("tslib");
const child_node_methods_1 = require("../manipulations/child-node-methods");
const node_1 = require("./node");
const unexpected_call_error_1 = tslib_1.__importDefault(require("./unexpected-call-error"));
class MLCharacterData extends node_1.MLNode {
    /**
     * @implements DOM API: `CharacterData`
     * @see https://dom.spec.whatwg.org/#dom-characterdata-data
     */
    get data() {
        // TODO:
        return this.raw;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `CharacterData`
     * @see https://dom.spec.whatwg.org/#dom-characterdata-length
     */
    get length() {
        throw new unexpected_call_error_1.default('Not supported "length" property');
    }
    /**
     * The element immediately following the specified one in its parent's children list.
     *
     * @readonly
     * @implements DOM API: `CharacterData`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-nextelementsibling%E2%91%A1
     */
    get nextElementSibling() {
        return (0, child_node_methods_1.nextElementSibling)(this);
    }
    get nodeValue() {
        return this.data;
    }
    /**
     * The element immediately prior the specified one in its parent's children list.
     *
     * @readonly
     * @implements DOM API: `CharacterData`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-previouselementsibling%E2%91%A1
     */
    get previousElementSibling() {
        return (0, child_node_methods_1.previousElementSibling)(this);
    }
    /**
     * @implements DOM API: `CharacterData`
     */
    after(...nodes) {
        (0, child_node_methods_1.after)(this, ...nodes);
    }
    // TODO
    appendData(data) { }
    /**
     * @implements DOM API: `CharacterData`
     */
    before(...nodes) {
        (0, child_node_methods_1.before)(this, ...nodes);
    }
    // TODO
    deleteData(offset, count) { }
    // TODO
    insertData(offset, data) { }
    /**
     * @implements DOM API: `CharacterData`
     */
    remove() {
        (0, child_node_methods_1.remove)(this);
    }
    // TODO
    replaceData(offset, count, data) { }
    /**
     * @implements DOM API: `CharacterData`
     */
    replaceWith(...nodes) {
        (0, child_node_methods_1.replaceWith)(this, ...nodes);
    }
    // TODO
    substringData(offset, count) {
        return '';
    }
}
exports.MLCharacterData = MLCharacterData;
