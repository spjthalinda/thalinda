"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextElementSibling = exports.previousElementSibling = exports.remove = exports.replaceWith = exports.after = exports.before = void 0;
const tslib_1 = require("tslib");
const unexpected_call_error_1 = tslib_1.__importDefault(require("../node/unexpected-call-error"));
/**
 *
 * @see https://dom.spec.whatwg.org/#ref-for-dom-childnode-before%E2%91%A0
 */
function before(node, ...additionalNodes) {
    throw new unexpected_call_error_1.default('Not supported "before" method');
}
exports.before = before;
/**
 *
 * @see https://dom.spec.whatwg.org/#ref-for-dom-childnode-after%E2%91%A0
 */
function after(node, ...additionalNodes) {
    throw new unexpected_call_error_1.default('Not supported "after" method');
}
exports.after = after;
/**
 *
 * @see https://dom.spec.whatwg.org/#ref-for-dom-childnode-replacewith%E2%91%A0
 */
function replaceWith(node, ...additionalNodes) {
    throw new unexpected_call_error_1.default('Not supported "replaceWith" method');
}
exports.replaceWith = replaceWith;
/**
 *
 * @see https://dom.spec.whatwg.org/#ref-for-dom-childnode-remove%E2%91%A0
 */
function remove(node) {
    throw new unexpected_call_error_1.default('Not supported "remove" method');
}
exports.remove = remove;
/**
 *
 * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-previouselementsibling%E2%91%A0
 */
function previousElementSibling(node) {
    var _a, _b;
    let prevNode = node.prevNode;
    while (prevNode) {
        if (((node.parentNode === null && prevNode.parentNode === null) ||
            ((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.uuid) === ((_b = prevNode.parentNode) === null || _b === void 0 ? void 0 : _b.uuid)) &&
            prevNode.is(prevNode.ELEMENT_NODE)) {
            return prevNode;
        }
        prevNode = prevNode.prevNode;
    }
    return null;
}
exports.previousElementSibling = previousElementSibling;
/**
 *
 * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-nextelementsibling%E2%91%A0
 */
function nextElementSibling(node) {
    var _a, _b;
    let nextNode = node.nextNode;
    while (nextNode) {
        if (((node.parentNode === null && nextNode.parentNode === null) ||
            ((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.uuid) === ((_b = nextNode.parentNode) === null || _b === void 0 ? void 0 : _b.uuid)) &&
            nextNode.is(nextNode.ELEMENT_NODE)) {
            return nextNode;
        }
        nextNode = nextNode.nextNode;
    }
    return null;
}
exports.nextElementSibling = nextElementSibling;
