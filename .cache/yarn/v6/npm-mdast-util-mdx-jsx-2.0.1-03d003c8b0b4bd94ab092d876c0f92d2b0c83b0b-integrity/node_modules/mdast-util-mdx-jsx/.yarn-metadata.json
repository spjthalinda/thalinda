{
  "manifest": {
    "name": "mdast-util-mdx-jsx",
    "version": "2.0.1",
    "description": "mdast extension to parse and serialize MDX or MDX.js JSX",
    "license": "MIT",
    "keywords": [
      "unist",
      "mdast",
      "mdast-util",
      "util",
      "utility",
      "markdown",
      "markup",
      "mdx",
      "mdxjs",
      "jsx",
      "extension"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/mdast-util-mdx-jsx.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/mdast-util-mdx-jsx/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/estree-jsx": "^0.0.1",
      "@types/hast": "^2.0.0",
      "@types/mdast": "^3.0.0",
      "ccount": "^2.0.0",
      "mdast-util-to-markdown": "^1.3.0",
      "parse-entities": "^4.0.0",
      "stringify-entities": "^4.0.0",
      "unist-util-remove-position": "^4.0.0",
      "unist-util-stringify-position": "^3.0.0",
      "vfile-message": "^3.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "acorn": "^8.0.0",
      "c8": "^7.0.0",
      "mdast-util-from-markdown": "^1.1.0",
      "micromark-extension-mdx-jsx": "^1.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.47.0"
    },
    "scripts": {
      "build": "rimraf \"lib/index.d.ts\" \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --conditions development test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node --conditions development test.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-mdast-util-mdx-jsx-2.0.1-03d003c8b0b4bd94ab092d876c0f92d2b0c83b0b-integrity/node_modules/mdast-util-mdx-jsx/package.json",
    "readmeFilename": "readme.md",
    "readme": "# mdast-util-mdx-jsx\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\nExtensions to parse and serialize JSX between mdast and markdown.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When to use this](#when-to-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`mdxJsxFromMarkdown()`](#mdxjsxfrommarkdown)\n    *   [`mdxJsxToMarkdown(options?)`](#mdxjsxtomarkdownoptions)\n*   [Syntax tree](#syntax-tree)\n    *   [Nodes](#nodes)\n    *   [Mixin](#mixin)\n    *   [Content model](#content-model)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package contains extensions that add support for the JSX syntax enabled by\nMDX to [`mdast-util-from-markdown`][mdast-util-from-markdown] and\n[`mdast-util-to-markdown`][mdast-util-to-markdown].\n\n[JSX][] is an XML-like syntax extension to ECMAScript (JavaScript), which MDX\nbrings to markdown.\nFor more info on MDX, see [What is MDX?][what-is-mdx]\n\n## When to use this\n\nThese tools are all rather low-level.\nIn most cases, you’d want to use [`remark-mdx`][remark-mdx] with remark instead.\n\nWhen you are working with syntax trees and want all of MDX, use\n[`mdast-util-mdx`][mdast-util-mdx] instead.\n\nWhen working with `mdast-util-from-markdown`, you’d want to combine this package\nwith [`micromark-extension-mdx-jsx`][micromark-extension-mdx-jsx].\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install mdast-util-mdx-jsx\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'https://cdn.skypack.dev/mdast-util-mdx-jsx@1?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'https://cdn.skypack.dev/mdast-util-mdx-jsx@1?min'\n</script>\n```\n\n## Use\n\nSay our document `example.mdx` contains:\n\n```mdx\n<Box>\n  - a list\n</Box>\n\n<MyComponent {...props} />\n\n<abbr title=\"Hypertext Markup Language\">HTML</abbr> is a lovely language.\n```\n\n…and our module `example.js` looks as follows:\n\n```js\nimport fs from 'node:fs'\nimport * as acorn from 'acorn'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {toMarkdown} from 'mdast-util-to-markdown'\nimport {mdxJsx} from 'micromark-extension-mdx-jsx'\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'mdast-util-mdx-jsx'\n\nconst doc = fs.readFileSync('example.mdx')\n\nconst tree = fromMarkdown(doc, {\n  extensions: [mdxJsx({acorn: acorn, addResult: true})],\n  mdastExtensions: [mdxJsxFromMarkdown()]\n})\n\nconsole.log(tree)\n\nconst out = toMarkdown(tree, {extensions: [mdxJsxToMarkdown()]})\n\nconsole.log(out)\n```\n\n…now running `node example.js` yields (positional info removed for brevity):\n\n```js\n{\n  type: 'root',\n  children: [\n    {\n      type: 'mdxJsxFlowElement',\n      name: 'Box',\n      attributes: [],\n      children: [\n        {\n          type: 'list',\n          ordered: false,\n          start: null,\n          spread: false,\n          children: [\n            {\n              type: 'listItem',\n              spread: false,\n              checked: null,\n              children: [\n                {type: 'paragraph', children: [{type: 'text', value: 'a list'}]}\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      type: 'mdxJsxFlowElement',\n      name: 'MyComponent',\n      attributes: [\n        {\n          type: 'mdxJsxExpressionAttribute',\n          value: '...props',\n          data: {\n            estree: {\n              type: 'Program',\n              body: [\n                {\n                  type: 'ExpressionStatement',\n                  expression: {\n                    type: 'ObjectExpression',\n                    properties: [\n                      {\n                        type: 'SpreadElement',\n                        argument: {type: 'Identifier', name: 'props'}\n                      }\n                    ]\n                  }\n                }\n              ],\n              sourceType: 'module'\n            }\n          }\n        }\n      ],\n      children: []\n    },\n    {\n      type: 'paragraph',\n      children: [\n        {\n          type: 'mdxJsxTextElement',\n          name: 'abbr',\n          attributes: [\n            {\n              type: 'mdxJsxAttribute',\n              name: 'title',\n              value: 'Hypertext Markup Language'\n            }\n          ],\n          children: [{type: 'text', value: 'HTML'}]\n        },\n        {type: 'text', value: ' is a lovely language.'}\n      ]\n    }\n  ]\n}\n```\n\n```markdown\n<Box>\n  *   a list\n</Box>\n\n<MyComponent {...props} />\n\n<abbr title=\"Hypertext Markup Language\">HTML</abbr> is a lovely language.\n```\n\n## API\n\nThis package exports the following identifiers: `mdxJsxFromMarkdown`,\n`mdxJsxToMarkdown`.\nThere is no default export.\n\n### `mdxJsxFromMarkdown()`\n\nFunction that can be called to get an extension for\n[`mdast-util-from-markdown`][mdast-util-from-markdown].\n\nWhen using [`micromark-extension-mdx-jsx`][micromark-extension-mdx-jsx]\nwith `options.addResult`, nodes will have a `data.estree` field set to an\n[ESTree][].\n\n### `mdxJsxToMarkdown(options?)`\n\nFunction that can be called to get an extension for\n[`mdast-util-to-markdown`][mdast-util-to-markdown].\n\nThis extension configures `mdast-util-to-markdown` with\n[`options.fences: true`][mdast-util-to-markdown-fences] and\n[`options.resourceLink: true`][mdast-util-to-markdown-resourcelink] too, do not\noverwrite them!\n\n##### `options`\n\nConfiguration (optional).\n\n###### `options.quote`\n\nPreferred quote to use around attribute values (`'\"'` or `\"'\"`, default: `'\"'`).\n\n###### `options.quoteSmart`\n\nUse the other quote if that results in less bytes (`boolean`, default: `false`).\n\n###### `options.tightSelfClosing`\n\nDo not use an extra space when closing self-closing elements: `<img/>` instead\nof `<img />` (`boolean`, default: `false`).\n\n###### `options.printWidth`\n\nTry and wrap syntax as this width (`number`, default: `Infinity`).\nWhen set to a finite number (say, `80`), the formatter will print attributes on\nseparate lines when a tag doesn’t fit on one line.\nThe normal behavior is to print attributes with spaces between them instead of\nline endings.\n\n## Syntax tree\n\nThe following interfaces are added to **[mdast][]** by this utility.\n\n### Nodes\n\n###### `MdxJsxFlowElement`\n\n```idl\ninterface MdxJsxFlowElement <: Parent {\n  type: \"mdxJsxFlowElement\"\n}\n\nMdxJsxFlowElement includes MdxJsxElement\n```\n\n**MdxJsxFlowElement** (**[Parent][dfn-parent]**) represents JSX in flow (block).\nIt can be used where **[flow][dfn-content-flow]** content is expected.\nIt includes the mixin **[MdxJsxElement][dfn-mixin-mdx-jsx-element]**.\n\nFor example, the following markdown:\n\n```markdown\n<w x=\"y\">\n  z\n</w>\n```\n\nYields:\n\n```js\n{\n  type: 'mdxJsxFlowElement',\n  name: 'w',\n  attributes: [{type: 'mdxJsxAttribute', name: 'x', value: 'y'}],\n  children: [{type: 'paragraph', children: [{type: 'text', value: 'z'}]}]\n}\n```\n\n###### `MdxJsxTextElement`\n\n```idl\ninterface MdxJsxTextElement <: Parent {\n  type: \"mdxJsxTextElement\"\n}\n\nMdxJsxTextElement includes MdxJsxElement\n```\n\n**MdxJsxTextElement** (**[Parent][dfn-parent]**) represents JSX in text (span,\ninline).\nIt can be used where **[phrasing][dfn-content-phrasing]** content is\nexpected.\nIt includes the mixin **[MdxJsxElement][dfn-mixin-mdx-jsx-element]**.\n\nFor example, the following markdown:\n\n```markdown\na <b c>d</b> e.\n```\n\nYields:\n\n```js\n{\n  type: 'mdxJsxTextElement',\n  name: 'b',\n  attributes: [{type: 'mdxJsxAttribute', name: 'c', value: null}],\n  children: [{type: 'text', value: 'd'}]\n}\n```\n\n### Mixin\n\n###### `MdxJsxElement`\n\n```idl\ninterface mixin MdxJsxElement {\n  name: string?\n  attributes: [MdxJsxExpressionAttribute | MdxJsxAttribute]\n}\n\ninterface MdxJsxExpressionAttribute <: Literal {\n  type: \"mdxJsxExpressionAttribute\"\n}\n\ninterface MdxJsxAttribute <: Node {\n  type: \"mdxJsxAttribute\"\n  name: string\n  value: MdxJsxAttributeValueExpression | string?\n}\n\ninterface MdxJsxAttributeValueExpression <: Literal {\n  type: \"mdxJsxAttributeValueExpression\"\n}\n```\n\n**MdxJsxElement** represents a JSX element.\n\nThe `name` field can be present and represents an identifier.\nWithout `name`, the element represents a fragment, in which case no attributes\nmust be present.\n\nThe `attributes` field represents information associated with the node.\nThe value of the `attributes` field is a list of **MdxJsxExpressionAttribute**\nand **MdxJsxAttribute** nodes.\n\n**MdxJsxExpressionAttribute** represents an expression (typically in a\nprogramming language) that when evaluated results in multiple attributes.\n\n**MdxJsxAttribute** represents a single attribute.\nThe `name` field must be present.\nThe `value` field can be present, in which case it is either a string (a static\nvalue) or an expression (typically in a programming language) that when\nevaluated results in an attribute value.\n\n### Content model\n\n###### `FlowContent` (MDX JSX)\n\n```idl\ntype MdxJsxFlowContent = MdxJsxFlowElement | FlowContent\n```\n\n###### `PhrasingContent` (MDX JSX)\n\n```idl\ntype MdxJsxPhrasingContent = MdxJsxTextElement | PhrasingContent\n```\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the `MdxJsxAttributeValueExpression`, `MdxJsxAttribute`,\n`MdxJsxExpressionAttribute`, `MdxJsxFlowElement`, and `MdxJsxTextElement` types\nthat represents the supported nodes.\nIt also exports `ToMarkdownOptions`, which represents the structure of the\nrespective options.\n\nIt also registers the node types with `@types/mdast`.\nIf you’re working with the syntax tree, make sure to import this plugin\nsomewhere in your types, as that registers the new node types in the tree.\n\n```js\n/** @typedef {import('mdast-util-mdx-jsx')} */\n\nimport {visit} from 'unist-util-visit'\n\n/** @type {import('mdast').Root} */\nconst tree = getMdastNodeSomeHow()\n\nvisit(tree, (node) => {\n  // `node` can now be one of the JSX nodes.\n})\n```\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\nThis plugin works with `mdast-util-from-markdown` version 1+ and\n`mdast-util-to-markdown` version 1+.\n\n## Related\n\n*   [`micromark/micromark-extension-mdx-jsx`][micromark-extension-mdx-jsx]\n    — support MDX JSX in micromark\n*   [`syntax-tree/mdast-util-mdx`][mdast-util-mdx]\n    — support MDX in mdast\n*   [`remarkjs/remark-mdx`][remark-mdx]\n    — support MDX in remark\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-mdx-jsx/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-mdx-jsx/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-mdx-jsx.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-mdx-jsx\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-mdx-jsx.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-mdx-jsx\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-mdx-jsx.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-mdx-jsx\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[mdast-util-from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[mdast-util-to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[mdast-util-mdx]: https://github.com/syntax-tree/mdast-util-mdx\n\n[estree]: https://github.com/estree/estree\n\n[dfn-parent]: https://github.com/syntax-tree/mdast#parent\n\n[dfn-content-flow]: #flowcontent-mdx-jsx\n\n[dfn-content-phrasing]: #phrasingcontent-mdx-jsx\n\n[dfn-mixin-mdx-jsx-element]: #mdxjsxelement\n\n[remark-mdx]: https://github.com/mdx-js/mdx/tree/main/packages/remark-mdx\n\n[jsx]: https://facebook.github.io/jsx/\n\n[what-is-mdx]: https://mdxjs.com/docs/what-is-mdx/\n\n[micromark-extension-mdx-jsx]: https://github.com/micromark/micromark-extension-mdx-jsx\n\n[mdast-util-to-markdown-fences]: https://github.com/syntax-tree/mdast-util-to-markdown#optionsfences\n\n[mdast-util-to-markdown-resourcelink]: https://github.com/syntax-tree/mdast-util-to-markdown#optionsresourcelink\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2020 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mdast-util-mdx-jsx/-/mdast-util-mdx-jsx-2.0.1.tgz#03d003c8b0b4bd94ab092d876c0f92d2b0c83b0b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mdast-util-mdx-jsx/-/mdast-util-mdx-jsx-2.0.1.tgz",
    "hash": "03d003c8b0b4bd94ab092d876c0f92d2b0c83b0b",
    "integrity": "sha512-oPC7/smPBf7vxnvIYH5y3fPo2lw1rdrswFfSb4i0GTAXRUQv7JUU/t/hbp07dgGdUFTSDOHm5DNamhNg/s2Hrg==",
    "registry": "npm",
    "packageName": "mdast-util-mdx-jsx",
    "cacheIntegrity": "sha512-oPC7/smPBf7vxnvIYH5y3fPo2lw1rdrswFfSb4i0GTAXRUQv7JUU/t/hbp07dgGdUFTSDOHm5DNamhNg/s2Hrg== sha1-A9ADyLC0vZSrCS2HbA+S0rDIOws="
  },
  "registry": "npm",
  "hash": "03d003c8b0b4bd94ab092d876c0f92d2b0c83b0b"
}