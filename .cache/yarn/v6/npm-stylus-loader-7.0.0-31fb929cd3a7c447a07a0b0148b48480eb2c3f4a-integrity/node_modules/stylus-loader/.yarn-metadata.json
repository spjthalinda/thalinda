{
  "manifest": {
    "name": "stylus-loader",
    "version": "7.0.0",
    "description": "Stylus loader for webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/stylus-loader.git"
    },
    "author": {
      "name": "Kyle Robinson Young",
      "email": "kyle@dontkry.com",
      "url": "http://dontkry.com"
    },
    "homepage": "https://github.com/webpack-contrib/stylus-loader",
    "bugs": {
      "url": "https://github.com/webpack-contrib/stylus-loader/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 14.15.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "commitlint": "commitlint --from=master",
      "security": "npm audit --production",
      "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "husky install && npm run build",
      "release": "standard-version"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "stylus": ">=0.52.4",
      "webpack": "^5.0.0"
    },
    "dependencies": {
      "fast-glob": "^3.2.11",
      "klona": "^2.0.5",
      "normalize-path": "^3.0.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.17.10",
      "@babel/core": "^7.17.10",
      "@babel/eslint-parser": "^7.17.0",
      "@babel/preset-env": "^7.17.10",
      "@commitlint/cli": "^17.0.0",
      "@commitlint/config-conventional": "^17.0.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^28.1.0",
      "benchmark": "^2.1.4",
      "bootstrap-styl": "^5.0.9",
      "cross-env": "^7.0.3",
      "css-loader": "^6.7.1",
      "del": "^6.0.0",
      "del-cli": "^4.0.1",
      "eslint": "^8.15.0",
      "eslint-config-prettier": "^8.5.0",
      "eslint-plugin-import": "^2.26.0",
      "husky": "^8.0.1",
      "jest": "^28.1.0",
      "lint-staged": "^12.4.1",
      "memfs": "^3.4.1",
      "nib": "^1.1.2",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.6.2",
      "raw-loader": "^4.0.2",
      "standard-version": "^9.3.2",
      "style-loader": "^3.3.1",
      "stylus": "^0.57.0",
      "webpack": "^5.72.1"
    },
    "keywords": [
      "webpack",
      "loader",
      "stylus"
    ],
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-stylus-loader-7.0.0-31fb929cd3a7c447a07a0b0148b48480eb2c3f4a-integrity/node_modules/stylus-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# stylus-loader\n\nA Stylus loader for webpack. Compiles Styl to CSS.\n\n## Getting Started\n\nTo begin, you'll need to install `stylus` and `stylus-loader`:\n\n```console\nnpm install stylus stylus-loader --save-dev\n```\n\nor\n\n```console\nyarn add -D stylus stylus-loader\n```\n\nor\n\n````console\npnpm add -D stylus stylus-loader\n\nThen add the loader to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        loader: \"stylus-loader\", // compiles Styl to CSS\n      },\n    ],\n  },\n};\n````\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n- **[`stylusOptions`](#stylusOptions)**\n- **[`sourceMap`](#sourcemap)**\n- **[`webpackImporter`](#webpackimporter)**\n- **[`additionalData`](#additionalData)**\n- **[`implementation`](#implementation)**\n\n### `stylusOptions`\n\nType:\n\n```ts\ntype stylusOptions =\n  | {\n      use: Array<string | Function>;\n      include: string;\n      import: string;\n      define: Array;\n      includeCSS: false;\n      resolveURL: boolean | Object;\n      lineNumbers: boolean;\n      hoistAtrules: boolean;\n      compress: boolean;\n    }\n  | (loaderContext: LoaderContext) => Array<string>;\n```\n\nDefault: `{}`\n\nYou can pass any Stylus specific options to the `stylus-loader` through the `stylusOptions` property in the [loader options](https://webpack.js.org/configuration/module/#rule-options-rule-query).\nSee the [Stylus documentation](https://stylus-lang.com/docs/js.html).\nOptions in dash-case should use camelCase.\n\n#### `object`\n\nUse an object to pass options through to Stylus.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: {\n                /**\n                 * Specify Stylus plugins to use. Plugins may be passed as\n                 * strings instead of importing them in your Webpack config.\n                 *\n                 * @type {(string|Function)[]}\n                 * @default []\n                 */\n                use: [\"nib\"],\n\n                /**\n                 * Add path(s) to the import lookup paths.\n                 *\n                 * @type {string[]}\n                 * @default []\n                 */\n                include: [path.join(__dirname, \"src/styl/config\")],\n\n                /**\n                 * Import the specified Stylus files/paths.\n                 *\n                 * @type {string[]}\n                 * @default []\n                 */\n                import: [\"nib\", path.join(__dirname, \"src/styl/mixins\")],\n\n                /**\n                 * Define Stylus variables or functions.\n                 *\n                 * @type {Array|Object}\n                 * @default {}\n                 */\n                // Array is the recommended syntax: [key, value, raw]\n                define: [\n                  [\"$development\", process.env.NODE_ENV === \"development\"],\n                  [\"rawVar\", 42, true],\n                ],\n                // Object is deprecated syntax (there is no possibility to specify \"raw')\n                // define: {\n                //   $development: process.env.NODE_ENV === 'development',\n                //   rawVar: 42,\n                // },\n\n                /**\n                 * Include regular CSS on @import.\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                includeCSS: false,\n\n                /**\n                 * Resolve relative url()'s inside imported files.\n                 *\n                 * @see https://stylus-lang.com/docs/js.html#stylusresolveroptions\n                 *\n                 * @type {boolean|Object}\n                 * @default { nocheck: true }\n                 */\n                resolveURL: true,\n                // resolveURL: { nocheck: true },\n\n                /**\n                 * Emits comments in the generated CSS indicating the corresponding Stylus line.\n                 *\n                 * @see https://stylus-lang.com/docs/executable.html\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                lineNumbers: true,\n\n                /**\n                 * Move @import and @charset to the top.\n                 *\n                 * @see https://stylus-lang.com/docs/executable.html\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                hoistAtrules: true,\n\n                /**\n                 * Compress CSS output.\n                 * In the \"production\" mode is `true` by default\n                 *\n                 * @see https://stylus-lang.com/docs/executable.html\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                compress: true,\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `function`\n\nAllows setting the options passed through to Stylus based off of the loader context.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: (loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.styl\") {\n                  return {\n                    paths: [\"absolute/path/c\", \"absolute/path/d\"],\n                  };\n                }\n\n                return {\n                  paths: [\"absolute/path/a\", \"absolute/path/b\"],\n                };\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `sourceMap`\n\nType:\n\n```ts\ntype sourceMap = boolean;\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/i,\n        use: [\n          \"style-loader\",\n          {\n            loader: \"css-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `webpackImporter`\n\nType:\n\n```ts\ntype webpackImporter = boolean;\n```\n\nDefault: `true`\n\nEnables/Disables the default Webpack importer.\n\nThis can improve performance in some cases.\nUse it with caution because aliases and `@import` at-rules starting with `~` will not work.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              webpackImporter: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `additionalData`\n\nType:\n\n```ts\ntype additionalData =\n  | string\n  | (\n      content: string | Buffer,\n      loaderContext: LoaderContext,\n      meta: any\n    ) => string;\n```\n\nDefault: `undefined`\n\nPrepends `Stylus` code before the actual entry file.\nIn this case, the `stylus-loader` will not override the source but just **prepend** the entry's content.\n\nThis is especially useful when some of your Stylus variables depend on the environment:\n\n> ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Stylus entry files.\n\n#### `string`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              additionalData: `@env: ${process.env.NODE_ENV};`,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `function`\n\n##### Sync\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              additionalData: (content, loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.styl\") {\n                  return \"value = 100px\" + content;\n                }\n\n                return \"value 200px\" + content;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n##### Async\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              additionalData: async (content, loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.styl\") {\n                  return \"value = 100px\" + content;\n                }\n\n                return \"value 200px\" + content;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `implementation`\n\nType:\n\n```ts\ntype implementation = Function | string;\n```\n\nThe special `implementation` option determines which implementation of Stylus to use. Overrides the locally installed `peerDependency` version of `stylus`.\n\n#### `function`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              implementation: require(\"stylus\"),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `string`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              implementation: require.resolve(\"stylus\"),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Normal usage\n\nChain the `stylus-loader` with the [`css-loader`](https://github.com/webpack-contrib/css-loader) and the [`style-loader`](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          {\n            loader: \"style-loader\", // creates style nodes from JS strings\n          },\n          {\n            loader: \"css-loader\", // translates CSS into CommonJS\n          },\n          {\n            loader: \"stylus-loader\", // compiles Stylus to CSS\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Source maps\n\nTo enable sourcemaps for CSS, you'll need to pass the `sourceMap` property in the loader's options. If this is not passed, the loader will respect the setting for webpack source maps, set in `devtool`.\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n  devtool: \"source-map\", // any \"source-map\"-like devtool is possible\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          \"style-loader\",\n          {\n            loader: \"css-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Using nib with stylus\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          {\n            loader: \"style-loader\", // creates style nodes from JS strings\n          },\n          {\n            loader: \"css-loader\", // translates CSS into CommonJS\n          },\n          {\n            loader: \"stylus-loader\", // compiles Stylus to CSS\n            options: {\n              stylusOptions: {\n                use: [require(\"nib\")()],\n                import: [\"nib\"],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Import JSON files\n\nStylus does not provide resolving capabilities in the `json` function.\nTherefore webpack resolver does not work for `.json` files.\nUse [`stylus resolver`](#stylus-resolver).\n\n**index.styl**\n\n```styl\n// Suppose the file is located here `node_modules/vars/vars.json`\njson('vars.json')\n\n@media queries-small\n  body\n    display nope\n\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: {\n                // Specify the path. where to find files\n                paths: [\"node_modules/vars\"],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### In production\n\nUsually, it's recommended to extract the style sheets into a dedicated file in production using the [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin). This way your styles are not dependent on JavaScript.\n\n### webpack resolver\n\nWebpack provides an [advanced mechanism to resolve files](https://webpack.js.org/configuration/resolve/).\nThe `stylus-loader` applies the webpack resolver when processing queries.\nThus you can import your Stylus modules from `node_modules`.\n\n```styl\n@import 'bootstrap-styl/bootstrap/index.styl';\n```\n\nUsing `~` is deprecated and can be removed from your code (**we recommend it**), but we still support it for historical reasons.\nWhy you can removed it? The loader will first try to resolve `@import`/`@require` as relative, if it cannot be resolved, the loader will try to resolve `@import`/`@require` inside [`node_modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\nJust prepend them with a `~` which tells webpack to look up the [`modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\n\n```styl\n@import \"~bootstrap-styl/bootstrap/index.styl\";\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home-directory.\nWebpack needs to distinguish between `bootstrap` and `~bootstrap`, because CSS and Styl files have no special syntax for importing relative files.\nWriting `@import \"file\"` is the same as `@import \"./file\";`\n\n### Stylus resolver\n\nIf you specify the `paths` option, modules will be searched in the given `paths`.\nThis is Stylus default behavior.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: {\n                paths: [path.resolve(__dirname, \"node_modules\")],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Extracting style sheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/) in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilities to extract a style sheet from the bundle:\n\n- [`extract-loader`](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin) (more complex, but works in all use-cases)\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/stylus-loader.svg\n[npm-url]: https://npmjs.com/package/stylus-loader\n[node]: https://img.shields.io/node/v/stylus-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/stylus-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/stylus-loader\n[tests]: https://github.com/webpack-contrib/stylus-loader/workflows/stylus-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/stylus-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/stylus-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/stylus-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=stylus-loader\n[size-url]: https://packagephobia.now.sh/result?p=stylus-loader\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/stylus-loader/-/stylus-loader-7.0.0.tgz#31fb929cd3a7c447a07a0b0148b48480eb2c3f4a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/stylus-loader/-/stylus-loader-7.0.0.tgz",
    "hash": "31fb929cd3a7c447a07a0b0148b48480eb2c3f4a",
    "integrity": "sha512-WTbtLrNfOfLgzTaR9Lj/BPhQroKk/LC1hfTXSUbrxmxgfUo3Y3LpmKRVA2R1XbjvTAvOfaian9vOyfv1z99E+A==",
    "registry": "npm",
    "packageName": "stylus-loader",
    "cacheIntegrity": "sha512-WTbtLrNfOfLgzTaR9Lj/BPhQroKk/LC1hfTXSUbrxmxgfUo3Y3LpmKRVA2R1XbjvTAvOfaian9vOyfv1z99E+A== sha1-MfuSnNOnxEegegsBSLSEgOssP0o="
  },
  "registry": "npm",
  "hash": "31fb929cd3a7c447a07a0b0148b48480eb2c3f4a"
}