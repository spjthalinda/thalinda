{
  "manifest": {
    "name": "regexp-to-ast",
    "version": "0.3.5",
    "main": "lib/regexp-to-ast.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/bd82/regexp-to-ast.git"
    },
    "author": {
      "name": "Shahar Soel"
    },
    "license": "MIT",
    "description": "Parses a Regular Expression and outputs an AST",
    "keywords": [
      "regExp",
      "parser",
      "regular expression"
    ],
    "dependencies": {},
    "devDependencies": {
      "chai": "^4.1.2",
      "coveralls": "^3.0.0",
      "eslint": "^4.19.1",
      "eslint-config-airbnb-base": "^12.1.0",
      "eslint-config-prettier": "^2.9.0",
      "eslint-plugin-es5": "^1.3.1",
      "gitty": "^3.6.0",
      "jsonfile": "^4.0.0",
      "lodash": "latest",
      "mocha": "^5.0.5",
      "npm-run-all": "^4.1.2",
      "nyc": "^11.6.0",
      "prettier": "1.11.1",
      "semver": "^5.5.0",
      "typescript": "^2.8.1"
    },
    "scripts": {
      "release": "git fetch && git rebase && node scripts/release.js",
      "ci_full_flow": "npm-run-all type_check test check_coverage verify_format",
      "test": "nyc mocha \"./test/**/*spec.js\"",
      "check_coverage": "nyc check-coverage --lines 100 --statements 100 --functions 100",
      "report_coverage": "cat coverage/lcov.info | node_modules/.bin/coveralls",
      "format": "prettier --no-editorconfig --write \"**/*.@(ts|js|md)\"",
      "verify_format": "prettier --no-editorconfig --list-different  \"**/*.@(ts|js)\"",
      "type_check": "tsc"
    },
    "typings": "api.d.ts",
    "files": [
      "lib",
      "LICENSE",
      "CHANGELOG.md",
      "README.md",
      "api.d.ts"
    ],
    "nyc": {
      "reporter": [
        "lcov",
        "text"
      ],
      "exclude": [
        "test/**.*"
      ]
    },
    "prettier": {
      "semi": false,
      "tabWidth": 4,
      "useTabs": false
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-regexp-to-ast-0.3.5-dedadd11bbb5f849df76b4e84b0b5335831c0473-integrity/node_modules/regexp-to-ast/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm version](https://badge.fury.io/js/regexp-to-ast.svg)](https://badge.fury.io/js/regexp-to-ast)\n[![CircleCI](https://circleci.com/gh/bd82/regexp-to-ast.svg?style=svg)](https://circleci.com/gh/bd82/regexp-to-ast)\n[![Coverage Status](https://coveralls.io/repos/github/bd82/regexp-to-ast/badge.svg?branch=master)](https://coveralls.io/github/bd82/regexp-to-ast?branch=master)\n\n# regexp-to-ast\n\nReads a JavaScript Regular Expression **literal**(text) and outputs an Abstract Syntax Tree.\n\n## Installation\n\n*   npm\n    ```\n      npm install regexp-to-ast\n    ```\n*   Browser\n    ```\n      <script src=\"https://unpkg.com/regexp-to-ast/lib/parser.js\"></script>\n    ```\n\n## API\n\nThe [API](https://github.com/bd82/regexp-to-ast/blob/master/api.d.ts) is defined as a TypeScript definition file.\n\n## Usage\n\n*   Parsing to an AST:\n\n    ```javascript\n    const RegExpParser = require(\"regexp-to-ast\").RegExpParser\n    const regexpParser = new RegExpParser.parser()\n\n    // from a regexp text\n    const astOutput = regexpParser.pattern(\"/a|b|c/g\")\n\n    // text from regexp instance.\n    const input2 = /a|b/.toString()\n    // The same parser instance can be reused\n    const anotherAstOutput = regexpParser.pattern(input2)\n    ```\n\n*   Visiting the AST:\n\n    ```javascript\n    // parse to an AST as before.\n    const { RegExpParser, BaseRegExpVisitor } = require(\"regexp-to-ast\")\n    const regexpParser = new RegExpParser.parser()\n    const regExpAst = regexpParser.pattern(\"/a|b|c/g\")\n\n    // Override the visitor methods to add your logic.\n    class MyRegExpVisitor extends BaseRegExpVisitor {\n        visitPattern(node) {}\n\n        visitFlags(node) {}\n\n        visitDisjunction(node) {}\n\n        visitAlternative(node) {}\n\n        // Assertion\n        visitStartAnchor(node) {}\n\n        visitEndAnchor(node) {}\n\n        visitWordBoundary(node) {}\n\n        visitNonWordBoundary(node) {}\n\n        visitLookahead(node) {}\n\n        visitNegativeLookahead(node) {}\n\n        // atoms\n        visitCharacter(node) {}\n\n        visitSet(node) {}\n\n        visitGroup(node) {}\n\n        visitGroupBackReference(node) {}\n\n        visitQuantifier(node) {}\n    }\n\n    const myVisitor = new MyRegExpVisitor()\n    myVisitor.visit(regExpAst)\n    // extract visit results from the visitor state.\n    ```\n\n## Compatibility\n\nThis library is written in ES**5** style and is compatiable with all major browsers and **modern** node.js versions.\n\n## TODO / Limitations\n\n*   Use polyFill for [string.prototype.at](https://github.com/mathiasbynens/String.prototype.at)\n    to support unicode characters outside BMP.\n*   Descriptive error messages.\n*   Position information in error messages.\n*   Support unicode flag escapes.\n*   Ensure edge cases described in [\"The madness of parsing real world JavaScript regexps\"](https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983) are supported.\n*   Support deprecated octal escapes\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Shahar Soel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/regexp-to-ast/-/regexp-to-ast-0.3.5.tgz#dedadd11bbb5f849df76b4e84b0b5335831c0473",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/regexp-to-ast/-/regexp-to-ast-0.3.5.tgz",
    "hash": "dedadd11bbb5f849df76b4e84b0b5335831c0473",
    "integrity": "sha512-1CJygtdvsfNFwiyjaMLBWtg2tfEqx/jSZ8S6TV+GlNL8kiH8rb4cm5Pb7A/C2BpyM/fA8ZJEudlCwi/jvAY+Ow==",
    "registry": "npm",
    "packageName": "regexp-to-ast",
    "cacheIntegrity": "sha512-1CJygtdvsfNFwiyjaMLBWtg2tfEqx/jSZ8S6TV+GlNL8kiH8rb4cm5Pb7A/C2BpyM/fA8ZJEudlCwi/jvAY+Ow== sha1-3trdEbu1+EnfdrToSwtTNYMcBHM="
  },
  "registry": "npm",
  "hash": "dedadd11bbb5f849df76b4e84b0b5335831c0473"
}