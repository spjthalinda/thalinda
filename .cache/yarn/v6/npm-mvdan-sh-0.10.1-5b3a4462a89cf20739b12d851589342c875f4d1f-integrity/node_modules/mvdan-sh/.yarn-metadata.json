{
  "manifest": {
    "name": "mvdan-sh",
    "version": "0.10.1",
    "description": "A shell parser and formatter (POSIX/Bash/mksh)",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/mvdan/sh"
    },
    "author": {
      "name": "Daniel Martí"
    },
    "license": "BSD-3-Clause",
    "files": [
      "README.md",
      "LICENSE",
      "index.js"
    ],
    "keywords": [
      "shell",
      "bash",
      "sh",
      "parser",
      "ast",
      "syntax",
      "posix",
      "bash-parser"
    ],
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-mvdan-sh-0.10.1-5b3a4462a89cf20739b12d851589342c875f4d1f-integrity/node_modules/mvdan-sh/package.json",
    "readmeFilename": "README.md",
    "readme": "## mvdan-sh\n\nThis package is a JavaScript version of a shell package written in Go, available\nat https://github.com/mvdan/sh.\n\nIt is transpiled from Go to JS using https://github.com/gopherjs/gopherjs.\n\n### Sample usage\n\n```\nconst sh = require('mvdan-sh')\nconst syntax = sh.syntax\n\nvar parser = syntax.NewParser()\nvar printer = syntax.NewPrinter()\n\nvar src = \"echo 'foo'\"\nvar f = parser.Parse(src, \"src.sh\")\n\n// print out the syntax tree\nsyntax.DebugPrint(f)\nconsole.log()\n\n// replace all single quoted string values\nsyntax.Walk(f, function(node) {\n        if (syntax.NodeType(node) == \"SglQuoted\") {\n                node.Value = \"bar\"\n        }\n        return true\n})\n\n// print the code back out\nconsole.log(printer.Print(f)) // echo 'bar'\n```\n\nYou can find more samples in\n[testmain.js](https://github.com/mvdan/sh/blob/master/_js/testmain.js).\n\n### Available APIs\n\nThe APIs listed below are wrapped to be usable in JavaScript. Follow the links\nto read their documentation.\n\n* [syntax.NewParser](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#NewParser)\n  - [Parser.Parse](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Parser.Parse)\n  - [Parser.Interactive](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Parser.Interactive)\n  - [Parser.Incomplete](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Parser.Incomplete)\n* [syntax.DebugPrint](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#DebugPrint)\n* [syntax.Walk](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Walk)\n* [syntax.NewPrinter](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#NewPrinter)\n  - [Printer.Print](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Printer.Print)\n\nConstructor options like\n[syntax.KeepComments](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#KeepComments) are\nalso available.\n\nThe original `io.Reader` parameters can take a string or a\n[stream.Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable)\nobject. `io.Writer` parameters are replaced by string returns.\n\nThe nodes you will find in the syntax tree are all equivalent to the nodes you\nwill see on the Go API. To get the type of a node, use `syntax.NodeType` as the\nexample above shows. Some of the most common node types include:\n\n* [syntax.File](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#File)\n* [syntax.Stmt](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Stmt)\n* [syntax.CallExpr](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#CallExpr)\n* [syntax.Word](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Word)\n* [syntax.Lit](https://pkg.go.dev/mvdan.cc/sh/v3/syntax#Lit)\n\nThe five above will show up in your syntax tree if you parse a `echo foo`\ncommand, which you can see if you use `syntax.DebugPrint` to inspect the syntax\ntree.\n\n### Building\n\nYou will need:\n\n* Latest Go 1.17.x\n* NodeJS, to run the `testmain.js` test suite\n\nThen, simply run `./build`. The result will be `index.js`, which isn't minified.\nAt the time of writing, `index.js` weighs 1.7MiB in plaintext, and 220KiB when\nminified and gzipped.\n",
    "licenseText": "Copyright (c) 2016, Daniel Martí. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mvdan-sh/-/mvdan-sh-0.10.1.tgz#5b3a4462a89cf20739b12d851589342c875f4d1f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mvdan-sh/-/mvdan-sh-0.10.1.tgz",
    "hash": "5b3a4462a89cf20739b12d851589342c875f4d1f",
    "integrity": "sha512-kMbrH0EObaKmK3nVRKUIIya1dpASHIEusM13S4V1ViHFuxuNxCo+arxoa6j/dbV22YBGjl7UKJm9QQKJ2Crzhg==",
    "registry": "npm",
    "packageName": "mvdan-sh",
    "cacheIntegrity": "sha512-kMbrH0EObaKmK3nVRKUIIya1dpASHIEusM13S4V1ViHFuxuNxCo+arxoa6j/dbV22YBGjl7UKJm9QQKJ2Crzhg== sha1-WzpEYqic8gc5sS2FFYk0LIdfTR8="
  },
  "registry": "npm",
  "hash": "5b3a4462a89cf20739b12d851589342c875f4d1f"
}