{
  "manifest": {
    "name": "jsdoc-type-pratt-parser",
    "version": "3.1.0",
    "description": "This project is a parser for jsdoc types. It takes jsdoc type expressions like `Array<string>` and creates an abstract syntax tree (AST) out of it. It is heavily inspired by the existing libraries [catharsis](https://github.com/hegemonic/catharsis) and [jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser), but does not use [PEG.js](https://pegjs.org/), instead it is written as a pratt parser.",
    "main": "dist/index.js",
    "types": "dist/src/index.d.ts",
    "scripts": {
      "test": "npm run typecheck && npm run lint && npm run test:spec",
      "test:spec": "mocha",
      "test:coverage": "nyc --all npm run test:spec",
      "test:coveralls": "nyc report --reporter=lcov && coveralls",
      "lint": "ts-standard",
      "typecheck": "tsc --noEmit",
      "build": "rollup -c",
      "apidoc": "typedoc --options typedoc.json",
      "preversion": "npm test",
      "prepublishOnly": "npm run build",
      "semantic-release": "semantic-release",
      "benchmark": "npm run build && node benchmark/benchmark.js"
    },
    "author": {
      "name": "Simon Seyock",
      "url": "https://github.com/simonseyock"
    },
    "contributors": [
      {
        "name": "Brett Zamir"
      }
    ],
    "license": "MIT",
    "engines": {
      "node": ">=12.0.0"
    },
    "devDependencies": {
      "@rollup/plugin-typescript": "^8.3.0",
      "@semantic-release/changelog": "^6.0.1",
      "@semantic-release/git": "^10.0.1",
      "@types/chai": "^4.3.0",
      "@types/mocha": "^9.0.0",
      "@types/node": "^17.0.5",
      "@types/sinon": "^10.0.6",
      "@types/sinon-chai": "^3.2.7",
      "benchmark": "^2.1.4",
      "catharsis": "^0.9.0",
      "chai": "^4.3.4",
      "coveralls": "^3.1.1",
      "eslint-config-standard-with-typescript": "^21.0.1",
      "jsdoctypeparser": "^9.0.0",
      "mocha": "^9.1.3",
      "npm-upgrade": "^3.0.0",
      "nyc": "^15.1.0",
      "rollup": "^2.62.0",
      "semantic-release": "^18.0.1",
      "sinon": "^12.0.1",
      "sinon-chai": "^3.7.0",
      "ts-node": "^10.4.0",
      "ts-standard": "^11.0.0",
      "typedoc": "^0.22.10",
      "typedoc-plugin-merge-modules": "^3.1.0",
      "typescript": "^4.5.4"
    },
    "ts-standard": {
      "ignore": [
        "/submodules/",
        "/build/",
        "/pages/"
      ]
    },
    "files": [
      "dist/**/*",
      "src/**/*"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"
    },
    "bugs": {
      "url": "https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"
    },
    "homepage": "https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser",
    "keywords": [
      "jsdoc",
      "pratt",
      "parser"
    ],
    "release": {
      "branches": [
        "main",
        {
          "name": "dev",
          "prerelease": true
        }
      ],
      "plugins": [
        "@semantic-release/commit-analyzer",
        "@semantic-release/github",
        "@semantic-release/npm",
        "@semantic-release/release-notes-generator",
        "@semantic-release/changelog",
        "@semantic-release/git"
      ]
    },
    "publishConfig": {
      "access": "public"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-jsdoc-type-pratt-parser-3.1.0-a4a56bdc6e82e5865ffd9febc5b1a227ff28e67e-integrity/node_modules/jsdoc-type-pratt-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Coverage Status](https://coveralls.io/repos/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/badge.svg?branch=main)](https://coveralls.io/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser?branch=main)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n# Jsdoc Type Pratt Parser\n\nThis project is a parser for jsdoc types. It takes jsdoc type expressions like `Array<string>` and creates an abstract\nsyntax tree (AST) out of it. It is heavily inspired by the existing libraries [catharsis](https://github.com/hegemonic/catharsis) and [jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser), but does\nnot use [PEG.js](https://pegjs.org/), instead it is written as a pratt parser.\n\nYou can find some more information about pratt parsers here:\n* https://en.wikipedia.org/wiki/Operator-precedence_parser#Pratt_parsing\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n* https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\n\n## Table of Contents\n* [Live Demo](#live-demo)\n* [Getting Started](#getting-started)\n* [API Documentation](#api-documentation)\n* [Available Grammars](#available-grammars)\n* [Transforms](#transforms)\n* [Traverse](#traverse)\n* [Tests Status](#tests-status)\n* [Performance](#performance)\n* [Development](#development)\n\n## Live Demo\n\nA simple live demo to test expressions can be found at: https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/\n\n## Getting started\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('SomeType<string>', 'typescript')\n```\n\n## API Documentation\n\nAn API documentation can be found [here](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/).\nIt is incomplete, but a good starting point. Please create issues or PRs if you don't find what you expect.\n\n## Available Grammars\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\n## Transforms\n\nA common task to do on ASTs are transforms, for example a stringification. This library includes some transform and\nutilities to implement your own.\n\n[`stringify`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringify):\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using [`stringifyRules`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringifyRules)\nand [`transform`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#transform):\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can also build your own transform rules by implementing the [`TransformRules<TransformResultType>`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#TransformRules) interface or you\ncan build upon the [identity ruleset](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#identityTransformRules) like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nThis library also supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \n[Catharsis compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#catharsisTransform):\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\n[Jsdoctypeparser compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#jtpTransform):\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\n## Traverse\n\nYou can traverse an AST with the [`traverse`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#traverse) function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\n## Tests Status\n\nThis parser runs most tests of [catharsis](https://github.com/hegemonic/catharsis) and\n[jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser). It compares the results of the different parsing libraries. If you\nwant to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\nthe `differ` keyword which indicates that differing results are produced.\n\n## Performance\n\nA simple [performance comparison](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 37,816 ops/sec ±1.22% (1086 runs sampled)\njsdoc-type-pratt-parser x 602,617 ops/sec ±0.16% (1090 runs sampled)\njsdoctypeparser x 53,256 ops/sec ±0.73% (1081 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 10,124 ops/sec ±0.56% (1084 runs sampled)\njsdoc-type-pratt-parser x 228,660 ops/sec ±0.40% (1084 runs sampled)\njsdoctypeparser x 42,365 ops/sec ±0.60% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 1,138 ops/sec ±0.66% (1087 runs sampled)\njsdoc-type-pratt-parser x 46,535 ops/sec ±0.47% (1090 runs sampled)\njsdoctypeparser x 18,291 ops/sec ±0.71% (1084 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nThe benchmark test uses catharsis without cache.\n \n## Development\n\nIf you want to contribute see the [Development Guide](DEVELOPMENT.md) to get some pointers. Feel free to create issues if\nthere is information missing.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Simon Seyock\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.1.0.tgz#a4a56bdc6e82e5865ffd9febc5b1a227ff28e67e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.1.0.tgz",
    "hash": "a4a56bdc6e82e5865ffd9febc5b1a227ff28e67e",
    "integrity": "sha512-MgtD0ZiCDk9B+eI73BextfRrVQl0oyzRG8B2BjORts6jbunj4ScKPcyXGTbB6eXL4y9TzxCm6hyeLq/2ASzNdw==",
    "registry": "npm",
    "packageName": "jsdoc-type-pratt-parser",
    "cacheIntegrity": "sha512-MgtD0ZiCDk9B+eI73BextfRrVQl0oyzRG8B2BjORts6jbunj4ScKPcyXGTbB6eXL4y9TzxCm6hyeLq/2ASzNdw== sha1-pKVr3G6C5YZf/Z/rxbGiJ/8o5n4="
  },
  "registry": "npm",
  "hash": "a4a56bdc6e82e5865ffd9febc5b1a227ff28e67e"
}