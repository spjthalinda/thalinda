{
  "manifest": {
    "name": "tinydate",
    "version": "1.3.0",
    "repository": {
      "type": "git",
      "url": "https://github.com/lukeed/tinydate.git"
    },
    "description": "A tiny (349B) reusable date formatter. Extremely fast!",
    "unpkg": "dist/tinydate.min.js",
    "module": "dist/tinydate.mjs",
    "main": "dist/tinydate.js",
    "types": "index.d.ts",
    "license": "MIT",
    "author": {
      "name": "Luke Edwards",
      "email": "luke.edwards05@gmail.com",
      "url": "https://lukeed.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "build": "bundt",
      "bench": "node bench",
      "prebench": "npm run build",
      "pretest": "npm run build",
      "test": "tape test/*.js | tap-spec"
    },
    "files": [
      "dist",
      "*.d.ts"
    ],
    "keywords": [
      "date",
      "datestamp",
      "format",
      "stamp",
      "time",
      "timestamp",
      "time-stamp"
    ],
    "devDependencies": {
      "bundt": "0.4.0",
      "tap-spec": "5.0.0",
      "tape": "4.11.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-tinydate-1.3.0-e6ca8e5a22b51bb4ea1c3a2a4fd1352dbd4c57fb-integrity/node_modules/tinydate/package.json",
    "readmeFilename": "readme.md",
    "readme": "# tinydate ![CI](https://github.com/lukeed/tinydate/workflows/CI/badge.svg)\n\n> A tiny (349B) reusable date formatter. Extremely fast!\n\n[Demo](https://jsfiddle.net/lukeed/aoy0xeze/)\n\nInspired by [`tinytime`][tinytime], this module returns a \"render\" function that efficiently re-render your deconstructed template. This allows for [incredibly performant](#benchmarks) results!\n\nHowever, please notice that this only provides a [limited subset of Date methods](#patterns).<br>\nIf you need more, [`tinytime`][tinytime] or [`date-fns`](https://github.com/date-fns/date-fns) are great alternatives!\n\n## Install\n\n```\n$ npm install --save tinydate\n```\n\n\n## Usage\n\n```js\nconst tinydate = require('tinydate');\nconst fooDate = new Date('5/1/2017, 4:30:09 PM');\n\nconst stamp = tinydate('Current time: [{HH}:{mm}:{ss}]');\n\nstamp(fooDate);\n//=> Current time: [16:30:09]\n\nstamp();\n//=> Current time: [17:09:34]\n```\n\n\n## API\n\n### tinydate(pattern, dict?)(date?)\nReturns: `Function`\n\nReturns a rendering function that will optionally accept a [`date`](#date) value as its only argument.\n\n#### pattern\nType: `String`<br>\nRequired: `true`\n\nThe template pattern to be parsed.\n\n#### dict\nType: `Object`<br>\nRequired: `false`\n\nA custom dictionary of template patterns. You may override [existing patterns](#patterns) or declare new ones.\n\n> **Important:** All dictionary items **must be a function** and must control its own formatting.<br>For example, when defining your own `{ss}` template, `tinydate` **will not** pad its value to two digits.\n\n```js\nconst today = new Date('2019-07-04, 5:30:00 PM');\n\n// Example custom dictionary:\n//   - Adds {MMMM}\n//   - Overrides {DD}\nconst stamp = tinydate('Today is: {MMMM} {DD}, {YYYY}', {\n\tMMMM: d => d.toLocaleString('default', { month: 'long' }),\n\tDD: d => d.getDate()\n});\n\nstamp(today);\n//=> 'Today is: July 4, 2019'\n```\n\n#### date\nType: `Date`<br>\nDefault: `new Date()`\n\nThe date from which to retrieve values. Defaults to current datetime if no value is provided.\n\n\n## Patterns\n\n- `{YYYY}`: full year; eg: **2017**\n- `{YY}`: short year; eg: **17**\n- `{MM}`: month; eg: **04**\n- `{DD}`: day; eg: **01**\n- `{HH}`: hours; eg: **06** (24h)\n- `{mm}`: minutes; eg: **59**\n- `{ss}`: seconds; eg: **09**\n- `{fff}`: milliseconds; eg: **555**\n\n\n## Benchmarks\n\n```\n# Node v10.13.0\n\ntinydate    x 160,834,214 ops/sec ±0.21% (96 runs sampled)\ntinytime    x  44,602,162 ops/sec ±0.34% (97 runs sampled)\ntime-stamp  x     888,153 ops/sec ±1.27% (86 runs sampled)\n```\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n\n[tinytime]: https://github.com/aweary/tinytime\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tinydate/-/tinydate-1.3.0.tgz#e6ca8e5a22b51bb4ea1c3a2a4fd1352dbd4c57fb",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tinydate/-/tinydate-1.3.0.tgz",
    "hash": "e6ca8e5a22b51bb4ea1c3a2a4fd1352dbd4c57fb",
    "integrity": "sha512-7cR8rLy2QhYHpsBDBVYnnWXm8uRTr38RoZakFSW7Bs7PzfMPNZthuMLkwqZv7MTu8lhQ91cOFYS5a7iFj2oR3w==",
    "registry": "npm",
    "packageName": "tinydate",
    "cacheIntegrity": "sha512-7cR8rLy2QhYHpsBDBVYnnWXm8uRTr38RoZakFSW7Bs7PzfMPNZthuMLkwqZv7MTu8lhQ91cOFYS5a7iFj2oR3w== sha1-5sqOWiK1G7TqHDoqT9E1Lb1MV/s="
  },
  "registry": "npm",
  "hash": "e6ca8e5a22b51bb4ea1c3a2a4fd1352dbd4c57fb"
}