{
  "manifest": {
    "name": "postcss-custom-media",
    "description": "Use Custom Media Queries in CSS",
    "version": "8.0.2",
    "contributors": [
      {
        "name": "Antonio Laguna",
        "email": "antonio@laguna.es",
        "url": "https://antonio.laguna.es"
      },
      {
        "name": "Romain Menke",
        "email": "romainmenke@gmail.com"
      },
      {
        "name": "Jonathan Neal",
        "email": "jonathantneal@hotmail.com"
      },
      {
        "name": "Maxime Thirouin"
      }
    ],
    "license": "MIT",
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/csstools"
    },
    "engines": {
      "node": "^12 || ^14 || >=16"
    },
    "main": "dist/index.cjs",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs",
        "default": "./dist/index.mjs"
      }
    },
    "files": [
      "CHANGELOG.md",
      "LICENSE.md",
      "README.md",
      "dist"
    ],
    "dependencies": {
      "postcss-value-parser": "^4.2.0"
    },
    "peerDependencies": {
      "postcss": "^8.3"
    },
    "scripts": {
      "build": "rollup -c ../../rollup/default.js",
      "clean": "node -e \"fs.rmSync('./dist', { recursive: true, force: true });\"",
      "docs": "node ../../.github/bin/generate-docs/install.mjs && node ../../.github/bin/generate-docs/readme.mjs",
      "lint": "npm run lint:eslint && npm run lint:package-json",
      "lint:eslint": "eslint ./src --ext .js --ext .ts --ext .mjs --no-error-on-unmatched-pattern",
      "lint:package-json": "node ../../.github/bin/format-package-json.mjs",
      "prepublishOnly": "npm run clean && npm run build && npm run test",
      "test": "node .tape.cjs && npm run test:exports",
      "test:exports": "node ./test/_import.mjs && node ./test/_require.cjs",
      "test:rewrite-expects": "REWRITE_EXPECTS=true node .tape.cjs"
    },
    "homepage": "https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-custom-media#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/csstools/postcss-plugins.git",
      "directory": "plugins/postcss-custom-media"
    },
    "bugs": {
      "url": "https://github.com/csstools/postcss-plugins/issues"
    },
    "keywords": [
      "at-rule",
      "atrule",
      "css",
      "csswg",
      "custom",
      "media",
      "postcss",
      "postcss-plugin",
      "queries",
      "query",
      "specification",
      "w3c"
    ],
    "csstools": {
      "cssdbId": "custom-media-queries",
      "exportName": "postcssCustomMedia",
      "humanReadableName": "PostCSS Custom Media",
      "specUrl": "https://www.w3.org/TR/mediaqueries-5/#at-ruledef-custom-media"
    },
    "volta": {
      "extends": "../../package.json"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-postcss-custom-media-8.0.2-c8f9637edf45fef761b014c024cee013f80529ea-integrity/node_modules/postcss-custom-media/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Custom Media [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS Logo\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[<img alt=\"npm version\" src=\"https://img.shields.io/npm/v/postcss-custom-media.svg\" height=\"20\">][npm-url] [<img alt=\"CSS Standard Status\" src=\"https://cssdb.org/images/badges/custom-media-queries.svg\" height=\"20\">][css-url] [<img alt=\"Build Status\" src=\"https://github.com/csstools/postcss-plugins/workflows/test/badge.svg\" height=\"20\">][cli-url] [<img alt=\"Discord\" src=\"https://shields.io/badge/Discord-5865F2?logo=discord&logoColor=white\">][discord]\n\n[PostCSS Custom Media] lets you define `@custom-media` in CSS following the [Custom Media Specification].\n\n```pcss\n@custom-media --small-viewport (max-width: 30em);\n\n@media (--small-viewport) {\n\t/* styles for small viewport */\n}\n\n/* becomes */\n\n@media (max-width: 30em) {\n\t/* styles for small viewport */\n}\n```\n\n## Usage\n\nAdd [PostCSS Custom Media] to your project:\n\n```bash\nnpm install postcss postcss-custom-media --save-dev\n```\n\nUse it as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssCustomMedia = require('postcss-custom-media');\n\npostcss([\n\tpostcssCustomMedia(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS Custom Media] runs in all Node environments, with special\ninstructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) |\n| --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### preserve\n\nThe `preserve` option determines whether the original notation\nis preserved. By default, it is not preserved.\n\n```js\npostcssCustomMedia({ preserve: true })\n```\n\n```pcss\n@custom-media --small-viewport (max-width: 30em);\n\n@media (--small-viewport) {\n\t/* styles for small viewport */\n}\n\n/* becomes */\n\n@custom-media --small-viewport (max-width: 30em);\n\n@media (max-width: 30em) {\n\t/* styles for small viewport */\n}\n\n@media (--small-viewport) {\n\t/* styles for small viewport */\n}\n```\n\n\n### importFrom\n\nThe `importFrom` option specifies sources where custom media can be imported\nfrom, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssCustomMedia({\n\timportFrom: 'path/to/file.css' // => @custom-selector --small-viewport (max-width: 30em);\n});\n```\n\n```pcss\n@media (max-width: 30em) {\n\t/* styles for small viewport */\n}\n\n@media (--small-viewport) {\n\t/* styles for small viewport */\n}\n```\n\nMultiple sources can be passed into this option, and they will be parsed in the\norder they are received. JavaScript files, JSON files, functions, and objects\nwill need to namespace custom media using the `customMedia` or\n`custom-media` key.\n\n```js\npostcssCustomMedia({\n\timportFrom: [\n\t\t'path/to/file.css',\n\t\t'and/then/this.js',\n\t\t'and/then/that.json',\n\t\t{\n\t\t\tcustomMedia: { '--small-viewport': '(max-width: 30em)' }\n\t\t},\n\t\t() => {\n\t\t\tconst customMedia = { '--small-viewport': '(max-width: 30em)' };\n\n\t\t\treturn { customMedia };\n\t\t}\n\t]\n});\n```\n\n### exportTo\n\nThe `exportTo` option specifies destinations where custom media can be exported\nto, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssCustomMedia({\n\texportTo: 'path/to/file.css' // @custom-media --small-viewport (max-width: 30em);\n});\n```\n\nMultiple destinations can be passed into this option, and they will be parsed\nin the order they are received. JavaScript files, JSON files, and objects will\nneed to namespace custom media using the `customMedia` or\n`custom-media` key.\n\n```js\nconst cachedObject = { customMedia: {} };\n\npostcssCustomMedia({\n\texportTo: [\n\t\t'path/to/file.css',   // @custom-media --small-viewport (max-width: 30em);\n\t\t'and/then/this.js',   // module.exports = { customMedia: { '--small-viewport': '(max-width: 30em)' } }\n\t\t'and/then/this.mjs',  // export const customMedia = { '--small-viewport': '(max-width: 30em)' } }\n\t\t'and/then/that.json', // { \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" } }\n\t\tcachedObject,\n\t\tcustomMedia => {\n\t\t\tcustomMedia    // { '--small-viewport': '(max-width: 30em)' }\n\t\t}\n\t]\n});\n```\n\nSee example exports written to [CSS](test/export-media.css),\n[JS](test/export-media.js), [MJS](test/export-media.mjs), and\n[JSON](test/export-media.json).\n\n[cli-url]: https://github.com/csstools/postcss-plugins/actions/workflows/test.yml?query=workflow/test\n[css-url]: https://cssdb.org/#custom-media-queries\n[discord]: https://discord.gg/bUadyRwkJS\n[npm-url]: https://www.npmjs.com/package/postcss-custom-media\n\n[Gulp PostCSS]: https://github.com/postcss/gulp-postcss\n[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Loader]: https://github.com/postcss/postcss-loader\n[PostCSS Custom Media]: https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-custom-media\n[Custom Media Specification]: https://www.w3.org/TR/mediaqueries-5/#at-ruledef-custom-media\n",
    "licenseText": "# The MIT License (MIT)\n\nCopyright Â© PostCSS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-custom-media/-/postcss-custom-media-8.0.2.tgz#c8f9637edf45fef761b014c024cee013f80529ea",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-custom-media/-/postcss-custom-media-8.0.2.tgz",
    "hash": "c8f9637edf45fef761b014c024cee013f80529ea",
    "integrity": "sha512-7yi25vDAoHAkbhAzX9dHx2yc6ntS4jQvejrNcC+csQJAXjj15e7VcWfMgLqBNAbOvqi5uIa9huOVwdHbf+sKqg==",
    "registry": "npm",
    "packageName": "postcss-custom-media",
    "cacheIntegrity": "sha512-7yi25vDAoHAkbhAzX9dHx2yc6ntS4jQvejrNcC+csQJAXjj15e7VcWfMgLqBNAbOvqi5uIa9huOVwdHbf+sKqg== sha1-yPljft9F/vdhsBTAJM7gE/gFKeo="
  },
  "registry": "npm",
  "hash": "c8f9637edf45fef761b014c024cee013f80529ea"
}