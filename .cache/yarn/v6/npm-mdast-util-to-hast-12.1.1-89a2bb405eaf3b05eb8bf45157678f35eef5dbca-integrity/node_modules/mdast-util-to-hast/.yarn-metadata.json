{
  "manifest": {
    "name": "mdast-util-to-hast",
    "version": "12.1.1",
    "description": "mdast utility to transform to hast",
    "license": "MIT",
    "keywords": [
      "unist",
      "mdast",
      "mdast-util",
      "hast",
      "hast-util",
      "util",
      "utility",
      "markdown",
      "html"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/mdast-util-to-hast.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/mdast-util-to-hast/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "complex-types.d.ts",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/hast": "^2.0.0",
      "@types/mdast": "^3.0.0",
      "@types/mdurl": "^1.0.0",
      "mdast-util-definitions": "^5.0.0",
      "mdurl": "^1.0.0",
      "micromark-util-sanitize-uri": "^1.0.0",
      "unist-builder": "^3.0.0",
      "unist-util-generated": "^2.0.0",
      "unist-util-position": "^4.0.0",
      "unist-util-visit": "^4.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "hast-util-to-html": "^8.0.0",
      "mdast-util-from-markdown": "^1.0.0",
      "mdast-util-gfm": "^2.0.0",
      "micromark-extension-gfm": "^2.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.47.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{lib/**/**,test/**}*.d.ts\" \"index.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier -w . --loglevel warn  && xo --fix",
      "test-api": "node test/index.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test/index.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "max-depth": "off",
        "import/no-cycle": "error"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "#": "needed `any`s",
      "ignoreFiles": [
        "lib/index.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-mdast-util-to-hast-12.1.1-89a2bb405eaf3b05eb8bf45157678f35eef5dbca-integrity/node_modules/mdast-util-to-hast/package.json",
    "readmeFilename": "readme.md",
    "readme": "# mdast-util-to-hast\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**mdast**][mdast] utility to transform to [**hast**][hast].\n\n> **Note**: You probably want to use [`remark-rehype`][remark-rehype].\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c):\nNode 12+ is needed to use it and it must be `import`ed instead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install mdast-util-to-hast\n```\n\n## Use\n\nSay we have the following `example.md`:\n\n```markdown\n## Hello **World**!\n```\n\n…and next to it, `example.js`:\n\n```js\nimport fs from 'node:fs'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\nconst mdast = fromMarkdown(fs.readFileSync('example.md'))\nconst hast = toHast(mdast)\nconst html = toHtml(hast)\n\nconsole.log(html)\n```\n\nWhich when running with `node example` yields:\n\n```html\n<h2>Hello <strong>World</strong>!</h2>\n```\n\n## API\n\nThis package exports the following identifiers: `toHast`, `defaultHandlers`,\n`all`, `one`\nThere is no default export.\n\n### `toHast(node[, options])`\n\nTransform the given [mdast][] [tree][] to a [hast][] [tree][].\n\n##### Options\n\n###### `options.allowDangerousHtml`\n\nWhether to allow [`html`][mdast-html] nodes and inject them as raw HTML\n(`boolean`, default: `false`).\nOnly do this when using [`hast-util-to-html`][to-html]\n([`rehype-stringify`][rehype-stringify]) or [`hast-util-raw`][raw]\n([`rehype-raw`][rehype-raw]) later: `raw` nodes are not a standard part of\n[hast][].\n\n###### `options.clobberPrefix`\n\nPrefix to use before the `id` attribute on footnotes to prevent it from\n*clobbering* (`string`, default: `'user-content-'`).\nDOM clobbering is this:\n\n```html\n<p id=x></p>\n<script>alert(x)</script>\n```\n\nElements by their ID are made available in browsers on the `window` object.\nUsing a prefix this that from being a problem.\n\n###### `options.footnoteLabel`\n\nLabel to use for the footnotes section (`string`, default: `'Footnotes'`).\nAffects screen reader users.\nChange it if you’re authoring in a different language.\n\n###### `options.footnoteBackLabel`\n\nLabel to use from backreferences back to their footnote call (`string`, default:\n`'Back to content'`).\nAffects screen reader users.\nChange it if you’re authoring in a different language.\n\n###### `options.handlers`\n\nObject mapping [mdast][] [nodes][mdast-node] to functions handling them.\nTake a look at [`lib/handlers/`][handlers] for examples.\n\n###### `options.passThrough`\n\nList of custom mdast node types to pass through (keep) in hast\n(`Array<string>`, default: `[]`).\nIf the passed through nodes have children, those children are expected to be\nmdast and will be handled.\n\n###### `options.unknownHandler`\n\nHandler for unknown nodes (that aren’t in `handlers` or `passThrough`).\n\nDefault behavior:\n\n*   Unknown nodes with [`children`][child] are transformed to `div` elements\n*   Unknown nodes with `value` are transformed to [`text`][hast-text] nodes\n\n##### Returns\n\n[`HastNode`][hast-node].\n\n##### Notes\n\n*   [`yaml`][mdast-yaml] and `toml` nodes are ignored (created by\n    [`remark-frontmatter`][remark-frontmatter])\n*   [`html`][mdast-html] nodes are ignored if `allowDangerousHtml` is `false`\n*   [`position`][position]s are properly patched\n*   [`node.data.hName`][hname] configures the hast element’s tag-name\n*   [`node.data.hProperties`][hproperties] is mixed into the hast element’s\n    properties\n*   [`node.data.hChildren`][hchildren] configures the hast element’s children\n*   GFM (and this project) uses the obsolete `align` attribute on `td` and `th`\n    elements; combine this utility with\n    [`@mapbox/hast-util-table-cell-style`][hast-util-table-cell-style]\n    to use `style` instead\n\n##### Examples\n\n###### `hName`\n\n`node.data.hName` sets the tag name of an element.\nThe following [mdast][]:\n\n```js\n{\n  type: 'strong',\n  data: {hName: 'b'},\n  children: [{type: 'text', value: 'Alpha'}]\n}\n```\n\nYields, in [hast][]:\n\n```js\n{\n  type: 'element',\n  tagName: 'b',\n  properties: {},\n  children: [{type: 'text', value: 'Alpha'}]\n}\n```\n\n###### `hProperties`\n\n`node.data.hProperties` in sets the properties of an element.\nThe following [mdast][]:\n\n```js\n{\n  type: 'image',\n  src: 'circle.svg',\n  alt: 'Big red circle on a black background',\n  title: null,\n  data: {hProperties: {className: ['responsive']}}\n}\n```\n\nYields, in [hast][]:\n\n```js\n{\n  type: 'element',\n  tagName: 'img',\n  properties: {\n    src: 'circle.svg',\n    alt: 'Big red circle on a black background',\n    className: ['responsive']\n  },\n  children: []\n}\n```\n\n###### `hChildren`\n\n`node.data.hChildren` sets the children of an element.\nThe following [mdast][]:\n\n```js\n{\n  type: 'code',\n  lang: 'js',\n  data: {\n    hChildren: [\n      {\n        type: 'element',\n        tagName: 'span',\n        properties: {className: ['hljs-meta']},\n        children: [{type: 'text', value: '\"use strict\"'}]\n      },\n      {type: 'text', value: ';'}\n    ]\n  },\n  value: '\"use strict\";'\n}\n```\n\nYields, in [hast][] (**note**: the `pre` and `language-js` class are normal\n`mdast-util-to-hast` functionality):\n\n```js\n{\n  type: 'element',\n  tagName: 'pre',\n  properties: {},\n  children: [{\n    type: 'element',\n    tagName: 'code',\n    properties: {className: ['language-js']},\n    children: [\n      {\n        type: 'element',\n        tagName: 'span',\n        properties: {className: ['hljs-meta']},\n        children: [{type: 'text', value: '\"use strict\"'}]\n      },\n      {type: 'text', value: ';'}\n    ]\n  }]\n}\n```\n\n### `defaultHandlers`\n\nObject mapping mdast node types to functions that can handle them.\nSee [`lib/handlers/index.js`][handlers-index].\n\n### `all(h, parent)`\n\nHelper function for writing custom handlers passed to `options.handlers`.\nPass it `h` and a parent node (mdast) and it will turn the node’s children into\nan array of transformed nodes (hast).\n\n### `one(h, node, parent)`\n\nHelper function for writing custom handlers passed to `options.handlers`.\nPass it `h`, a `node`, and its `parent` (mdast) and it will turn `node` into\nhast content.\n\n## Recommended CSS\n\nThe following CSS is needed to make footnotes look a bit like GitHub.\nFor the complete actual CSS that GitHub uses see\n[`sindresorhus/github-markdown-css`](https://github.com/sindresorhus/github-markdown-css).\n\n```css\n/* Style the footnotes section. */\n.footnotes {\n  font-size: smaller;\n  color: #8b949e;\n  border-top: 1px solid #30363d;\n}\n\n/* Hide the section label for visual users. */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  word-wrap: normal;\n  border: 0;\n}\n\n/* Place `[` and `]` around footnote calls. */\n[data-footnote-ref]::before {\n  content: '[';\n}\n\n[data-footnote-ref]::after {\n  content: ']';\n}\n```\n\n## Security\n\nUse of `mdast-util-to-hast` can open you up to a\n[cross-site scripting (XSS)][xss] attack.\nEmbedded hast properties (`hName`, `hProperties`, `hChildren`), custom handlers,\nand the `allowDangerousHtml` option all provide openings.\n\nThe following example shows how a script is injected where a benign code block\nis expected with embedded hast properties:\n\n```js\nvar code = {type: 'code', value: 'alert(1)'}\n\ncode.data = {hName: 'script'}\n```\n\nYields:\n\n```html\n<script>alert(1)</script>\n```\n\nThe following example shows how an image is changed to fail loading and\ntherefore run code in a browser.\n\n```js\nvar image = {type: 'image', url: 'existing.png'}\n\nimage.data = {hProperties: {src: 'missing', onError: 'alert(2)'}}\n```\n\nYields:\n\n```html\n<img src=\"missing\" onerror=\"alert(2)\">\n```\n\nThe following example shows the default handling of embedded HTML:\n\n```markdown\n# Hello\n\n<script>alert(3)</script>\n```\n\nYields:\n\n```html\n<h1>Hello</h1>\n```\n\nPassing `allowDangerousHtml: true` to `mdast-util-to-hast` is typically still\nnot enough to run unsafe code:\n\n```html\n<h1>Hello</h1>\n&#x3C;script>alert(3)&#x3C;/script>\n```\n\nIf `allowDangerousHtml: true` is also given to `hast-util-to-html` (or\n`rehype-stringify`), the unsafe code runs:\n\n```html\n<h1>Hello</h1>\n<script>alert(3)</script>\n```\n\nUse [`hast-util-sanitize`][sanitize] to make the hast tree safe.\n\n## Related\n\n*   [`mdast-util-to-nlcst`](https://github.com/syntax-tree/mdast-util-to-nlcst)\n    — transform mdast to nlcst\n*   [`hast-util-to-mdast`](https://github.com/syntax-tree/hast-util-to-mdast)\n    — transform hast to mdast\n*   [`hast-util-to-xast`](https://github.com/syntax-tree/hast-util-to-xast)\n    — transform hast to xast\n*   [`hast-util-sanitize`](https://github.com/syntax-tree/hast-util-sanitize)\n    — sanitize hast nodes\n*   [`remark-rehype`](https://github.com/remarkjs/remark-rehype)\n    — rehype support for remark\n*   [`rehype-remark`](https://github.com/rehypejs/rehype-remark)\n    — remark support for rehype\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-to-hast/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-to-hast/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-to-hast.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-to-hast\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-to-hast.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-to-hast\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-to-hast.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-to-hast\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[position]: https://github.com/syntax-tree/unist#positional-information\n\n[tree]: https://github.com/syntax-tree/unist#tree\n\n[child]: https://github.com/syntax-tree/unist#child\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[mdast-node]: https://github.com/syntax-tree/mdast#nodes\n\n[mdast-yaml]: https://github.com/syntax-tree/mdast#yaml\n\n[mdast-html]: https://github.com/syntax-tree/mdast#html\n\n[hast-util-table-cell-style]: https://github.com/mapbox/hast-util-table-cell-style\n\n[hast]: https://github.com/syntax-tree/hast\n\n[hast-text]: https://github.com/syntax-tree/hast#text\n\n[hast-node]: https://github.com/syntax-tree/hast#nodes\n\n[to-html]: https://github.com/syntax-tree/hast-util-to-html\n\n[raw]: https://github.com/syntax-tree/hast-util-raw\n\n[sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[remark-frontmatter]: https://github.com/remarkjs/remark-frontmatter\n\n[rehype-raw]: https://github.com/rehypejs/rehype-raw\n\n[rehype-stringify]: https://github.com/rehypejs/rehype/tree/HEAD/packages/rehype-stringify\n\n[handlers]: lib/handlers\n\n[handlers-index]: lib/handlers/index.js\n\n[hname]: #hname\n\n[hproperties]: #hproperties\n\n[hchildren]: #hchildren\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mdast-util-to-hast/-/mdast-util-to-hast-12.1.1.tgz#89a2bb405eaf3b05eb8bf45157678f35eef5dbca",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mdast-util-to-hast/-/mdast-util-to-hast-12.1.1.tgz",
    "hash": "89a2bb405eaf3b05eb8bf45157678f35eef5dbca",
    "integrity": "sha512-qE09zD6ylVP14jV4mjLIhDBOrpFdShHZcEsYvvKGABlr9mGbV7mTlRWdoFxL/EYSTNDiC9GZXy7y8Shgb9Dtzw==",
    "registry": "npm",
    "packageName": "mdast-util-to-hast",
    "cacheIntegrity": "sha512-qE09zD6ylVP14jV4mjLIhDBOrpFdShHZcEsYvvKGABlr9mGbV7mTlRWdoFxL/EYSTNDiC9GZXy7y8Shgb9Dtzw== sha1-iaK7QF6vOwXri/RRV2ePNe7128o="
  },
  "registry": "npm",
  "hash": "89a2bb405eaf3b05eb8bf45157678f35eef5dbca"
}