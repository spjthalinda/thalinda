"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRulesDir = exports.craeteRuleToCore = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const create_rule_helper_error_1 = require("./create-rule-helper-error");
const fs_exists_1 = require("./fs-exists");
const install_scaffold_1 = require("./install-scaffold");
const search_core_repository_1 = require("./search-core-repository");
const rulesRelDir = ['packages', '@markuplint', 'rules', 'src'];
async function craeteRuleToCore({ name, lang, needTest, }) {
    const rulesDir = await getRulesDir();
    const newRuleDir = path_1.default.resolve(rulesDir, name);
    const exists = await (0, fs_exists_1.fsExists)(newRuleDir);
    if (exists) {
        throw new create_rule_helper_error_1.CreateRuleHelperError(`A new rule "${name}" already exists`);
    }
    return await (0, install_scaffold_1.installScaffold)('core', newRuleDir, '', {
        name,
        lang,
        needTest,
        schemaJson: true,
    });
}
exports.craeteRuleToCore = craeteRuleToCore;
async function getRulesDir() {
    const rootDir = await (0, search_core_repository_1.searchCoreRepository)();
    if (!rootDir) {
        throw new create_rule_helper_error_1.CreateRuleHelperError('The repository of markuplint is not found');
    }
    const rulesDir = path_1.default.resolve(rootDir, ...rulesRelDir);
    const exists = await (0, fs_exists_1.fsExists)(rulesDir);
    if (!exists) {
        throw new create_rule_helper_error_1.CreateRuleHelperError(`Core rules directory (${rulesDir}) is not found`);
    }
    return rulesDir;
}
exports.getRulesDir = getRulesDir;
