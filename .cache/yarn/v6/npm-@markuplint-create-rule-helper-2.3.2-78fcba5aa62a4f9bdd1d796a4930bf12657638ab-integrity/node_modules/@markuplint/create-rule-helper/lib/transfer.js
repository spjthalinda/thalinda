"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = void 0;
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path_1 = tslib_1.__importDefault(require("path"));
const mustache_1 = require("mustache");
const prettier_1 = require("prettier");
const typescript_1 = require("typescript");
const fs_exists_1 = require("./fs-exists");
async function transfer(filePath, destDir, replacer, options) {
    const extname = path_1.default.extname(filePath);
    const name = path_1.default.basename(filePath, extname);
    const contents = await fs_1.promises.readFile(filePath, { encoding: 'utf-8' });
    let fileName = `${name}${extname}`;
    // Mustache
    let converted = (0, mustache_1.render)(contents, replacer);
    // TypeScript transpiles to JS
    if (options === null || options === void 0 ? void 0 : options.transpile) {
        fileName = `${name}.js`;
        converted = (0, typescript_1.transpile)(converted, {
            target: typescript_1.ScriptTarget.ESNext,
        }, filePath);
        // Insert new line before comments and the export keyword
        converted = converted.replace(/(\n)(\s+\/\*\*|export)/g, '$1\n$2');
    }
    // Prettier
    const parser = extname === '.md'
        ? 'markdown'
        : extname === '.json'
            ? 'json'
            : extname === '.ts'
                ? (options === null || options === void 0 ? void 0 : options.transpile)
                    ? 'babel'
                    : 'typescript'
                : undefined;
    converted = (0, prettier_1.format)(converted, { parser });
    if (!(await (0, fs_exists_1.fsExists)(destDir))) {
        await fs_1.promises.mkdir(destDir, { recursive: true });
    }
    const dest = path_1.default.resolve(destDir, fileName);
    await fs_1.promises.writeFile(dest, converted, { encoding: 'utf-8' });
    return dest;
}
exports.transfer = transfer;
