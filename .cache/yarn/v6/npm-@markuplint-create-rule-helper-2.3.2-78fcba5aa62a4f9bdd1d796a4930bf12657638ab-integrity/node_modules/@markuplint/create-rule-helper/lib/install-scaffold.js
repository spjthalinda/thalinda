"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installScaffold = void 0;
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_exists_1 = require("./fs-exists");
const transfer_1 = require("./transfer");
async function installScaffold(scaffoldDir, dest, sourceDir, params) {
    const exists = await (0, fs_exists_1.fsExists)(dest);
    if (!exists) {
        await fs_1.promises.mkdir(dest);
    }
    const scaffoldReadmeFile = path_1.default.resolve(__dirname, '..', 'scaffold', scaffoldDir, 'README.md');
    const scaffoldMainFile = path_1.default.resolve(__dirname, '..', 'scaffold', scaffoldDir, 'index.ts');
    const scaffoldTestFile = path_1.default.resolve(__dirname, '..', 'scaffold', scaffoldDir, 'index.spec.ts');
    const scaffoldSchemaFile = path_1.default.resolve(__dirname, '..', 'scaffold', scaffoldDir, 'schema.json');
    const transpile = params.lang === 'JAVASCRIPT';
    const readme = await (0, transfer_1.transfer)(scaffoldReadmeFile, dest, { name: params.name });
    const main = await (0, transfer_1.transfer)(scaffoldMainFile, path_1.default.resolve(dest, sourceDir), { name: params.name }, { transpile });
    const test = params.needTest
        ? await (0, transfer_1.transfer)(scaffoldTestFile, path_1.default.resolve(dest, sourceDir), { name: params.name }, { transpile })
        : null;
    const schemaJson = params.schemaJson ? await (0, transfer_1.transfer)(scaffoldSchemaFile, dest, { name: params.name }) : null;
    const packageJson = params.packageJson ? path_1.default.resolve(dest, 'package.json') : null;
    const dependencies = [];
    const devDependencies = [];
    const tsConfig = params.packageJson && params.lang === 'TYPESCRIPT' ? path_1.default.resolve(dest, 'tsconfig.json') : null;
    const ext = params.lang === 'JAVASCRIPT' ? 'js' : 'ts';
    if (packageJson) {
        const packageContent = {
            name: params.name,
            scripts: {},
            jest: {
                moduleFileExtensions: ['js', ...(params.lang === 'TYPESCRIPT' ? ['ts'] : [])],
                testRegex: `(\\.|/)(spec|test)\\.${ext}$`,
                testEnvironment: 'node',
                transform: params.lang === 'TYPESCRIPT'
                    ? {
                        '^.+\\.ts$': 'ts-jest',
                    }
                    : undefined,
            },
            babel: params.needTest && params.lang === 'JAVASCRIPT'
                ? {
                    presets: [
                        [
                            '@babel/preset-env',
                            {
                                targets: {
                                    node: 'current',
                                },
                            },
                        ],
                    ],
                }
                : undefined,
        };
        if (params.lang === 'TYPESCRIPT') {
            packageContent.scripts.build = 'tsc';
        }
        dependencies.push('@markuplint/ml-core@next');
        devDependencies.push('markuplint@next');
        if (params.needTest) {
            packageContent.scripts.test = 'jest';
            devDependencies.push('jest');
            if (params.lang === 'TYPESCRIPT') {
                devDependencies.push('@types/jest');
                devDependencies.push('ts-jest');
            }
            else {
                devDependencies.push('babel-jest');
                devDependencies.push('@babel/core');
                devDependencies.push('@babel/preset-env');
            }
        }
        if (params.lang === 'TYPESCRIPT') {
            devDependencies.push('typescript');
        }
        await fs_1.promises.writeFile(packageJson, JSON.stringify(packageContent, null, 2), { encoding: 'utf-8' });
    }
    if (tsConfig) {
        const config = {
            compilerOptions: {
                module: 'commonjs',
                target: 'es2019',
                strict: true,
                strictNullChecks: true,
                strictPropertyInitialization: true,
                allowSyntheticDefaultImports: true,
                experimentalDecorators: true,
                esModuleInterop: true,
                noImplicitAny: true,
                declaration: true,
                lib: ['dom', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'esnext'],
                skipLibCheck: true,
                outDir: './lib',
                rootDir: './src',
            },
            include: ['./src/**/*'],
            exclude: ['node_modules', 'lib', './src/**/*.spec.ts'],
        };
        await fs_1.promises.writeFile(tsConfig, JSON.stringify(config, null, 2), { encoding: 'utf-8' });
    }
    return {
        ...params,
        readme,
        main,
        test,
        packageJson,
        tsConfig,
        schemaJson,
        dependencies,
        devDependencies,
    };
}
exports.installScaffold = installScaffold;
