{
  "manifest": {
    "name": "postcss-markdown",
    "version": "1.2.0",
    "publishConfig": {
      "access": "public"
    },
    "description": "PostCSS syntax for parsing Markdown",
    "engines": {
      "node": "^12 || >=14"
    },
    "main": "./lib/index.js",
    "files": [
      "lib"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ota-meshi/postcss-markdown.git"
    },
    "keywords": [
      "postcss",
      "syntax",
      "markdown",
      "html",
      "css",
      "less",
      "sass",
      "scss",
      "sss",
      "sugarss"
    ],
    "author": {
      "name": "gucong"
    },
    "contributors": [
      {
        "name": "Yosuke Ota",
        "url": "https://github.com/ota-meshi"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/ota-meshi/postcss-markdown/issues"
    },
    "homepage": "https://github.com/ota-meshi/postcss-markdown#readme",
    "nyc": {
      "reporter": [
        "lcov",
        "text"
      ],
      "cache": true,
      "check-coverage": true
    },
    "scripts": {
      "mocha": "mocha \"test/**/*.js\" --no-timeouts",
      "test": "nyc npm run mocha",
      "lint": "eslint .",
      "eslint-fix": "eslint . --fix",
      "preversion": "npm run test",
      "update-snap": "mocha \"test/**/*.js\" --no-timeouts --update"
    },
    "dependencies": {
      "mdast-util-from-markdown": "^0.8.5",
      "mdast-util-frontmatter": "^0.2.0",
      "micromark-extension-frontmatter": "^0.2.2",
      "postcss": "^8.4.0",
      "postcss-safe-parser": "^6.0.0"
    },
    "devDependencies": {
      "@ota-meshi/eslint-plugin": "^0.10.0",
      "autoprefixer": "^10.3.7",
      "chai": "^4.2.0",
      "codecov": "^3.8.1",
      "eslint": "^8.0.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-eslint-comments": "^3.2.0",
      "eslint-plugin-json-schema-validator": "^2.0.0",
      "eslint-plugin-jsonc": "^2.0.0",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-node-dependencies": "^0.6.0",
      "eslint-plugin-prettier": "^4.0.0",
      "eslint-plugin-regexp": "^1.4.1",
      "eslint-plugin-yml": "^0.12.0",
      "mocha": "^9.0.0",
      "mocha-chai-jest-snapshot": "^1.1.3",
      "nyc": "^15.1.0",
      "postcss-html": "^1.3.0",
      "postcss-less": "^5.0.0",
      "postcss-scss": "^4.0.0",
      "postcss-styl": "^0.9.0",
      "prettier": "^2.4.1",
      "stylelint": "^14.0.0",
      "stylelint-config-standard": "^24.0.0",
      "sugarss": "^4.0.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-postcss-markdown-1.2.0-252dd318e5fc62c803aa9c4f046a61e2a3b38462-integrity/node_modules/postcss-markdown/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Markdown Syntax\n\n[![NPM license](https://img.shields.io/npm/l/postcss-markdown.svg)](https://www.npmjs.com/package/postcss-markdown)\n[![NPM version](https://img.shields.io/npm/v/postcss-markdown.svg?style=flat-square)](https://www.npmjs.com/package/postcss-markdown)\n[![NPM downloads](https://img.shields.io/npm/dw/postcss-markdown.svg)](http://www.npmtrends.com/postcss-markdown)\n[![NPM downloads](https://img.shields.io/npm/dm/postcss-markdown.svg)](http://www.npmtrends.com/postcss-markdown)\n[![NPM downloads](https://img.shields.io/npm/dy/postcss-markdown.svg)](http://www.npmtrends.com/postcss-markdown)\n[![Build Status](https://github.com/ota-meshi/postcss-markdown/workflows/CI/badge.svg?branch=master)](https://github.com/ota-meshi/postcss-markdown/actions?query=workflow%3ACI)\n\n<img align=\"right\" width=\"95\" height=\"95\"\n title=\"Philosopher’s stone, logo of PostCSS\"\n src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS](https://github.com/postcss/postcss) syntax for parsing [Markdown](https://daringfireball.net/projects/markdown/syntax)\n\n## Getting Started\n\nFirst thing's first, install the module:\n\n```bash\nnpm install postcss-markdown --save-dev\n```\n\nIf you want support SCSS/SASS/LESS/SugarSS syntax, you need to install the corresponding module.\n\n- SCSS: [postcss-scss](https://github.com/postcss/postcss-scss)\n- SASS: [postcss-sass](https://github.com/aleshaoleg/postcss-sass)\n- LESS: [postcss-less](https://github.com/shellscape/postcss-less)\n- SugarSS: [sugarss](https://github.com/postcss/sugarss)\n- Stylus: [postcss-styl](https://github.com/ota-meshi/postcss-styl)\n\n## Use Cases\n\n```js\nconst postcss = require(\"postcss\");\nconst syntax = require(\"postcss-markdown\")({\n    // Enable support for HTML (default: true)\n    htmlInMd: true,\n    // syntax for parse scss (non-required options)\n    scss: require(\"postcss-scss\"),\n    // syntax for parse less (non-required options)\n    less: require(\"postcss-less\"),\n    // syntax for parse css blocks (non-required options)\n    css: require(\"postcss-safe-parser\"),\n});\nconst autoprefixer = require(\"autoprefixer\");\npostcss([autoprefixer])\n    .process(source, { syntax: syntax })\n    .then(function (result) {\n        // An alias for the result.css property. Use it with syntaxes that generate non-CSS output.\n        result.content;\n    });\n```\n\ninput:\n\n<pre><code># title\n\n```css\n::placeholder {\n    color: gray;\n}\n```\n</code></pre>\n\noutput:\n\n<pre><code># title\n\n```css\n::-moz-placeholder {\n    color: gray;\n}\n:-ms-input-placeholder {\n    color: gray;\n}\n::placeholder {\n    color: gray;\n}\n```\n</code></pre>\n\nIf you want support SCSS/SASS/LESS/SugarSS syntax, you need to install these module:\n\n- SCSS: [postcss-scss](https://github.com/postcss/postcss-scss)\n- SASS: [postcss-sass](https://github.com/aleshaoleg/postcss-sass)\n- LESS: [postcss-less](https://github.com/shellscape/postcss-less)\n- SugarSS: [sugarss](https://github.com/postcss/sugarss)\n- Stylus: [postcss-styl](https://github.com/ota-meshi/postcss-styl)\n\n## Advanced Use Cases\n\n### Options\n\n```js\nconst options = {\n    rules: [\n        {\n            // custom language\n            test: /^postcss$/i,\n            lang: \"scss\",\n        },\n        {\n            // custom language\n            test: /^customcss$/i,\n            lang: \"custom\",\n        },\n    ],\n\n    // custom parser for CSS (using `postcss-safe-parser`)\n    css: \"postcss-safe-parser\",\n    // custom parser for SASS (PostCSS-compatible syntax.)\n    sass: require(\"postcss-sass\"),\n    // custom parser for SCSS (by module name)\n    scss: \"postcss-scss\",\n    // custom parser for LESS (by module path)\n    less: require.resolve(\"./node_modules/postcss-less\"),\n    // custom parser for SugarSS\n    sugarss: require(\"sugarss\"),\n    // custom parser for custom language\n    custom: require(\"postcss-custom-syntax\"),\n};\nconst syntax = require(\"postcss-markdown\")(options);\n```\n\n## Turning PostCSS off from within your Markdown\n\nPostCSS can be temporarily turned off by using special comments in your Markdown. For example:\n\n<pre><code>&lt;!-- postcss-ignore -->\n```css\na {\n    color: red;\n}\n```\n</code></pre>\n\n## Linting with Stylelint\n\nThe main use case of this plugin is to apply linting with [Stylelint] to CSS (and CSS-like) code blocks in markdown file.\n\nYou can use it by configuring your `stylelint` config as follows:\n\n```json\n{\n    \"overrides\": [\n        {\n            \"files\": [\"*.md\", \"**/*.md\"],\n            \"customSyntax\": \"postcss-markdown\"\n        }\n    ]\n}\n```\n\n[stylelint]: https://stylelint.io/\n\n### Editor integrations\n\n#### Visual Studio Code\n\nUse the [stylelint.vscode-stylelint](https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint) extension that [Stylelint] provides officially.\n\nYou have to configure the `stylelint.validate` option of the extension to check `.md` files, because the extension does not check the `*.md` file by default.\n\nExample **.vscode/settings.json**:\n\n```jsonc\n{\n  \"stylelint.validate\": [\n      ...,\n      // ↓ Add \"markdown\" language.\n      \"markdown\"\n  ]\n```\n\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 刘祺\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-markdown/-/postcss-markdown-1.2.0.tgz#252dd318e5fc62c803aa9c4f046a61e2a3b38462",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-markdown/-/postcss-markdown-1.2.0.tgz",
    "hash": "252dd318e5fc62c803aa9c4f046a61e2a3b38462",
    "integrity": "sha512-sO7eeu6pq5F0lx3XavY/rBVmifXbMTd6fGRuXaT/Q7wEuIAWTi0E2t747nQ57iVz99WynTPls4mw5wlLvZLFzw==",
    "registry": "npm",
    "packageName": "postcss-markdown",
    "cacheIntegrity": "sha512-sO7eeu6pq5F0lx3XavY/rBVmifXbMTd6fGRuXaT/Q7wEuIAWTi0E2t747nQ57iVz99WynTPls4mw5wlLvZLFzw== sha1-JS3TGOX8YsgDqpxPBGph4qOzhGI="
  },
  "registry": "npm",
  "hash": "252dd318e5fc62c803aa9c4f046a61e2a3b38462"
}