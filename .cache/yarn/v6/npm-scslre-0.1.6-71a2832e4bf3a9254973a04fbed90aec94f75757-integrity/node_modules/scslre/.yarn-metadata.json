{
  "manifest": {
    "name": "scslre",
    "version": "0.1.6",
    "description": "A library to find JS RegExp with super-linear worst-case time complexity for attack strings that repeat a single character.",
    "main": "index",
    "scripts": {
      "check": "npm run lint && npx tsc --noEmit && cd tests && npx tsc --noEmit",
      "lint": "npx eslint --ignore-path .gitignore **/*.ts",
      "test": "cd tests && mocha -r ts-node/register '**/*.ts'",
      "build": "npx rimraf ./index.* .out/** && npx tsc && rollup -c && npm run build:dts && npm run build:docs",
      "build:dts": "dts-bundle --main ./.out/index.d.ts --name scslre --out ../index.d.ts && prettier ./index.d.ts --write",
      "build:docs": "typedoc",
      "coverage": "npx nyc --reporter=html --reporter=text npm run test",
      "update-docs-branch": "git checkout docs && git merge master && npm run build:docs && git add * && git commit -m \"Task: Updated docs\" && git push && git checkout master",
      "prepublishOnly": "npm run build"
    },
    "keywords": [
      "regex",
      "regexp",
      "backtracking",
      "polynomial",
      "exponential"
    ],
    "author": {
      "name": "Michael Schmidt"
    },
    "homepage": "https://github.com/RunDevelopment/scslre#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/RunDevelopment/scslre.git"
    },
    "license": "MIT",
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^9.0.0",
      "@types/chai": "^4.2.11",
      "@types/mocha": "^7.0.2",
      "@types/node": "^12.12.31",
      "@typescript-eslint/eslint-plugin": "^2.25.0",
      "@typescript-eslint/parser": "^2.25.0",
      "chai": "^4.2.0",
      "dts-bundle": "^0.7.3",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.14.0",
      "eslint-plugin-prettier": "^3.1.4",
      "mocha": "^7.1.1",
      "nyc": "^15.1.0",
      "prettier": "^2.1.2",
      "rimraf": "^3.0.2",
      "rollup": "^2.31.0",
      "rollup-plugin-terser": "^7.0.2",
      "ts-node": "^8.8.1",
      "typedoc": "^0.20.35",
      "typescript": "^3.8.3"
    },
    "dependencies": {
      "refa": "^0.9.0",
      "regexp-ast-analysis": "^0.2.3",
      "regexpp": "^3.2.0"
    },
    "files": [
      "index.js",
      "index.mjs",
      "index.d.ts"
    ],
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-scslre-0.1.6-71a2832e4bf3a9254973a04fbed90aec94f75757-integrity/node_modules/scslre/package.json",
    "readmeFilename": "README.md",
    "readme": "# Single-character super-linear RegExps\n\n<sup><sub>what a name...</sub></sup>\n\n[![Actions Status](https://github.com/RunDevelopment/scslre/workflows/CI/badge.svg)](https://github.com/RunDevelopment/scslre/actions)\n[![npm](https://img.shields.io/npm/v/scslre)](https://www.npmjs.com/package/scslre)\n\nA library to find JS RegExp with super-linear worst-case time complexity for attack strings that repeat a single character.\n\nThe static analysis method implemented by this library focuses on finding attack string tuples where a single character is repeated. This major limitation allows the library to be fast while also offering decent support for backreferences and [assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions).\n\nThis library is not intended as a full static analysis to guard against super-linear worst-case time complexity. It is meant to be as a supplementary analysis on top of existing general analysis methods that don't (or don't fully) support advanced regex features.\n\n\n## Usage\n\nThis library exports only a single function, `analyse`, which takes a RegExp literal and returns a list of reports that show the quantifiers causing super-linear worst-case time complexity.\n\n### Documentation\n\nFor more information on the exact inputs and outputs of each function, see the full API documentation.\n\n- [Latest release](https://rundevelopment.github.io/scslre/docs/latest/)\n- [Development](https://rundevelopment.github.io/scslre/docs/dev/)\n\n\n## Limitations\n\n### Analysis\n\nThis library is implemented using a very limited static analysis method that can only find attack strings where a single character is repeated. Attack strings are generated from a tuple _(x,y,z)_ such that every string _s = xy<sup>n</sup>z_ (or `x + y.repeat(n) + z` for JS folks) takes _O(n<sup>p</sup>)_ or _O(2<sup>n</sup>)_ many steps to reject, p>1. This analysis method can only find tuples where _y_ is a single character. E.g. the polynomial backtracking in `/^(ab)*(ab)*$/` for _(x,y,z) = (\"\", \"ab\", \"c\")_ cannot be detected by this library because _y_ is not a single character.\n\nHowever, this limitation allows the static analysis method to be quick and to provide good (but not perfect) support for backreferences and assertions (e.g. `\\b`, `(?<!ba+)`).\n\n### False negatives\n\nThe analysis method primarily searches for polynomial backtracking. Finds of exponential backtracking are only a byproduct. Because of this, not all causes of super-linear worst-case time complexity are found.\n\n### False positives\n\nThis library doesn't actually search for the whole tuple _(x,y,z)_; it only searches for _y_ and assumes that adequate values for _x_ and _z_ can be found. A single-character approximation of the suffix _z_ will be computed and accounted for but false positives are still possible.\n\n\n## Reports\n\nThere are 3 different types of reports that each indicate a different type of cause for the super-linear worst-case time complexity. All are explained in the documentation of their types.\n\n### Exponential backtracking\n\nWhile most reports show polynomial backtracking, some report exponential backtracking. Exponential backtracking is a lot more dangerous and can easily be exploited for [ReDoS attacks](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS).\n\nWhile other reports may be dismissed, __all reports of exponential backtracking must be fixed__.\n\nAll reports with `exponential: true` report exponential backtracking.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Michael Schmidt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/scslre/-/scslre-0.1.6.tgz#71a2832e4bf3a9254973a04fbed90aec94f75757",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/scslre/-/scslre-0.1.6.tgz",
    "hash": "71a2832e4bf3a9254973a04fbed90aec94f75757",
    "integrity": "sha512-JORxVRlQTfjvlOAaiQKebgFElyAm5/W8b50lgaZ0OkEnKnagJW2ufDh3xRfU75UD9z3FGIu1gL1IyR3Poa6Qmw==",
    "registry": "npm",
    "packageName": "scslre",
    "cacheIntegrity": "sha512-JORxVRlQTfjvlOAaiQKebgFElyAm5/W8b50lgaZ0OkEnKnagJW2ufDh3xRfU75UD9z3FGIu1gL1IyR3Poa6Qmw== sha1-caKDLkvzqSVJc6BPvtkK7JT3V1c="
  },
  "registry": "npm",
  "hash": "71a2832e4bf3a9254973a04fbed90aec94f75757"
}