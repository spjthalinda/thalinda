"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const check_1 = require("./check");
test('Any', () => {
    expect((0, check_1.check)('', 'Any').matched).toBe(true);
    expect((0, check_1.check)(' ', 'Any').matched).toBe(true);
    expect((0, check_1.check)('a', 'Any').matched).toBe(true);
});
test('NoEmptyAny', () => {
    expect((0, check_1.check)('', 'NoEmptyAny').matched).toBe(false);
    expect((0, check_1.check)(' ', 'NoEmptyAny').matched).toBe(true);
    expect((0, check_1.check)('a', 'NoEmptyAny').matched).toBe(true);
});
test('OneLineAny', () => {
    expect((0, check_1.check)('', 'OneLineAny').matched).toBe(true);
    expect((0, check_1.check)(' ', 'OneLineAny').matched).toBe(true);
    expect((0, check_1.check)('a', 'OneLineAny').matched).toBe(true);
    expect((0, check_1.check)('a ', 'OneLineAny').matched).toBe(true);
    expect((0, check_1.check)('a b', 'OneLineAny').matched).toBe(true);
    expect((0, check_1.check)('a\n', 'OneLineAny').matched).toBe(false);
    expect((0, check_1.check)('a\nb', 'OneLineAny').matched).toBe(false);
    expect((0, check_1.check)('a\r\nb', 'OneLineAny').matched).toBe(false);
    expect((0, check_1.check)('a\rb', 'OneLineAny').matched).toBe(false);
});
test('Pattern', () => {
    expect((0, check_1.check)('.*', 'Pattern').matched).toBe(true);
    expect((0, check_1.check)('[a-z]+', 'Pattern').matched).toBe(true);
    expect((0, check_1.check)(']//[()?!+*', 'Pattern').matched).toBe(false);
});
test('BCP47', () => {
    expect((0, check_1.check)('en', 'BCP47').matched).toBe(true);
    expect((0, check_1.check)('en-US', 'BCP47').matched).toBe(true);
    expect((0, check_1.check)('ja', 'BCP47').matched).toBe(true);
    expect((0, check_1.check)(' ja ', 'BCP47').matched).toBe(false);
    expect((0, check_1.check)('', 'BCP47').matched).toBe(false);
    expect((0, check_1.check)('zh/cn', 'BCP47').matched).toBe(false);
});
test('Srcset', () => {
    expect((0, check_1.check)('a/bb/ccc/dddd', 'Srcset').matched).toBe(true);
    expect((0, check_1.check)('a/bb/ccc/dddd 200w', 'Srcset').matched).toBe(true);
    expect((0, check_1.check)('a/bb/ccc/dddd 200w, b/cc/ddd/eeee 1.5x', 'Srcset').matched).toBe(true);
    expect((0, check_1.check)('a/bb/ccc/dddd 200w, b/cc/ddd/eeee 1.5a', 'Srcset').matched).toBe(false);
});
test('IconSize', () => {
    expect((0, check_1.check)('any', 'IconSize').matched).toBe(true);
    expect((0, check_1.check)('Any', 'IconSize').matched).toBe(true);
    expect((0, check_1.check)('10x10', 'IconSize').matched).toBe(true);
    expect((0, check_1.check)('1x1', 'IconSize').matched).toBe(true);
    expect((0, check_1.check)('1x0', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)('0x1', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)('0x0', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)('', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)(' ', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)('1', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)('1x', 'IconSize').matched).toBe(false);
    expect((0, check_1.check)('x1', 'IconSize').matched).toBe(false);
});
test('Number', () => {
    expect((0, check_1.check)('10', { type: 'integer', gt: 0 }).matched).toBe(true);
    expect((0, check_1.check)('0', { type: 'integer', gt: 0 }).matched).toBe(false);
    expect((0, check_1.check)('0', { type: 'integer', gte: 0 }).matched).toBe(true);
    expect((0, check_1.check)('9', { type: 'integer', lt: 10 }).matched).toBe(true);
    expect((0, check_1.check)('10', { type: 'integer', lt: 10 }).matched).toBe(false);
});
test('Non-exist types', () => {
    // @ts-ignore
    expect((0, check_1.check)('abc', 'String').matched).toBe(true);
    // @ts-ignore
    expect((0, check_1.check)('abc', 'FooBar').matched).toBe(true);
    // @ts-ignore
    expect((0, check_1.check)('abc', ' ').matched).toBe(true);
    // @ts-ignore
    expect((0, check_1.check)('abc', '\n').matched).toBe(true);
    // @ts-ignore
    expect((0, check_1.check)('abc', '').matched).toBe(true);
});
