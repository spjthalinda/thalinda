"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkNumber = void 0;
const match_result_1 = require("./match-result");
const primitive_1 = require("./primitive");
function checkNumber(value, type, ref) {
    if (!value) {
        return (0, match_result_1.unmatched)(value, 'empty-token');
    }
    const syntaxMatched = type.type === 'float' ? (0, primitive_1.isFloat)(value) : (0, primitive_1.isInt)(value);
    if (syntaxMatched) {
        const n = parseFloat(value);
        if (!isFinite(n)) {
            return (0, match_result_1.unmatched)(value, 'unexpected-token');
        }
        const clampable = type.clampable;
        const isInt = type.type === 'integer';
        if (type.gt != null && n <= type.gt) {
            return (0, match_result_1.unmatched)(value, 'out-of-range', {
                candicate: clampable && isInt ? `${type.gt + 1}` : undefined,
            });
        }
        if (type.gte != null && n < type.gte) {
            return (0, match_result_1.unmatched)(value, 'out-of-range', {
                candicate: clampable ? `${type.gte}` : undefined,
            });
        }
        if (type.lt != null && type.lt <= n) {
            return (0, match_result_1.unmatched)(value, 'out-of-range', {
                candicate: clampable && isInt ? `${type.lt - 1}` : undefined,
            });
        }
        if (type.lte != null && type.lte < n) {
            return (0, match_result_1.unmatched)(value, 'out-of-range', {
                candicate: clampable ? `${type.lte}` : undefined,
            });
        }
    }
    return syntaxMatched ? (0, match_result_1.matched)() : (0, match_result_1.unmatched)(value, 'unexpected-token');
}
exports.checkNumber = checkNumber;
