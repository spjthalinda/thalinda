"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTimeZone = exports.checkTimeZoneOffsetString = void 0;
const debug_1 = require("../../debug");
const match_result_1 = require("../../match-result");
const token_1 = require("../../token");
const datetime_tokens_1 = require("./datetime-tokens");
/**
 * @see https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#time-zones
 */
const checkTimeZoneOffsetString = () => function checkTimeZoneOffsetString(value) {
    (0, debug_1.log)('CHECK: time-zone-offset-string');
    return parseTimeZone(value);
};
exports.checkTimeZoneOffsetString = checkTimeZoneOffsetString;
function parseTimeZone(zone) {
    const value = typeof zone === 'string' ? zone : zone.value;
    const zoneTokens = token_1.TokenCollection.fromPatterns(zone, [
        // Z + -
        /[^0-9]?/,
        // hh
        /[^:]{0,2}/,
        // :
        /[^0-9]?/,
        // mm
        /.[0-9]*/,
    ]);
    (0, debug_1.log)('Time-zone Part: "%s" => %O', value, zoneTokens);
    const res = zoneTokens.eachCheck((sign, tail) => {
        if (!sign || !sign.value) {
            return (0, match_result_1.unmatched)(value, 'missing-token', {
                expects: [
                    { type: 'const', value: 'Z' },
                    { type: 'const', value: '+' },
                    { type: 'const', value: '-' },
                ],
                partName: 'time-zone',
            });
        }
        if (sign.match('Z')) {
            if (tail.value) {
                return tail[0].unmatched({
                    reason: 'extra-token',
                });
            }
            return (0, match_result_1.matched)();
        }
        if (!sign.match(['+', '-'])) {
            return sign.unmatched({
                reason: 'unexpected-token',
                expects: [
                    { type: 'const', value: '+' },
                    { type: 'const', value: '-' },
                ],
                partName: 'time-zone',
            });
        }
    }, datetime_tokens_1.datetimeTokenCheck.hour, coron => {
        if (!coron || !coron.value) {
            return;
        }
        if (!coron.match(':')) {
            return coron.unmatched({
                reason: 'unexpected-token',
                expects: [{ type: 'const', value: ':' }],
                partName: 'time-zone',
            });
        }
    }, datetime_tokens_1.datetimeTokenCheck.minute, datetime_tokens_1.datetimeTokenCheck.extra);
    if (!res.matched) {
        (0, debug_1.log)('Failed: %O', res);
    }
    return res;
}
exports.parseTimeZone = parseTimeZone;
