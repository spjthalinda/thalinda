import type { UnmatchedResult, UnmatchedResultOptions, UnmatchedResultReason } from '../types';
export declare class Token {
    #private;
    static getType(value: string, separators?: string[]): 1 | 13 | 18;
    static getLine(value: string, offset: number): number;
    static getCol(value: string, offset: number): number;
    static shiftLocation(token: Token, offset: number): {
        offset: number;
        line: number;
        column: number;
    };
    /**
     * ASCII whitespace is
     * - U+0009 TAB
     * - U+000A LF
     * - U+000C FF
     * - U+000D CR
     * - U+0020 SPACE.
     *
     * @see https://infra.spec.whatwg.org/#ascii-whitespace
     */
    static readonly whitespace: ReadonlyArray<string>;
    /**
     * @see https://github.com/csstree/csstree/blob/master/lib/tokenizer/types.js
     */
    static readonly Ident = 1;
    static readonly WhiteSpace = 13;
    static readonly Comma = 18;
    readonly type: number;
    readonly value: string;
    readonly offset: number;
    constructor(value: string, offset: number, originalValue: string, separators?: string[]);
    get length(): number;
    get origin(): string;
    unmatched(options?: UnmatchedResultOptions & {
        ref?: string;
        reason?: UnmatchedResultReason;
    }): UnmatchedResult;
    /**
     *
     * @param value The token value or the token type or its list
     */
    match(value: string | RegExp | number | (string | RegExp | number)[], caseInsensitive?: boolean): boolean;
    /**
     *
     * @param value The token value or the token type or its list
     */
    includes(value: string | RegExp | number | (string | RegExp | number)[], caseInsensitive?: boolean): boolean;
    toNumber(): number;
    toJSON(): {
        type: number;
        value: string;
        offset: number;
    };
}
