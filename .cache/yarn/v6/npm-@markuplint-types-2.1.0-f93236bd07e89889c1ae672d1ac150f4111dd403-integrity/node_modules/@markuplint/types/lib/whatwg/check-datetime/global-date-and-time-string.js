"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkGlobalDateAndTimeString = void 0;
const debug_1 = require("../../debug");
const match_result_1 = require("../../match-result");
const token_1 = require("../../token");
const datetime_tokens_1 = require("./datetime-tokens");
const time_zone_offset_string_1 = require("./time-zone-offset-string");
/**
 * @see https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#global-dates-and-times
 */
const checkGlobalDateAndTimeString = () => function checkGlobalDateAndTimeString(value) {
    (0, debug_1.log)('CHECK: global-date-and-time-string');
    const tokens = token_1.TokenCollection.fromPatterns(value, [
        // YYYY
        /[^-]*/,
        // -
        /[^0-9]?/,
        // MM
        /[^-]*/,
        // -
        /[^0-9]?/,
        // DD
        /[^T\s]*/,
        // T \s
        /[^0-9]?/,
        // hh
        /[^:]*/,
        // :
        /[^0-9]?/,
        // mm
        /[^:Z+-]*/,
        // :ss.sss
        /(:[^Z+-]*)?/,
        // time-zone
        /.*/,
    ]);
    (0, debug_1.log)('Global Date and Time "%s" => %O', tokens.value, tokens);
    const res = tokens.eachCheck(datetime_tokens_1.datetimeTokenCheck.year, datetime_tokens_1.datetimeTokenCheck.hyphen, datetime_tokens_1.datetimeTokenCheck.month, datetime_tokens_1.datetimeTokenCheck.hyphen, datetime_tokens_1.datetimeTokenCheck.date, datetime_tokens_1.datetimeTokenCheck.localDateTimeSeparator, datetime_tokens_1.datetimeTokenCheck.hour, datetime_tokens_1.datetimeTokenCheck.coron, datetime_tokens_1.datetimeTokenCheck.minute, second => {
        if (!second || !second.value) {
            return;
        }
        const secondTokens = token_1.TokenCollection.fromPatterns(second, [/:?/, /[0-9]*/, /\.?/, /[0-9]*/]);
        (0, debug_1.log)('Scond Part: "%s" => %O', secondTokens.value, secondTokens);
        const res = secondTokens.eachCheck(datetime_tokens_1.datetimeTokenCheck.coron, datetime_tokens_1.datetimeTokenCheck.second, datetime_tokens_1.datetimeTokenCheck.decimalPointOrEnd, datetime_tokens_1.datetimeTokenCheck.secondFractionalPart);
        if (!res.matched) {
            return res;
        }
    }, zone => {
        if (!zone || !zone.value) {
            return (0, match_result_1.unmatched)(value, 'missing-token', {
                expects: [{ type: 'common', value: 'time-zone' }],
                partName: 'time-zone',
            });
        }
        const res = (0, time_zone_offset_string_1.parseTimeZone)(zone);
        if (!res.matched) {
            return res;
        }
    }, datetime_tokens_1.datetimeTokenCheck.extra);
    if (!res.matched) {
        (0, debug_1.log)('Failed: %O', res);
    }
    return res;
};
exports.checkGlobalDateAndTimeString = checkGlobalDateAndTimeString;
