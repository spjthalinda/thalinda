"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkMIMEType = void 0;
const tslib_1 = require("tslib");
// @ts-ignore
const whatwg_mimetype_1 = tslib_1.__importDefault(require("whatwg-mimetype"));
const match_result_1 = require("../match-result");
const token_1 = require("../token");
const expects = (withoutParameters) => [
    {
        type: 'format',
        value: withoutParameters ? 'MIME Type with no parameters' : 'MIME Type',
    },
];
/**
 * MIME Type
 * @see https://mimesniff.spec.whatwg.org/#valid-mime-type
 */
const checkMIMEType = options => value => {
    var _a;
    const withoutParameters = (_a = options === null || options === void 0 ? void 0 : options.withoutParameters) !== null && _a !== void 0 ? _a : false;
    if (!value) {
        return (0, match_result_1.unmatched)(value, 'empty-token', { expects: expects(withoutParameters) });
    }
    const mimeType = whatwg_mimetype_1.default.parse(value);
    if (mimeType) {
        if (value.toLowerCase() === mimeType.essence) {
            return (0, match_result_1.matched)();
        }
        if (!withoutParameters && mimeType.parameters.size) {
            return (0, match_result_1.matched)();
        }
        const extraToken = value.slice(mimeType.essence.length);
        return new token_1.Token(extraToken, mimeType.essence.length, value).unmatched({
            reason: 'extra-token',
            expects: expects(withoutParameters),
            candicate: mimeType.essence,
        });
    }
    return (0, match_result_1.unmatched)(value, 'syntax-error', { expects: expects(withoutParameters) });
};
exports.checkMIMEType = checkMIMEType;
