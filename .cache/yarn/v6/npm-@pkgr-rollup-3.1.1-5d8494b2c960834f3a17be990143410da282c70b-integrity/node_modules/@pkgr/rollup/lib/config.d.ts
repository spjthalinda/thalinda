import { StringMap } from '@pkgr/umd-globals';
import { RollupAliasOptions } from '@rollup/plugin-alias';
import { RollupBabelInputPluginOptions } from '@rollup/plugin-babel';
import { ModuleFormat, OutputOptions, RollupOptions } from 'rollup';
import { CopyOptions } from 'rollup-plugin-copy';
import { Options as EsBuildOptions } from 'rollup-plugin-esbuild';
import { PostCSSPluginConf } from 'rollup-plugin-postcss';
import { Options as TerserOptions } from 'rollup-plugin-terser';
declare type VuePluginOptions = import('rollup-plugin-vue').Options;
export declare type Format = 'cjs' | 'es5' | 'es2015' | 'esm' | 'umd';
export declare type External = string[] | string | ((id: string, collectedExternals?: string[]) => boolean);
export interface ConfigOptions {
    formats?: ModuleFormat[];
    monorepo?: string[] | boolean;
    input?: string;
    exclude?: string[];
    outputDir?: string;
    exports?: OutputOptions['exports'];
    external?: External;
    externals?: External;
    globals?: StringMap;
    aliasEntries?: RollupAliasOptions['entries'];
    copies?: CopyOptions | CopyOptions['targets'] | StringMap;
    sourceMap?: boolean;
    babel?: RollupBabelInputPluginOptions;
    esbuild?: EsBuildOptions;
    transformer?: 'babel' | 'esbuild';
    postcss?: Readonly<PostCSSPluginConf>;
    vue?: VuePluginOptions;
    define?: Record<string, string> | boolean;
    terser?: TerserOptions;
    prod?: boolean;
    watch?: boolean;
}
export declare const COPY_OPTIONS_KEYS: Array<keyof CopyOptions>;
export declare const config: ({ formats, monorepo, input, exclude, outputDir, exports, external, externals, globals: umdGlobals, aliasEntries, copies, sourceMap, babel: babelOptions, esbuild: esbuildOptions, transformer, postcss: postcssOptions, vue: vueOptions, define, terser: terserOptions, prod, }?: ConfigOptions) => RollupOptions[];
declare const _default: (options?: ConfigOptions) => RollupOptions[];
export default _default;
