{
  "manifest": {
    "author": {
      "name": "Gajus Kuizinas",
      "email": "gajus@gajus.com",
      "url": "http://gajus.com"
    },
    "dependencies": {
      "@es-joy/jsdoccomment": "~0.31.0",
      "comment-parser": "1.3.1",
      "debug": "^4.3.4",
      "escape-string-regexp": "^4.0.0",
      "esquery": "^1.4.0",
      "semver": "^7.3.7",
      "spdx-expression-parse": "^3.0.1"
    },
    "description": "JSDoc linting rules for ESLint.",
    "devDependencies": {
      "@babel/cli": "^7.17.10",
      "@babel/core": "^7.18.0",
      "@babel/eslint-parser": "^7.17.0",
      "@babel/node": "^7.17.10",
      "@babel/plugin-syntax-class-properties": "^7.12.13",
      "@babel/plugin-transform-flow-strip-types": "^7.17.12",
      "@babel/preset-env": "^7.18.0",
      "@babel/register": "^7.17.7",
      "@es-joy/jsdoc-eslint-parser": "^0.17.0",
      "@hkdobrev/run-if-changed": "^0.3.1",
      "@typescript-eslint/parser": "^5.26.0",
      "babel-plugin-add-module-exports": "^1.0.4",
      "babel-plugin-istanbul": "^6.1.1",
      "camelcase": "^6.3.0",
      "chai": "^4.3.6",
      "cross-env": "^7.0.3",
      "decamelize": "^5.0.1",
      "eslint": "^8.16.0",
      "eslint-config-canonical": "~33.0.1",
      "gitdown": "^3.1.5",
      "glob": "^8.0.3",
      "husky": "^8.0.1",
      "jsdoc-type-pratt-parser": "^3.1.0",
      "lint-staged": "^12.4.1",
      "lodash.defaultsdeep": "^4.6.1",
      "mocha": "^10.0.0",
      "nyc": "^15.1.0",
      "open-editor": "^3.0.0",
      "rimraf": "^3.0.2",
      "semantic-release": "^19.0.2",
      "typescript": "^4.6.4"
    },
    "engines": {
      "node": "^14 || ^16 || ^17 || ^18"
    },
    "keywords": [
      "eslint",
      "plugin",
      "jsdoc"
    ],
    "license": "BSD-3-Clause",
    "lint-staged": {
      ".eslintignore": [
        "npm run lint-fix",
        "git add ."
      ],
      "*.js": "npm run lint-arg -- --fix"
    },
    "main": "./dist/index.js",
    "name": "eslint-plugin-jsdoc",
    "mocha": {
      "require": [
        "@babel/register"
      ],
      "reporter": "dot",
      "recursive": true,
      "timeout": 12000
    },
    "nyc": {
      "branches": 100,
      "check-coverage": true,
      "exclude": [
        "src/rules/checkExamples.js"
      ],
      "functions": 100,
      "include": [
        "src/"
      ],
      "instrument": false,
      "lines": 100,
      "reporter": "text-summary",
      "require": [
        "@babel/register"
      ],
      "sourceMap": false,
      "statements": 100
    },
    "peerDependencies": {
      "eslint": "^7.0.0 || ^8.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/gajus/eslint-plugin-jsdoc"
    },
    "run-if-changed": {
      "package-lock.json": "npm run install-offline"
    },
    "scripts": {
      "build": "rimraf ./dist && cross-env NODE_ENV=production babel ./src --out-dir ./dist --copy-files --source-maps --ignore ./src/bin/*.js --no-copy-ignored",
      "check-readme": "babel-node ./src/bin/generateReadme.js --check",
      "create-readme": "babel-node ./src/bin/generateReadme.js",
      "create-rule": "babel-node ./src/bin/generateRule.js",
      "install-offline": "npm install --prefer-offline --no-audit",
      "lint": "npm run lint-arg -- .",
      "lint-arg": "eslint --report-unused-disable-directives",
      "lint-fix": "npm run lint-arg -- --fix .",
      "prepare": "husky install",
      "test-no-cov": "cross-env BABEL_ENV=test mocha",
      "test": "nyc npm run test-no-cov",
      "test-cov": "cross-env TIMING=1 nyc --reporter text npm run test-no-cov",
      "test-index": "npm run test-no-cov -- test/rules/index.js"
    },
    "version": "39.3.2",
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-eslint-plugin-jsdoc-39.3.2-b9c3becdbd860a75b8bd07bd04a0eaaad7c79403-integrity/node_modules/eslint-plugin-jsdoc/package.json",
    "readmeFilename": "README.md",
    "readme": "<a name=\"user-content-eslint-plugin-jsdoc\"></a>\n<a name=\"eslint-plugin-jsdoc\"></a>\n# eslint-plugin-jsdoc\n\n[![GitSpo Mentions](https://gitspo.com/badges/mentions/gajus/eslint-plugin-jsdoc?style=flat-square)](https://gitspo.com/mentions/gajus/eslint-plugin-jsdoc)\n[![NPM version](https://img.shields.io/npm/v/eslint-plugin-jsdoc.svg?style=flat-square)](https://www.npmjs.org/package/eslint-plugin-jsdoc)\n[![Travis build status](https://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.svg?style=flat-square)](https://travis-ci.org/gajus/eslint-plugin-jsdoc)\n[![js-canonical-style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n[![Discord Chat](https://img.shields.io/badge/chat-on%20disord-green.svg?logo=discord)](https://discord.gg/kFFy3nc)\n\nJSDoc linting rules for ESLint.\n\n* [eslint-plugin-jsdoc](#user-content-eslint-plugin-jsdoc)\n    * [Installation](#user-content-eslint-plugin-jsdoc-installation)\n    * [Configuration](#user-content-eslint-plugin-jsdoc-configuration)\n    * [Options](#user-content-eslint-plugin-jsdoc-options)\n    * [Settings](#user-content-eslint-plugin-jsdoc-settings)\n        * [Allow tags (`@private` or `@internal`) to disable rules for that comment block](#user-content-eslint-plugin-jsdoc-settings-allow-tags-private-or-internal-to-disable-rules-for-that-comment-block)\n        * [`maxLines` and `minLines`](#user-content-eslint-plugin-jsdoc-settings-maxlines-and-minlines)\n        * [Mode](#user-content-eslint-plugin-jsdoc-settings-mode)\n        * [Alias Preference](#user-content-eslint-plugin-jsdoc-settings-alias-preference)\n        * [`@override`/`@augments`/`@extends`/`@implements`/`@ignore` Without Accompanying `@param`/`@description`/`@example`/`@returns`/`@throws`/`@yields`](#user-content-eslint-plugin-jsdoc-settings-override-augments-extends-implements-ignore-without-accompanying-param-description-example-returns-throws-yields)\n        * [Settings to Configure `check-types` and `no-undefined-types`](#user-content-eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types)\n        * [`structuredTags`](#user-content-eslint-plugin-jsdoc-settings-structuredtags)\n    * [Advanced](#user-content-eslint-plugin-jsdoc-advanced)\n        * [AST and Selectors](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\n    * [Rules](#user-content-eslint-plugin-jsdoc-rules)\n        * [`check-access`](#user-content-eslint-plugin-jsdoc-rules-check-access)\n        * [`check-alignment`](#user-content-eslint-plugin-jsdoc-rules-check-alignment)\n        * [`check-examples`](#user-content-eslint-plugin-jsdoc-rules-check-examples)\n        * [`check-indentation`](#user-content-eslint-plugin-jsdoc-rules-check-indentation)\n        * [`check-line-alignment`](#user-content-eslint-plugin-jsdoc-rules-check-line-alignment)\n        * [`check-param-names`](#user-content-eslint-plugin-jsdoc-rules-check-param-names)\n        * [`check-property-names`](#user-content-eslint-plugin-jsdoc-rules-check-property-names)\n        * [`check-syntax`](#user-content-eslint-plugin-jsdoc-rules-check-syntax)\n        * [`check-tag-names`](#user-content-eslint-plugin-jsdoc-rules-check-tag-names)\n        * [`check-types`](#user-content-eslint-plugin-jsdoc-rules-check-types)\n        * [`check-values`](#user-content-eslint-plugin-jsdoc-rules-check-values)\n        * [`empty-tags`](#user-content-eslint-plugin-jsdoc-rules-empty-tags)\n        * [`implements-on-classes`](#user-content-eslint-plugin-jsdoc-rules-implements-on-classes)\n        * [`match-description`](#user-content-eslint-plugin-jsdoc-rules-match-description)\n        * [`match-name`](#user-content-eslint-plugin-jsdoc-rules-match-name)\n        * [`multiline-blocks`](#user-content-eslint-plugin-jsdoc-rules-multiline-blocks)\n        * [`newline-after-description`](#user-content-eslint-plugin-jsdoc-rules-newline-after-description)\n        * [`no-bad-blocks`](#user-content-eslint-plugin-jsdoc-rules-no-bad-blocks)\n        * [`no-defaults`](#user-content-eslint-plugin-jsdoc-rules-no-defaults)\n        * [`no-missing-syntax`](#user-content-eslint-plugin-jsdoc-rules-no-missing-syntax)\n        * [`no-multi-asterisks`](#user-content-eslint-plugin-jsdoc-rules-no-multi-asterisks)\n        * [`no-restricted-syntax`](#user-content-eslint-plugin-jsdoc-rules-no-restricted-syntax)\n        * [`no-types`](#user-content-eslint-plugin-jsdoc-rules-no-types)\n        * [`no-undefined-types`](#user-content-eslint-plugin-jsdoc-rules-no-undefined-types)\n        * [`require-asterisk-prefix`](#user-content-eslint-plugin-jsdoc-rules-require-asterisk-prefix)\n        * [`require-description-complete-sentence`](#user-content-eslint-plugin-jsdoc-rules-require-description-complete-sentence)\n        * [`require-description`](#user-content-eslint-plugin-jsdoc-rules-require-description)\n        * [`require-example`](#user-content-eslint-plugin-jsdoc-rules-require-example)\n        * [`require-file-overview`](#user-content-eslint-plugin-jsdoc-rules-require-file-overview)\n        * [`require-hyphen-before-param-description`](#user-content-eslint-plugin-jsdoc-rules-require-hyphen-before-param-description)\n        * [`require-jsdoc`](#user-content-eslint-plugin-jsdoc-rules-require-jsdoc)\n        * [`require-param-description`](#user-content-eslint-plugin-jsdoc-rules-require-param-description)\n        * [`require-param-name`](#user-content-eslint-plugin-jsdoc-rules-require-param-name)\n        * [`require-param-type`](#user-content-eslint-plugin-jsdoc-rules-require-param-type)\n        * [`require-param`](#user-content-eslint-plugin-jsdoc-rules-require-param)\n        * [`require-property`](#user-content-eslint-plugin-jsdoc-rules-require-property)\n        * [`require-property-description`](#user-content-eslint-plugin-jsdoc-rules-require-property-description)\n        * [`require-property-name`](#user-content-eslint-plugin-jsdoc-rules-require-property-name)\n        * [`require-property-type`](#user-content-eslint-plugin-jsdoc-rules-require-property-type)\n        * [`require-returns-check`](#user-content-eslint-plugin-jsdoc-rules-require-returns-check)\n        * [`require-returns-description`](#user-content-eslint-plugin-jsdoc-rules-require-returns-description)\n        * [`require-returns-type`](#user-content-eslint-plugin-jsdoc-rules-require-returns-type)\n        * [`require-returns`](#user-content-eslint-plugin-jsdoc-rules-require-returns)\n        * [`require-throws`](#user-content-eslint-plugin-jsdoc-rules-require-throws)\n        * [`require-yields`](#user-content-eslint-plugin-jsdoc-rules-require-yields)\n        * [`require-yields-check`](#user-content-eslint-plugin-jsdoc-rules-require-yields-check)\n        * [`sort-tags`](#user-content-eslint-plugin-jsdoc-rules-sort-tags)\n        * [`tag-lines`](#user-content-eslint-plugin-jsdoc-rules-tag-lines)\n        * [`valid-types`](#user-content-eslint-plugin-jsdoc-rules-valid-types)\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-installation\"></a>\n<a name=\"eslint-plugin-jsdoc-installation\"></a>\n## Installation\n\nInstall [ESLint](https://www.github.com/eslint/eslint) either locally or\nglobally.\n\n```sh\nnpm install --save-dev eslint\n```\n\nIf you have installed `ESLint` globally, you have to install JSDoc plugin\nglobally too. Otherwise, install it locally.\n\n```sh\nnpm install --save-dev eslint-plugin-jsdoc\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-configuration\"></a>\n<a name=\"eslint-plugin-jsdoc-configuration\"></a>\n## Configuration\n\nAdd `plugins` section to [.eslintrc.*](https://eslint.org/docs/user-guide/configuring#configuration-file-formats)\nand specify `eslint-plugin-jsdoc` as a plugin.\n\n```json\n{\n    \"plugins\": [\n        \"jsdoc\"\n    ]\n}\n```\n\nFinally, enable all of the rules that you would like to use.\n\n```javascript\n{\n    \"rules\": {\n        \"jsdoc/check-access\": 1, // Recommended\n        \"jsdoc/check-alignment\": 1, // Recommended\n        \"jsdoc/check-examples\": 1,\n        \"jsdoc/check-indentation\": 1,\n        \"jsdoc/check-line-alignment\": 1,\n        \"jsdoc/check-param-names\": 1, // Recommended\n        \"jsdoc/check-property-names\": 1, // Recommended\n        \"jsdoc/check-syntax\": 1,\n        \"jsdoc/check-tag-names\": 1, // Recommended\n        \"jsdoc/check-types\": 1, // Recommended\n        \"jsdoc/check-values\": 1, // Recommended\n        \"jsdoc/empty-tags\": 1, // Recommended\n        \"jsdoc/implements-on-classes\": 1, // Recommended\n        \"jsdoc/match-description\": 1,\n        \"jsdoc/multiline-blocks\": 1, // Recommended\n        \"jsdoc/newline-after-description\": 1, // Recommended\n        \"jsdoc/no-bad-blocks\": 1,\n        \"jsdoc/no-defaults\": 1,\n        \"jsdoc/no-missing-syntax\": 1,\n        \"jsdoc/no-multi-asterisks\": 1, // Recommended\n        \"jsdoc/no-restricted-syntax\": 1,\n        \"jsdoc/no-types\": 1,\n        \"jsdoc/no-undefined-types\": 1, // Recommended\n        \"jsdoc/require-asterisk-prefix\": 1,\n        \"jsdoc/require-description\": 1,\n        \"jsdoc/require-description-complete-sentence\": 1,\n        \"jsdoc/require-example\": 1,\n        \"jsdoc/require-file-overview\": 1,\n        \"jsdoc/require-hyphen-before-param-description\": 1,\n        \"jsdoc/require-jsdoc\": 1, // Recommended\n        \"jsdoc/require-param\": 1, // Recommended\n        \"jsdoc/require-param-description\": 1, // Recommended\n        \"jsdoc/require-param-name\": 1, // Recommended\n        \"jsdoc/require-param-type\": 1, // Recommended\n        \"jsdoc/require-property\": 1, // Recommended\n        \"jsdoc/require-property-description\": 1, // Recommended\n        \"jsdoc/require-property-name\": 1, // Recommended\n        \"jsdoc/require-property-type\": 1, // Recommended\n        \"jsdoc/require-returns\": 1, // Recommended\n        \"jsdoc/require-returns-check\": 1, // Recommended\n        \"jsdoc/require-returns-description\": 1, // Recommended\n        \"jsdoc/require-returns-type\": 1, // Recommended\n        \"jsdoc/require-throws\": 1,\n        \"jsdoc/require-yields\": 1, // Recommended\n        \"jsdoc/require-yields-check\": 1, // Recommended\n        \"jsdoc/tag-lines\": 1, // Recommended\n        \"jsdoc/valid-types\": 1 // Recommended\n    }\n}\n```\n\nOr you can simply add the following to [.eslintrc.*](https://eslint.org/docs/user-guide/configuring#configuration-file-formats),\nwhich enables the rules commented above as \"recommended\":\n\n\n```json\n{\n  \"extends\": [\"plugin:jsdoc/recommended\"]\n}\n```\n\nYou can then selectively add to or override the recommended rules.\n\n<a name=\"user-content-eslint-plugin-jsdoc-options\"></a>\n<a name=\"eslint-plugin-jsdoc-options\"></a>\n## Options\n\nRules may, as per the [ESLint user guide](https://eslint.org/docs/user-guide/configuring), have their own individual options. In `eslint-plugin-jsdoc`, a few options,\nsuch as, `exemptedBy` and `contexts`, may be used across different rules.\n\n`eslint-plugin-jsdoc` options, if present, are generally in the form of an\nobject supplied as the second argument in an array after the error level\n(any exceptions to this format are explained within that rule's docs).\n\n```js\n// `.eslintrc.js`\n{\n  rules: {\n    'jsdoc/require-example': [\n        // The Error level should be `error`, `warn`, or `off` (or 2, 1, or 0)\n        'error',\n        // The options vary by rule, but are generally added to an options\n        //  object as follows:\n        {\n          checkConstructors: true,\n          exemptedBy: ['type']\n        }\n    ]\n  }\n}\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings\"></a>\n<a name=\"eslint-plugin-jsdoc-settings\"></a>\n## Settings\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-allow-tags-private-or-internal-to-disable-rules-for-that-comment-block\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-allow-tags-private-or-internal-to-disable-rules-for-that-comment-block\"></a>\n### Allow tags (<code>@private</code> or <code>@internal</code>) to disable rules for that comment block\n\n- `settings.jsdoc.ignorePrivate` - Disables all rules for the comment block\n  on which a `@private` tag (or `@access private`) occurs. Defaults to\n  `false`. Note: This has no effect with the rule `check-access` (whose\n  purpose is to check access modifiers) or `empty-tags` (which checks\n  `@private` itself).\n- `settings.jsdoc.ignoreInternal` - Disables all rules for the comment block\n  on which a `@internal` tag occurs. Defaults to `false`. Note: This has no\n  effect with the rule `empty-tags` (which checks `@internal` itself).\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-maxlines-and-minlines\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-maxlines-and-minlines\"></a>\n### <code>maxLines</code> and <code>minLines</code>\n\nOne can use `minLines` and `maxLines` to indicate how many line breaks\n(if any) will be checked to find a jsdoc comment block before the given\ncode block. These settings default to `0` and `1` respectively.\n\nIn conjunction with the `require-jsdoc` rule, these settings can\nbe enforced so as to report problems if a jsdoc block is not found within\nthe specified boundaries. The settings are also used in the fixer to determine\nhow many line breaks to add when a block is missing.\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-mode\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-mode\"></a>\n### Mode\n\n- `settings.jsdoc.mode` - Set to `typescript`, `closure`, or `jsdoc` (the\n  default unless the `@typescript-eslint` parser is in use in which case\n  `typescript` will be the default).\n  Note that if you do not wish to use separate `.eslintrc.*` files for a\n  project containing both JavaScript and TypeScript, you can also use\n  [`overrides`](https://eslint.org/docs/user-guide/configuring). You may also\n  set to `\"permissive\"` to try to be as accommodating to any of the styles,\n  but this is not recommended. Currently is used for the following:\n  - `check-tag-names`: Determine valid tags and aliases\n  - `no-undefined-types`: Only check `@template` for types in \"closure\" and\n    \"typescript\" modes\n  - `check-syntax`: determines aspects that may be enforced\n  - `valid-types`: in non-Closure mode, `@extends`, `@package` and access tags\n     (e.g., `@private`) with a bracketed type are reported as are missing\n     names with `@typedef`\n  - For type/namepath-checking rules, determine which tags will be checked for\n    types/namepaths (Closure allows types on some tags which the others do not,\n    so these tags will additionally be checked in \"closure\" mode)\n  - For type-checking rules, impacts parsing of types (through\n    [jsdoc-type-pratt-parser](https://github.com/simonseyock/jsdoc-type-pratt-parser)\n    dependency)\n  - Check preferred tag names\n  - Disallows namepath on `@interface` for \"closure\" mode in `valid-types` (and\n      avoids checking in other rules)\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-alias-preference\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-alias-preference\"></a>\n### Alias Preference\n\nUse `settings.jsdoc.tagNamePreference` to configure a preferred alias name for\na JSDoc tag. The format of the configuration is:\n`<primary tag name>: <preferred alias name>`, e.g.\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"param\": \"arg\",\n                \"returns\": \"return\"\n            }\n        }\n    }\n}\n```\n\nNote: ESLint does not allow settings to have keys which conflict with\n`Object.prototype` e.g. `'constructor'`. To work around this, you can use the\nkey `'tag constructor'`.\n\nOne may also use an object with a `message` and `replacement`.\n\nThe following will report the message\n`@extends is to be used over @augments as it is more evocative of classes than @augments`\nupon encountering `@augments`.\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"augments\": {\n                  \"message\": \"@extends is to be used over @augments as it is more evocative of classes than @augments\",\n                  \"replacement\": \"extends\"\n                }\n            }\n        }\n    }\n}\n```\n\nIf one wishes to reject a normally valid tag, e.g., `@todo`, one may set the\ntag to `false`:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"todo\": false\n            }\n        }\n    }\n}\n```\n\nA project wishing to ensure no blocks are left excluded from entering the\ndocumentation, might wish to prevent the `@ignore` tag in the above manner.\n\nOr one may set the targeted tag to an object with a custom `message`, but\nwithout a `replacement` property:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"todo\": {\n                  \"message\": \"We expect immediate perfection, so don't leave to-dos in your code.\"\n                }\n            }\n        }\n    }\n}\n```\n\nNote that the preferred tags indicated in the\n`settings.jsdoc.tagNamePreference` map will be assumed to be defined by\n`check-tag-names`.\n\nSee `check-tag-names` for how that fact can be used to set an alias to itself\nto allow both the alias and the default (since aliases are otherwise not\npermitted unless used in `tagNamePreference`).\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-alias-preference-default-preferred-aliases\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-alias-preference-default-preferred-aliases\"></a>\n#### Default Preferred Aliases\n\nThe defaults in `eslint-plugin-jsdoc` (for tags which offer\naliases) are as follows:\n\n- `@abstract` (over `@virtual`)\n- `@augments` (over `@extends`)\n- `@class` (over `@constructor`)\n- `@constant` (over `@const`)\n- `@default` (over `@defaultvalue`)\n- `@description` (over `@desc`)\n- `@external` (over `@host`)\n- `@file` (over `@fileoverview`, `@overview`)\n- `@fires` (over `@emits`)\n- `@function` (over `@func`, `@method`)\n- `@member` (over `@var`)\n- `@param` (over `@arg`, `@argument`)\n- `@property` (over `@prop`)\n- `@returns` (over `@return`)\n- `@throws` (over `@exception`)\n- `@yields` (over `@yield`)\n\nThis setting is utilized by the the rule for tag name checking\n(`check-tag-names`) as well as in the `@param` and `@require` rules:\n\n- `check-param-names`\n- `check-tag-names`\n- `require-hyphen-before-param-description`\n- `require-description`\n- `require-param`\n- `require-param-description`\n- `require-param-name`\n- `require-param-type`\n- `require-returns`\n- `require-returns-check`\n- `require-returns-description`\n- `require-returns-type`\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-override-augments-extends-implements-ignore-without-accompanying-param-description-example-returns-throws-yields\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-override-augments-extends-implements-ignore-without-accompanying-param-description-example-returns-throws-yields\"></a>\n### <code>@override</code>/<code>@augments</code>/<code>@extends</code>/<code>@implements</code>/<code>@ignore</code> Without Accompanying <code>@param</code>/<code>@description</code>/<code>@example</code>/<code>@returns</code>/<code>@throws</code>/<code>@yields</code>\n\nThe following settings allows the element(s) they reference to be omitted\non the JSDoc comment block of the function or that of its parent class\nfor any of the \"require\" rules (i.e., `require-param`, `require-description`,\n`require-example`, `require-returns`, `require-throws`, `require-yields`).\n\n* `settings.jsdoc.ignoreReplacesDocs` (`@ignore`) - Defaults to `true`\n* `settings.jsdoc.overrideReplacesDocs` (`@override`) - Defaults to `true`\n* `settings.jsdoc.augmentsExtendsReplacesDocs` (`@augments` or its alias\n    `@extends`) - Defaults to `false`.\n* `settings.jsdoc.implementsReplacesDocs` (`@implements`) - Defaults to `false`\n\nThe format of the configuration is as follows:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"ignoreReplacesDocs\": true,\n            \"overrideReplacesDocs\": true,\n            \"augmentsExtendsReplacesDocs\": true,\n            \"implementsReplacesDocs\": true\n        }\n    }\n}\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types\"></a>\n### Settings to Configure <code>check-types</code> and <code>no-undefined-types</code>\n\n- `settings.jsdoc.preferredTypes` An option map to indicate preferred\n  or forbidden types (if default types are indicated here, these will\n  have precedence over the default recommendations for `check-types`).\n  The keys of this map are the types to be replaced (or forbidden).\n  These keys may include:\n  1. The \"ANY\" type, `*`\n  1. The pseudo-type `[]` which we use to denote the parent (array)\n    types used in the syntax `string[]`, `number[]`, etc.\n  1. The pseudo-type `.<>` (or `.`) to represent the format `Array.<value>`\n    or `Object.<key, value>`\n  1. The pseudo-type `<>` to represent the format `Array<value>` or\n    `Object<key, value>`\n  1. A plain string type, e.g., `MyType`\n  1. A plain string type followed by one of the above pseudo-types (except\n    for `[]` which is always assumed to be an `Array`), e.g., `Array.`, or\n    `SpecialObject<>`.\n\n  If a bare pseudo-type is used, it will match all parent types of that form.\n  If a pseudo-type prefixed with a type name is used, it will only match\n  parent types of that form and type name.\n\n  The values can be:\n  - `false` to forbid the type\n  - a string to indicate the type that should be preferred in its place\n    (and which `fix` mode can replace); this can be one of the formats\n    of the keys described above.\n    - Note that the format will not be changed unless you use a pseudo-type\n      in the replacement. (For example, `'Array.<>': 'MyArray'` will change\n      `Array.<string>` to `MyArray.<string>`, preserving the dot. To get rid\n      of the dot, you must use the pseudo-type with `<>`, i.e.,\n      `'Array.<>': 'MyArray<>'`, which will change `Array.<string>` to\n      `MyArray<string>`).\n    - If you use a _bare_ pseudo-type in the replacement (e.g.,\n      `'MyArray.<>': '<>'`), the type will be converted to the format\n      of the pseudo-type without changing the type name. For example,\n      `MyArray.<string>` will become `MyArray<string>` but `Array.<string>`\n      will not be modified.\n  - an object with:\n    - the key `message` to provide a specific error message\n      when encountering the discouraged type.\n      - The message string will have the substrings with special meaning,\n        `{{tagName}}` and `{{tagValue}}`, replaced with their\n        corresponding value.\n    - an optional key `replacement` with either of the following values:\n      - a string type to be preferred in its place (and which `fix` mode\n        can replace)\n      - `false` (for forbidding the type)\n\nNote that the preferred types indicated as targets in\n`settings.jsdoc.preferredTypes` map will be assumed to be defined by\n`no-undefined-types`.\n\nSee the option of `check-types`, `unifyParentAndChildTypeChecks`, for\nhow the keys of `preferredTypes` may have `<>` or `.<>` (or just `.`)\nappended and its bearing on whether types are checked as parents/children\nonly (e.g., to match `Array` if the type is `Array` vs. `Array.<string>`).\n\nNote that if a value is present both as a key and as a value, neither the\nkey nor the value will be reported. Thus in `check-types`, this fact can\nbe used to allow both `object` and `Object` if one has a `preferredTypes`\nkey `object: 'Object'` and `Object: 'object'`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-settings-structuredtags\"></a>\n<a name=\"eslint-plugin-jsdoc-settings-structuredtags\"></a>\n### <code>structuredTags</code>\n\nAn object indicating tags whose types and names/namepaths (whether defining or\nreferencing namepaths) will be checked, subject to configuration. If the tags\nhave predefined behavior or `allowEmptyNamepaths` behavior, this option will\noverride that behavior for any specified tags, though this option can also be\nused for tags without predefined behavior. Its keys are tag names and its\nvalues are objects with the following optional properties:\n  - `name` - String set to one of the following:\n    - `\"text\"` - When a name is present, plain text will be allowed in the\n      name position (non-whitespace immediately after the tag and whitespace),\n      e.g., in `@throws This is an error`, \"This\" would normally be the name,\n      but \"text\" allows non-name text here also. This is the default.\n    - `\"namepath-defining\"` - As with `namepath-referencing`, but also\n      indicates the tag adds a namepath to definitions, e.g., to prevent\n      `no-undefined-types` from reporting references to that namepath.\n    - `\"namepath-referencing\"` - This will cause any name position to be\n      checked to ensure it is a valid namepath. You might use this to ensure\n      that tags which normally allow free text, e.g., `@see` will instead\n      require a namepath.\n    - `false` - This will disallow any text in the name position.\n  - `type`:\n      - `true` - Allows valid types within brackets. This is the default.\n      - `false` - Explicitly disallows any brackets or bracketed type. You\n        might use this with `@throws` to suggest that only free form text\n        is being input or with `@augments` (for jsdoc mode) to disallow\n        Closure-style bracketed usage along with a required namepath.\n      - (An array of strings) - A list of permissible types.\n  - `required` - Array of one of the following (defaults to an empty array,\n      meaning none are required):\n    - One or both of the following strings (if both are included, then both\n      are required):\n      - `\"name\"` - Indicates that a name position is required (not just that\n        if present, it is a valid namepath). You might use this with `see`\n        to insist that a value (or namepath, depending on the `name` value)\n        is always present.\n      - `\"type\"` - Indicates that the type position (within curly brackets)\n        is required (not just that if present, it is a valid type). You\n        might use this with `@throws` or `@typedef` which might otherwise\n        normally have their types optional. See the type groups 3-5 above.\n    - `\"typeOrName\"` - Must have either type (e.g., `@throws {aType}`) or\n        name (`@throws Some text`); does not require that both exist but\n        disallows just an empty tag.\n\n<a name=\"user-content-eslint-plugin-jsdoc-advanced\"></a>\n<a name=\"eslint-plugin-jsdoc-advanced\"></a>\n## Advanced\n\n<a name=\"user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors\"></a>\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors\"></a>\n### AST and Selectors\n\nFor various rules, one can add to the environments to which the rule applies\nby using the `contexts` option.\n\nThis option works with [ESLint's selectors](https://eslint.org/docs/developer-guide/selectors) which are [esquery](https://github.com/estools/esquery/#readme)\nexpressions one may use to target a specific node type or types, including\nsubsets of the type(s) such as nodes with certain children or attributes.\n\nThese expressions are used within ESLint plugins to find those parts of\nyour files' code which are of interest to check. However, in\n`eslint-plugin-jsdoc`, we also allow you to use these selectors to define\nadditional contexts where you wish our own rules to be applied.\n\n<a name=\"user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors-contexts-format\"></a>\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors-contexts-format\"></a>\n#### <code>contexts</code> format\n\nWhile at their simplest, these can be an array of string selectors, one can\nalso supply an object with `context` (in place of the string) and one of two\nproperties:\n\n1. For `require-jsdoc`, there are also `inlineCommentBlock` and\n    `minLineCount` properties. See that rule for details.\n1. For `no-missing-syntax` and `no-restricted-syntax`, there is also a\n    `message` property which allows customization of the message to be shown\n    when the rule is triggered.\n1. For `no-missing-syntax`, there is also a `minimum` property. See that rule.\n1. For other rules, there is a `comment` property which adds to the `context`\n    in requiring that the `comment` AST condition is also met, e.g., to\n    require that certain tags are present and/or or types and type operators\n    are in use. Note that this AST (either for `Jsdoc*` or `JsdocType*` AST)\n    has not been standardized and should be considered experimental.\n    Note that this property might also become obsolete if parsers begin to\n    include JSDoc-structured AST. A\n    [parser](https://github.com/brettz9/jsdoc-eslint-parser/) is available\n    which aims to support comment AST as\n    a first class citizen where comment/comment types can be used anywhere\n    within a normal AST selector but this should only be considered\n    experimental. When using such a parser, you need not use `comment` and\n    can just use a plain string context. The determination of the node on\n    which the comment is attached is based more on actual location than\n    semantics (e.g., it will be attached to a `VariableDeclaration` if above\n    that rather than to the `FunctionExpression` it is fundamentally\n    describing). See\n    [@es-joy/jsdoccomment](https://github.com/es-joy/jsdoccomment)\n    for the precise structure of the comment (and comment type) nodes.\n\n<a name=\"user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors-discovering-available-ast-definitions\"></a>\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors-discovering-available-ast-definitions\"></a>\n#### Discovering available AST definitions\n\nTo know all of the AST definitions one may target, it will depend on the\n[parser](https://eslint.org/docs/user-guide/configuring#specifying-parser)\nyou are using with ESLint (e.g., `espree` is the default parser for ESLint,\nand this follows [EStree AST](https://github.com/estree/estree) but\nto support the the latest experimental features of JavaScript, one may use\n`@babel/eslint-parser` or to be able to have one's rules (including JSDoc rules)\napply to TypeScript, one may use `@typescript-eslint/parser`, etc.\n\nSo you can look up a particular parser to see its rules, e.g., browse through\nthe [ESTree docs](https://github.com/estree/estree) as used by Espree or see\nESLint's [overview of the structure of AST](https://eslint.org/docs/developer-guide/working-with-custom-parsers#the-ast-specification).\n\nHowever, it can sometimes be even more helpful to get an idea of AST by just\nproviding some of your JavaScript to the wonderful\n[AST Explorer](https://astexplorer.net/) tool and see what AST is built out\nof your code. You can set the tool to the specific parser which you are using.\n\n<a name=\"user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors-uses-tips-for-ast\"></a>\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors-uses-tips-for-ast\"></a>\n#### Uses/Tips for AST\n\nAnd if you wish to introspect on the AST of code within your projects, you can\nuse [eslint-plugin-query](https://github.com/brettz9/eslint-plugin-query).\nThough it also works as a plugin, you can use it with its own CLI, e.g.,\nto search your files for matching esquery selectors, optionally showing\nit as AST JSON.\n\nTip: If you want to more deeply understand not just the resulting AST tree\nstructures for any given code but also the syntax for esquery selectors so\nthat you can, for example, find only those nodes with a child of a certain\ntype, you can set the \"Transform\" feature to ESLint and test out\nesquery selectors in place of the selector expression (e.g., replace\n`'VariableDeclaration > VariableDeclarator > Identifier[name=\"someVar\"]'` as\nwe have\n[here](https://astexplorer.net/#/gist/71a93130c19599d6f197bddb29c13a59/latest))\nto the selector you wish so as to get messages reported in the bottom right\npane which match your [esquery](https://github.com/estools/esquery/#readme)\nselector).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules\"></a>\n<a name=\"eslint-plugin-jsdoc-rules\"></a>\n## Rules\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-access\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-access\"></a>\n### <code>check-access</code>\n\nChecks that `@access` tags use one of the following values:\n\n- \"package\", \"private\", \"protected\", \"public\"\n\nAlso reports:\n\n- Mixing of `@access` with `@public`, `@private`, `@protected`, or `@package`\n  on the same doc block.\n- Use of multiple instances of `@access` (or the `@public`, etc. style tags)\n  on the same doc block.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`@access`|\n|Recommended|false|\n|Settings||\n|Options||\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @access foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @access foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @accessLevel foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"access\":\"accessLevel\"}}}\n// Message: Missing valid JSDoc @accessLevel level.\n\n/**\n * @access\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"access\":false}}}\n// Message: Unexpected tag `@access`\n\nclass MyClass {\n  /**\n   * @access\n   */\n  myClassField = 1\n}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @access public\n * @public\n */\nfunction quux (foo) {\n\n}\n// Message: The @access tag may not be used with specific access-control tags (@package, @private, @protected, or @public).\n\n/**\n * @access public\n * @access private\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @access public\n * @access private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @private\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @public\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @access public\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @accessLevel package\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"access\":\"accessLevel\"}}}\n\nclass MyClass {\n  /**\n   * @access private\n   */\n  myClassField = 1\n}\n\n/**\n * @public\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-alignment\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-alignment\"></a>\n### <code>check-alignment</code>\n\nReports invalid alignment of JSDoc block asterisks.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n\t// with tabs\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n* @param {Number} foo\n*/\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n * @param {Number} foo\n  */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n /**\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n /**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n  */\n function quux (foo) {\n\n }\n// Message: Expected JSDoc block to be aligned.\n\n/**\n   * A jsdoc not attached to any node.\n */\n// Message: Expected JSDoc block to be aligned.\n\nclass Foo {\n  /**\n   *  Some method\n    * @param a\n   */\n  quux(a) {}\n}\n// Message: Expected JSDoc block to be aligned.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Desc\n *\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * Desc\n *\n * @param {{\n  foo: Bar,\n  bar: Baz\n * }} foo\n *\n */\nfunction quux (foo) {\n\n}\n\n/*  <- JSDoc must start with 2 stars.\n  *    So this is unchecked.\n */\nfunction quux (foo) {}\n\n/**\n  * @param {Number} foo\n  * @private\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n\n/**\n  * @param {Number} foo\n  * @access private\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples\"></a>\n### <code>check-examples</code>\n\n> **NOTE**: This rule currently does not work in ESLint 8 (we are waiting for\n> [issue 14745](https://github.com/eslint/eslint/issues/14745)).\n\nEnsures that (JavaScript) examples within JSDoc adhere to ESLint rules. Also\nhas options to lint the default values of optional `@param`/`@arg`/`@argument`\nand `@property`/`@prop` tags or the values of `@default`/`@defaultvalue` tags.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1\"></a>\n#### Options\n\nThe options below all default to no-op/`false` except as noted.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-1-captionrequired\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-captionrequired\"></a>\n##### <code>captionRequired</code>\n\nJSDoc specs use of an optional `<caption>` element at the beginning of\n`@example`.\n\nThe option `captionRequired` insists on a `<caption>` being present at\nthe beginning of any `@example`.\n\nUsed only for `@example`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-1-examplecoderegex-and-rejectexamplecoderegex\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-examplecoderegex-and-rejectexamplecoderegex\"></a>\n##### <code>exampleCodeRegex</code> and <code>rejectExampleCodeRegex</code>\n\nJSDoc does not specify a formal means for delimiting code blocks within\n`@example` (it uses generic syntax highlighting techniques for its own\nsyntax highlighting). The following options determine whether a given\n`@example` tag will have the `check-examples` checks applied to it:\n\n* `exampleCodeRegex` - Regex which whitelists lintable\n  examples. If a parenthetical group is used, the first one will be used,\n  so you may wish to use `(?:...)` groups where you do not wish the\n  first such group treated as one to include. If no parenthetical group\n  exists or matches, the whole matching expression will be used.\n  An example might be ````\"^```(?:js|javascript)([\\\\s\\\\S]*)```\\s*$\"````\n  to only match explicitly fenced JavaScript blocks. Defaults to only\n  using the `u` flag, so to add your own flags, encapsulate your\n  expression as a string, but like a literal, e.g., ````/```js.*```/gi````.\n  Note that specifying a global regular expression (i.e., with `g`) will\n  allow independent linting of matched blocks within a single `@example`.\n* `rejectExampleCodeRegex` - Regex blacklist which rejects\n  non-lintable examples (has priority over `exampleCodeRegex`). An example\n  might be ```\"^`\"``` to avoid linting fenced blocks which may indicate\n  a non-JavaScript language. See `exampleCodeRegex` on how to add flags\n  if the default `u` is not sufficient.\n\nIf neither is in use, all examples will be matched. Note also that even if\n`captionRequired` is not set, any initial `<caption>` will be stripped out\nbefore doing the regex matching.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-1-paddedindent\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-paddedindent\"></a>\n##### <code>paddedIndent</code>\n\nThis integer property allows one to add a fixed amount of whitespace at the\nbeginning of the second or later lines of the example to be stripped so as\nto avoid linting issues with the decorative whitespace. For example, if set\nto a value of `4`, the initial whitespace below will not trigger `indent`\nrule errors as the extra 4 spaces on each subsequent line will be stripped\nout before evaluation.\n\n```js\n/**\n * @example\n *     anArray.filter((a) => {\n *       return a.b;\n *     });\n */\n```\n\nOnly applied to `@example` linting.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-1-reportunuseddisabledirectives\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-reportunuseddisabledirectives\"></a>\n##### <code>reportUnusedDisableDirectives</code>\n\nIf not set to `false`, `reportUnusedDisableDirectives` will report disabled\ndirectives which are not used (and thus not needed). Defaults to `true`.\nCorresponds to ESLint's [`--report-unused-disable-directives`](https://eslint.org/docs/user-guide/command-line-interface#--report-unused-disable-directives).\n\nInline ESLint config within `@example` JavaScript is allowed (or within\n`@default`, etc.), though the disabling of ESLint directives which are not\nneeded by the resolved rules will be reported as with the ESLint\n`--report-unused-disable-directives` command.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig\"></a>\n#### Options for Determining ESLint Rule Applicability (<code>allowInlineConfig</code>, <code>noDefaultExampleRules</code>, <code>matchingFileName</code>, <code>configFile</code>, <code>checkEslintrc</code>, and <code>baseConfig</code>)\n\nThe following options determine which individual ESLint rules will be\napplied to the JavaScript found within the `@example` tags (as determined\nto be applicable by the above regex options) or for the other tags checked by\n`checkDefaults`, `checkParams`, or `checkProperties` options. They are ordered\nby decreasing precedence:\n\n* `allowInlineConfig` - If not set to `false`, will allow\n  inline config within the `@example` to override other config. Defaults\n  to `true`.\n* `noDefaultExampleRules` - Setting to `true` will disable the\n  default rules which are expected to be troublesome for most documentation\n  use. See the section below for the specific default rules.\n* `configFile` - A config file. Corresponds to ESLint's [`-c`](https://eslint.org/docs/user-guide/command-line-interface#-c---config).\n* `matchingFileName` - Option for a file name (even non-existent) to trigger\n  specific rules defined in one's config; usable with ESLint `.eslintrc.*`\n  `overrides` -> `files` globs, to apply a desired subset of rules with\n  `@example` (besides allowing for rules specific to examples, this option\n  can be useful for enabling reuse of the same rules within `@example` as\n  with JavaScript Markdown lintable by\n  [other plugins](https://github.com/eslint/eslint-plugin-markdown), e.g.,\n  if one sets `matchingFileName` to `dummy.md/*.js` so that `@example`\n  rules will follow rules for fenced JavaScript blocks within one's Markdown\n  rules). (In ESLint 6's processor API and `eslint-plugin-markdown` < 2, one\n  would instead use `dummy.md`.) For `@example` only.\n* `matchingFileNameDefaults` - As with `matchingFileName` but for use with\n  `checkDefaults` and defaulting to `.jsdoc-defaults` as extension.\n* `matchingFileNameParams` - As with `matchingFileName` but for use with\n  `checkParams` and defaulting to `.jsdoc-params` as extension.\n* `matchingFileNameProperties` As with `matchingFileName` but for use with\n  `checkProperties` and defaulting to `.jsdoc-properties` as extension.\n* `checkEslintrc` - Defaults to `true` in adding rules\n  based on an `.eslintrc.*` file. Setting to `false` corresponds to\n  ESLint's [`--no-eslintrc`](https://eslint.org/docs/user-guide/command-line-interface#--no-eslintrc).\n  If `matchingFileName` is set, this will automatically be `true` and\n  will use the config corresponding to that file. If `matchingFileName` is\n  not set and this value is set to `false`, the `.eslintrc.*` configs will\n  not be checked. If `matchingFileName` is not set, and this is unset or\n  set to `true`, the `.eslintrc.*` configs will be checked as though the file\n  name were the same as the file containing the example, with any file\n  extension changed to `\".md/*.js\"` (and if there is no file extension,\n  `\"dummy.md/*.js\"` will be the result). This allows convenient sharing of\n  similar rules with often also context-free Markdown as well as use of\n  `overrides` as described under `matchingFileName`. Note that this option\n  (whether set by `matchingFileName` or set manually to `true`) may come at\n  somewhat of a performance penalty as the file's existence is checked by\n  eslint.\n* `baseConfig` - Set to an object of rules with the same schema\n  as `.eslintrc.*` for defaults.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig-rules-disabled-by-default-unless-nodefaultexamplerules-is-set-to-true\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig-rules-disabled-by-default-unless-nodefaultexamplerules-is-set-to-true\"></a>\n##### Rules Disabled by Default Unless <code>noDefaultExampleRules</code> is Set to <code>true</code>\n\n* `eol-last` - Insisting that a newline \"always\" be at the end is less likely\n  to be desired in sample code as with the code file convention.\n* `no-console` - This rule is unlikely to have inadvertent temporary debugging\n  within examples.\n* `no-multiple-empty-lines` - This rule may be problematic for projects which\n  use an initial newline just to start an example. Also, projects may wish to\n  use extra lines within examples just for easier illustration\n  purposes.\n* `no-undef` - Many variables in examples will be `undefined`.\n* `no-unused-vars` - It is common to define variables for clarity without\n  always using them within examples.\n* `padded-blocks` - It can generally look nicer to pad a little even if one's\n  code follows more stringency as far as block padding.\n* `jsdoc/require-file-overview` - Shouldn't check example for jsdoc blocks.\n* `jsdoc/require-jsdoc` - Wouldn't expect jsdoc blocks within jsdoc blocks.\n* `import/no-unresolved` - One wouldn't generally expect example paths to\n  resolve relative to the current JavaScript file as one would with real code.\n* `import/unambiguous` - Snippets in examples are likely too short to always\n  include full import/export info.\n* `node/no-missing-import` - See `import/no-unresolved`.\n* `node/no-missing-require` -  See `import/no-unresolved`.\n\nFor `checkDefaults`, `checkParams`, and `checkProperties`, the following\nexpression-oriented rules will be used by default as well:\n\n* `quotes` - Will insist on \"double\".\n* `semi` - Will insist on \"never\".\n* `strict` - Disabled.\n* `no-empty-function` - Disabled.\n* `no-new` - Disabled.\n* `no-unused-expressions` - Disabled.\n* `chai-friendly/no-unused-expressions` - Disabled.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig-options-for-checking-other-than-example-checkdefaults-checkparams-or-checkproperties\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig-options-for-checking-other-than-example-checkdefaults-checkparams-or-checkproperties\"></a>\n##### Options for checking other than <code>@example</code> (<code>checkDefaults</code>, <code>checkParams</code>, or <code>checkProperties</code>)\n\n* `checkDefaults` - Whether to check the values of `@default`/`@defaultvalue` tags\n* `checkParams` - Whether to check `@param`/`@arg`/`@argument` default values\n* `checkProperties` - Whether to check `@property`/`@prop` default values\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`example`|\n|Recommended|false|\n|Options| *See above* |\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @example alert('hello')\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-alert\":2,\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n// Message: @example error (no-alert): Unexpected alert.\n\n/**\n * @example alert('hello')\n */\nclass quux {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-alert\":2,\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n// Message: @example error (no-alert): Unexpected alert.\n\n/**\n * @example ```js\n alert('hello');\n ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n *\n * ```js alert('hello'); ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js ([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n * ```js alert('hello'); ```\n */\nvar quux = {\n\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js ([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example ```\n * js alert('hello'); ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```\\njs ([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example <b>Not JavaScript</b>\n */\nfunction quux () {\n\n}\n/**\n * @example quux2();\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"rejectExampleCodeRegex\":\"^\\\\s*<.*>\\\\s*$\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-undef\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":true}]\n// Message: @example error (no-undef): 'quux' is not defined.\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example\n * quux('random unwanted arg'); // results in an error\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"captionRequired\":true,\"checkEslintrc\":false}]\n// Message: Caption is expected for examples.\n\n/**\n * @example  quux();\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n// Message: @example error (indent): Expected indentation of 0 spaces but found 1.\n\n/**\n * @example test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false,\"noDefaultExampleRules\":true,\"reportUnusedDisableDirectives\":true}]\n// Message: @example error: Unused eslint-disable directive (no problems were reported from 'semi').\n\n/**\n * @example\n test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"allowInlineConfig\":false,\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":true}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const j = 5;\n * quux2();\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"matchingFileName\":\"../../jsdocUtils.js\"}]\n// Message: @example warning (id-length): Identifier name 'j' is too short (< 2).\n\n/**\n * @example const k = 5;\n * quux2();\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"configFile\":\".eslintrc.json\",\"matchingFileName\":\"../../jsdocUtils.js\"}]\n// Message: @example warning (id-length): Identifier name 'k' is too short (< 2).\n\n/**\n * @example const m = 5;\n * quux2();\n */\nfunction quux2 () {\n\n}\n// Message: @example warning (id-length): Identifier name 'm' is too short (< 2).\n\n/**\n * @example const i = 5;\n *   quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"paddedIndent\":2}]\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example\n * const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example const idx = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"matchingFileName\":\"dummy.js\"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const idx = 5;\n *\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"matchingFileName\":\"dummy.js\"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const idx = 5;\n *\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false,\"matchingFileName\":\"dummy.js\"}]\n// Message: @example error: Parsing error: The keyword 'const' is reserved\n\n/**\n * @example // begin\n alert('hello')\n // end\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"warn\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"// begin[\\\\s\\\\S]*// end\",\"noDefaultExampleRules\":true}]\n// Message: @example warning (semi): Missing semicolon.\n\n/**\n * @typedef {string} Foo\n * @example <caption></caption>\n * 'foo'\n */\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"captionRequired\":true,\"checkEslintrc\":false}]\n// Message: Caption is expected for examples.\n\n/**\n * @example\n * const list: number[] = [1, 2, 3]\n * quux(list);\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parser\":\"@typescript-eslint/parser\",\"parserOptions\":{\"ecmaVersion\":6},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example\n * const test = something.find((_) => {\n *   return _\n * });\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":6},\"rules\":{\"semi\":[\"error\",\"always\"]}}}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example <caption>Say `Hello!` to the user.</caption>\n * First, import the function:\n *\n * ```js\n * import popup from './popup'\n * const aConstInSameScope = 5;\n * ```\n *\n * Then use it like this:\n *\n * ```js\n * const aConstInSameScope = 7;\n * popup('Hello!')\n * ```\n *\n * Here is the result on macOS:\n *\n * ![Screenshot](path/to/screenshot.jpg)\n */\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":2015,\"sourceType\":\"module\"},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"/^```(?:js|javascript)\\\\n([\\\\s\\\\S]*?)```$/gm\"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example // begin\n alert('hello')\n // end\n * And here is another example:\n // begin\n alert('there')\n // end\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"warn\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"/\\\\/\\\\/ begin[\\\\s\\\\S]*?// end/g\",\"noDefaultExampleRules\":true}]\n// Message: @example warning (semi): Missing semicolon.\n\n/**\n * @example\n *   quux();\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n// Message: @example error (indent): Expected indentation of 0 spaces but found 2.\n\n/**\n * @default 'abc'\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":true}]\n// Message: @default error (quotes): Strings must use doublequote.\n\n/**\n * @param {myType} [name='abc']\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":true}]\n// Message: @param error (quotes): Strings must use doublequote.\n\n/**\n * @property {myType} [name='abc']\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":true}]\n// Message: @property error (quotes): Strings must use doublequote.\n\n/**\n * Test function.\n *\n * @example <caption>functionName (paramOne: string, paramTwo?: any,\n * paramThree?: any): boolean</caption> test()\n *\n * @param {string} paramOne Parameter description.\n * @param {any} [paramTwo] Parameter description.\n * @param {any} [paramThree] Parameter description.\n * @returns {boolean} Return description.\n */\nconst functionName = function (paramOne, paramTwo,\n  paramThree) {\n  return false;\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":2015,\"sourceType\":\"module\"},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"captionRequired\":true,\"checkEslintrc\":false}]\n// Message: @example error (semi): Missing semicolon.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @example ```js\n alert('hello');\n ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js([\\\\s\\\\S]*)```\"}]\n\n/**\n * @example ```js\n alert('hello');\n ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"/```js([\\\\s\\\\S]*)```/\"}]\n\n/**\n * @example\n * // arbitrary example content\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false}]\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-undef\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @example quux();\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example <caption>Invalid usage</caption>\n * quux('random unwanted arg'); // results in an error\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"captionRequired\":true,\"checkEslintrc\":false}]\n\n/**\n * @example test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false,\"noDefaultExampleRules\":true,\"reportUnusedDisableDirectives\":false}]\n\n/**\n * @example\n test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"allowInlineConfig\":true,\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":true}]\n\n/**\n * @example ```js\n alert('hello')\n ```\n */\nvar quux = {\n\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js([\\\\s\\\\S]*)```\"}]\n\n/**\n * @example\n * foo(function (err) {\n *     throw err;\n * });\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @example\n * const list: number[] = [1, 2, 3];\n * quux(list);\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parser\":\"@typescript-eslint/parser\",\"parserOptions\":{\"ecmaVersion\":6},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n\n/**\n * @example const ident = 5;\n *   quux2();\n *   bar();\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"paddedIndent\":2}]\n\n/**\n * @example\n * function quux() {\n *     bar();\n * }\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n// Comment\na();\n\nexport default {};\n\n/**\n *\n */\nfunction f () {\n\n}\n\n/**\n * Does quux\n * @example\n * // Do it!\n * quux();\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"plugins\":[\"jsdoc\"],\"rules\":{\"jsdoc/require-file-overview\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @default \"abc\"\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":true}]\n\n/**\n * @default\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":true}]\n\n/**\n * @param {myType} [name=\"abc\"]\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":true}]\n\n/**\n * @param {myType} name\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":true}]\n\n/**\n * @property {myType} [name=\"abc\"]\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":true}]\n\n/**\n * @property {myType} [name]\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":true}]\n\n/**\n * @default 'abc'\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":false,\"matchingFileNameDefaults\":\"dummy.js\"}]\n\n/**\n * @param {myType} [name='abc']\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":false,\"matchingFileNameParams\":\"dummy.js\"}]\n\n/**\n * @property {myType} [name='abc']\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":false,\"matchingFileNameProperties\":\"dummy.js\"}]\n\n/**\n * Test function.\n *\n * @example <caption>functionName (paramOne: string, paramTwo?: any,\n * paramThree?: any): boolean</caption> test();\n *\n * @param {string} paramOne Parameter description.\n * @param {any} [paramTwo] Parameter description.\n * @param {any} [paramThree] Parameter description.\n * @returns {boolean} Return description.\n */\nconst functionName = function (paramOne, paramTwo,\n  paramThree) {\n  return false;\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":2015,\"sourceType\":\"module\"},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"captionRequired\":true,\"checkEslintrc\":false}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-indentation\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-indentation\"></a>\n### <code>check-indentation</code>\n\nReports invalid padding inside JSDoc blocks.\n\nIgnores parts enclosed in Markdown \"code block\"'s. For example,\nthe following description is not reported:\n\n```js\n/**\n * Some description:\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n */\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-indentation-options-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-indentation-options-2\"></a>\n#### Options\n\nThis rule has an object option.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-indentation-options-2-excludetags\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-indentation-options-2-excludetags\"></a>\n##### <code>excludeTags</code>\n\nArray of tags (e.g., `['example', 'description']`) whose content will be\n\"hidden\" from the `check-indentation` rule. Defaults to `['example']`.\n\nBy default, the whole JSDoc block will be checked for invalid padding.\nThat would include `@example` blocks too, which can get in the way\nof adding full, readable examples of code without ending up with multiple\nlinting issues.\n\nWhen disabled (by passing `excludeTags: []` option), the following code *will*\nreport a padding issue:\n\n```js\n/**\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Recommended|false|\n|Options| `excludeTags` |\n\nThe following patterns are considered problems:\n\n````js\n/**  foo */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @param bar\n *  baz\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * Foo\n *   bar\n */\nclass Moo {}\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @example\n *   aaaa\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n * ```   aaaa```\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n* @example <caption>\n* Here is a long\n*   indented summary of this\n* example\n* </caption>\n* ```js\n* function hi () {\n*   alert('Hello');\n* }\n* ```\n*/\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n// Message: There must be no indentation.\n\n/**\n* @example <caption>\n* Here is a long\n* summary of this\n* example\n* </caption>\n* // Code is not wrapped into fenced code block\n* function hi () {\n*   alert('Hello');\n* }\n*/\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n// Message: There must be no indentation.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * foo\n *\n * @param bar\n * baz\n */\nfunction quux () {\n\n}\n\n/*** foo */\nfunction quux () {\n\n}\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\nfunction quux () {\n\n}\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[\"example\",\"returns\"]}]\n\n/**\n * foo\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n * @returns eeee\n */\nfunction quux () {\n\n}\n\n/**\n * foo\n * ```   aaaa```\n * @returns eeee\n */\nfunction quux () {\n\n}\n\n/**\n* @example <caption>\n* Here is a long\n* summary of this\n* example\n* </caption>\n* ```js\n* function hi () {\n*   alert('Hello');\n* }\n* ```\n*/\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n\n/**\n * @example\n * ```\n * @MyDecorator({\n *   myOptions: 42\n * })\n * export class MyClass {}\n * ```\n */\nfunction MyDecorator(options: { myOptions: number }) {\n  return (Base: Function) => {};\n}\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[\"example\",\"MyDecorator\"]}]\n\n/**\n * @example ```\n * @MyDecorator({\n *   myOptions: 42\n * })\n * export class MyClass {}\n * ```\n */\nfunction MyDecorator(options: { myOptions: number }) {\n  return (Base: Function) => {};\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-line-alignment\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment\"></a>\n### <code>check-line-alignment</code>\n\nReports invalid alignment of JSDoc block lines. This is a\n[standard recommended to WordPress code](https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/#aligning-comments),\nfor example.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-line-alignment-options-3\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment-options-3\"></a>\n#### Options\n\nThis rule allows one optional string argument. If it is `\"always\"` then a\nproblem is raised when the lines are not aligned. If it is `\"never\"` then\na problem should be raised when there is more than one space between each\nline's parts. Defaults to `\"never\"`.\n\nNote that in addition to alignment, both options will ensure at least one\nspace is present after the asterisk delimiter.\n\nAfter the string, an options object is allowed with the following properties.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-line-alignment-options-3-tags\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment-options-3-tags\"></a>\n##### <code>tags</code>\n\nUse this to change the tags which are sought for alignment changes. *Currently*\n*only works with the \"never\" option.* Defaults to an array of\n`['param', 'arg', 'argument', 'property', 'prop', 'returns', 'return']`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-line-alignment-options-3-customspacings\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment-options-3-customspacings\"></a>\n##### <code>customSpacings</code>\n\nAn object with any of the following keys set to an integer. Affects spacing:\n\n- `postDelimiter` - after the asterisk (e.g., `*   @param`)\n- `postTag` - after the tag (e.g., `* @param  `)\n- `postType` - after the type (e.g., `* @param {someType}   `)\n- `postName` - after the name (e.g., `* @param {someType} name   `)\n\nIf a spacing is not defined, it defaults to one.\n\n|||\n|---|---|\n|Context|everywhere|\n|Options|(a string matching `\"always\" or \"never\"` and optional object with `tags` and `customSpacings`)|\n|Tags|`param`, `property`, `returns` and others added by `tags`|\n|Aliases|`arg`, `argument`, `prop`, `return`|\n|Recommended|false|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * With tabs.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\n    const fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem - Description.\n * @param {int} sit - Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param  {string} lorem Description.\n *  @param {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param  {string} lorem Description.\n  * @param {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param  {string} lorem Description.\n * @param  {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\nfunction fn( lorem, sit ) {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\nconst object = {\n  /**\n   * Function description.\n   *\n   * @param {string} lorem Description.\n   * @param {int} sit Description multi words.\n   */\n  fn( lorem, sit ) {}\n}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\nclass ClassName {\n  /**\n   * Function description.\n   *\n   * @param {string} lorem Description.\n   * @param {int} sit Description multi words.\n   */\n  fn( lorem, sit ) {}\n}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @arg {string} lorem Description.\n * @arg {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * @namespace\n * @property {object} defaults Description.\n * @property {int} defaults.lorem Description multi words.\n */\nconst config = {\n    defaults: {\n        lorem: 1\n    }\n}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * My object.\n *\n * @typedef {Object} MyObject\n *\n * @property {string} lorem Description.\n * @property {int} sit Description multi words.\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * My object.\n *\n * @typedef {Object} MyObject\n *\n * @property {{a: number, b: string, c}} lorem Description.\n * @property {Object.<string, Class>} sit Description multi words.\n * @property {Object.<string, Class>} amet Description} weird {multi} {{words}}.\n * @property {Object.<string, Class>} dolor\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * My object.\n *\n * @typedef {Object} MyObject\n *\n * @property {{a: number, b: string, c}} lorem Description.\n * @property {Object.<string, Class>} sit Description multi words.\n * @property {Object.<string, Class>} amet Description} weird {multi} {{words}}.\n * @property {Object.<string, Class>} dolor\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"tags\":[\"typedef\",\"property\"]}]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * My function.\n *\n * @param {string} lorem  Description.\n * @param {int}    sit    Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * My function.\n *\n * @param {string} lorem Description.\n * @param   {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * My function.\n *\n * @param {string} lorem Description.\n * @param   {int}    sit\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * My function.\n *\n * @param {string} lorem Description.\n * @param   {int}    sit\n */\nconst fn = ( lorem, sit ) => {}\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi\n   line without *.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * My function.\n *\n * @param {string} lorem Description.\n * @param   {int}    sit\n *\n * @return  {string}  Return description\n *    with multi line, but don't touch.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"tags\":[\"param\"]}]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Only return doc.\n *\n * @return {boolean}  Return description.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param  {object}  options  Options object for each OS.\n * @return {boolean}          True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param {object} options Options object for each OS.\n * @return {boolean}          True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param {object} options Options object for each OS.\n * @return  True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param  options Options object for each OS.\n * @return True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param {object} options Options object for each OS.\n * @param {object} other Other.\n * @return  True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\",{\"tags\":[\"param\",\"return\"]}]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Returns the value stored in the process.env for a given\n * environment variable.\n *\n * @param  {string} withPercents    '%USERNAME%'\n * @param  {string} withoutPercents 'USERNAME'\n * @return {string}                 'bob' || '%USERNAME%'\n */\nfunction quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Function description\n *           description with post delimiter.\n *\n * @param {string} lorem Description.\n * @param {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param  {string} lorem Description.\n * @param  {int}    sit   Description multi words.\n *\n * @return {string}       Return description.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"customSpacings\":{\"postDelimiter\":2,\"postTag\":3,\"postType\":2}}]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param  {string} lorem Description.\n * @param  {int}    sit   Description multi words.\n *\n * @return {string}       Return description.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"customSpacings\":{\"postName\":3}}]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n *  @param   {string}  lorem Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\",{\"customSpacings\":{\"postDelimiter\":2,\"postTag\":3,\"postType\":2}}]\n// Message: Expected JSDoc block lines to not be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem   Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\",{\"customSpacings\":{\"postName\":3}}]\n// Message: Expected JSDoc block lines to not be aligned.\n\n\n       /**\n        * Function description.\n        *\n        * @param {string} lorem Description.\n        * @param {int} sit Description multi words.\n        * @param {string} sth   Multi\n        *                       line description.\n        */\n       const fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * With tabs.\n *\n * @param {string} lorem Description.\n * @param {int}    sit   Description multi words.\n */\n    const fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Function description.\n *\n * @param {string} lorem - Description.\n * @param {int}    sit   - Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * @param {string} lorem Description.\n * @param {int}    sit\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * @param {int}    sit\n * @param {string} lorem Description.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * No params.\n */\nconst fn = () => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int}    sit   Description multi words.\n */\nfunction fn( lorem, sit ) {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\nconst object = {\n  /**\n   * Function description.\n   *\n   * @param {string} lorem Description.\n   * @param {int}    sit   Description multi words.\n   */\n  fn( lorem, sit ) {},\n}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\nclass ClassName {\n  /**\n   * Function description.\n   *\n   * @param {string} lorem Description.\n   * @param {int}    sit   Description multi words.\n   */\n  fn( lorem, sit ) {}\n}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Function description.\n *\n * @arg {string} lorem Description.\n * @arg {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * @namespace\n * @property {object} defaults       Description.\n * @property {int}    defaults.lorem Description multi words.\n */\nconst config = {\n    defaults: {\n        lorem: 1\n    }\n}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * My object.\n *\n * @typedef {Object} MyObject\n *\n * @property {string} lorem Description.\n * @property {int}    sit   Description multi words.\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * My object.\n *\n * @typedef {Object} MyObject\n *\n * @property {{a: number, b: string, c}} lorem Description.\n * @property {Object.<string, Class>}    sit   Description multi words.\n * @property {Object.<string, Class>}    amet  Description} weird {multi} {{words}}.\n * @property {Object.<string, Class>}    dolor\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * My object.\n *\n * @typedef  {Object}                    MyObject\n *\n * @property {{a: number, b: string, c}} lorem    Description.\n * @property {Object.<string, Class>}    sit      Description multi words.\n * @property {Object.<string, Class>}    amet     Description} weird {multi} {{words}}.\n * @property {Object.<string, Class>}    dolor\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"tags\":[\"typedef\",\"property\"]}]\n\n/**\n * My object.\n *\n * @template                             T\n * @template                             W,X,Y,Z\n * @template {string}                    K               - K must be a string or string literal\n * @template {{ serious(): string }}     Seriousalizable - must have a serious method\n *\n * @param    {{a: number, b: string, c}} lorem           Description.\n */\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"tags\":[\"template\",\"param\"]}]\n\n/** @param {number} lorem */\nconst fn = ( lorem ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param  {object}  options Options object for each OS.\n * @return {boolean}         True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param  {object}  options Options object for each OS.\n * @return {boolean}\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Only return doc.\n *\n * @return {boolean} Return description.\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Not validating without option.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param {object} options Options object for each OS.\n * @return {boolean} True = success, false = failed to create the icon\n */\nfunction quux (options) {}\n\n/**\n * Creates OS based shortcuts for files, folders, and applications.\n *\n * @param {object} options Options object for each OS.\n * @param {object} other Other.\n * @return  True = success, false = failed to create the icon\n */\n function quux () {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\",{\"tags\":[\"param\"]}]\n\n/**\n * @param parameter Description.\n */\nfunction func(parameter){\n\n}\n\n/**\n * Function description\n *           description with post delimiter.\n *\n * @param {string} lorem Description.\n * @param {int}    sit   Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"preserveMainDescriptionPostDelimiter\":true}]\n\n/**\n * Function description.\n *\n *  @param    {string}  lorem Description.\n *  @param    {int}     sit   Description multi words.\n *\n *  @return   {string}        Return description.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\",{\"customSpacings\":{\"postDelimiter\":2,\"postTag\":3,\"postType\":2}}]\n\n/**\n * Function description.\n *\n *  @param   {string}  lorem Description.\n *  @param   {int}  sit Description multi words.\n *\n *  @return   {string}  Return description.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"never\",{\"customSpacings\":{\"postDelimiter\":2,\"postTag\":3,\"postType\":2}}]\n\n/**\n * @param {{\n *        ids: number[]\n *        }}            params\n */\nconst fn = ({ids}) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n\n\n       /**\n        * Function description.\n        *\n        * @param {string} lorem Description.\n        * @param {int}    sit   Description multi words.\n        * @param {string} sth   Multi\n        *                       line description.\n        */\n       const fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names\"></a>\n### <code>check-param-names</code>\n\nEnsures that parameter names in JSDoc match those in the function declaration.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-destructuring\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-destructuring\"></a>\n#### Destructuring\n\nNote that by default the rule will not report parameters present on the docs\nbut non-existing on the function signature when an object rest property is part\nof that function signature since the seemingly non-existing properties might\nactually be a part of the object rest property.\n\n```js\n/**\n * @param options\n * @param options.foo\n */\nfunction quux ({foo, ...extra}) {}\n```\n\nTo require that `extra` be documented--and that any extraneous properties\nget reported--e.g., if there had been a `@param options.bar` above--you\ncan use the `checkRestProperty` option which insists that the rest\nproperty be documented (and that there be no other implicit properties).\nNote, however, that jsdoc [does not appear](https://github.com/jsdoc/jsdoc/issues/1773)\nto currently support syntax or output to distinguish rest properties from\nother properties, so in looking at the docs alone without looking at the\nfunction signature, the disadvantage of enabling this option is that it\nmay appear that there is an actual property named `extra`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-checkrestproperty\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-checkrestproperty\"></a>\n##### <code>checkRestProperty</code>\n\nSee the \"Destructuring\" section. Defaults to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-checktypespattern\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-checktypespattern\"></a>\n##### <code>checkTypesPattern</code>\n\nSee `require-param` under the option of the same name.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-enablefixer\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-enablefixer\"></a>\n##### <code>enableFixer</code>\n\nSet to `true` to auto-remove `@param` duplicates (based on identical\nnames).\n\nNote that this option will remove duplicates of the same name even if\nthe definitions do not match in other ways (e.g., the second param will\nbe removed even if it has a different type or description).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-allowextratrailingparamdocs\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-allowextratrailingparamdocs\"></a>\n##### <code>allowExtraTrailingParamDocs</code>\n\nIf set to `true`, this option will allow extra `@param` definitions (e.g.,\nrepresenting future expected or virtual params) to be present without needing\ntheir presence within the function signature. Other inconsistencies between\n`@param`'s and present function parameters will still be reported.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-checkdestructured\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-checkdestructured\"></a>\n##### <code>checkDestructured</code>\n\nWhether to check destructured properties. Defaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-usedefaultobjectproperties\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-usedefaultobjectproperties\"></a>\n##### <code>useDefaultObjectProperties</code>\n\nSet to `true` if you wish to avoid reporting of child property documentation\nwhere instead of destructuring, a whole plain object is supplied as default\nvalue but you wish its keys to be considered as signalling that the properties\nare present and can therefore be documented. Defaults to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-param-names-options-4-disableextrapropertyreporting\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-options-4-disableextrapropertyreporting\"></a>\n##### <code>disableExtraPropertyReporting</code>\n\nWhether to check for extra destructured properties. Defaults to `false`. Change\nto `true` if you want to be able to document properties which are not actually\ndestructured. Keep as `false` if you expect properties to be documented in\ntheir own types. Note that extra properties will always be reported if another\nitem at the same level is destructured as destructuring will prevent other\naccess and this option is only intended to permit documenting extra properties\nthat are available and actually used in the function.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Options|`allowExtraTrailingParamDocs`, `checkDestructured`, `checkRestProperty`, `checkTypesPattern`, `useDefaultObjectProperties`, `disableExtraPropertyReporting`|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n|Recommended|true|\nThe following patterns are considered problems:\n\n````js\n/**\n * @param Foo\n */\nfunction quux (foo = 'FOO') {\n\n}\n// Message: Expected @param names to be \"foo\". Got \"Foo\".\n\n/**\n * @arg Foo\n */\nfunction quux (foo = 'FOO') {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n// Message: Expected @arg names to be \"foo\". Got \"Foo\".\n\n/**\n * @param Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected @param names to be \"foo\". Got \"Foo\".\n\n/**\n * @param Foo.Bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param path declaration (\"Foo.Bar\") appears before any real parameter.\n\n/**\n * @param foo\n * @param Foo.Bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param path declaration (\"Foo.Bar\") root node name (\"Foo\") does not match previous real parameter name (\"foo\").\n\n/**\n * Assign the project to a list of employees.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nfunction assign (employees) {\n\n};\n// Message: @param path declaration (\"employees[].name\") appears before any real parameter.\n\n/**\n * Assign the project to a list of employees.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].name - The employee's department.\n */\nfunction assign (employees) {\n\n};\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"employees[].name\"\n\n/**\n * @param foo\n * @param foo.bar\n * @param bar\n */\nfunction quux (bar, foo) {\n\n}\n// Message: Expected @param names to be \"bar, foo\". Got \"foo, bar\".\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param \"bar\" does not match an existing function parameter.\n\n/**\n * @param foo\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"foo\"\n\nclass bar {\n    /**\n     * @param foo\n     * @param foo\n     */\n    quux (foo) {\n\n    }\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"foo\"\n\n/**\n * @param foo\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"foo\"\n\n/**\n * @param foo\n * @param foo\n */\nfunction quux (foo, foo) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"foo\"\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param cfg.foo\n */\nfunction quux ({foo}) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"cfg.foo\"\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param cfg.foo\n */\nfunction quux ({foo}) {\n\n}\n// Message: Duplicate @param \"cfg.foo\"\n\n/**\n * @param cfg\n * @param cfg.foo\n */\nfunction quux ({foo, bar}) {\n\n}\n// Message: Missing @param \"cfg.bar\"\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param [cfg.foo]\n * @param baz\n */\nfunction quux ({foo}, baz) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"cfg.foo\"\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param [cfg.foo=\"with a default\"]\n * @param baz\n */\nfunction quux ({foo, bar}, baz) {\n\n}\n// Message: Missing @param \"cfg.bar\"\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param [cfg.foo=\"with a default\"]\n * @param baz\n */\nfunction quux ({foo}, baz) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"cfg.foo\"\n\n/**\n * @param cfg\n * @param [cfg.foo=\"with a default\"]\n * @param baz\n */\nfunction quux ({foo, bar}, baz) {\n\n}\n// Message: Missing @param \"cfg.bar\"\n\n/**\n * @param args\n */\nfunction quux ({a, b}) {\n\n}\n// Message: Missing @param \"args.a\"\n\n/**\n * @param args\n */\nfunction quux ({a, b} = {}) {\n\n}\n// Message: Missing @param \"args.a\"\n\nexport class SomeClass {\n  /**\n   * @param prop\n   */\n  constructor(private property: string) {}\n}\n// Message: Expected @param names to be \"property\". Got \"prop\".\n\nexport class SomeClass {\n  /**\n   * @param prop\n   * @param prop.foo\n   */\n  constructor(prop: { foo: string, bar: string }) {}\n}\n// Message: Missing @param \"prop.bar\"\n\nexport class SomeClass {\n  /**\n   * @param prop\n   * @param prop.foo\n   * @param prop.bar\n   */\n  constructor(options: { foo: string, bar: string }) {}\n}\n// Message: @param \"prop\" does not match parameter name \"options\"\n\nexport class SomeClass {\n  /**\n   * @param options\n   * @param options.foo\n   * @param options.bar\n   */\n  constructor(options: { foo: string }) {}\n}\n// Message: @param \"options.bar\" does not exist on options\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":false}}}\n// Message: Unexpected tag `@param`\n\n/**\n * @param {Error} error Exit code\n * @param {number} [code = 1] Exit code\n */\nfunction quux (error, cde = 1) {\n};\n// Message: Expected @param names to be \"error, cde\". Got \"error, code\".\n\n/**\n * @param foo\n */\nfunction quux ([a, b] = []) {\n\n}\n// Message: Missing @param \"foo.\"0\"\"\n\n/**\n * @param options\n * @param options.foo\n */\nfunction quux ({foo, ...extra}) {\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkRestProperty\":true}]\n// Message: Missing @param \"options.extra\"\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param cfg.bar\n * @param cfg.extra\n */\nfunction quux ({foo, ...extra}) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkRestProperty\":true}]\n// Message: @param \"cfg.bar\" does not exist on cfg\n\n/**\n * Converts an SVGRect into an object.\n * @param {SVGRect} bbox - a SVGRect\n */\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"SVGRect\"}]\n// Message: Missing @param \"bbox.x\"\n\n/**\n * Converts an SVGRect into an object.\n * @param {object} bbox - a SVGRect\n */\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n// Message: Missing @param \"bbox.x\"\n\nmodule.exports = class GraphQL {\n  /**\n   * @param fetchOptions\n   * @param cacheKey\n   */\n  fetch = ({ url, ...options }, cacheKey) => {\n  }\n};\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkRestProperty\":true}]\n// Message: Missing @param \"fetchOptions.url\"\n\n/**\n * Testing\n *\n * @param options\n * @param options.one One\n * @param options.two Two\n * @param options.four Four\n */\nfunction testingEslint(options: {\n  one: string;\n  two: string;\n  three: string;\n}): string {\n  return one + two + three;\n}\n// Message: Missing @param \"options.three\"\n\n/**\n *\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":false,\"required\":[\"name\"]}}}}\n// Message: Cannot add \"name\" to `require` with the tag's `name` set to `false`\n\n/**\n * @param root\n * @param foo\n */\nfunction quux ({foo, bar}, baz) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkDestructured\":false}]\n// Message: Expected @param names to be \"root, baz\". Got \"root, foo\".\n\n/**\n * Description.\n * @param {Object} options\n * @param {FooBar} foo\n */\nfunction quux ({ foo: { bar } }) {}\n// Message: Missing @param \"options.foo\"\n\n/**\n * Description.\n * @param {Object} options\n * @param options.foo\n */\nfunction quux ({ foo: { bar } }) {}\n// Message: Missing @param \"options.foo.bar\"\n\n/**\n * Description.\n * @param {object} options Options.\n * @param {object} options.foo A description.\n * @param {object} options.foo.bar\n */\nfunction foo({ foo: { bar: { baz } }}) {}\n// Message: Missing @param \"options.foo.bar.baz\"\n\n/**\n* Returns a number.\n* @param {Object} props Props.\n* @param {Object} props.prop Prop.\n* @param {string} props.prop.a String.\n* @param {string} props.prop.b String.\n* @return {number} A number.\n*/\nexport function testFn1 ({ prop = { a: 1, b: 2 } }) {\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"useDefaultObjectProperties\":false}]\n// Message: @param \"props.prop.a\" does not exist on props\n\n/**\n * @param {object} cfg\n * @param {string} cfg.foo\n * @param {string} cfg.bar\n * @param {object} cfg.extra\n */\nfunction quux ({foo}) {\n\n}\n// Message: @param \"cfg.bar\" does not exist on cfg\n\n/**\n * @param {object} cfg\n * @param {string} cfg.foo\n * @param {string} cfg.bar\n * @param {object} cfg.extra\n */\nfunction quux ({foo}) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"disableExtraPropertyReporting\":true}]\n// Message: @param \"cfg.bar\" does not exist on cfg\n\n/**\n * @param {object} root\n * @param {object} root.cfg\n * @param {object} root.cfg.a\n * @param {string} root.cfg.a.foo\n * @param {string} root.cfg.a.bar\n * @param {object} root.cfg.a.extra\n */\nfunction quux ({cfg: {a: {foo}}}) {\n\n}\n// Message: @param \"root.cfg.a.bar\" does not exist on root\n\n/**\n * @param {object} root\n * @param {object} root.cfg\n * @param {object} root.cfg.a\n * @param {string} root.cfg.a.foo\n * @param {string} root.cfg.a.bar\n * @param {object} root.cfg.a.extra\n */\nfunction quux ({cfg: {a: {foo}}}) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"disableExtraPropertyReporting\":true}]\n// Message: @param \"root.cfg.a.bar\" does not exist on root\n\n/**\n * @param {object} root\n * @param {object} root.cfg\n * @param {string} root.cfg.foo\n * @param {string} root.cfg.bar\n * @param {object} root.cfg.extra\n */\nfunction quux ({cfg}) {\n\n}\n// Message: @param \"root.cfg.foo\" does not exist on root\n\n/**\n * @param foo\n * @param foo\n *   on another line\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @param \"foo\"\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param foo\n * @param foo.foo\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * @param args\n */\nfunction quux (...args) {\n\n}\n\n/**\n * @param foo\n * @param foo.a\n * @param foo.b\n */\nfunction quux ({a, b}) {\n\n}\n\n/**\n * @param foo\n * @param foo.a\n * @param foo.b\n */\nfunction quux ({\"a\": A, b}) {\n\n}\n\n/**\n * @param foo\n * @param foo.\"a\"\n * @param foo.b\n */\nfunction quux ({a: A, b}) {\n\n}\n\n/**\n * @param foo\n * @param foo.\"a-b\"\n * @param foo.b\n */\nfunction quux ({\"a-b\": A, b}) {\n\n}\n\n/**\n * @param foo\n * @param foo.bar\n * @param foo.baz\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * Assign the project to a list of employees.\n * @param {object[]} employees - The employees who are responsible for the project.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nfunction assign (employees) {\n\n};\n\nexport class SomeClass {\n  /**\n   * @param property\n   */\n  constructor(private property: string) {}\n}\n\nexport class SomeClass {\n  /**\n   * @param options\n   * @param options.foo\n   * @param options.bar\n   */\n  constructor(options: { foo: string, bar: string }) {}\n}\n\nexport class SomeClass {\n  /**\n   * @param options\n   * @param options.foo\n   * @param options.bar\n   */\n  constructor({ foo, bar }: { foo: string, bar: string }) {}\n}\n\nexport class SomeClass {\n  /**\n   * @param options\n   * @param options.foo\n   * @param options.bar\n   */\n  constructor({ foo, bar }: { foo: string, bar: string }) {}\n}\n\n/**\n * @param {Error} error Exit code\n * @param {number} [code = 1] Exit code\n */\nfunction quux (error, code = 1) {\n};\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"allowExtraTrailingParamDocs\":true}]\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param baz\n */\nfunction quux ({foo}, baz) {\n\n}\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param cfg2\n */\nfunction quux ({foo}, cfg2) {\n\n}\n\n/**\n * @param cfg\n * @param cfg.foo\n * @param baz\n * @param baz.cfg\n */\nfunction quux ({foo}, {cfg}) {\n\n}\n\n/**\n * @param options\n * @param options.foo\n */\nfunction quux ({foo, ...extra}) {\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, ...extra) {\n\n}\n\n/**\n* Converts an SVGRect into an object.\n* @param {SVGRect} bbox - a SVGRect\n*/\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n\n/**\n* Converts an SVGRect into an object.\n* @param {SVGRect} bbox - a SVGRect\n*/\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n\n/**\n* Converts an SVGRect into an object.\n* @param {object} bbox - a SVGRect\n*/\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"SVGRect\"}]\n\nclass CSS {\n  /**\n   * Set one or more CSS properties for the set of matched elements.\n   *\n   * @param {Object} propertyObject - An object of property-value pairs to set.\n   */\n  setCssObject(propertyObject: {[key: string]: string | number}): void {\n  }\n}\n\n/**\n * Logs a string.\n *\n * @param input - String to output.\n */\nexport default function (input: {\n  [foo: string]: { a: string; b: string };\n}): void {\n  input;\n}\n\nexport class Thing {\n  foo: any;\n\n  /**\n   * @param {} C\n   */\n  constructor(C: { new (): any }) {\n    this.foo = new C();\n  }\n}\n\n/**\n * @param foo\n * @param root\n */\nfunction quux (foo, {bar}) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkDestructured\":false}]\n\nclass A {\n  /**\n   * Show a prompt.\n   * @param hideButton true if button should be hidden, false otherwise\n   * @param onHidden delegate to call when the prompt is hidden\n   */\n  public async showPrompt(hideButton: boolean, onHidden: {(): void}): Promise<void>\n  {\n  }\n}\n\n/**\n * Description.\n * @param {Object} options Options.\n * @param {FooBar} options.foo foo description.\n */\nfunction quux ({ foo: { bar }}) {}\n\n/**\n * Description.\n * @param {FooBar} options\n * @param {Object} options.foo\n */\nfunction quux ({ foo: { bar } }) {}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"FooBar\"}]\n\n/**\n * Description.\n * @param {Object} options\n * @param {FooBar} options.foo\n * @param {FooBar} options.baz\n */\nfunction quux ({ foo: { bar }, baz: { cfg } }) {}\n\n/**\n * Item\n *\n * @param {object} props\n * @param {object} props.data - case data\n * @param {string} props.data.className - additional css class\n * @param props.val\n */\nexport default function Item({\n  data: {\n    className,\n  } = {},\n  val = 4\n}) {\n}\n\n/**\n * @param obj\n * @param obj.data\n * @param obj.data.\"0\"\n * @param obj.data.\"1\"\n * @param obj.data.\"2\"\n * @param obj.defaulting\n * @param obj.defaulting.\"0\"\n * @param obj.defaulting.\"1\"\n */\nfunction Item({\n  data: [foo, bar, ...baz],\n  defaulting: [quux, xyz] = []\n}) {\n}\n\n/**\n* Returns a number.\n* @param {Object} props Props.\n* @param {Object} props.prop Prop.\n* @param {string} props.prop.a String.\n* @param {string} props.prop.b String.\n* @return {number} A number.\n*/\nexport function testFn1 ({ prop = { a: 1, b: 2 } }) {\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"useDefaultObjectProperties\":true}]\n\n/**\n * @param {object} root\n * @param {object} root.cfg\n * @param {string} root.cfg.foo\n * @param {string} root.cfg.bar\n * @param {object} root.cfg.extra\n */\nfunction quux ({cfg}) {\n\n}\n// \"jsdoc/check-param-names\": [\"error\"|\"warn\", {\"disableExtraPropertyReporting\":true}]\n\nclass A {\n    /**\n     * @param cfg\n     * @param cfg.abc\n     */\n    constructor({\n        [new.target.prop]: cX,\n        abc\n    }) {\n    }\n}\n\n/**\n * @param root\n * @param root.\"0\" Ignored\n * @param root.\"1\" Our \"b\"\n */\nconst foo = ([, b]) => b;\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-property-names\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-property-names\"></a>\n### <code>check-property-names</code>\n\nEnsures that property names in JSDoc are not duplicated on the same block\nand that nested properties have defined roots.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-property-names-options-5\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-property-names-options-5\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-property-names-options-5-enablefixer-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-property-names-options-5-enablefixer-1\"></a>\n##### <code>enableFixer</code>\n\nSet to `true` to auto-remove `@property` duplicates (based on\nidentical names).\n\nNote that this option will remove duplicates of the same name even if\nthe definitions do not match in other ways (e.g., the second property will\nbe removed even if it has a different type or description).\n\n|||\n|---|---|\n|Context|Everywhere|\n|Options|`enableFixer`|\n|Tags|`property`|\n|Aliases|`prop`|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @typedef (SomeType) SomeTypedef\n * @property Foo.Bar\n */\n// Message: @property path declaration (\"Foo.Bar\") appears before any real property.\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n * @property Foo.Bar\n */\n// Message: @property path declaration (\"Foo.Bar\") root node name (\"Foo\") does not match previous real property name (\"foo\").\n\n/**\n * Assign the project to a list of employees.\n * @typedef (SomeType) SomeTypedef\n * @property {string} employees[].name - The name of an employee.\n * @property {string} employees[].department - The employee's department.\n */\n// Message: @property path declaration (\"employees[].name\") appears before any real property.\n\n/**\n * Assign the project to a list of employees.\n * @typedef (SomeType) SomeTypedef\n * @property {string} employees[].name - The name of an employee.\n * @property {string} employees[].name - The employee's department.\n */\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @property \"employees[].name\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n * @property foo\n */\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @property \"foo\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n * @property foo\n */\n// Message: Duplicate @property \"foo\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property cfg\n * @property cfg.foo\n * @property cfg.foo\n */\nfunction quux ({foo, bar}) {\n\n}\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @property \"cfg.foo\"\n\nclass Test {\n    /**\n     * @typedef (SomeType) SomeTypedef\n     * @property cfg\n     * @property cfg.foo\n     * @property cfg.foo\n     */\n    quux ({foo, bar}) {\n\n    }\n}\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @property \"cfg.foo\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property cfg\n * @property cfg.foo\n * @property [cfg.foo]\n * @property baz\n */\nfunction quux ({foo, bar}, baz) {\n\n}\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @property \"cfg.foo\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property cfg\n * @property cfg.foo\n * @property [cfg.foo=\"with a default\"]\n * @property baz\n */\nfunction quux ({foo, bar}, baz) {\n\n}\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @property \"cfg.foo\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @prop foo\n * @prop foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":\"prop\"}}}\n// \"jsdoc/check-property-names\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Duplicate @prop \"foo\"\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":false}}}\n// Message: Unexpected tag `@property`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n */\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @prop foo\n */\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n * @property bar\n */\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n * @property foo.foo\n * @property bar\n */\n\n/**\n * Assign the project to a list of employees.\n * @typedef (SomeType) SomeTypedef\n * @property {object[]} employees - The employees who are responsible for the project.\n * @property {string} employees[].name - The name of an employee.\n * @property {string} employees[].department - The employee's department.\n */\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property {Error} error Exit code\n * @property {number} [code = 1] Exit code\n */\n\n/**\n * @namespace (SomeType) SomeNamespace\n * @property {Error} error Exit code\n * @property {number} [code = 1] Exit code\n */\n\n/**\n * @class\n * @property {Error} error Exit code\n * @property {number} [code = 1] Exit code\n */\nfunction quux (code = 1) {\n  this.error = new Error('oops');\n  this.code = code;\n}\n\n/**\n * @typedef (SomeType) SomeTypedef\n * @property foo\n * @property foo.bar\n * @property foo.baz\n * @property bar\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-syntax\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-syntax\"></a>\n### <code>check-syntax</code>\n\nReports against syntax not encouraged for the mode (e.g., Google Closure\nCompiler in \"jsdoc\" or \"typescript\" mode). Note that this rule will not check\nfor types that are wholly invalid for a given mode, as that is covered by\n`valid-types`.\n\nCurrently checks against:\n\n- Use of `=` in \"jsdoc\" or \"typescript\" mode\n\nNote that \"jsdoc\" actually allows Closure syntax, but with another\noption available for optional parameters (enclosing the name in brackets), the\nrule is enforced (except under \"permissive\" and \"closure\" modes).\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Recommended|false|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {string=} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Syntax should not be Google Closure Compiler style.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {string=} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @param {string} [foo]\n */\nfunction quux (foo) {\n\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-tag-names\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-tag-names\"></a>\n### <code>check-tag-names</code>\n\nReports invalid block tag names.\n\nValid [JSDoc 3 Block Tags](https://jsdoc.app/#block-tags) are:\n\n```\nabstract\naccess\nalias\nasync\naugments\nauthor\nborrows\ncallback\nclass\nclassdesc\nconstant\nconstructs\ncopyright\ndefault\ndeprecated\ndescription\nenum\nevent\nexample\nexports\nexternal\nfile\nfires\nfunction\ngenerator\nglobal\nhideconstructor\nignore\nimplements\ninheritdoc\ninner\ninstance\ninterface\nkind\nlends\nlicense\nlistens\nmember\nmemberof\nmemberof!\nmixes\nmixin\nmodule\nname\nnamespace\noverride\npackage\nparam\nprivate\nproperty\nprotected\npublic\nreadonly\nrequires\nreturns\nsee\nsince\nstatic\nsummary\nthis\nthrows\ntodo\ntutorial\ntype\ntypedef\nvariation\nversion\nyields\n```\n\n`modifies` is also supported (see [source](https://github.com/jsdoc/jsdoc/blob/master/packages/jsdoc/lib/jsdoc/tag/dictionary/definitions.js#L594))\nbut is undocumented.\n\nThe following synonyms are also recognized if you set them in\n`tagNamePreference` as a key (or replacement):\n\n```\narg\nargument\nconst\nconstructor\ndefaultvalue\ndesc\nemits\nexception\nextends\nfileoverview\nfunc\nhost\nmethod\noverview\nprop\nreturn\nvar\nvirtual\nyield\n```\n\nIf you wish to allow in certain cases both a primary tag name and its\nalias(es), you can set a normally non-preferred tag name to itself to indicate\nthat you want to allow both the default tag (in this case `@returns`) and a\nnon-default (in this case `return`):\n\n```js\n\"tagNamePreference\": {\n    \"return\": \"return\",\n}\n```\n\nBecause the tags indicated as replacements in\n`settings.jsdoc.tagNamePreference` will automatically be considered as valid,\nthe above works.\n\nLikewise are the tag keys of `settings.jsdoc.structuredTags` automatically\nconsidered as valid (as their defining an expected structure for tags implies\nthe tags may be used).\n\nFor [TypeScript](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc)\n(or Closure), when `settings.jsdoc.mode` is set to `typescript` or `closure`,\none may also use the following:\n\n```\ntemplate\n```\n\nAnd for [Closure](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler),\nwhen `settings.jsdoc.mode` is set to `closure`, one may use the following (in\naddition to the jsdoc and TypeScript tags–though replacing `returns` with\n`return`):\n\n```\ndefine (synonym of `const` per jsdoc source)\ndict\nexport\nexterns\nfinal\nimplicitCast (casing distinct from that recognized by jsdoc internally)\ninheritDoc (casing distinct from that recognized by jsdoc internally)\nnoalias\nnocollapse\nnocompile\nnoinline\nnosideeffects\npolymer\npolymerBehavior\npreserve\nrecord (synonym of `interface` per jsdoc source)\nstruct\nsuppress\nunrestricted\n```\n\n...and these undocumented tags which are only in [source](https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/parsing/Annotation.java):\n\n```\nclosurePrimitive\ncustomElement\nexpose\nhidden\nidGenerator\nmeaning\nmixinClass\nmixinFunction\nngInject\nowner\ntypeSummary\nwizaction\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-tag-names-options-6\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-tag-names-options-6\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-tag-names-options-6-definedtags\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-tag-names-options-6-definedtags\"></a>\n##### <code>definedTags</code>\n\nUse an array of `definedTags` strings to configure additional, allowed tags.\nThe format is as follows:\n\n```json\n{\n  \"definedTags\": [\"note\", \"record\"]\n}\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-tag-names-jsxtags\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-tag-names-jsxtags\"></a>\n#### <code>jsxTags</code>\n\nIf this is set to `true`, all of the following tags used to control JSX output are allowed:\n\n```\njsx\njsxFrag\njsxImportSource\njsxRuntime\n```\n\nFor more information, see the [babel documentation](https://babeljs.io/docs/en/babel-plugin-transform-react-jsx).\n\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Recommended|true|\n|Options|`definedTags`|\n|Settings|`tagNamePreference`, `mode`|\n\nThe following patterns are considered problems:\n\n````js\n/** @typoo {string} */\nlet a;\n// Message: Invalid JSDoc tag name \"typoo\".\n\n/** @typoo {string} */\nlet a;\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"parameter\":{\"name\":\"namepath-referencing\",\"required\":[\"type\",\"name\"],\"type\":true}}}}\n// Message: Invalid JSDoc tag name \"typoo\".\n\n/**\n * @Param\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag name \"Param\".\n\n/**\n * @foo\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag name \"foo\".\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag (preference). Replace \"arg\" JSDoc tag with \"param\".\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n// Message: Invalid JSDoc tag (preference). Replace \"param\" JSDoc tag with \"arg\".\n\n/**\n * @constructor foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"tag constructor\":\"cons\"}}}\n// Message: Invalid JSDoc tag (preference). Replace \"constructor\" JSDoc tag with \"cons\".\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"arg\":\"somethingDifferent\"}}}\n// Message: Invalid JSDoc tag (preference). Replace \"arg\" JSDoc tag with \"somethingDifferent\".\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"parameter\"}}}\n// Message: Invalid JSDoc tag (preference). Replace \"param\" JSDoc tag with \"parameter\".\n\n/**\n * @bar foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag name \"bar\".\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-tag-names\": [\"error\"|\"warn\", {\"definedTags\":[\"bar\"]}]\n// Message: Invalid JSDoc tag name \"baz\".\n\n/**\n * @bar\n * @baz\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-tag-names\": [\"error\"|\"warn\", {\"definedTags\":[\"bar\"]}]\n// Message: Invalid JSDoc tag name \"baz\".\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"todo\":false}}}\n// Message: Blacklisted tag found (`@todo`)\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"todo\":{\"message\":\"Please resolve to-dos or add to the tracker\"}}}}\n// Message: Please resolve to-dos or add to the tracker\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"todo\":{\"message\":\"Please use x-todo instead of todo\",\"replacement\":\"x-todo\"}}}}\n// Message: Please use x-todo instead of todo\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"todo\":{\"message\":\"Please use x-todo instead of todo\",\"replacement\":\"x-todo\"}}}}\n// Message: Please use x-todo instead of todo\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"todo\":55}}}\n// Message: Invalid `settings.jsdoc.tagNamePreference`. Values must be falsy, a string, or an object.\n\n/**\n * @property {object} a\n * @prop {boolean} b\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag (preference). Replace \"prop\" JSDoc tag with \"property\".\n\n/**\n * @abc foo\n * @abcd bar\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"abc\":\"abcd\"}}}\n// \"jsdoc/check-tag-names\": [\"error\"|\"warn\", {\"definedTags\":[\"abcd\"]}]\n// Message: Invalid JSDoc tag (preference). Replace \"abc\" JSDoc tag with \"abcd\".\n\n/**\n * @abc\n * @abcd\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"abc\":\"abcd\"}}}\n// Message: Invalid JSDoc tag (preference). Replace \"abc\" JSDoc tag with \"abcd\".\n\n/**\n * @returns\n */\nfunction quux (foo) {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Invalid JSDoc tag (preference). Replace \"returns\" JSDoc tag with \"return\".\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inheritDoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n */\nfunction quux (foo) {}\n// Settings: {\"jsdoc\":{\"mode\":\"badMode\"}}\n// Message: Unrecognized value `badMode` for `settings.jsdoc.mode`.\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inheritDoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n * @internal\n * @template\n */\nfunction quux (foo) {}\n// Message: Invalid JSDoc tag name \"internal\".\n\n/** \n * @externs\n */\nfunction quux (foo) {}\n// Message: Invalid JSDoc tag name \"externs\".\n\n/** @jsx h */\n/** @jsxFrag Fragment */\n/** @jsxImportSource preact */\n/** @jsxRuntime automatic */\n// Message: Invalid JSDoc tag name \"jsx\".\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @memberof! foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n\n/**\n * @parameter foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"parameter\":{\"name\":\"namepath-referencing\",\"required\":[\"type\",\"name\"],\"type\":true}}}}\n\n/**\n * @bar foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-tag-names\": [\"error\"|\"warn\", {\"definedTags\":[\"bar\"]}]\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-tag-names\": [\"error\"|\"warn\", {\"definedTags\":[\"baz\",\"bar\"]}]\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"baz\",\"returns\":{\"message\":\"Prefer `bar`\",\"replacement\":\"bar\"},\"todo\":false}}}\n\n/**\n * @returns\n */\nfunction quux (foo) {}\n\n/**\n * @return\n */\nfunction quux (foo) {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inheritDoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n */\nfunction quux (foo) {}\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inheritDoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n * @internal\n * @template\n */\nfunction quux (foo) {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/** \n * @externs\n */\nfunction quux (foo) {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n\n/**\n * @extends Foo\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"augments\":{\"message\":\"@extends is to be used over @augments.\",\"replacement\":\"extends\"}}}}\n\n/**\n * (Set tag name preference to itself to get aliases to\n *   work along with main tag name.)\n * @augments Bar\n * @extends Foo\n */\nfunction quux () {\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"extends\":\"extends\"}}}\n\n/**\n * Registers the `target` class as a transient dependency; each time the dependency is resolved a new instance will be created.\n *\n * @param target - The class / constructor function to register as transient.\n *\n * @example ```ts\n@transient()\nclass Foo { }\n```\n * @param Time for a new tag\n */\nexport function transient<T>(target?: T): T {\n  // ...\n}\n\n/** @jsx h */\n/** @jsxFrag Fragment */\n/** @jsxImportSource preact */\n/** @jsxRuntime automatic */\n// \"jsdoc/check-tag-names\": [\"error\"|\"warn\", {\"jsxTags\":true}]\n\n/**\n * @internal\n */\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-types\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-types\"></a>\n### <code>check-types</code>\n\nReports invalid types.\n\nBy default, ensures that the casing of native types is the same as in this\nlist:\n\n```\nundefined\nnull\nboolean\nnumber\nbigint\nstring\nsymbol\nobject (For TypeScript's sake, however, using `Object` when specifying child types on it like `Object<string, number>`)\nArray\nFunction\nDate\nRegExp\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-types-options-7\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-types-options-7\"></a>\n#### Options\n\n`check-types` allows one option:\n\n- An option object:\n  - with the key `noDefaults` to insist that only the supplied option type\n    map is to be used, and that the default preferences (such as \"string\"\n    over \"String\") will not be enforced. The option's default is `false`.\n  - with the key `exemptTagContexts` which will avoid reporting when a\n    bad type is found on a specified tag. Set to an array of objects with\n    a key `tag` set to the tag to exempt, and a `types` key which can\n    either be `true` to indicate that any types on that tag will be allowed,\n    or to an array of strings which will only allow specific bad types.\n    If an array of strings is given, these must match the type exactly,\n    e.g., if you only allow `\"object\"`, it will not allow\n    `\"object<string, string>\"`. Note that this is different from the\n    behavior of `settings.jsdoc.preferredTypes`. This option is useful\n    for normally restricting generic types like `object` with\n    `preferredTypes`, but allowing `typedef` to indicate that its base\n    type is `object`.\n  - with the key `unifyParentAndChildTypeChecks` which will treat\n    `settings.jsdoc.preferredTypes` keys such as `SomeType` as matching\n    not only child types such as an unadorned `SomeType` but also\n    `SomeType<aChildType>`, `SomeType.<aChildType>`, or if `SomeType` is\n    `Array` (or `[]`), it will match `aChildType[]`. If this is `false` or\n    unset, the former format will only apply to types which are not parent\n    types/unions whereas the latter formats will only apply for parent\n    types/unions. The special types `[]`, `.<>` (or `.`), and `<>`\n    act only as parent types (and will not match a bare child type such as\n    `Array` even when unified, though, as mentioned, `Array` will match\n    say `string[]` or `Array.<string>` when unified). The special type\n    `*` is only a child type. Note that there is no detection of parent\n    and child type together, e.g., you cannot specify preferences for\n    `string[]` specifically as distinct from say `number[]`, but you can\n    target both with `[]` or the child types `number` or `string`.\n\nIf a value is present both as a key and as a value, neither the key nor the\nvalue will be reported. Thus one can use this fact to allow both `object`\nand `Object`, for example. Note that in \"typescript\" mode, this is the default\nbehavior.\n\nSee also the documentation on `settings.jsdoc.preferredTypes` which impacts\nthe behavior of `check-types`.\n\nNote that if there is an error [parsing](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser)\ntypes for a tag, the function will silently ignore that tag, leaving it to\nthe `valid-types` rule to report parsing errors.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-types-why-not-capital-case-everything\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-types-why-not-capital-case-everything\"></a>\n#### Why not capital case everything?\n\nWhy are `boolean`, `number` and `string` exempt from starting with a capital\nletter? Let's take `string` as an example. In Javascript, everything is an\nobject. The `String` object has prototypes for string functions such as\n`.toUpperCase()`.\n\nFortunately we don't have to write `new String()` everywhere in our code.\nJavascript will automatically wrap string primitives into string Objects when\nwe're applying a string function to a string primitive. This way the memory\nfootprint is a tiny little bit smaller, and the\n[GC](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) has\nless work to do.\n\nSo in a sense, there are two types of strings in Javascript:\n1. `{string}` literals, also called primitives\n2. `{String}` Objects.\n\nWe use the primitives because it's easier to write and uses less memory.\n`{String}` and `{string}` are technically both valid, but they are not the same.\n\n```js\nnew String('lard') // String {0: \"l\", 1: \"a\", 2: \"r\", 3: \"d\", length: 4}\n'lard' // \"lard\"\nnew String('lard') === 'lard' // false\n```\n\nTo make things more confusing, there are also object literals (like `{}`) and\n`Object` objects. But object literals are still static `Object`s and `Object`\nobjects are instantiated objects. So an object primitive is still an `Object`\nobject.\n\nHowever, `Object.create(null)` objects are not `instanceof Object`, however, so\nin the case of such a plain object we lower-case to indicate possible support\nfor these objects. Also, nowadays, TypeScript also discourages use of `Object`\nas a lone type. However, one additional complexity is that TypeScript allows and\nactually [currently requires](https://github.com/microsoft/TypeScript/issues/20555)\n`Object` (with the initial upper-case) if used in the syntax\n`Object.<keyType, valueType>` or `Object<keyType, valueType`, perhaps to\nadhere to that which [JSDoc documents](https://jsdoc.app/tags-type.html).\n\nSo, for optimal compatibility with TypeScript (especially since TypeScript\ntools can be used on plain JavaScript with JSDoc), we are now requiring this\nTypeScript approach by default (if you set `object` type `preferredTypes` in\nTypeScript mode, the defaults will not apply).\n\nBasically, for primitives, we want to define the type as a primitive, because\nthat's what we use in 99.9% of cases. For everything else, we use the type\nrather than the primitive. Otherwise it would all just be `{object}` (with the\nadditional exception of the special case of `Object.<>` just mentioned).\n\nIn short: It's not about consistency, rather about the 99.9% use case. (And\nsome functions might not even support the objects if they are checking for\nidentity.)\n\ntype name | `typeof` | check-types | testcase\n--|--|--|--\n**Array** | object | **Array** | `([]) instanceof Array` -> `true`\n**Function** | function | **Function** | `(function f () {}) instanceof Function` -> `true`\n**Date** | object | **Date** | `(new Date()) instanceof Date` -> `true`\n**RegExp** | object | **RegExp** | `(new RegExp(/.+/)) instanceof RegExp` -> `true`\nObject | **object** | **object** | `({}) instanceof Object` -> `true` but `Object.create(null) instanceof Object` -> `false`\nBoolean | **boolean** | **boolean** | `(true) instanceof Boolean` -> **`false`**\nNumber | **number** | **number** | `(41) instanceof Number` -> **`false`**\nString | **string** | **string** | `(\"test\") instanceof String` -> **`false`**\n\nIf you define your own tags and don't wish their bracketed portions checked\nfor types, you can use `settings.jsdoc.structuredTags` with a tag `type` of\n`false`. If you set their `type` to an array, only those values will be\npermitted.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`augments`, `class`, `constant`, `enum`, `implements`, `member`, `module`, `namespace`, `param`, `property`, `returns`, `throws`, `type`, `typedef`, `yields`|\n|Aliases|`constructor`, `const`, `extends`, `var`, `arg`, `argument`, `prop`, `return`, `exception`, `yield`|\n|Closure-only|`package`, `private`, `protected`, `public`, `static`|\n|Recommended|true|\n|Options|`noDefaults`, `exemptTagContexts`, `unifyParentAndChildTypeChecks`|\n|Settings|`preferredTypes`, `mode`, `structuredTags`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {abc} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":100}}}\n// Message: Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @param \"foo\" type \"Number\"; prefer: \"number\".\n\n/**\n * @arg {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @arg \"foo\" type \"Number\"; prefer: \"number\".\n\n/**\n * @returns {Number} foo\n * @throws {Number} foo\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc @returns type \"Number\"; prefer: \"number\".\n\n/**\n * @param {(Number | string | Boolean)=} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Invalid JSDoc @param \"foo\" type \"Number\"; prefer: \"number\".\n\n/**\n * @param {Array.<Number | String>} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Invalid JSDoc @param \"foo\" type \"Number\"; prefer: \"number\".\n\n/**\n * @param {(Number | String)[]} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Invalid JSDoc @param \"foo\" type \"Number\"; prefer: \"number\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":\"Abc\",\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":{\"replacement\":\"Abc\"},\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":{\"message\":\"Messed up JSDoc @{{tagName}}{{tagValue}} type \\\"abc\\\"; prefer: \\\"Abc\\\".\",\"replacement\":\"Abc\"},\"string\":\"Str\"}}}\n// Message: Messed up JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {abc} foo\n * @param {cde} bar\n * @param {object} baz\n */\nfunction qux(foo, bar, baz) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":{\"message\":\"Messed up JSDoc @{{tagName}}{{tagValue}} type \\\"abc\\\"; prefer: \\\"Abc\\\".\",\"replacement\":\"Abc\"},\"cde\":{\"message\":\"More messed up JSDoc @{{tagName}}{{tagValue}} type \\\"cde\\\"; prefer: \\\"Cde\\\".\",\"replacement\":\"Cde\"},\"object\":\"Object\"}}}\n// Message: Messed up JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":{\"message\":\"Messed up JSDoc @{{tagName}}{{tagValue}} type \\\"abc\\\".\",\"replacement\":false},\"string\":\"Str\"}}}\n// Message: Messed up JSDoc @param \"foo\" type \"abc\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":{\"message\":\"Messed up JSDoc @{{tagName}}{{tagValue}} type \\\"abc\\\".\"},\"string\":\"Str\"}}}\n// Message: Messed up JSDoc @param \"foo\" type \"abc\".\n\n/**\n * @param {abc} foo\n * @param {Number} bar\n */\nfunction qux(foo, bar) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":\"Abc\",\"string\":\"Str\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"noDefaults\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {abc} foo\n * @param {Number} bar\n */\nfunction qux(foo, bar) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":\"Abc\",\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":false,\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"abc\".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":false}}}\n// Message: Invalid JSDoc @param \"foo\" type \"abc\".\n\n/**\n * @param {*} baz\n */\nfunction qux(baz) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"*\":false,\"abc\":\"Abc\",\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"baz\" type \"*\".\n\n/**\n * @param {*} baz\n */\nfunction qux(baz) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"*\":\"aaa\",\"abc\":\"Abc\",\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"baz\" type \"*\"; prefer: \"aaa\".\n\n/**\n * @param {abc} foo\n * @param {Number} bar\n */\nfunction qux(foo, bar) {\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"abc\":\"Abc\",\"string\":\"Str\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"abc\"; prefer: \"Abc\".\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"GenericArray\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"GenericArray\".\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"GenericArray\",\"Array.<>\":\"GenericArray\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"GenericArray\".\n\n/**\n * @param {Array.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.<>\":\"GenericArray\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"GenericArray\".\n\n/**\n * @param {Array<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array<>\":\"GenericArray\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"GenericArray\".\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"SpecialTypeArray\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"[]\"; prefer: \"SpecialTypeArray\".\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"SpecialTypeArray\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"[]\"; prefer: \"SpecialTypeArray\".\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"SpecialTypeArray\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"SpecialTypeArray\".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\",\"object.<>\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\",\"object<>\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object.<>\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object<>\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object.<>\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object<>\":\"GenericObject\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":false}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"object\".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":false}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\".\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"GenericObject\".\n\n/**\n *\n * @param {string[][]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"Array.\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"[]\"; prefer: \"Array.\".\n\n/**\n *\n * @param {string[][]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"Array.<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"[]\"; prefer: \"Array.<>\".\n\n/**\n *\n * @param {string[][]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"Array<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"[]\"; prefer: \"Array<>\".\n\n/**\n *\n * @param {object.<string, object.<string, string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object.\":\"Object\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object\".\n\n/**\n *\n * @param {object.<string, object.<string, string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object.\":\"Object<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object<>\".\n\n/**\n *\n * @param {object<string, object<string, string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object<>\":\"Object.\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object.\".\n\n/**\n *\n * @param {Array.<Array.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.\":\"[]\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"[]\".\n\n/**\n *\n * @param {Array.<Array.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.\":\"Array<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"Array<>\".\n\n/**\n *\n * @param {Array.<Array.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.\":\"<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"<>\".\n\n/**\n *\n * @param {Array.<MyArray.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.\":\"<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"<>\".\n\n/**\n *\n * @param {Array.<MyArray.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"MyArray.\":\"<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"MyArray\"; prefer: \"<>\".\n\n/**\n *\n * @param {Array<Array<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"<>\":\"Array.\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"Array.\".\n\n/**\n *\n * @param {Array<Array<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"Array.\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"Array.\".\n\n/**\n *\n * @param {Array<Array<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"<>\":\"[]\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"[]\".\n\n/** @typedef {String} foo */\n// Message: Invalid JSDoc @typedef \"foo\" type \"String\"; prefer: \"string\".\n\n/**\n * @this {array}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Invalid JSDoc @this type \"array\"; prefer: \"Array\".\n\n/**\n * @export {array}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Invalid JSDoc @export type \"array\"; prefer: \"Array\".\n\n/**\n * @typedef {object} foo\n * @property {object} bar\n */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"exemptTagContexts\":[{\"tag\":\"typedef\",\"types\":true}]}]\n// Message: Invalid JSDoc @property \"bar\" type \"object\"; prefer: \"Object\".\n\n/** @typedef {object} foo */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"exemptTagContexts\":[{\"tag\":\"typedef\",\"types\":[\"array\"]}]}]\n// Message: Invalid JSDoc @typedef \"foo\" type \"object\"; prefer: \"Object\".\n\n/**\n * @typedef {object} foo\n * @property {object} bar\n */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"exemptTagContexts\":[{\"tag\":\"typedef\",\"types\":[\"object\"]}]}]\n// Message: Invalid JSDoc @property \"bar\" type \"object\"; prefer: \"Object\".\n\n/** @typedef {object<string, string>} foo */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object<>\":\"Object<>\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"exemptTagContexts\":[{\"tag\":\"typedef\",\"types\":[\"object\"]}]}]\n// Message: Invalid JSDoc @typedef \"foo\" type \"object\"; prefer: \"Object<>\".\n\n/**\n * @param {Array<number | undefined>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.<>\":\"[]\",\"Array<>\":\"[]\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Array\"; prefer: \"[]\".\n\n/**\n * @typedef {object} foo\n */\nfunction a () {}\n\n/**\n * @typedef {Object<string>} foo\n */\nfunction b () {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"object\":\"Object\"}}}\n// Message: Invalid JSDoc @typedef \"foo\" type \"object\"; prefer: \"Object\".\n\n/**\n * @aCustomTag {Number} foo\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":true}}}}\n// Message: Invalid JSDoc @aCustomTag \"foo\" type \"Number\"; prefer: \"number\".\n\n/**\n * @aCustomTag {Number} foo\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":[\"otherType\",\"anotherType\"]}}}}\n// Message: Invalid JSDoc @aCustomTag \"foo\" type \"Number\"; prefer: [\"otherType\",\"anotherType\"].\n\n/**\n * @param {Object[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Object\"; prefer: \"object\".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"object.<>\":\"Object\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object\".\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\",\"object.<>\":\"Object<>\",\"Object.<>\":\"Object<>\",\"object<>\":\"Object<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object<>\".\n\n/**\n * @param {Object.<string, number>} foo\n */\nfunction quux (foo) {\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\",\"object.<>\":\"Object<>\",\"Object.<>\":\"Object<>\",\"object<>\":\"Object<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"Object\"; prefer: \"Object<>\".\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\",\"object.<>\":\"Object<>\",\"Object.<>\":\"Object<>\",\"object<>\":\"Object<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object<>\".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\",\"object.<>\":\"Object<>\",\"Object.<>\":\"Object<>\",\"object<>\":\"Object<>\"}}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object<>\".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n// Message: Invalid JSDoc @param \"foo\" type \"object\"; prefer: \"Object<>\".\n\n/**\n *\n * @param {Object} param\n * @return {Object | String}\n */\nfunction abc(param) {\n  if (param.a)\n    return {};\n  return 'abc';\n}\n// Message: Invalid JSDoc @param \"param\" type \"Object\"; prefer: \"object\".\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {number} foo\n * @param {Bar} bar\n * @param {*} baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @arg {number} foo\n * @arg {Bar} bar\n * @arg {*} baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param {(number | string | boolean)=} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param {typeof bar} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @param {import('./foo').bar.baz} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @param {(x: number, y: string) => string} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @param {() => string} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @returns {Number} foo\n * @throws {Number} foo\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"noDefaults\":true}]\n\n/**\n * @param {Object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\"}}}\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {Array.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"GenericArray\"}}}\n\n/**\n * @param {Array<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"GenericArray\"}}}\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array\":\"SpecialTypeArray\",\"Array.<>\":\"SpecialTypeArray\",\"Array<>\":\"SpecialTypeArray\"}}}\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.<>\":\"SpecialTypeArray\",\"Array<>\":\"SpecialTypeArray\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"SpecialTypeArray\"}}}\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"[]\":\"SpecialTypeArray\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"unifyParentAndChildTypeChecks\":true}]\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array.<>\":\"GenericArray\"}}}\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"Array<>\":\"GenericArray\"}}}\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n\n/**\n * @param {object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"GenericObject\"}}}\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object.<>\":\"GenericObject\"}}}\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object<>\":\"GenericObject\"}}}\n\n/**\n * @param {Number<} Ignore the error as not a validating rule\n */\nfunction quux (foo) {\n\n}\n\n/** @param {function(...)} callback The function to invoke. */\nvar subscribe = function(callback) {};\n\n/**\n * @this {Array}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @export {Array}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/** @type {new() => EntityBase} */\n\n/** @typedef {object} foo */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"exemptTagContexts\":[{\"tag\":\"typedef\",\"types\":true}]}]\n\n/** @typedef {object<string, string>} foo */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\"}}}\n\n/** @typedef {object<string, string>} foo */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object<>\":\"Object<>\"}}}\n// \"jsdoc/check-types\": [\"error\"|\"warn\", {\"exemptTagContexts\":[{\"tag\":\"typedef\",\"types\":[\"object<string, string>\"]}]}]\n\n/**\n * @typedef {object} foo\n */\n\n /**\n  * @typedef {Object} foo\n  */\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\",\"Object\":\"object\"}}}\n\n/**\n * @typedef {object} foo\n */\nfunction a () {}\n\n/**\n * @typedef {Object} foo\n */\nfunction b () {}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"object\":\"Object\",\"Object\":\"object\"}}}\n\n/**\n * @typedef {object} foo\n */\nfunction a () {}\n\n/**\n * @typedef {Object<string>} foo\n */\nfunction b () {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @aCustomTag {Number} foo\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":false}}}}\n\n/**\n * @aCustomTag {otherType} foo\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":[\"otherType\",\"anotherType\"]}}}}\n\n/**\n * @aCustomTag {anotherType|otherType} foo\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":[\"otherType\",\"anotherType\"]}}}}\n\n/**\n * Bad types handled by `valid-types` instead.\n * @param {str(} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {Object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @typedef {object} foo\n */\nfunction a () {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\",\"object.<>\":\"Object<>\",\"object<>\":\"Object<>\"}}}\n\n/**\n * @typedef {Object<string, number>} foo\n */\nfunction a () {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\",\"preferredTypes\":{\"Object\":\"object\",\"object.<>\":\"Object<>\",\"object<>\":\"Object<>\"}}}\n\n/**\n * Does something.\n *\n * @param {Object<string,string>} spec - Foo.\n */\nfunction foo(spec) {\n    return spec;\n}\n\nfoo()\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-values\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-values\"></a>\n### <code>check-values</code>\n\nThis rule checks the values for a handful of tags:\n\n1. `@version` - Checks that there is a present and valid\n    [semver](https://semver.org/) version value.\n2. `@since` - As with `@version`\n3. `@license` - Checks that there is a present and valid SPDX identifier\n    or is present within an `allowedLicenses` option.\n4. `@author` - Checks that there is a value present, and if the option\n    `allowedAuthors` is present, ensure that the author value is one\n    of these array items.\n5. `@variation` - If `numericOnlyVariation` is set, will checks that there\n    is a value present, and that it is an integer (otherwise, jsdoc allows any\n    value).\n6. `@kind` - Insists that it be one of the allowed values: 'class',\n    'constant', 'event', 'external', 'file', 'function', 'member', 'mixin',\n    'module', 'namespace', 'typedef',\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-values-options-8\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-values-options-8\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-values-options-8-allowedauthors\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-values-options-8-allowedauthors\"></a>\n##### <code>allowedAuthors</code>\n\nAn array of allowable author values. If absent, only non-whitespace will\nbe checked for.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-values-options-8-allowedlicenses\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-values-options-8-allowedlicenses\"></a>\n##### <code>allowedLicenses</code>\n\nAn array of allowable license values or `true` to allow any license text.\nIf present as an array, will be used in place of SPDX identifiers.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-values-options-8-licensepattern\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-values-options-8-licensepattern\"></a>\n##### <code>licensePattern</code>\n\nA string to be converted into a `RegExp` (with `u` flag) and whose first\nparenthetical grouping, if present, will match the portion of the license\ndescription to check (if no grouping is present, then the whole portion\nmatched will be used). Defaults to `/([^\\n\\r]*)/gu`, i.e., the SPDX expression\nis expected before any line breaks.\n\nNote that the `/` delimiters are optional, but necessary to add flags.\n\nDefaults to using the `u` flag, so to add your own flags, encapsulate\nyour expression as a string, but like a literal, e.g., `/^mit$/ui`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-check-values-options-8-numericonlyvariation\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-check-values-options-8-numericonlyvariation\"></a>\n##### <code>numericOnlyVariation</code>\n\nWhether to enable validation that `@variation` must be a number. Defaults to\n`false`.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`@version`, `@since`, `@kind`, `@license`, `@author`, `@variation`|\n|Recommended|true|\n|Options|`allowedAuthors`, `allowedLicenses`, `licensePattern`|\n|Settings|`tagNamePreference`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @version\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @version value.\n\n/**\n * @version 3.1\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @version: \"3.1\".\n\n/**\n * @kind\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @kind value.\n\n/**\n * @kind -3\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @kind: \"-3\"; must be one of: class, constant, event, external, file, function, member, mixin, module, namespace, typedef.\n\n/**\n * @variation -3\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"numericOnlyVariation\":true}]\n// Message: Invalid JSDoc @variation: \"-3\".\n\n/**\n * @since\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @since value.\n\n/**\n * @since 3.1\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @since: \"3.1\".\n\n/**\n * @license\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @license value.\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @license: \"FOO\"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"allowedLicenses\":[\"BAR\",\"BAX\"]}]\n// Message: Invalid JSDoc @license: \"FOO\"; expected one of BAR, BAX.\n\n/**\n * @license MIT-7\n * Some extra text...\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @license: \"MIT-7\"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license (MIT OR GPL-2.5)\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @license: \"(MIT OR GPL-2.5)\"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license MIT\n * Some extra text\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"[\\\\s\\\\S]*\"}]\n// Message: Invalid JSDoc @license: \"MIT\nSome extra text\"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @author\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @author value.\n\n/**\n * @author Brett Zamir\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"allowedAuthors\":[\"Gajus Kuizinas\",\"golopot\"]}]\n// Message: Invalid JSDoc @author: \"Brett Zamir\"; expected one of Gajus Kuizinas, golopot.\n\n/**\n * @variation\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"numericOnlyVariation\":true}]\n// Message: Missing JSDoc @variation value.\n\n/**\n * @variation 5.2\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"numericOnlyVariation\":true}]\n// Message: Invalid JSDoc @variation: \"5.2\".\n\n/**\n * @license license-prefix Oops\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"(?<=license-prefix ).*\"}]\n// Message: Invalid JSDoc @license: \"Oops\"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license Oops\n * Copyright 2022\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"^([^\\n]+)\\nCopyright\"}]\n// Message: Invalid JSDoc @license: \"Oops\"; expected SPDX expression: https://spdx.org/licenses/.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @version 3.4.1\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @version      3.4.1\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @since 3.4.1\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @since      3.4.1\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license MIT\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license MIT\n * Some extra text...\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license (MIT OR GPL-2.0)\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"allowedLicenses\":[\"FOO\",\"BAR\",\"BAX\"]}]\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"allowedLicenses\":true}]\n\n/**\n * @license MIT\n * Some extra text\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"[^\\n]*\"}]\n\n/**\n * @author Gajus Kuizinas\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @author Brett Zamir\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"allowedAuthors\":[\"Gajus Kuizinas\",\"golopot\",\"Brett Zamir\"]}]\n\n/**\n * @variation 3\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"numericOnlyVariation\":true}]\n\n/**\n * @variation abc\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @module test\n * @license MIT\n */\n'use strict';\n\n/**\n * @kind function\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license license-prefix MIT\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"(?<=license-prefix )MIT|GPL3.0\"}]\n\n/**\n * @license\n * Copyright 2022\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"^([^\\n]+)(?!\\nCopyright)\"}]\n\n/**\n * @license MIT\n * Copyright 2022\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/check-values\": [\"error\"|\"warn\", {\"licensePattern\":\"^([^\\n]+)\\nCopyright\"}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-empty-tags\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-empty-tags\"></a>\n### <code>empty-tags</code>\n\nExpects the following tags to be empty of any content:\n\n- `@abstract`\n- `@async`\n- `@generator`\n- `@global`\n- `@hideconstructor`\n- `@ignore`\n- `@inheritdoc`\n- `@inner`\n- `@instance`\n- `@internal` (used by TypeScript)\n- `@override`\n- `@readonly`\n\nThe following will also be expected to be empty unless `settings.jsdoc.mode`\nis set to \"closure\" (which allows types).\n\n- `@package`\n- `@private`\n- `@protected`\n- `@public`\n- `@static`\n\nNote that `@private` will still be checked for content by this rule even with\n`settings.jsdoc.ignorePrivate` set to `true` (a setting which normally\ncauses rules not to take effect).\n\nSimilarly, `@internal` will still be checked for content by this rule even with\n`settings.jsdoc.ignoreInternal` set to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-empty-tags-options-9\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-empty-tags-options-9\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-empty-tags-options-9-tags-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-empty-tags-options-9-tags-1\"></a>\n##### <code>tags</code>\n\nIf you want additional tags to be checked for their descriptions, you may\nadd them within this option.\n\n```js\n{\n  'jsdoc/empty-tags': ['error', {tags: ['event']}]\n}\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags| `abstract`, `async`, `generator`, `global`, `hideconstructor`, `ignore`, `inheritdoc`, `inner`, `instance`, `internal`, `override`, `readonly`, `package`, `private`, `protected`, `public`, `static` and others added by `tags`|\n|Recommended|true|\n|Options|`tags`|\nThe following patterns are considered problems:\n\n````js\n/**\n * @abstract extra text\n */\nfunction quux () {\n\n}\n// Message: @abstract should be empty.\n\n/**\n * @interface extra text\n */\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: @interface should be empty.\n\nclass Test {\n    /**\n     * @abstract extra text\n     */\n    quux () {\n\n    }\n}\n// Message: @abstract should be empty.\n\n/**\n * @abstract extra text\n * @inheritdoc\n * @async out of place\n */\nfunction quux () {\n\n}\n// Message: @abstract should be empty.\n\n/**\n * @event anEvent\n */\nfunction quux () {\n\n}\n// \"jsdoc/empty-tags\": [\"error\"|\"warn\", {\"tags\":[\"event\"]}]\n// Message: @event should be empty.\n\n/**\n * @private {someType}\n */\nfunction quux () {\n\n}\n// Message: @private should be empty.\n\n/**\n * @internal {someType}\n */\nfunction quux () {\n\n}\n// Message: @internal should be empty.\n\n/**\n * @private {someType}\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: @private should be empty.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @abstract\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @param aName\n */\nfunction quux () {\n\n}\n\n/**\n * @abstract\n * @inheritdoc\n * @async\n */\nfunction quux () {\n\n}\n\n/**\n * @private {someType}\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @private\n */\nfunction quux () {\n\n}\n\n/**\n * @internal\n */\nfunction quux () {\n\n}\n\n/**\n * Create an array.\n *\n * @private\n *\n * @param {string[]} [elem] - Elements to make an array of.\n * @param {boolean} [clone] - Optionally clone nodes.\n * @returns {string[]} The array of nodes.\n */\nfunction quux () {}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-implements-on-classes\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-implements-on-classes\"></a>\n### <code>implements-on-classes</code>\n\nReports an issue with any non-constructor function using `@implements`.\n\nConstructor functions, whether marked with `@class`, `@constructs`, or being\nan ES6 class constructor, will not be flagged.\n\nTo indicate that a function follows another function's signature, one might\ninstead use `@type` to indicate the `@function` or `@callback` to which the\nfunction is adhering.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-implements-on-classes-options-10\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-implements-on-classes-options-10\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-implements-on-classes-options-10-contexts\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-implements-on-classes-options-10-contexts\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\n\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`implements` (prevented)|\n|Recommended|true|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @implements {SomeClass}\n */\nfunction quux () {\n\n}\n// Message: @implements used on a non-constructor function\n\n/**\n * @implements {SomeClass}\n */\nfunction quux () {\n\n}\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: @implements used on a non-constructor function\n\n/**\n * @function\n * @implements {SomeClass}\n */\nfunction quux () {\n\n}\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: @implements used on a non-constructor function\n\n/**\n * @callback\n * @implements {SomeClass}\n */\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: @implements used on a non-constructor function\n\n/**\n * @implements {SomeClass}\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"implements\":false}}}\n// Message: Unexpected tag `@implements`\n\nclass Foo {\n    /**\n     * @implements {SomeClass}\n     */\n    constructor() {}\n\n    /**\n     * @implements {SomeClass}\n     */\n    bar() {}\n}\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"MethodDefinition\"]}]\n// Message: @implements used on a non-constructor function\n\nclass Foo {\n    /**\n     * @implements {SomeClass}\n     */\n    constructor() {}\n\n    /**\n     * @implements {SomeClass}\n     */\n    bar() {}\n}\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: @implements used on a non-constructor function\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @implements {SomeClass}\n * @class\n */\nfunction quux () {\n\n}\n\n/**\n * @implements {SomeClass}\n * @class\n */\nfunction quux () {\n\n}\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @implements {SomeClass}\n */\n// \"jsdoc/implements-on-classes\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @implements {SomeClass}\n * @constructor\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nclass quux {\n  /**\n   * @implements {SomeClass}\n   */\n  constructor () {\n\n  }\n}\n\n/**\n *\n */\nconst quux = class {\n  /**\n   * @implements {SomeClass}\n   */\n  constructor () {\n\n  }\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"implements\":false}}}\n\n/**\n * @function\n * @implements {SomeClass}\n */\n\n/**\n * @callback\n * @implements {SomeClass}\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description\"></a>\n### <code>match-description</code>\n\nEnforces a regular expression pattern on descriptions.\n\nThe default is this basic expression to match English sentences (Support\nfor Unicode upper case may be added in a future version when it can be handled\nby our supported Node versions):\n\n``^\\n?([A-Z`\\\\d_][\\\\s\\\\S]*[.?!`]\\\\s*)?$``\n\nApplies to the jsdoc block description and `@description` (or `@desc`)\nby default but the `tags` option (see below) may be used to match other tags.\n\nThe default (and all regex options) defaults to using (only) the `u` flag, so\nto add your own flags, encapsulate your expression as a string, but like a\nliteral, e.g., `/[A-Z].*\\\\./ui`.\n\nNote that `/` delimiters are optional, but necessary to add flags (besides\n`u`).\n\nAlso note that the default or optional regular expressions is *not*\ncase-insensitive unless one opts in to add the `i` flag.\n\nYou can add the `s` flag if you want `.` to match newlines. Note, however,\nthat the trailing newlines of a description will not be matched.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description-options-11\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description-options-11\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description-options-11-matchdescription\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description-options-11-matchdescription\"></a>\n##### <code>matchDescription</code>\n\nYou can supply your own expression to override the default, passing a\n`matchDescription` string on the options object.\n\n```js\n{\n  'jsdoc/match-description': ['error', {matchDescription: '[A-Z].*\\\\.'}]\n}\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description-options-11-message\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description-options-11-message\"></a>\n##### <code>message</code>\n\nYou may provide a custom default message by using the following format:\n\n```js\n{\n  'jsdoc/match-description': ['error', {\n    message: 'The default dscription should begin with a capital letter.'\n  }]\n}\n```\n\nThis can be overridden per tag or for the main block description by setting\n`message` within `tags` or `mainDescription`, respectively.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description-options-11-tags-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description-options-11-tags-2\"></a>\n##### <code>tags</code>\n\nIf you want different regular expressions to apply to tags, you may use\nthe `tags` option object:\n\n```js\n{\n  'jsdoc/match-description': ['error', {tags: {\n    param: '\\\\- [A-Z].*\\\\.',\n    returns: '[A-Z].*\\\\.'\n  }}]\n}\n```\n\nIn place of a string, you can also add `true` to indicate that a particular\ntag should be linted with the `matchDescription` value (or the default).\n\n```js\n{\n  'jsdoc/match-description': ['error', {tags: {\n    param: true,\n    returns: true\n  }}]\n}\n```\n\nAlternatively, you may supply an object with a `message` property to indicate\nthe error message for that tag.\n\n```js\n{\n  'jsdoc/match-description': ['error', {tags: {\n    param: {message: 'Begin with a hyphen', match: '\\\\- [A-Z].*\\\\.'},\n    returns: {message: 'Capitalize for returns (the default)', match: true}\n  }}]\n}\n```\n\nThe tags `@param`/`@arg`/`@argument` and `@property`/`@prop` will be properly\nparsed to ensure that the matched \"description\" text includes only the text\nafter the name.\n\nAll other tags will treat the text following the tag name, a space, and\nan optional curly-bracketed type expression (and another space) as part of\nits \"description\" (e.g., for `@returns {someType} some description`, the\ndescription is `some description` while for `@some-tag xyz`, the description\nis `xyz`).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description-options-11-maindescription\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description-options-11-maindescription\"></a>\n##### <code>mainDescription</code>\n\nIf you wish to override the main block description without changing the\ndefault `match-description` (which can cascade to the `tags` with `true`),\nyou may use `mainDescription`:\n\n```js\n{\n  'jsdoc/match-description': ['error', {\n    mainDescription: '[A-Z].*\\\\.',\n    tags: {\n      param: true,\n      returns: true\n    }\n  }]\n}\n```\n\nThere is no need to add `mainDescription: true`, as by default, the main\nblock description (and only the main block description) is linted, though you\nmay disable checking it by setting it to `false`.\n\nYou may also provide an object with `message`:\n\n```js\n{\n  'jsdoc/match-description': ['error', {\n    mainDescription: {\n      message: 'Capitalize first word of JSDoc block descriptions',\n      match: '[A-Z].*\\\\.'\n    },\n    tags: {\n      param: true,\n      returns: true\n    }\n  }]\n}\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-description-options-11-contexts-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-description-options-11-contexts-1\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\n(e.g., `ClassDeclaration` for ES6\nclasses). Overrides the default contexts (see below). Set to `\"any\"` if you\nwant the rule to apply to any jsdoc block throughout your files.\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|docblock and `@description` by default but more with `tags`|\n|Aliases|`@desc`|\n|Recommended|false|\n|Settings||\n|Options|`contexts`, `tags` (accepts tags with names and optional type such as 'param', 'arg', 'argument', 'property', and 'prop', and accepts arbitrary list of other tags with an optional type (but without names), e.g., 'returns', 'return'), `mainDescription`, `matchDescription`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * foo.\n */\nconst q = class {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassExpression\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nconst q = class {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassExpression\"],\"message\":\"Needs to begin with a capital letter and end with an end mark.\"}]\n// Message: Needs to begin with a capital letter and end with an end mark.\n\n/**\n * foo.\n */\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nconst q = {\n\n};\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"ObjectExpression\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo)\n */\nfunction quux () {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"matchDescription\":\"[А-Я][А-я]+\\\\.\"}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"matchDescription\":\"[А-Я][А-я]+\\\\.\",\"message\":\"Needs to begin with a capital letter and end with an end mark.\"}]\n// Message: Needs to begin with a capital letter and end with an end mark.\n\n/**\n * Abc.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":\"[А-Я][А-я]+\\\\.\",\"tags\":{\"param\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Abc.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":{\"match\":\"[А-Я][А-я]+\\\\.\",\"message\":\"Needs to begin with a Cyrillic capital letter and end with a period.\"},\"tags\":{\"param\":true}}]\n// Message: Needs to begin with a Cyrillic capital letter and end with a period.\n\n/**\n * Foo\n */\nfunction quux () {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"param\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @template Abc, Def foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"template\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @prop foo foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"prop\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @summary foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"summary\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @author\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"author\":\".+\"}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @x-tag\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"x-tag\":\".+\"}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @description foo foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":\"^[a-zA-Z]*\\\\s*$\",\"tags\":{\"param\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":{\"match\":\"^[a-zA-Z]*\\\\s*$\",\"message\":\"Letters only\"},\"tags\":{\"param\":{\"match\":true,\"message\":\"Needs to begin with a capital letter and end with a period.\"}}}]\n// Message: Needs to begin with a capital letter and end with a period.\n\n/**\n * Foo\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":false,\"tags\":{\"param\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @param foo bar\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"param\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * {@see Foo.bar} buz\n */\nfunction quux (foo) {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @returns {number} foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"returns\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @returns foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"returns\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * lorem ipsum dolor sit amet, consectetur adipiscing elit. pellentesque elit diam,\n * iaculis eu dignissim sed, ultrices sed nisi. nulla at ligula auctor, consectetur neque sed,\n * tincidunt nibh. vivamus sit amet vulputate ligula. vivamus interdum elementum nisl,\n * vitae rutrum tortor semper ut. morbi porta ante vitae dictum fermentum.\n * proin ut nulla at quam convallis gravida in id elit. sed dolor mauris, blandit quis ante at,\n * consequat auctor magna. duis pharetra purus in porttitor mollis.\n */\nfunction longDescription (foo) {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @arg {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"arg\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @argument {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"argument\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @return {number} foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"return\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Returns bar.\n *\n * @return {number} bar\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"return\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @param notRet\n * @returns Тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"param\":\"[А-Я][А-я]+\\\\.\"}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @description notRet\n * @returns Тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":\"[А-Я][А-я]+\\\\.\"}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nclass quux {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\nclass MyClass {\n  /**\n   * Abc\n   */\n  myClassField = 1\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"PropertyDefinition\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\ninterface quux {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\nconst myObject = {\n  /**\n   * Bad description\n   */\n  myProp: true\n};\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"Property\"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @param foo Foo bar\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"param\":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo bar\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Description with extra new line\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"matchDescription\":\"[\\\\s\\\\S]*\\\\S$\"}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n *\n * This function does lots of things.\n */\n function quux () {\n\n }\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"matchDescription\":\"^\\\\S[\\\\s\\\\S]*\\\\S$\"}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n *\n * @param\n */\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"matchDescription\":\"^\\\\S[\\\\s\\\\S]*\\\\S$\"}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/** Does something very important. */\nfunction foo(): string;\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[endLine=0]\"}],\"matchDescription\":\"^\\\\S[\\\\s\\\\S]*\\\\S$\"}]\n// Message: JSDoc description does not satisfy the regex pattern.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\n\n/**\n *\n */\n function quux () {\n\n }\n\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"param\":true}}]\n\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * Bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"message\":\"This won't be shown\"}]\n\n/**\n * Тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"matchDescription\":\"[А-Я][А-я]+\\\\.\"}]\n\n/**\n * @param notRet\n * @returns Тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"returns\":\"[А-Я][А-я]+\\\\.\"}}]\n\n/**\n * @param notRet\n * @description Тест.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":\"[А-Я][А-я]+\\\\.\"}}]\n\n/**\n * Foo\n * bar.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"returns\":true}}]\n\n/**\n * @returns {type1} Foo bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"returns\":true}}]\n\n/**\n * @description Foo bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":true}}]\n\n/**\n * @description Foo\n * bar.\n * @param\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":true}}]\n\n/** @description Foo bar. */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":true}}]\n\n/**\n * @description Foo\n * bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"description\":true}}]\n\n/**\n * Foo. {@see Math.sin}.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo {@see Math.sin} bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo?\n *\n * Bar!\n *\n * Baz:\n *   1. Foo.\n *   2. Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello:\n * World.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello: world.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * foo.\n */\nfunction quux () {\n\n}\n\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":false}]\n\n/**\n * foo.\n */\nclass quux {\n\n}\n\n/**\n * foo.\n */\nclass quux {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":true}]\n\nclass MyClass {\n  /**\n   * Abc.\n   */\n  myClassField = 1\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"PropertyDefinition\"]}]\n\n/**\n * Foo.\n */\ninterface quux {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\"]}]\n\nconst myObject = {\n  /**\n   * Bad description\n   */\n  myProp: true\n};\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[]}]\n\n/**\n * foo.\n */\nconst q = class {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[]}]\n\n/**\n * foo.\n */\nconst q = {\n\n};\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[]}]\n\n/**\n * @description foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"param\":true}}]\n\n/**\n * Foo.\n *\n * @summary Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"summary\":true}}]\n\n/**\n * Foo.\n *\n * @author Somebody\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"author\":\".+\"}}]\n\n/**\n * Foo.\n *\n * @x-tag something\n */\nfunction quux () {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"x-tag\":\".+\"}}]\n\n/**\n * Foo.\n *\n * @prop foo Foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"prop\":true}}]\n\n/**\n * @param foo Foo bar.\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n\n/**\n * Foo.\n *\n * @template Abc, Def Foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"tags\":{\"template\":true}}]\n\n/**\n * Enable or disable plugin.\n *\n * When enabling with this function, the script will be attached to the `document` if:.\n * - the script runs in browser context.\n * - the `document` doesn't have the script already attached.\n * - the `loadScript` option is set to `true`.\n * @param enabled `true` to enable, `false` to disable. Default: `true`.\n */\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"mainDescription\":\"/^[A-Z`-].*\\\\.$/us\",\"matchDescription\":\"^([A-Z`-].*(\\\\.|:)|-\\\\s.*)$\",\"tags\":{\"param\":true,\"returns\":true}}]\n\n/**\n * @constructor\n * @todo Ok.\n */\nfunction quux () {\n}\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"mainDescription\":false,\"tags\":{\"todo\":true}}]\n\n/** Does something very important. */\nfunction foo(): string;\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[endLine!=0]\"}],\"matchDescription\":\"^\\\\S[\\\\s\\\\S]*\\\\S$\"}]\n\n/**\n * This is my favorite function, foo.\n *\n * @returns Nothing.\n */\nfunction foo(): void;\n// \"jsdoc/match-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[endLine!=0]:not(:has(JsdocTag))\"}],\"matchDescription\":\"^\\\\S[\\\\s\\\\S]*\\\\S$\"}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-name\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-name\"></a>\n### <code>match-name</code>\n\nReports the name portion of a JSDoc tag if matching or not matching\na given regular expression.\n\nNote that some tags do not possess names and anything appearing to be a\nname will actually be part of the description (e.g., for\n`@returns {type} notAName`). If you are defining your own tags, see the\n`structuredTags` setting (if `name: false`, this rule will not apply to\nthat tag).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-name-options-12\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-name-options-12\"></a>\n#### Options\n\nA single options object with the following properties:\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-match-name-options-12-match\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-match-name-options-12-match\"></a>\n##### <code>match</code>\n\n`match` is a required option containing an array of objects which determine\nthe conditions whereby a name is reported as being problematic.\n\nThese objects can have any combination of the following groups of optional\nproperties, all of which act to confine one another:\n\n- `tags` - This array should include tag names or `*` to indicate the\n  match will apply for all tags (except as confined by any context\n  properties). If `*` is not used, then these rules will only apply to\n  the specified tags. If `tags` is omitted, then `*` is assumed.\n\n- `allowName` - Indicates which names are allowed for the given tag (or `*`).\n    Accepts a string regular expression (optionally wrapped between two\n    `/` delimiters followed by optional flags) used to match the name.\n- `disallowName` - As with `allowName` but indicates names that are not\n    allowed.\n- `replacement` - If `disallowName` is supplied and this value is present, it\n    will replace the matched `disallowName` text.\n\n- `context` - AST to confine the allowing or disallowing to jsdoc blocks\n    associated with a particular context. See the\n    [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\n    section of our README for more on the expected format.\n- `comment` - As with `context` but AST for the JSDoc block comment and types\n\n- `message` - An optional custom message to use when there is a match.\n\nNote that `comment`, even if targeting a specific tag, is used to match the\nwhole block. So if a `comment` finds its specific tag, it may still apply\nfixes found by the likes of `disallowName` even when a different tag has the\ndisallowed name. An alternative is to ensure that `comment` finds the specific\ntag of the desired tag and/or name and no `disallowName` (or `allowName`) is\nsupplied. In such a case, only one error will be reported, but no fixer will\nbe applied, however.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|(The tags specified by `tags`, including any tag if `*` is set)|\n|Recommended|false|\n|Settings|`structuredTags`|\n|Options|`match`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param opt_a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\"}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_a\".\n\n/**\n * @param opt_a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\",\"replacement\":\"\"}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_a\".\n\n/**\n * @param a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"allowName\":\"/^[a-z]+$/i\"}]}]\n// Message: Only allowing names matching `/^[a-z]+$/i` but found \"opt_b\".\n\n/**\n * @param arg\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"allowName\":\"/^[a-z]+$/i\",\"disallowName\":\"/^arg/i\"}]}]\n// Message: Only allowing names not matching `/^arg/i` but found \"arg\".\n\n/**\n * @param opt_a\n * @param arg\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^arg$/i\"},{\"disallowName\":\"/^opt_/i\"}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_a\".\n\n/**\n * @property opt_a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\",\"tags\":[\"param\"]}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_b\".\n\n/**\n * @someTag opt_a\n * @param opt_b\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"someTag\":{\"name\":\"namepath-defining\"}}}}\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\",\"tags\":[\"param\"]}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_b\".\n\n/**\n * @property opt_a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\",\"tags\":[\"*\"]}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_a\".\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction quux () {\n}\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"context\":\"FunctionDeclaration\",\"disallowName\":\"/^opt_/i\"}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_a\".\n\n/**\n * @property opt_a\n * @param {Bar|Foo} opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"comment\":\"JsdocBlock:has(JsdocTag[tag=\\\"param\\\"][name=/opt_/] > JsdocTypeUnion:has(JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1)))\"}]}]\n// Message: Prohibited context for \"opt_a\".\n\n/**\n * @property opt_a\n * @param {Bar|Foo} opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"comment\":\"JsdocBlock:has(JsdocTag[tag=\\\"param\\\"][name=/opt_/] > JsdocTypeUnion:has(JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1)))\",\"message\":\"Don't use `opt_` prefixes with Bar|...\"}]}]\n// Message: Don't use `opt_` prefixes with Bar|...\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction quux () {}\n// \"jsdoc/match-name\": [\"error\"|\"warn\", ]\n// Message: Rule `no-restricted-syntax` is missing a `match` option.\n\n/**\n * @param {\n *   someType\n * } opt_a\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\",\"replacement\":\"\"}]}]\n// Message: Only allowing names not matching `/^opt_/i` but found \"opt_a\".\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param opt_a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^arg/i\"}]}]\n\n/**\n * @param a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"allowName\":\"/^[a-z_]+$/i\"}]}]\n\n/**\n * @param someArg\n * @param anotherArg\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"allowName\":\"/^[a-z]+$/i\",\"disallowName\":\"/^arg/i\"}]}]\n\n/**\n * @param elem1\n * @param elem2\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^arg$/i\"},{\"disallowName\":\"/^opt_/i\"}]}]\n\n/**\n * @someTag opt_a\n * @param opt_b\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"someTag\":{\"name\":\"namepath-defining\"}}}}\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^opt_/i\",\"tags\":[\"property\"]}]}]\n\n/**\n * @property opt_a\n * @param opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"disallowName\":\"/^arg/i\",\"tags\":[\"*\"]}]}]\n\n/**\n * @param opt_a\n * @param opt_b\n */\nclass A {\n}\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"context\":\"FunctionDeclaration\",\"disallowName\":\"/^opt_/i\"}]}]\n\n/**\n * @property opt_a\n * @param {Foo|Bar} opt_b\n */\n// \"jsdoc/match-name\": [\"error\"|\"warn\", {\"match\":[{\"comment\":\"JsdocBlock > JsdocTag[tag=\\\"param\\\"] > JsdocTypeUnion[left.name=\\\"Bar\\\"]\",\"disallowName\":\"/^opt_/i\"}]}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks\"></a>\n### <code>multiline-blocks</code>\n\nControls how and whether jsdoc blocks can be expressed as single or multiple\nline blocks.\n\nNote that if you set `noSingleLineBlocks` and `noMultilineBlocks` to `true`\nand configure them in a certain manner, you might effectively be prohibiting\nall jsdoc blocks!\n\nAlso allows for preventing text at the very beginning or very end of blocks.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13\"></a>\n#### Options\n\nA single options object with the following properties.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nozerolinetext-defaults-to-true\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nozerolinetext-defaults-to-true\"></a>\n##### <code>noZeroLineText</code> (defaults to <code>true</code>)\n\nFor multiline blocks, any non-whitespace text immediately after the `/**` and\nspace will be reported. (Text after a newline is not reported.)\n\n`noMultilineBlocks` will have priority over this rule if it applies.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nofinallinetext-defaults-to-true\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nofinallinetext-defaults-to-true\"></a>\n##### <code>noFinalLineText</code> (defaults to <code>true</code>)\n\nFor multiline blocks, any non-whitespace text preceding the `*/` on the final\nline will be reported. (Text preceding a newline is not reported.)\n\n`noMultilineBlocks` will have priority over this rule if it applies.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nosinglelineblocks-defaults-to-false\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nosinglelineblocks-defaults-to-false\"></a>\n##### <code>noSingleLineBlocks</code> (defaults to <code>false</code>)\n\nIf this is `true`, any single line blocks will be reported, except those which\nare whitelisted in `singleLineTags`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-singlelinetags-defaults-to-lends-type\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-singlelinetags-defaults-to-lends-type\"></a>\n##### <code>singleLineTags</code> (defaults to <code>[&#39;lends&#39;, &#39;type&#39;]</code>)\n\nAn array of tags which can nevertheless be allowed as single line blocks when\n`noSingleLineBlocks` is set.  You may set this to a empty array to\ncause all single line blocks to be reported. If `'*'` is present, then\nthe presence of a tag will allow single line blocks (but not if a tag is\nmissing).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nomultilineblocks-defaults-to-false\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-nomultilineblocks-defaults-to-false\"></a>\n##### <code>noMultilineBlocks</code> (defaults to <code>false</code>)\n\nRequires that jsdoc blocks are restricted to single lines only unless impacted\nby the options `minimumLengthForMultiline`, `multilineTags`, or\n`allowMultipleTags`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-minimumlengthformultiline-defaults-to-not-being-in-effect\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-minimumlengthformultiline-defaults-to-not-being-in-effect\"></a>\n##### <code>minimumLengthForMultiline</code> (defaults to not being in effect)\n\nIf `noMultilineBlocks` is set with this numeric option, multiline blocks will\nbe permitted if containing at least the given amount of text.\n\nIf not set, multiline blocks will not be permitted regardless of length unless\na relevant tag is present and `multilineTags` is set.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-multilinetags-defaults-to\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-multilinetags-defaults-to\"></a>\n##### <code>multilineTags</code> (defaults to <code>[&#39;*&#39;]</code>)\n\nIf `noMultilineBlocks` is set with this option, multiline blocks may be allowed\nregardless of length as long as a tag or a tag of a certain type is present.\n\nIf `*` is included in the array, the presence of a tags will allow for\nmultiline blocks (but not when without any tags unless the amount of text is\nover an amount specified by `minimumLengthForMultiline`).\n\nIf the array does not include `*` but lists certain tags, the presence of\nsuch a tag will cause multiline blocks to be allowed.\n\nYou may set this to an empty array to prevent any tag from permitting multiple\nlines.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-multiline-blocks-options-13-allowmultipletags-defaults-to-true\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-multiline-blocks-options-13-allowmultipletags-defaults-to-true\"></a>\n##### <code>allowMultipleTags</code> (defaults to <code>true</code>)\n\nIf `noMultilineBlocks` is set to `true` with this option and multiple tags are\nfound in a block, an error will not be reported.\n\nSince multiple-tagged lines cannot be collapsed into a single line, this option\nprevents them from being reported. Set to `false` if you really want to report\nany blocks.\n\nThis option will also be applied when there is a block description and a single\ntag (since a description cannot precede a tag on a single line, and also\ncannot be reliably added after the tag either).\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|Any (though `singleLineTags` and `multilineTags` control the application)|\n|Recommended|true|\n|Settings||\n|Options|`noZeroLineText`, `noSingleLineBlocks`, `singleLineTags`, `noMultilineBlocks`, `minimumLengthForMultiline`, `multilineTags`, `allowMultipleTags`, `noFinalLineText`|\n\nThe following patterns are considered problems:\n\n````js\n/** Reported up here\n * because the rest is multiline\n */\n// Message: Should have no text on the \"0th\" line (after the `/**`).\n\n/** Reported up here\n * because the rest is multiline\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noZeroLineText\":true}]\n// Message: Should have no text on the \"0th\" line (after the `/**`).\n\n/** @abc {aType} aName Reported up here\n * because the rest is multiline\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noZeroLineText\":true}]\n// Message: Should have no text on the \"0th\" line (after the `/**`).\n\n/** @tag */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true}]\n// Message: Single line blocks are not permitted by your configuration.\n\n/** @tag {someType} */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true}]\n// Message: Single line blocks are not permitted by your configuration.\n\n/** @tag {someType} aName */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true}]\n// Message: Single line blocks are not permitted by your configuration.\n\n/** @tag */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true,\"singleLineTags\":[\"someOtherTag\"]}]\n// Message: Single line blocks are not permitted by your configuration.\n\n/** desc */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true,\"singleLineTags\":[\"*\"]}]\n// Message: Single line blocks are not permitted by your configuration.\n\n/**\n * Desc.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/** desc\n *\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/** desc\n *\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true,\"noSingleLineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration but fixing would result in a single line block which you have prohibited with `noSingleLineBlocks`.\n\n/**\n *\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * This is not long enough to be permitted.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"minimumLengthForMultiline\":100,\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * This is not long enough to be permitted.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":true,\"minimumLengthForMultiline\":100,\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * This has the wrong tags so is not permitted.\n * @notTheRightTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":false,\"multilineTags\":[\"onlyThisIsExempted\"],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration but the block has a description with a tag.\n\n/**\n * This has too many tags so cannot be fixed ot a single line.\n * @oneTag\n * @anotherTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":false,\"multilineTags\":[],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration but the block has multiple tags.\n\n/**\n * This has a tag and description so cannot be fixed ot a single line.\n * @oneTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":false,\"multilineTags\":[],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration but the block has a description with a tag.\n\n/**\n * This has no tags so is not permitted.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[\"*\"],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * This has the wrong tags so is not permitted.\n * @notTheRightTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":false,\"minimumLengthForMultiline\":500,\"multilineTags\":[\"onlyThisIsExempted\"],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration but the block has a description with a tag.\n\n/**\n * @lends This can be safely fixed to a single line.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[],\"noMultilineBlocks\":true,\"noSingleLineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * @type {aType} This can be safely fixed to a single line.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[],\"noMultilineBlocks\":true,\"noSingleLineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * @aTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * This is a problem when single and multiline are blocked.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true,\"noSingleLineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration but fixing would result in a single line block which you have prohibited with `noSingleLineBlocks`.\n\n/** This comment is bad\n * It should not have text on line zero\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"minimumLengthForMultiline\":50,\"noMultilineBlocks\":true,\"noZeroLineText\":true}]\n// Message: Should have no text on the \"0th\" line (after the `/**`).\n\n/**\n * @lends This can be safely fixed\n * to a single\n * line. */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[],\"noMultilineBlocks\":true}]\n// Message: Multiline jsdoc blocks are prohibited by your configuration.\n\n/**\n * @someTag {aType} with Description */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noFinalLineBlocks\":true}]\n// Message: Should have no text on the final line (before the `*/`).\n\n/**\n * Description */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noFinalLineBlocks\":true}]\n// Message: Should have no text on the final line (before the `*/`).\n````\n\nThe following patterns are not considered problems:\n\n````js\n/** Not reported */\n\n/**\n *  Not reported\n */\n\n/** Reported up here\n * because the rest is multiline\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noZeroLineText\":false}]\n\n/** @tag */\n\n/** @lends */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true}]\n\n/** @tag */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true,\"singleLineTags\":[\"tag\"]}]\n\n/** @tag */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noSingleLineBlocks\":true,\"singleLineTags\":[\"*\"]}]\n\n/**\n *\n */\n\n/**\n *\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":false}]\n\n/** Test */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true}]\n\n/**\n * This is long enough to be permitted by our config.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"minimumLengthForMultiline\":25,\"noMultilineBlocks\":true}]\n\n/**\n * This is long enough to be permitted by our config.\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"minimumLengthForMultiline\":50,\"noMultilineBlocks\":true}]\n\n/**\n * This has the right tag so is permitted.\n * @theRightTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[\"theRightTag\"],\"noMultilineBlocks\":true}]\n\n/** This has no tags but is single line so is not permitted. */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[\"*\"],\"noMultilineBlocks\":true}]\n\n/**\n * This has the wrong tags so is not permitted.\n * @notTheRightTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"minimumLengthForMultiline\":10,\"multilineTags\":[\"onlyThisIsExempted\"],\"noMultilineBlocks\":true}]\n\n/**\n * This has the wrong tags so is not permitted.\n * @theRightTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"minimumLengthForMultiline\":500,\"multilineTags\":[\"theRightTag\"],\"noMultilineBlocks\":true}]\n\n/** tag */\n\n/**\n * @lends This is ok per multiline\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noMultilineBlocks\":true,\"noSingleLineBlocks\":true}]\n\n/**\n * This has too many tags so cannot be fixed ot a single line.\n * @oneTag\n * @anotherTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"multilineTags\":[],\"noMultilineBlocks\":true}]\n\n/**\n * This has too many tags so cannot be fixed ot a single line.\n * @oneTag\n * @anotherTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":true,\"multilineTags\":[],\"noMultilineBlocks\":true}]\n\n/**\n * This has a tag and description so cannot be fixed ot a single line.\n * @oneTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":true,\"multilineTags\":[],\"noMultilineBlocks\":true}]\n\n/**\n * This has a tag and description so cannot be fixed ot a single line.\n * @oneTag\n */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"allowMultipleTags\":false,\"multilineTags\":[\"oneTag\"],\"noMultilineBlocks\":true}]\n\n/** @someTag with Description */\n// \"jsdoc/multiline-blocks\": [\"error\"|\"warn\", {\"noFinalLineBlocks\":true}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-newline-after-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-newline-after-description\"></a>\n### <code>newline-after-description</code>\n\nEnforces a consistent padding of the block description.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-newline-after-description-options-14\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-newline-after-description-options-14\"></a>\n#### Options\n\nThis rule allows one optional string argument. If it is `\"always\"` then a\nproblem is raised when there is no newline after the description. If it is\n`\"never\"` then a problem is raised when there is a newline after the\ndescription. The default value is `\"always\"`.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A (doc block)|\n|Options|(a string matching `\"always\" or \"never\"`)|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * Foo.\n *\n * Foo.\n * @foo\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Foo.\n * @foo\n *\n * Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Foo.\n *\n * Foo.\n * @foo\n */\nfunction quux () {\n\n}\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Bar.\n *\n * Bar.\n *\n * @bar\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/**\n * Bar.\n *\n * @bar\n *\n * Bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n\n         /**\n          * Bar.\n          *\n          * Bar.\n          *\n          * @bar\n          */\n         function quux () {\n\n         }\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/**\n * A.\n *\n * @typedef {object} A\n * @prop {boolean} a A.\n */\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/**\n * A.\n * @typedef {object} A\n * @prop {boolean} a A.\n */\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n\n     /**\n      * Service for fetching symbols.\n      * @param {object} $http - Injected http helper.\n      * @param {object} $q - Injected Promise api helper.\n      * @param {object} $location - Injected window location object.\n      * @param {object} REPORT_DIALOG_CONSTANTS - Injected handle.\n      */\n// Message: There must be a newline after the description of the JSDoc block.\n\n/** An example function.\n *\n * @returns {number} An example number.\n */\nfunction example() {\n  return 42;\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/** An example function.\n * @returns {number} An example number.\n */\nfunction example() {\n  return 42;\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a newline after the description of the JSDoc block.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n\n/**\n * Foo.\n *\n * @foo\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Bar.\n * @bar\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n\n\n     /**\n      * @foo\n      * Test \n      * abc \n      * @bar \n      */\n\n\n     /**\n      * \n      * @foo\n      * Test \n      * abc \n      * @bar \n      */\n\n/***\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Parses query string to object containing URL parameters\n * \n * @param queryString\n * Input string\n * \n * @returns\n * Object containing URL parameters\n */\nexport function parseQueryString(queryString: string): { [key: string]: string } {    // <-- Line 10 that fails\n\n}\n\n/** An example function.\n *\n * @returns {number} An example number.\n */\nfunction example() {\n  return 42;\n}\n\n/** An example function.\n * @returns {number} An example number.\n */\nfunction example() {\n  return 42;\n}\n// \"jsdoc/newline-after-description\": [\"error\"|\"warn\", \"never\"]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-bad-blocks\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-bad-blocks\"></a>\n### <code>no-bad-blocks</code>\n\nThis rule checks for multi-line-style comments which fail to meet the\ncriteria of a jsdoc block, namely that it should begin with two and only two\nasterisks, but which appear to be intended as jsdoc blocks due to the presence\nof whitespace followed by whitespace or asterisks, and\nan at-sign (`@`) and some non-whitespace (as with a jsdoc block tag).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-bad-blocks-options-15\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-bad-blocks-options-15\"></a>\n#### Options\n\nTakes an optional options object with the following.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-bad-blocks-options-15-ignore\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-bad-blocks-options-15-ignore\"></a>\n##### <code>ignore</code>\n\nAn array of directives that will not be reported if present at the beginning of\na multi-comment block and at-sign `/* @`.\n\nDefaults to `['ts-check', 'ts-expect-error', 'ts-ignore', 'ts-nocheck']`\n(some directives [used by TypeScript](https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html#ts-check)).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-bad-blocks-options-15-preventallmultiasteriskblocks\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-bad-blocks-options-15-preventallmultiasteriskblocks\"></a>\n##### <code>preventAllMultiAsteriskBlocks</code>\n\nA boolean (defaulting to `false`) which if `true` will prevent all\nJSDoc-like blocks with more than two initial asterisks even those without\napparent tag content.\n\n|||\n|---|---|\n|Context|Everywhere|\n|Tags|N/A|\n|Recommended|false|\n|Options|`ignore`, `preventAllMultiAsteriskBlocks`|\n\nThe following patterns are considered problems:\n\n````js\n/*\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc-like comment to begin with two asterisks.\n\n/*\n * @property foo\n */\n// Message: Expected JSDoc-like comment to begin with two asterisks.\n\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":false,\"required\":[\"name\"]}}}}\n// Message: Cannot add \"name\" to `require` with the tag's `name` set to `false`\n\n/* @ts-ignore */\n// \"jsdoc/no-bad-blocks\": [\"error\"|\"warn\", {\"ignore\":[]}]\n// Message: Expected JSDoc-like comment to begin with two asterisks.\n\n/*\n * Some description.\n *\n * @returns {string} Some string\n */\nfunction echo() {\n  return 'Something';\n}\n// Message: Expected JSDoc-like comment to begin with two asterisks.\n\n/***\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc-like comment to begin with two asterisks.\n\n/***\n *\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/no-bad-blocks\": [\"error\"|\"warn\", {\"preventAllMultiAsteriskBlocks\":true}]\n// Message: Expected JSDoc-like comment to begin with two asterisks.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @property foo\n */\n\n/**\n * @param foo\n */\n function quux () {\n\n }\n\nfunction quux () {\n\n}\n\n/* This could just be intended as a regular multiline comment,\n   so don't report this */\nfunction quux () {\n\n}\n\n/* Just a regular multiline comment with an `@` but not appearing\n    like a tag in a jsdoc-block, so don't report */\nfunction quux () {\n\n}\n\n/* @ts-check */\n\n/* @ts-expect-error */\n\n/* @ts-ignore */\n\n/* @ts-nocheck */\n\n/* */\n\n/** */\n\n/* @custom */\n// \"jsdoc/no-bad-blocks\": [\"error\"|\"warn\", {\"ignore\":[\"custom\"]}]\n\n/***\n * This is not JSDoc because of the 3 asterisks, but\n * is allowed without `preventAllMultiAsteriskBlocks`, as\n * some might wish normal multiline comments.\n */\nfunction quux (foo) {\n\n}\n\n/***/\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-defaults\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-defaults\"></a>\n### <code>no-defaults</code>\n\nThis rule reports defaults being used on the relevant portion of `@param`\nor `@default`. It also optionally reports the presence of the\nsquare-bracketed optional arguments at all.\n\nThe rule is intended to prevent the indication of defaults on tags where\nthis would be redundant with ES6 default parameters (or for `@default`,\nwhere it would be redundant with the context to which the `@default`\ntag is attached).\n\nUnless your `@default` is on a function, you will need to set `contexts`\nto an appropriate context, including, if you wish, \"any\".\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-defaults-options-16\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-defaults-options-16\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-defaults-options-16-nooptionalparamnames\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-defaults-options-16-nooptionalparamnames\"></a>\n##### <code>noOptionalParamNames</code>\n\nSet this to `true` to report the presence of optional parameters. May be\nused if the project is insisting on optionality being indicated by\nthe presence of ES6 default parameters (bearing in mind that such\n\"defaults\" are only applied when the supplied value is missing or\n`undefined` but not for `null` or other \"falsey\" values).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-defaults-options-16-contexts-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-defaults-options-16-contexts-2\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`param`, `default`|\n|Aliases|`arg`, `argument`, `defaultvalue`|\n|Recommended|false|\n|Options|`contexts`, `noOptionalParamNames`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {number} [foo=\"7\"]\n */\nfunction quux (foo) {\n\n}\n// Message: Defaults are not permitted on @param.\n\nclass Test {\n    /**\n     * @param {number} [foo=\"7\"]\n     */\n    quux (foo) {\n\n    }\n}\n// Message: Defaults are not permitted on @param.\n\n/**\n * @param {number} [foo=\"7\"]\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"noOptionalParamNames\":true}]\n// Message: Optional param names are not permitted on @param.\n\n/**\n * @arg {number} [foo=\"7\"]\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n// Message: Defaults are not permitted on @arg.\n\n/**\n * @param {number} [foo=\"7\"]\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Defaults are not permitted on @param.\n\n/**\n * @function\n * @param {number} [foo=\"7\"]\n */\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Defaults are not permitted on @param.\n\n/**\n * @callback\n * @param {number} [foo=\"7\"]\n */\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Defaults are not permitted on @param.\n\n/**\n * @default {}\n */\nconst a = {};\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Default values are not permitted on @default.\n\n/**\n * @defaultvalue {}\n */\nconst a = {};\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"default\":\"defaultvalue\"}}}\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Default values are not permitted on @defaultvalue.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n */\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n * @param {number} foo\n */\n\n/**\n * @callback\n * @param {number} foo\n */\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"noOptionalParamNames\":true}]\n\n/**\n * @default\n */\nconst a = {};\n// \"jsdoc/no-defaults\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-missing-syntax\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-missing-syntax\"></a>\n### <code>no-missing-syntax</code>\n\nThis rule lets you report if certain always expected comment structures are\nmissing.\n\nThis (along with `no-restricted-syntax`) is a bit similar to Schematron for\nXML or jsontron for JSON--you can validate expectations of there being\narbitrary structures.\n\nThis differs from the rule of the same name in\n[`eslint-plugin-query`](https://github.com/brettz9/eslint-plugin-query)\nin that this rule always looks for a comment above a structure (whether or not\nyou have a `comment` condition).\n\nThis rule might be especially useful with [`overrides`](https://eslint.org/docs/user-guide/configuring/configuration-files#how-do-overrides-work)\nwhere you need only require tags and/or types within specific directories\n(e.g., to enforce that a plugins or locale directory always has a certain form\nof export and comment therefor).\n\nIn addition to being generally useful for precision in requiring contexts,\nit is hoped that the ability to specify required tags on structures can\nbe used for requiring `@type` or other types for a minimalist yet adequate\nspecification of types which can be used to compile JavaScript+JSDoc (JJ)\nto WebAssembly (e.g., by converting it to TypeSscript and then using\nAssemblyScript to convert to WebAssembly). (It may be possible that one\nwill need to require types with certain structures beyond function\ndeclarations and the like, as well as optionally requiring specification\nof number types.)\n\nNote that you can use selectors which make use of negators like `:not()`\nincluding with asterisk, e.g., `*:not(FunctionDeclaration)` to indicate types\nwhich are not adequate to satisfy a condition, e.g.,\n`FunctionDeclaration:not(FunctionDeclaration[id.name=\"ignoreMe\"])` would\nnot report if there were only a function declaration of the name \"ignoreMe\"\n(though it would report by function declarations of other names).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-missing-syntax-options-17\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-missing-syntax-options-17\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-missing-syntax-options-17-contexts-3\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-missing-syntax-options-17-contexts-3\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\n\nUse the `minimum` property (defaults to 1) to indicate how many are required\nfor the rule to be reported.\n\nUse the `message` property to indicate the specific error to be shown when an\nerror is reported for that context being found missing. You may use\n`{{context}}` and `{{comment}}` with such messages.\n\nSet to `\"any\"` if you want the rule to apply to any jsdoc block throughout\nyour files (as is necessary for finding function blocks not attached to a\nfunction declaration or expression, i.e., `@callback` or `@function` (or its\naliases `@func` or `@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|None except those indicated by `contexts`|\n|Tags|Any if indicated by AST|\n|Recommended|false|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"}]}]\n// Message: Syntax is required: FunctionDeclaration with JsdocBlock[postDelimiter=\"\"]:has(JsdocTypeUnion > JsdocTypeName[value=\"Foo\"]:nth-child(1))\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"}]}]\n// Message: Syntax is required: FunctionDeclaration with JsdocBlock[postDelimiter=\"\"]:has(JsdocTypeUnion > JsdocTypeName[value=\"Foo\"]:nth-child(1))\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"any\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\":function\"}]}]\n// Message: Syntax is required: :function with JsdocBlock[postDelimiter=\"\"]:has(JsdocTypeUnion > JsdocTypeName[value=\"Foo\"]:nth-child(1))\n\n/**\n * @private\n * Object holding values of some custom enum\n */\nconst MY_ENUM = Object.freeze({\n  VAL_A: \"myvala\"\n} as const);\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[tag=/private|protected/])\",\"context\":\":declaration\",\"message\":\"Requiring private/protected tags here\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[tag=\\\"enum\\\"])\",\"context\":\"any\",\"message\":\"@enum required on declarations\"}]}]\n// Message: @enum required on declarations\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"message\":\"Problematically missing function syntax: `{{context}}` with `{{comment}}`.\"}]}]\n// Message: Problematically missing function syntax: `FunctionDeclaration` with `JsdocBlock[postDelimiter=\"\"]:has(JsdocTypeUnion > JsdocTypeName[value=\"Foo\"]:nth-child(1))`.\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[\"FunctionDeclaration\"]}]\n// Message: Syntax is required: FunctionDeclaration\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// Message: Rule `no-missing-syntax` is missing a `context` option.\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"minimum\":2}]}]\n// Message: Syntax is required: FunctionDeclaration with JsdocBlock[postDelimiter=\"\"]:has(JsdocTypeUnion > JsdocTypeName[value=\"Bar\"]:nth-child(1))\n\n/**\n * @param ab\n * @param cd\n */\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Require names matching `/^opt_/i`.\"}]}]\n// Message: Require names matching `/^opt_/i`.\n\n/**\n * @param ab\n * @param cd\n */\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"message\":\"Require names matching `/^opt_/i`.\"}]}]\n// Message: Require names matching `/^opt_/i`.\n\n/**\n * @param ab\n * @param cd\n */\nfunction quux () {}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Require names matching `/^opt_/i`.\"}]}]\n// Message: Require names matching `/^opt_/i`.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"}]}]\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n\n/**\n * @implements {Bar|Foo}\n */\nfunction bar () {\n\n}\n\n/**\n * @implements {Bar|Foo}\n */\nfunction baz () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"minimum\":2}]}]\n\n/**\n * @param opt_a\n * @param opt_b\n */\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Require names matching `/^opt_/i`.\"}]}]\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction quux () {}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Require names matching `/^opt_/i`.\"}]}]\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction quux () {}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"message\":\"Require names matching `/^opt_/i`.\"}]}]\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(2))\",\"context\":\"FunctionDeclaration\"}]}]\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-missing-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"any\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(2))\",\"context\":\"FunctionDeclaration\"}]}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-multi-asterisks\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-multi-asterisks\"></a>\n### <code>no-multi-asterisks</code>\n\nPrevents use of multiple asterisks at the beginning of lines.\n\nNote that if you wish to prevent multiple asterisks at the very beginning of\nthe jsdoc block, you should use `no-bad-blocks` (as that is not proper jsdoc\nand that rule is for catching blocks which only seem like jsdoc).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18-allowwhitespace-defaults-to-false\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18-allowwhitespace-defaults-to-false\"></a>\n##### <code>allowWhitespace</code> (defaults to <code>false</code>)\n\nSet to `true` if you wish to allow asterisks after a space (as with Markdown):\n\n```js\n/**\n * *bold* text\n */\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18-preventatmiddlelines-defaults-to-true\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18-preventatmiddlelines-defaults-to-true\"></a>\n##### <code>preventAtMiddleLines</code> (defaults to <code>true</code>)\n\nPrevent the likes of this:\n\n```js\n/**\n *\n **\n */\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18-preventatend-defaults-to-true\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-multi-asterisks-options-18-preventatend-defaults-to-true\"></a>\n##### <code>preventAtEnd</code> (defaults to <code>true</code>)\n\nPrevent the likes of this:\n\n```js\n/**\n *\n *\n **/\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|(any)|\n|Recommended|true|\n|Settings||\n|Options|`preventAtEnd`, `preventAtMiddleLines`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n **\n */\n// Message: Should be no multiple asterisks on middle lines.\n\n/**\n *\n **\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtMiddleLines\":true}]\n// Message: Should be no multiple asterisks on middle lines.\n\n/**\n *\n **\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtEnd\":false}]\n// Message: Should be no multiple asterisks on middle lines.\n\n/**\n * With a description\n * @tag {SomeType} and a tag with details\n **\n */\n// Message: Should be no multiple asterisks on middle lines.\n\n/**\n **\n *\n */\n// Message: Should be no multiple asterisks on middle lines.\n\n/**\n * Desc.\n *\n **/\n// Message: Should be no multiple asterisks on end lines.\n\n/**\n * Desc.\n *\n **/\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtEnd\":true}]\n// Message: Should be no multiple asterisks on end lines.\n\n/**\n * Desc.\n *\n abc * **/\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtEnd\":true}]\n// Message: Should be no multiple asterisks on end lines.\n\n/**\n * Desc.\n *\n **/\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtMiddleLines\":false}]\n// Message: Should be no multiple asterisks on end lines.\n\n/** Desc. **/\n// Message: Should be no multiple asterisks on end lines.\n\n/** @someTag name desc. **/\n// Message: Should be no multiple asterisks on end lines.\n\n/** abc * */\n// Message: Should be no multiple asterisks on end lines.\n\n/**\n * Preserve user's whitespace when fixing (though one may also\n *   use an align rule)\n *\n * */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtEnd\":true}]\n// Message: Should be no multiple asterisks on end lines.\n\n/**\n * The method does 2 things:\n * * Thing 1\n * * Thing 2\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"allowWhitespace\":false}]\n// Message: Should be no multiple asterisks on middle lines.\n\n/**\n * This muti-line comment contains some\n * *non-standard bold* syntax\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"allowWhitespace\":false}]\n// Message: Should be no multiple asterisks on middle lines.\n\n/** Desc. **/\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"allowWhitespace\":true}]\n// Message: Should be no multiple asterisks on end lines.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n * Desc. ***\n */\n\n/**\n * Desc. ***\n *\n */\n\n/**\n * Desc.\n *\n * sth */\n\n/**\n **\n *\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtMiddleLines\":false}]\n\n/**\n *\n *\n **/\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"preventAtEnd\":false}]\n\n/**\n * With a desc.\n * and ***\n */\n\n/**\n * and ***\n * With a desc.\n */\n\n/**\n * With a desc.\n * With a desc.\n * Desc. */\n\n/**\n * With a description\n * @tag {SomeType} and a tag with details\n *\n */\n\n/** abc */\nfunction foo() {\n    //\n}\n\n/** foo */\nfunction foo(): void {\n    //\n}\n\n/** @aTag abc */\nfunction foo() {\n    //\n}\n\n/**\n * **Bold**\n */\n\n/**\n * Preserve user's bold statement when fixing.\n *\n * **Bold example:** Hi there.\n */\n\n/**\n * The method does 2 things:\n * * Thing 1\n * * Thing 2\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"allowWhitespace\":true}]\n\n/**\n * This muti-line comment contains some\n * *non-standard bold* syntax\n */\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"allowWhitespace\":true}]\n\n/** abc */\nfunction foo() {\n    //\n}\n// \"jsdoc/no-multi-asterisks\": [\"error\"|\"warn\", {\"allowWhitespace\":true}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-restricted-syntax\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-restricted-syntax\"></a>\n### <code>no-restricted-syntax</code>\n\nReports when certain comment structures are present.\n\nNote that this rule differs from ESLint's [no-restricted-syntax](https://eslint.org/docs/rules/no-restricted-syntax)\nrule in expecting values within a single options object's\n`contexts` property, and with the property `context` being used in place of\n`selector` (as well as allowing for `comment`). The format also differs from\nthe format expected by [`eslint-plugin-query`](https://github.com/brettz9/eslint-plugin-query).\n\nUnlike those rules, this is specific to finding comments attached to\nstructures, (whether or not you add a specific `comment` condition).\n\nNote that if your parser supports comment AST (as [jsdoc-eslint-parser](https://github.com/brettz9/jsdoc-eslint-parser)\nis designed to do), you can just use ESLint's rule.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-restricted-syntax-options-19\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-restricted-syntax-options-19\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-restricted-syntax-options-19-contexts-4\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-restricted-syntax-options-19-contexts-4\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\n\nUse the `message` property to indicate the specific error to be shown when an\nerror is reported for that context being found.\n\nSet to `\"any\"` if you want the rule to apply to any jsdoc block throughout\nyour files (as is necessary for finding function blocks not attached to a\nfunction declaration or expression, i.e., `@callback` or `@function` (or its\naliases `@func` or `@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|None except those indicated by `contexts`|\n|Tags|Any if indicated by AST|\n|Recommended|false|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[\"FunctionDeclaration\"]}]\n// Message: Syntax is restricted: FunctionDeclaration\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"FunctionDeclaration\",\"message\":\"Oops: `{{context}}`.\"}]}]\n// Message: Oops: `FunctionDeclaration`.\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"}]}]\n// Message: Syntax is restricted: FunctionDeclaration with JsdocBlock[postDelimiter=\"\"]:has(JsdocTypeUnion > JsdocTypeName[value=\"Bar\"]:nth-child(1))\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"message\":\"The foo one: {{context}}.\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"message\":\"The bar one: {{context}}.\"}]}]\n// Message: The bar one: FunctionDeclaration.\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"message\":\"The bar one: {{context}}.\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\",\"message\":\"The foo one: {{context}}.\"}]}]\n// Message: The bar one: FunctionDeclaration.\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// Message: Rule `no-restricted-syntax` is missing a `context` option.\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction a () {}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"FunctionDeclaration\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n// Message: Only allowing names not matching `/^opt_/i`.\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction a () {}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n// Message: Only allowing names not matching `/^opt_/i`.\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction a () {}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n// Message: Only allowing names not matching `/^opt_/i`.\n\n/**\n * @param opt_a\n * @param opt_b\n */\nfunction a () {}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/not-this/])\",\"context\":\"any\",\"message\":\"Only allowing names not matching `/^not-this/i`.\"},{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n// Message: Only allowing names not matching `/^opt_/i`.\n\n/**\n * @param opt_a\n * @param opt_b\n */\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n// Message: Only allowing names not matching `/^opt_/i`.\n\n/**\n * @enum {String}\n * Object holding values of some custom enum\n */\nconst MY_ENUM = Object.freeze({\n  VAL_A: \"myvala\"\n} as const);\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag ~ JsdocTag[tag=/private|protected/])\",\"context\":\"any\",\"message\":\"Access modifier tags must come first\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[tag=\\\"enum\\\"])\",\"context\":\":declaration\",\"message\":\"@enum not allowed on declarations\"}]}]\n// Message: @enum not allowed on declarations\n\n/** @type {React.FunctionComponent<{ children: React.ReactNode }>}*/\nconst MyComponent = ({ children }) => {\n   return children;\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[tag=\\\"type\\\"]:has([value=/FunctionComponent/]))\",\"context\":\"any\",\"message\":\"The `FunctionComponent` type is not allowed. Please use `FC` instead.\"}]}]\n// Message: The `FunctionComponent` type is not allowed. Please use `FC` instead.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[\"FunctionExpression\"]}]\n\n/**\n * @implements {Bar|Foo}\n */\nfunction quux () {\n\n}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Foo\\\"]:nth-child(1))\",\"context\":\"FunctionDeclaration\"}]}]\n\n/**\n * @param ab\n * @param cd\n */\nfunction a () {}\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n\n/**\n * @param ab\n * @param cd\n */\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"context\":\"any\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n\n/**\n * @param ab\n * @param cd\n */\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[name=/opt_/])\",\"message\":\"Only allowing names not matching `/^opt_/i`.\"}]}]\n\n/**\n * @enum {String}\n * Object holding values of some custom enum\n */\nconst MY_ENUM = Object.freeze({\n  VAL_A: \"myvala\"\n} as const);\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag ~ JsdocTag[tag=/private|protected/])\",\"context\":\"any\",\"message\":\"Access modifier tags must come first\"},{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[tag=\\\"enum\\\"])\",\"context\":\":declaration:not(TSEnumDeclaration):not(:has(ObjectExpression)), :function\",\"message\":\"@enum is only allowed on potential enum types\"}]}]\n\n/**\n * @param {(...args: any[]) => any} fn\n * @returns {(...args: any[]) => any}\n */\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock:has(JsdocTag[tag=\\\"type\\\"]:has([value=/FunctionComponent/]))\",\"context\":\"any\",\"message\":\"The `FunctionComponent` type is not allowed. Please use `FC` instead.\"}]}]\n\n/** Does something very important. */\nfunction foo(): string;\n// \"jsdoc/no-restricted-syntax\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[endLine=0][description!=/^\\\\S[\\\\s\\\\S]*\\\\S\\\\s$/]\"}]}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-types\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-types\"></a>\n### <code>no-types</code>\n\nThis rule reports types being used on `@param` or `@returns`.\n\nThe rule is intended to prevent the indication of types on tags where\nthe type information would be redundant with TypeScript.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-types-options-20\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-types-options-20\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-types-options-20-contexts-5\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-types-options-20-contexts-5\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`param`, `returns`|\n|Aliases|`arg`, `argument`, `return`|\n|Recommended|false|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Types are not permitted on @param.\n\nclass quux {\n  /**\n   * @param {number} foo\n   */\n  bar (foo) {\n\n  }\n}\n// Message: Types are not permitted on @param.\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/no-types\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Types are not permitted on @param.\n\nclass quux {\n  /**\n   * @param {number} foo\n   */\n  quux (foo) {\n\n  }\n}\n// \"jsdoc/no-types\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Types are not permitted on @param.\n\n/**\n * @function\n * @param {number} foo\n */\n// \"jsdoc/no-types\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Types are not permitted on @param.\n\n/**\n * @callback\n * @param {number} foo\n */\n// \"jsdoc/no-types\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Types are not permitted on @param.\n\n/**\n * @returns {number}\n */\nfunction quux () {\n\n}\n// Message: Types are not permitted on @returns.\n\n/**\n * Beep\n * Boop\n *\n * @returns {number}\n */\nfunction quux () {\n\n}\n// Message: Types are not permitted on @returns.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n */\n// \"jsdoc/no-types\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n * @param {number} foo\n */\n\n/**\n * @callback\n * @param {number} foo\n */\n\n/*** Oops that's too many asterisks by accident **/\nfunction a () {}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-undefined-types\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-undefined-types\"></a>\n### <code>no-undefined-types</code>\n\nChecks that types in jsdoc comments are defined. This can be used to check\nunimported types.\n\nWhen enabling this rule, types in jsdoc comments will resolve as used\nvariables, i.e. will not be marked as unused by `no-unused-vars`.\n\nIn addition to considering globals found in code (or in ESLint-indicated\n`globals`) as defined, the following tags will also be checked for\nname(path) definitions to also serve as a potential \"type\" for checking\nthe tag types in the table below:\n\n`@callback`, `@class` (or `@constructor`), `@constant` (or `@const`),\n`@event`, `@external` (or `@host`), `@function` (or `@func` or `@method`),\n`@interface`, `@member` (or `@var`), `@mixin`, `@name`, `@namespace`,\n`@template` (for \"closure\" or \"typescript\" `settings.jsdoc.mode` only),\n`@typedef`.\n\nThe following tags will also be checked but only when the mode is `closure`:\n\n`@package`, `@private`, `@protected`, `@public`, `@static`\n\nThe following types are always considered defined.\n\n- `null`, `undefined`, `void`, `string`, `boolean`, `object`,\n  `function`, `symbol`\n- `number`, `bigint`, `NaN`, `Infinity`\n- `any`, `*`, `never`, `unknown`, `const`\n- `this`, `true`, `false`\n- `Array`, `Object`, `RegExp`, `Date`, `Function`\n\nNote that preferred types indicated within `settings.jsdoc.preferredTypes` will\nalso be assumed to be defined.\n\nAlso note that if there is an error [parsing](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser)\ntypes for a tag, the function will silently ignore that tag, leaving it to\nthe `valid-types` rule to report parsing errors.\n\nIf you define your own tags, you can use `settings.jsdoc.structuredTags`\nto indicate that a tag's `name` is \"namepath-defining\" (and should prevent\nreporting on use of that namepath elsewhere) and/or that a tag's `type` is\n`false` (and should not be checked for types). If the `type` is an array, that\narray's items will be considered as defined for the purposes of that tag.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-no-undefined-types-options-21\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-no-undefined-types-options-21\"></a>\n#### Options\n\nAn option object may have the following key:\n\n- `definedTypes` - This array can be populated to indicate other types which\n  are automatically considered as defined (in addition to globals, etc.).\n  Defaults to an empty array.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`augments`, `class`, `constant`, `enum`, `implements`, `member`, `module`, `namespace`, `param`, `property`, `returns`, `throws`, `type`, `typedef`, `yields`|\n|Aliases|`constructor`, `const`, `extends`, `var`, `arg`, `argument`, `prop`, `return`, `exception`, `yield`|\n|Closure-only|`package`, `private`, `protected`, `public`, `static`|\n|Recommended|true|\n|Options|`definedTypes`|\n|Settings|`preferredTypes`, `mode`, `structuredTags`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"HerType\":1000}}}\n// Message: Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.\n\n/**\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"HerType\":false}}}\n// Message: The type 'HerType' is undefined.\n\n/**\n * @param {strnig} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n// Message: The type 'strnig' is undefined.\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n */\nfunction quux(foo, bar) {\n\n}\n// \"jsdoc/no-undefined-types\": [\"error\"|\"warn\", {\"definedTypes\":[\"MyType\"]}]\n// Message: The type 'HisType' is undefined.\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"hertype\":{\"replacement\":\"HerType\"}}}}\n// \"jsdoc/no-undefined-types\": [\"error\"|\"warn\", {\"definedTypes\":[\"MyType\"]}]\n// Message: The type 'HisType' is undefined.\n\n /**\n  * @param {MyType} foo - Bar.\n  * @param {HisType} bar - Foo.\n  * @param {HerType} baz - Foo.\n  */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"hertype\":{\"replacement\":false},\"histype\":\"HisType\"}}}\n// \"jsdoc/no-undefined-types\": [\"error\"|\"warn\", {\"definedTypes\":[\"MyType\"]}]\n// Message: The type 'HerType' is undefined.\n\n/**\n * @template TEMPLATE_TYPE\n * @param {WRONG_TEMPLATE_TYPE} bar\n */\nfunction foo (bar) {\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: The type 'WRONG_TEMPLATE_TYPE' is undefined.\n\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  bar () {\n  }\n}\n// Message: The type 'TEMPLATE_TYPE' is undefined.\n\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  invalidTemplateReference () {\n  }\n}\n\n/**\n * @template TEMPLATE_TYPE\n */\nclass Bar {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  validTemplateReference () {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n// Message: The type 'TEMPLATE_TYPE' is undefined.\n\n/**\n * @type {strnig}\n */\nvar quux = {\n\n};\n// Message: The type 'strnig' is undefined.\n\n/**\n * @template TEMPLATE_TYPE_A, TEMPLATE_TYPE_B\n */\nclass Foo {\n  /**\n   * @param {TEMPLATE_TYPE_A} baz\n   * @return {TEMPLATE_TYPE_B}\n   */\n  bar (baz) {\n  }\n}\n// Message: The type 'TEMPLATE_TYPE_A' is undefined.\n\n/**\n * @param {...VAR_TYPE} varargs\n */\nfunction quux (varargs) {\n}\n// Message: The type 'VAR_TYPE' is undefined.\n\n/**\n * @this {Navigator}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: The type 'Navigator' is undefined.\n\n/**\n * @export {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: The type 'SomeType' is undefined.\n\n/**\n * @aCustomTag {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":true}}}}\n// Message: The type 'SomeType' is undefined.\n\n/**\n * @aCustomTag {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":[\"aType\",\"anotherType\"]}}}}\n// Message: The type 'SomeType' is undefined.\n\n/**\n * @namepathDefiner SomeType\n */\n/**\n * @type {SomeType}\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"namepathDefiner\":{\"name\":\"namepath-referencing\"}}}}\n// Message: The type 'SomeType' is undefined.\n\n/**\n * @namepathDefiner SomeType\n */\n/**\n * @type {SomeType}\n */\n// Message: The type 'SomeType' is undefined.\n\n/**\n * @template abc TEMPLATE_TYPE\n * @param {TEMPLATE_TYPE} bar\n */\nfunction foo (bar) {\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: The type 'TEMPLATE_TYPE' is undefined.\n\n/**\n * @suppress {visibility}\n */\nfunction foo () {\n}\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: The type 'visibility' is undefined.\n\n/**\n* @typedef Todo\n* @property description\n* @property otherStuff\n*/\n/**\n * @type {Omit<Todo, \"description\">}\n */\nconst a = new Todo();\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: The type 'Omit' is undefined.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {string} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n\n/**\n * @param {Promise} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n\nclass MyClass {}\n\n/**\n * @param {MyClass} foo - Bar.\n */\nfunction quux(foo) {\n  console.log(foo);\n}\n\nquux(0);\n\nconst MyType = require('my-library').MyType;\n\n/**\n * @param {MyType} foo - Bar.\n */\n  function quux(foo) {\n\n}\n\nconst MyType = require('my-library').MyType;\n\n/**\n * @param {MyType} foo - Bar.\n */\n  function quux(foo) {\n\n}\n\nconst MyType = require('my-library').MyType;\n\n/**\n * @param {MyType} foo - Bar.\n */\n  function quux(foo) {\n\n}\n\nimport {MyType} from 'my-library';\n\n/**\n * @param {MyType} foo - Bar.\n * @param {object<string, number>} foo\n * @param {Array<string>} baz\n */\n  function quux(foo, bar, baz) {\n\n}\n\n/*globals MyType*/\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n */\n  function quux(foo, bar) {\n\n}\n\n/**\n * @typedef {object} hello\n * @property {string} a - a.\n */\n\n/**\n * @param {hello} foo\n */\nfunction quux(foo) {\n\n}\n\n/**\n * @param {Array<syntaxError} foo\n */\nfunction quux(foo) {\n\n}\n\n/**\n * Callback test.\n *\n * @callback addStuffCallback\n * @param {String} sum - An test integer.\n */\n/**\n * Test Eslint.\n *\n * @param {addStuffCallback} callback - A callback to run.\n */\nfunction testFunction(callback) {\n  callback();\n}\n\n/**\n *\n *\n */\nfunction foo () {\n\n}\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n */\nfunction quux(foo, bar) {\n\n}\n// \"jsdoc/no-undefined-types\": [\"error\"|\"warn\", {\"definedTypes\":[\"MyType\",\"HisType\"]}]\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"hertype\":{\"replacement\":\"HerType\"},\"histype\":\"HisType\"}}}\n// \"jsdoc/no-undefined-types\": [\"error\"|\"warn\", {\"definedTypes\":[\"MyType\"]}]\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {\"jsdoc\":{\"preferredTypes\":{\"hertype\":{\"replacement\":\"HerType<>\"},\"histype\":\"HisType.<>\"}}}\n// \"jsdoc/no-undefined-types\": [\"error\"|\"warn\", {\"definedTypes\":[\"MyType\"]}]\n\n/**\n * @template TEMPLATE_TYPE\n * @param {TEMPLATE_TYPE} bar\n * @return {TEMPLATE_TYPE}\n */\nfunction foo (bar) {\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template TEMPLATE_TYPE\n */\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  bar () {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template TEMPLATE_TYPE\n */\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  bar () {}\n\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  baz () {}\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template TEMPLATE_TYPE_A, TEMPLATE_TYPE_B\n */\nclass Foo {\n  /**\n   * @param {TEMPLATE_TYPE_A} baz\n   * @return {TEMPLATE_TYPE_B}\n   */\n  bar (baz) {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template TEMPLATE_TYPE_A, TEMPLATE_TYPE_B - Some description\n */\nclass Foo {\n  /**\n   * @param {TEMPLATE_TYPE_A} baz\n   * @return {TEMPLATE_TYPE_B}\n   */\n  bar (baz) {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/****/\n\n/* */\n\n/*** */\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @typedef {object} BaseObject\n */\n/**\n * Run callback when hooked method is called.\n *\n * @template {BaseObject} T\n * @param {T} obj - object whose method should be hooked.\n * @param {string} method - method which should be hooked.\n * @param {(sender: T) => void} callback - callback which should\n * be called when the hooked method was invoked.\n */\nfunction registerEvent(obj, method, callback) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n /**\n * @param {...} varargs\n */\nfunction quux (varargs) {\n}\n\n/**\n * @param {...number} varargs\n */\nfunction quux (varargs) {\n}\n\nclass Navigator {}\n/**\n * @this {Navigator}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\nclass SomeType {}\n/**\n * @export {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template T\n * @param {T} arg\n */\nfunction example(arg) {\n\n  /** @param {T} */\n  function inner(x) {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\nconst init = () => {\n  /**\n   * Makes request\n   * @returns {Promise}\n   */\n  function request() {\n    return Promise.resolve('success');\n  }\n};\n\n/** Gets a Promise resolved with a given value.\n *\n * @template ValueType\n * @param {ValueType} value Value to resolve.\n * @returns {Promise<ValueType>} Promise resolved with value.\n */\nexports.resolve1 = function resolve1(value) {\n  return Promise.resolve(value);\n};\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * A function returning the same type as its argument.\n *\n * @template ValueType\n * @typedef {ValueType} ValueFunc\n */\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @aCustomTag {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":false}}}}\n\n/**\n * @aCustomTag {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":[\"aType\",\"SomeType\"]}}}}\n\n/**\n * @namepathDefiner SomeType\n */\n/**\n * @type {SomeType}\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"namepathDefiner\":{\"name\":\"namepath-defining\"}}}}\n\nclass Test {\n  /**\n   * Method.\n   *\n   * @returns {this} Return description.\n   */\n  method (): this {\n    return this;\n  }\n}\n\n/**\n * Bad types ignored here and handled instead by `valid-types`.\n * @param {string(} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n\n/**\n * @template T\n * @param {T} arg\n * @returns {[T]}\n */\nfunction genericFunctionExample(arg) {\n  const result = /** @type {[T]} */ (new Array());\n  result[0] = arg;\n  return result;\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/** @typedef QDigestNode */\nclass A {\n  /**\n   * @template {object} T\n   * @param {(node: QDigestNode) => T} callback\n   * @returns {T[]}\n   */\n  map(callback) {\n    /** @type {T[]} */\n    let vals;\n    return vals;\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @template T\n * @param {T} arg\n */\nfunction example(arg) {\n\n  /** @param {T} */\n  function inner(x) {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @suppress {visibility}\n */\nfunction foo () {\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template T\n */\nexport class Foo {\n  // cast to T\n  getType() {\n    const x = \"hello\";\n    const y = /** @type {T} */ (x);\n    return y;\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @type {const}\n */\nconst a = 'string';\n\n/**\n* @typedef Todo\n* @property description\n* @property otherStuff\n*/\n/**\n * @type {Omit<Todo, \"description\">}\n */\nconst a = new Todo();\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @template A, [B=SomeDefault]\n */\nclass Foo {\n  /**\n   * @param {A} baz\n   * @return {B}\n   */\n  bar (baz) {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-asterisk-prefix\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-asterisk-prefix\"></a>\n### <code>require-asterisk-prefix</code>\n\nRequires that each JSDoc line starts with an `*`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-asterisk-prefix-options-22\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-asterisk-prefix-options-22\"></a>\n#### Options\n\nThis rule allows an optional string argument. If it is `\"always\"` then a\nproblem is raised when there is no asterisk prefix on a given jsdoc line. If\nit is `\"never\"` then a problem is raised when there is an asterisk present.\nThe default value is `\"always\"`. You may also set the default to `\"any\"`\nand use the `tags` option to apply to specific tags only.\n\nAfter the string option, one may add an object with the following.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-asterisk-prefix-options-22-tags-3\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-asterisk-prefix-options-22-tags-3\"></a>\n##### <code>tags</code>\n\nIf you want different values to apply to specific tags, you may use\nthe `tags` option object. The keys are `always`, `never`, or `any` and\nthe values are arrays of tag names or the special value `*description`\nwhich applies to the main jsdoc block description.\n\n```js\n{\n  'jsdoc/require-asterisk-prefix': ['error', 'always', {\n    tags: {\n      always: ['*description'],\n      any: ['example', 'license'],\n      never: ['copyright']\n    }\n  }]\n}\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|All or as limited by the `tags` option|\n|Options|(a string matching `\"always\"|\"never\"` and optional object with `tags`)|\n\nThe following patterns are considered problems:\n\n````js\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc line to have the prefix.\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"any\",{\"tags\":{\"always\":[\"param\"]}}]\n// Message: Expected JSDoc line to have the prefix.\n\n\n/**\n * Desc\n\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc line to have the prefix.\n\n\n/**\n *\n Desc\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc line to have the prefix.\n\n\n/**\n * Desc\n *\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc line to have no prefix.\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"any\":[\"someOtherTag\"]}}]\n// Message: Expected JSDoc line to have the prefix.\n\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"always\":[\"someOtherTag\"]}}]\n// Message: Expected JSDoc line to have no prefix.\n\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"never\":[\"param\"]}}]\n// Message: Expected JSDoc line to have no prefix.\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"always\":[\"param\"]}}]\n// Message: Expected JSDoc line to have the prefix.\n\n/**\n  @param {Number} foo\n */function quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc line to have the prefix.\n\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc line to have no prefix.\n\n/**\n  *@param {Number} foo\n */function quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected JSDoc line to have no prefix.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Desc\n *\n * @param {Number} foo\n *   This is more comment.\n */\nfunction quux (foo) {\n\n}\n\n/**\n * Desc\n *\n * @param {{\n * foo: Bar,\n * bar: Baz\n * }} foo\n *\n */\nfunction quux (foo) {\n\n}\n\n/*  <- JSDoc must start with 2 stars.\n So this is unchecked.\n */\nfunction quux (foo) {}\n\n/** @param {Number} foo */\nfunction quux (foo) {\n  // with spaces\n}\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"any\":[\"param\"]}}]\n\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"always\":[\"param\"]}}]\n\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"never\":[\"someOtherTag\"]}}]\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"never\":[\"param\"]}}]\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"always\":[\"someOtherTag\"]}}]\n\n\n/**\n * Desc\n *\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"any\":[\"*description\"]}}]\n\n\n/**\n * Desc\n\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"any\":[\"*description\"]}}]\n\n\n/**\n @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// \"jsdoc/require-asterisk-prefix\": [\"error\"|\"warn\", \"any\",{\"tags\":{\"always\":[\"someOtherTag\"]}}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description-complete-sentence\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description-complete-sentence\"></a>\n### <code>require-description-complete-sentence</code>\n\nRequires that block description, explicit `@description`, and\n`@param`/`@returns` tag descriptions are written in complete sentences, i.e.,\n\n* Description must start with an uppercase alphabetical character.\n* Paragraphs must start with an uppercase alphabetical character.\n* Sentences must end with a period.\n* Every line in a paragraph (except the first) which starts with an uppercase\n  character must be preceded by a line ending with a period.\n* A colon or semi-colon followed by two line breaks is still part of the\n  containing paragraph (unlike normal dual line breaks).\n* Text within inline tags `{...}` are not checked for sentence divisions.\n* Periods after items within the `abbreviations` option array are not treated\n  as sentence endings.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23-tags-4\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23-tags-4\"></a>\n##### <code>tags</code>\n\nIf you want additional tags to be checked for their descriptions, you may\nadd them within this option.\n\n```js\n{\n  'jsdoc/require-description-complete-sentence': ['error', {\n    tags: ['see', 'copyright']\n  }]\n}\n```\n\nThe tags `@param`/`@arg`/`@argument` and `@property`/`@prop` will be properly\nparsed to ensure that the checked \"description\" text includes only the text\nafter the name.\n\nAll other tags will treat the text following the tag name, a space, and\nan optional curly-bracketed type expression (and another space) as part of\nits \"description\" (e.g., for `@returns {someType} some description`, the\ndescription is `some description` while for `@some-tag xyz`, the description\nis `xyz`).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23-abbreviations\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23-abbreviations\"></a>\n##### <code>abbreviations</code>\n\nYou can provide an `abbreviations` options array to avoid such strings of text\nbeing treated as sentence endings when followed by dots. The `.` is not\nnecessary at the end of the array items.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23-newlinebeforecapsassumesbadsentenceend\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-23-newlinebeforecapsassumesbadsentenceend\"></a>\n##### <code>newlineBeforeCapsAssumesBadSentenceEnd</code>\n\nWhen `false` (the new default), we will not assume capital letters after\nnewlines are an incorrect way to end the sentence (they may be proper\nnouns, for example).\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|doc block, `param`, `returns`, `description`, `property`, `summary`, `file`, `classdesc`, `todo`, `deprecated`, `throws`, 'yields' and others added by `tags`|\n|Aliases|`arg`, `argument`, `return`, `desc`, `prop`, `fileoverview`, `overview`, `exception`, `yield`|\n|Recommended|false|\n|Options|`tags`, `abbreviations`, `newlineBeforeCapsAssumesBadSentenceEnd`|\nThe following patterns are considered problems:\n\n````js\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * foo?\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * @description foo.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo)\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * `foo` is a variable\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * Foo.\n *\n * foo.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * тест.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * Foo\n * Bar.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"newlineBeforeCapsAssumesBadSentenceEnd\":true}]\n// Message: A line of text is started with an uppercase character, but preceding line does not end the sentence.\n\n/**\n * Foo.\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo.\n *\n * @param foo bar\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * {@see Foo.bar} buz\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo.\n *\n * @returns {number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo.\n *\n * @returns foo.\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * lorem ipsum dolor sit amet, consectetur adipiscing elit. pellentesque elit diam,\n * iaculis eu dignissim sed, ultrices sed nisi. nulla at ligula auctor, consectetur neque sed,\n * tincidunt nibh. vivamus sit amet vulputate ligula. vivamus interdum elementum nisl,\n * vitae rutrum tortor semper ut. morbi porta ante vitae dictum fermentum.\n * proin ut nulla at quam convallis gravida in id elit. sed dolor mauris, blandit quis ante at,\n * consequat auctor magna. duis pharetra purus in porttitor mollis.\n */\nfunction longDescription (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * @arg {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @argument {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @return {number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Returns bar.\n *\n * @return {number} bar\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * @throws {object} Hello World\n * hello world\n*/\n// Message: Sentence must end with a period.\n\n/**\n * @summary Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @throws {SomeType} Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @see Foo\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"tags\":[\"see\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * @param foo Foo bar\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"tags\":[\"param\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * Sorry, but this isn't a complete sentence, Mr.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * Sorry, but this isn't a complete sentence Mr.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr.\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * Sorry, but this isn't a complete sentence Mr. \n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * Sorry, but this isn't a complete sentence Mr. and Mrs.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\",\"Mrs\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * This is a complete sentence. But this isn't, Mr.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * This is a complete Mr. sentence. But this isn't, Mr.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\"]}]\n// Message: Sentence must end with a period.\n\n/**\n * This is a complete Mr. sentence.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * This is fun, i.e. enjoyable, but not superlatively so, e.g. not\n * super, wonderful, etc..\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Do not have dynamic content; e.g. homepage. Here a simple unique id\n * suffices.\n */\n function quux () {\n\n }\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Implements support for the\n * Swahili voice synthesizer.\n */\nfunction speak() {\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"newlineBeforeCapsAssumesBadSentenceEnd\":true}]\n// Message: A line of text is started with an uppercase character, but preceding line does not end the sentence.\n\n/**\n * Foo.\n *\n * @template TempA, TempB foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"tags\":[\"template\"]}]\n// Message: Sentence should start with an uppercase character.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Тест.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * bar.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo. {@see Math.sin}.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo {@see Math.sin} bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo?\n *\n * Bar!\n *\n * Baz:\n *   1. Foo.\n *   2. Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello:\n * World.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello: world.\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @description Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * `foo` is a variable.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * `foo`.\n */\nfunction quux () {\n\n}\n\n/**\n * @param foo - `bar`.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {number} `foo`.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * `bar`.\n */\nfunction quux () {\n\n}\n\n/**\n * @example Foo\n */\nfunction quux () {\n\n}\n\n/**\n * @see Foo\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n\n/**\n * Foo.\n *\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"tags\":[\"param\"]}]\n\n/**\n * @param foo Foo bar.\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"tags\":[\"param\"]}]\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n\n/**\n* We stop loading Items when we have loaded:\n*\n* 1) The main Item;\n* 2) All its variants.\n*/\n\n/**\n * This method is working on 2 steps.\n *\n * | Step | Comment     |\n * |------|-------------|\n * |   1  | do it       |\n * |   2  | do it again |\n */\n\n/**\n * This is something that\n * I want to test.\n */\nfunction quux () {\n\n}\n\n/**\n * When making HTTP requests, the\n * URL is super important.\n */\nfunction quux () {\n\n}\n\n/**\n * Sorry, but this isn't a complete sentence, Mr.\n */\nfunction quux () {\n\n}\n\n/**\n * Sorry, but this isn't a complete sentence Mr..\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr.\"]}]\n\n/**\n * Sorry, but this isn't a complete sentence Mr. \n */\nfunction quux () {\n\n}\n\n/**\n * Sorry, but this isn't a complete sentence Mr. and Mrs..\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\",\"Mrs\"]}]\n\n/**\n * This is a complete sentence aMr.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\"]}]\n\n/**\n * This is a complete sentence. But this isn't, Mr.\n */\nfunction quux () {\n\n}\n\n/**\n * This is a complete Mr. Sentence. But this isn't, Mr.\n */\nfunction quux () {\n\n}\n\n/**\n * This is a complete Mr. sentence.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"Mr\"]}]\n\n/**\n * This is fun, i.e. enjoyable, but not superlatively so, e.g. not\n * super, wonderful, etc..\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"etc\",\"e.g.\",\"i.e.\"]}]\n\n\n**\n* Do not have dynamic content; e.g. homepage. Here a simple unique id\n* suffices.\n*/\nfunction quux () {\n\n}\n// \"jsdoc/require-description-complete-sentence\": [\"error\"|\"warn\", {\"abbreviations\":[\"etc\",\"e.g.\",\"i.e.\"]}]\n\n/**\n * Implements support for the\n * Swahili voice synthesizer.\n */\nfunction speak() {\n}\n\n/**\n * @param foo\n *\n * @returns {void}\n */\nexport default (foo) => {\n  foo()\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description\"></a>\n### <code>require-description</code>\n\nRequires that all functions have a description.\n\n* All functions must have an implicit description (e.g., text above tags) or\n  have the option `descriptionStyle` set to `tag` (requiring `@description`\n  (or `@desc` if that is set as your preferred tag name)).\n* Every jsdoc block description (or `@description` tag if `descriptionStyle`\n  is `\"tag\"`) must have a non-empty description that explains the purpose of\n  the method.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-description-options-24\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-description-options-24\"></a>\n#### Options\n\nAn options object may have any of the following properties:\n\n- `contexts` - Set to an array of strings representing the AST context\n  where you wish the rule to be applied (e.g., `ClassDeclaration` for ES6\n  classes). Overrides the default contexts (see below).  Set to `\"any\"` if\n  you want the rule to apply to any jsdoc block throughout your files.\n- `exemptedBy` - Array of tags (e.g., `['type']`) whose presence on the\n    document block avoids the need for a `@description`. Defaults to an\n    array with `inheritdoc`. If you set this array, it will overwrite the\n    default, so be sure to add back `inheritdoc` if you wish its presence\n    to cause exemption of the rule.\n- `descriptionStyle` - Whether to accept implicit descriptions (`\"body\"`) or\n    `@description` tags (`\"tag\"`) as satisfying the rule. Set to `\"any\"` to\n    accept either style. Defaults to `\"body\"`.\n- `checkConstructors` - A value indicating whether `constructor`s should be\n    checked. Defaults to `true`.\n- `checkGetters` - A value indicating whether getters should be checked.\n    Defaults to `true`.\n- `checkSetters` - A value indicating whether setters should be checked.\n    Defaults to `true`.\n\n|          |                                                                                                               |\n| -------- | ------------------------------------------------------------------------------------------------------------- |\n| Context  | `ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled |\n| Tags     | `description` or jsdoc block                                                                                  |\n| Aliases  | `desc`                                                                                                        |\n| Recommended | false |\n| Options  | `contexts`, `exemptedBy`, `descriptionStyle`, `checkConstructors`, `checkGetters`, `checkSetters`             |\n| Settings | `ignoreReplacesDocs`, `overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`                               |\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"any\"}]\n// Message: Missing JSDoc block description or @description declaration.\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"body\"}]\n// Message: Missing JSDoc block description.\n\n/**\n * @desc Not a blank description\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"body\"}]\n// Message: Remove the @desc tag to leave a plain block description or add additional description text above the @desc line.\n\n/**\n * @description Not a blank description\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"body\"}]\n// Message: Remove the @description tag to leave a plain block description or add additional description text above the @description line.\n\n/**\n *\n */\nclass quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nclass quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nclass quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @description\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description description.\n\n/**\n *\n */\ninterface quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nvar quux = class {\n\n};\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassExpression\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nvar quux = {\n\n};\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"ObjectExpression\"],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @someDesc\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":{\"message\":\"Please avoid `{{tagName}}`; use `{{replacement}}` instead\",\"replacement\":\"someDesc\"}}}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @someDesc description.\n\n/**\n * @description\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n// Message: Unexpected tag `@description`\n\n/**\n * @description\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"any\"}]\n// Message: Missing JSDoc block description or @description declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"exemptedBy\":[\"notPresent\"]}]\n// Message: Missing JSDoc block description.\n\nclass TestClass {\n  /**\n   *\n   */\n  constructor() { }\n}\n// Message: Missing JSDoc block description.\n\nclass TestClass {\n  /**\n   *\n   */\n  constructor() { }\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkConstructors\":true}]\n// Message: Missing JSDoc block description.\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() { }\n}\n// Message: Missing JSDoc block description.\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() { }\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n// Message: Missing JSDoc block description.\n\nclass TestClass {\n  /**\n   *\n   */\n  set Test(value) { }\n}\n// Message: Missing JSDoc block description.\n\nclass TestClass {\n  /**\n   *\n   */\n  set Test(value) { }\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkSetters\":true}]\n// Message: Missing JSDoc block description.\n\n/**\n *\n */\nclass Foo {\n    /**\n     *\n     */\n    constructor() {}\n\n    /**\n     *\n     */\n    bar() {}\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkConstructors\":false,\"contexts\":[\"MethodDefinition\"]}]\n// Message: Missing JSDoc block description.\n\n/**\n * @implements {Bar}\n */\nclass quux {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[rawType=\\\"Bar\\\"])\",\"context\":\"ClassDeclaration\"}],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * Has some\n *   description already.\n * @implements {Bar}\n */\nclass quux {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[rawType=\\\"Bar\\\"])\",\"context\":\"ClassDeclaration\"}],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @implements {Bar\n *   | Foo}\n */\nclass quux {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTypeUnion > JsdocTypeName[value=\\\"Bar\\\"]:nth-child(1))\",\"context\":\"ClassDeclaration\"}],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @implements {Bar}\n */\nclass quux {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[tag=\\\"implements\\\"])\",\"context\":\"ClassDeclaration\"}],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @implements {Bar}\n */\nclass quux {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[tag=\\\"implements\\\"])\",\"context\":\"any\"}],\"descriptionStyle\":\"tag\"}]\n// Message: Missing JSDoc @description declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\n\n/**\n * @description\n * // arbitrary description content\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n * @description\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n * @description <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @description <caption>Invalid usage</caption>\n * quux('random unwanted arg'); // results in an error\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n *\n */\nclass quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"]}]\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"exemptedBy\":[\"type\"]}]\n\n/**\n *\n */\ninterface quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\ninterface quux {\n  /**\n   * If the thing should be checked.\n   */\n  checked?: boolean\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[\"TSPropertySignature\"]}]\n\n/**\n *\n */\nvar quux = class {\n\n};\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n *\n */\nvar quux = {\n\n};\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n * Has an implicit description\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"body\"}]\n\n/**\n * Has an implicit description\n */\nfunction quux () {\n\n}\n\n/**\n * Has an implicit description\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"any\"}]\n\n/**\n * @description Has an explicit description\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"any\"}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"description\":false}}}\n\nclass TestClass {\n  /**\n   * Test.\n   */\n  constructor() { }\n}\n\nclass TestClass {\n  /**\n   *\n   */\n  constructor() { }\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkConstructors\":false}]\n\nclass TestClass {\n  /**\n   * Test.\n   */\n  get Test() { }\n}\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() { }\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkGetters\":false}]\n\nclass TestClass {\n  /**\n   * Test.\n   */\n  set Test(value) { }\n}\n\nclass TestClass {\n  /**\n   *\n   */\n  set Test(value) { }\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"checkSetters\":false}]\n\n/**\n * Multi\n * line\n */\nfunction quux () {\n\n}\n\n/** Single line */\nfunction quux () {\n\n}\n\n/** @description something */\nfunction quux () {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"descriptionStyle\":\"tag\"}]\n\n/**\n * @implements {Bar}\n */\nclass quux {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=/\\\\s{4}/]:has(JsdocTag[rawType=\\\"class\\\"])\",\"context\":\"ClassDeclaration\"}],\"descriptionStyle\":\"tag\"}]\n\n/**\n * Has some\n *   description already.\n */\nclass quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[rawType=\\\"{Bar}\\\"])\",\"context\":\"ClassDeclaration\"}],\"descriptionStyle\":\"tag\"}]\n\n/**\n * Has some\n *   description already.\n */\nclass quux {\n\n}\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[rawType=\\\"{Bar}\\\"])\",\"context\":\"any\"}],\"descriptionStyle\":\"tag\"}]\n\n/**\n * Has some\n *   description already.\n */\n// \"jsdoc/require-description\": [\"error\"|\"warn\", {\"contexts\":[{\"comment\":\"JsdocBlock[postDelimiter=\\\"\\\"]:has(JsdocTag[rawType=\\\"{Bar}\\\"])\",\"context\":\"any\"}],\"descriptionStyle\":\"tag\"}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example\"></a>\n### <code>require-example</code>\n\nRequires that all functions have examples.\n\n* All functions must have one or more `@example` tags.\n* Every example tag must have a non-empty description that explains the\n  method's usage.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25\"></a>\n#### Options\n\nThis rule has an object option.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-exemptedby\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-exemptedby\"></a>\n##### <code>exemptedBy</code>\n\nArray of tags (e.g., `['type']`) whose presence on the document\nblock avoids the need for an `@example`. Defaults to an array with\n`inheritdoc`. If you set this array, it will overwrite the default,\nso be sure to add back `inheritdoc` if you wish its presence to cause\nexemption of the rule.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-exemptnoarguments\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-exemptnoarguments\"></a>\n##### <code>exemptNoArguments</code>\n\nBoolean to indicate that no-argument functions should not be reported for\nmissing `@example` declarations.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-contexts-6\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-contexts-6\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\n(e.g., `ClassDeclaration` for ES6\nclasses). Overrides the default contexts (see below). Set to `\"any\"` if you\nwant the rule to apply to any jsdoc block throughout your files.\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-checkconstructors\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-checkconstructors\"></a>\n##### <code>checkConstructors</code>\n\nA value indicating whether `constructor`s should be checked.\nDefaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-checkgetters\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-checkgetters\"></a>\n##### <code>checkGetters</code>\n\nA value indicating whether getters should be checked. Defaults to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-checksetters\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-checksetters\"></a>\n##### <code>checkSetters</code>\n\nA value indicating whether setters should be checked. Defaults to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-options-25-enablefixer-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-options-25-enablefixer-2\"></a>\n##### <code>enableFixer</code>\n\nA boolean on whether to enable the fixer (which adds an empty `@example` block).\nDefaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-example-fixer\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-example-fixer\"></a>\n#### Fixer\n\nThe fixer for `require-example` will add an empty `@example`, but it will still\nreport a missing example description after this is added.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`example`|\n|Recommended|false|\n|Options|`exemptedBy`, `exemptNoArguments`, `contexts`, `checkConstructors`, `checkGetters`, `checkSetters`, `enableFixer`|\n|Settings|`ignoreReplacesDocs`, `overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example declaration.\n\n/**\n *\n */\nfunction quux (someParam) {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"exemptNoArguments\":true}]\n// Message: Missing JSDoc @example declaration.\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example declaration.\n\n/**\n * @example\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example description.\n\n/**\n * @constructor\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example declaration.\n\n/**\n * @constructor\n * @example\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example description.\n\n/**\n *\n */\nclass quux {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"]}]\n// Message: Missing JSDoc @example declaration.\n\n/**\n *\n */\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @example declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"exemptedBy\":[\"notPresent\"]}]\n// Message: Missing JSDoc @example declaration.\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n// Message: Missing JSDoc @example declaration.\n\nclass TestClass {\n  /**\n   * @example\n   */\n  get Test() { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n// Message: Missing JSDoc @example description.\n\nclass TestClass {\n  /**\n   *\n   */\n  set Test(value) { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkSetters\":true}]\n// Message: Missing JSDoc @example declaration.\n\nclass TestClass {\n  /**\n   * @example\n   */\n  set Test(value) { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkSetters\":true}]\n// Message: Missing JSDoc @example description.\n\n/**\n *\n */\nfunction quux (someParam) {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"enableFixer\":true}]\n// Message: Missing JSDoc @example declaration.\n\n/**\n *\n */\nfunction quux (someParam) {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"enableFixer\":false}]\n// Message: Missing JSDoc @example declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\n\n/**\n * @example\n * // arbitrary example content\n */\nfunction quux () {\n\n}\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example <caption>Invalid usage</caption>\n * quux('random unwanted arg'); // results in an error\n */\nfunction quux () {\n\n}\n\n/**\n * @constructor\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkConstructors\":false}]\n\n/**\n * @constructor\n * @example\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkConstructors\":false}]\n\nclass Foo {\n  /**\n   *\n   */\n  constructor () {\n\n  }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkConstructors\":false}]\n\n/**\n * @inheritdoc\n */\nfunction quux () {\n\n}\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"exemptedBy\":[\"type\"]}]\n\n/**\n * @example Some example code\n */\nclass quux {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"]}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"contexts\":[\"ClassDeclaration\"]}]\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() { }\n}\n\nclass TestClass {\n  /**\n   * @example\n   */\n  get Test() { }\n}\n\nclass TestClass {\n  /**\n   * @example Test\n   */\n  get Test() { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n\nclass TestClass {\n  /**\n   *\n   */\n  set Test(value) { }\n}\n\nclass TestClass {\n  /**\n   * @example\n   */\n  set Test(value) { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkSetters\":false}]\n\nclass TestClass {\n  /**\n   * @example Test\n   */\n  set Test(value) { }\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"checkSetters\":true}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-example\": [\"error\"|\"warn\", {\"exemptNoArguments\":true}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-file-overview\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-file-overview\"></a>\n### <code>require-file-overview</code>\n\nChecks that:\n\n1. All files have a `@file`, `@fileoverview`, or `@overview` tag.\n2. Duplicate file overview tags within a given file will be reported\n3. File overview tags will be reported which are not, as per\n  [the docs](https://jsdoc.app/tags-file.html), \"at the beginning of\n  the file\"–where beginning of the file is interpreted in this rule\n  as being when the overview tag is not preceded by anything other than\n  a comment.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-file-overview-options-26\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-file-overview-options-26\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-file-overview-options-26-tags-5\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-file-overview-options-26-tags-5\"></a>\n##### <code>tags</code>\n\nThe keys of this object are tag names, and the values are configuration\nobjects indicating what will be checked for these whole-file tags.\n\nEach configuration object has the following boolean keys (which default\nto `false` when this option is supplied): `mustExist`, `preventDuplicates`,\n`initialCommentsOnly`. These correspond to the three items above.\n\nWhen no `tags` is present, the default is:\n\n```json\n{\n  \"file\": {\n    \"initialCommentsOnly\": true,\n    \"mustExist\": true,\n    \"preventDuplicates\": true,\n  }\n}\n```\n\nYou can add additional tag names and/or override `file` if you supply this\noption, e.g., in place of or in addition to `file`, giving other potential\nfile global tags like `@license`, `@copyright`, `@author`, `@module` or\n`@exports`, optionally restricting them to a single use or preventing them\nfrom being preceded by anything besides comments.\n\nFor example:\n\n```js\n{\n  \"license\": {\n    \"mustExist\": true,\n    \"preventDuplicates\": true,\n  }\n}\n```\n\nThis would require one and only one `@license` in the file, though because\n`initialCommentsOnly` is absent and defaults to `false`, the `@license`\ncan be anywhere.\n\nIn the case of `@license`, you can use this rule along with the\n`check-values` rule (with its `allowedLicenses` or `licensePattern` options),\nto enforce a license whitelist be present on every JS file.\n\nNote that if you choose to use `preventDuplicates` with `license`, you still\nhave a way to allow multiple licenses for the whole page by using the SPDX\n\"AND\" expression, e.g., `@license (MIT AND GPL-3.0)`.\n\nNote that the tag names are the main jsdoc tag name, so you should use `file`\nin this configuration object regardless of whether you have configured\n`fileoverview` instead of `file` on `tagNamePreference` (i.e., `fileoverview`\nwill be checked, but you must use `file` on the configuration object).\n\n|||\n|---|---|\n|Context|Everywhere|\n|Tags|`file`; others when `tags` set|\n|Aliases|`fileoverview`, `overview`|\n|Recommended|false|\n|Options|`tags`|\n\nThe following patterns are considered problems:\n\n````js\n\n// Message: Missing @file\n\n\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"file\":{\"initialCommentsOnly\":true,\"mustExist\":true,\"preventDuplicates\":true}}}]\n// Message: Missing @file\n\n\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"file\":{\"mustExist\":true}}}]\n// Message: Missing @file\n\n\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"author\":{\"initialCommentsOnly\":false,\"mustExist\":true,\"preventDuplicates\":false}}}]\n// Message: Missing @author\n\n/**\n *\n */\n// Message: Missing @file\n\n/**\n *\n */\nfunction quux () {}\n// Message: Missing @file\n\n/**\n *\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":\"fileoverview\"}}}\n// Message: Missing @fileoverview\n\n/**\n *\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":\"overview\"}}}\n// Message: Missing @overview\n\n/**\n *\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":false}}}\n// Message: `settings.jsdoc.tagNamePreference` cannot block @file for the `require-file-overview` rule\n\n/**\n *\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":false}}}\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"file\":{\"initialCommentsOnly\":false,\"mustExist\":true,\"preventDuplicates\":false}}}]\n// Message: `settings.jsdoc.tagNamePreference` cannot block @file for the `require-file-overview` rule\n\n/**\n *\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":{\"message\":\"Don't use file\"}}}}\n// Message: `settings.jsdoc.tagNamePreference` cannot block @file for the `require-file-overview` rule\n\n/**\n * @param a\n */\nfunction quux (a) {}\n// Message: Missing @file\n\n/**\n * @param a\n */\nfunction quux (a) {}\n\n/**\n * @param b\n */\nfunction bar (b) {}\n// Message: Missing @file\n\n/**\n * @file\n */\n\n /**\n  * @file\n  */\n// Message: Duplicate @file\n\n/**\n * @copyright\n */\n\n /**\n  * @copyright\n  */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"copyright\":{\"initialCommentsOnly\":false,\"mustExist\":false,\"preventDuplicates\":true}}}]\n// Message: Duplicate @copyright\n\nfunction quux () {\n}\n/**\n * @file\n */\n// Message: @file should be at the beginning of the file\n\nfunction quux () {\n}\n/**\n * @license\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":true,\"mustExist\":false,\"preventDuplicates\":false}}}]\n// Message: @license should be at the beginning of the file\n\nfunction quux () {\n}\n/**\n * @license\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":true}}}]\n// Message: @license should be at the beginning of the file\n\n/**\n * @file\n */\n\n/**\n * @file\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"file\":{\"initialCommentsOnly\":true,\"preventDuplicates\":true}}}]\n// Message: Duplicate @file\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @file\n */\n\n/**\n * @file\n */\n\n/**\n * @file\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":true,\"preventDuplicates\":true}}}]\n\n// Ok preceded by comment\n/**\n * @file\n */\n\n/**\n * @fileoverview\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":\"fileoverview\"}}}\n\n/**\n * @overview\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"file\":\"overview\"}}}\n\n/**\n * @file Description of file\n */\n\n/**\n * @file Description of file\n */\nfunction quux () {\n}\n\n/**\n *\n */\n\nfunction quux () {\n}\n/**\n *\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":true,\"mustExist\":false,\"preventDuplicates\":false}}}]\n\nfunction quux () {\n}\n/**\n *\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":false,\"mustExist\":false,\"preventDuplicates\":false}}}]\n\nfunction quux () {\n}\n/**\n *\n */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":false,\"mustExist\":false,\"preventDuplicates\":true}}}]\n\n/**\n * @license MIT\n */\n\n var a\n\n /**\n  * @type {Array}\n  */\n// \"jsdoc/require-file-overview\": [\"error\"|\"warn\", {\"tags\":{\"license\":{\"initialCommentsOnly\":true,\"mustExist\":false,\"preventDuplicates\":false}}}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-hyphen-before-param-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-hyphen-before-param-description\"></a>\n### <code>require-hyphen-before-param-description</code>\n\nRequires (or disallows) a hyphen before the `@param` description.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-hyphen-before-param-description-options-27\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-hyphen-before-param-description-options-27\"></a>\n#### Options\n\nThis rule takes one optional string argument and an optional options object.\n\nIf the string is `\"always\"` then a problem is raised when there is no hyphen\nbefore the description. If it is `\"never\"` then a problem is raised when there\nis a hyphen before the description. The default value is `\"always\"`.\n\nThe options object may have the following properties to indicate behavior for\nother tags besides the `@param` tag (or the `@arg` tag if so set):\n\n- `tags` - Object whose keys indicate different tags to check for the\n  presence or absence of hyphens; the key value should be \"always\" or \"never\",\n  indicating how hyphens are to be applied, e.g., `{property: 'never'}`\n  to ensure `@property` never uses hyphens. A key can also be set as `*`, e.g.,\n  `'*': 'always'` to apply hyphen checking to any tag (besides the preferred\n  `@param` tag which follows the main string option setting and besides any\n  other `tags` entries).\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`param` and optionally other tags within `tags`|\n|Aliases|`arg`, `argument`; potentially `prop` or other aliases|\n|Recommended|false|\n|Options|a string matching `\"always\" or \"never\"` followed by an optional object with a `tags` property|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"*\":\"never\"}}]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo Foo.\n * @returns {SomeType} - Hyphen here.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"*\":\"never\",\"returns\":\"always\"}}]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no hyphen before @param description.\n\n/**\n * @param foo    - Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\"]\n// Message: There must be no hyphen before @param description.\n\n/**\n * @param foo - foo\n * @param foo foo\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo foo\n * bar\n * @param bar - bar\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\"]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":false}}}\n// Message: Unexpected tag `@param`\n\n/**\n * @typedef {SomeType} ATypeDefName\n * @property foo Foo.\n */\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"property\":\"always\"}}]\n// Message: There must be a hyphen before @property description.\n\n/**\n * @template TempA, TempB A desc.\n */\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"template\":\"always\"}}]\n// Message: There must be a hyphen before @template description.\n\n/**\n * @typedef {SomeType} ATypeDefName\n * @property foo - Foo.\n */\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"property\":\"never\"}}]\n// Message: There must be no hyphen before @property description.\n\n/**\n * @param foo Foo.\n * @returns {SomeType} - A description.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"returns\":\"never\"}}]\n// Message: There must be a hyphen before @param description.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * @param foo     - Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * @param foo - Foo.\n * @returns {SomeType} A description.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"returns\":\"never\"}}]\n\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\"]\n\n/**\n * @param foo\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"*\":\"always\"}}]\n\n/**\n * @typedef {SomeType} ATypeDefName\n * @property foo - Foo.\n */\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"property\":\"always\"}}]\n\n/**\n * @typedef {SomeType} ATypeDefName\n * @property foo Foo.\n */\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"property\":\"never\"}}]\n\n/**\n * @typedef {SomeType} ATypeDefName\n * @property foo - Foo.\n */\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"*\":\"always\"}}]\n\n/** Entry point for module.\n *\n * @param {!Array<string>} argv Command-line arguments.\n */\nfunction main(argv) {\n};\n// \"jsdoc/require-hyphen-before-param-description\": [\"error\"|\"warn\", \"never\"]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc\"></a>\n### <code>require-jsdoc</code>\n\nChecks for presence of jsdoc comments, on class declarations as well as\nfunctions.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28\"></a>\n#### Options\n\nAccepts one optional options object with the following optional keys.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-publiconly\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-publiconly\"></a>\n##### <code>publicOnly</code>\n\nThis option will insist that missing jsdoc blocks are only reported for\nfunction bodies / class declarations that are exported from the module.\nMay be a boolean or object. If set to `true`, the defaults below will be\nused. If unset, jsdoc block reporting will not be limited to exports.\n\nThis object supports the following optional boolean keys (`false` unless\notherwise noted):\n\n- `ancestorsOnly` - Only check node ancestors to check if node is exported\n- `esm` - ESM exports are checked for JSDoc comments (Defaults to `true`)\n- `cjs` - CommonJS exports are checked for JSDoc comments  (Defaults to `true`)\n- `window` - Window global exports are checked for JSDoc comments\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-require\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-require\"></a>\n##### <code>require</code>\n\nAn object with the following optional boolean keys which all default to\n`false` except as noted, indicating the contexts where the rule will apply:\n\n- `ArrowFunctionExpression`\n- `ClassDeclaration`\n- `ClassExpression`\n- `FunctionDeclaration` (defaults to `true`)\n- `FunctionExpression`\n- `MethodDefinition`\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-contexts-7\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-contexts-7\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings or objects representing the additional AST\ncontexts where you wish the rule to be applied (e.g., `Property` for\nproperties). If specified as an object, it should have a `context` property\nand can have an `inlineCommentBlock` property which, if set to `true`, will\nadd an inline `/** */` instead of the regular, multi-line, indented jsdoc\nblock which will otherwise be added. Defaults to an empty array. Contexts\nmay also have their own `minLineCount` property.\n\nNote that you may need to disable `require` items (e.g., `MethodDefinition`)\nif you are specifying a more precise form in `contexts` (e.g., `MethodDefinition:not([accessibility=\"private\"] > FunctionExpression`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-exemptemptyconstructors\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-exemptemptyconstructors\"></a>\n##### <code>exemptEmptyConstructors</code>\n\nDefault: true\n\nWhen `true`, the rule will not report missing jsdoc blocks above constructors\nwith no parameters or return values (this is enabled by default as the class\nname or description should be seen as sufficient to convey intent).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-exemptemptyfunctions\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-exemptemptyfunctions\"></a>\n##### <code>exemptEmptyFunctions</code>\n\nDefault: false.\n\nWhen `true`, the rule will not report missing jsdoc blocks above\nfunctions/methods with no parameters or return values (intended where\nfunction/method names are sufficient for themselves as documentation).\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-checkconstructors-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-checkconstructors-1\"></a>\n##### <code>checkConstructors</code>\n\nA value indicating whether `constructor`s should be checked. Defaults to\n`true`. When `true`, `exemptEmptyConstructors` may still avoid reporting when\nno parameters or return values are found.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-checkgetters-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-checkgetters-1\"></a>\n##### <code>checkGetters</code>\n\nA value indicating whether getters should be checked. Besides setting as a\nboolean, this option can be set to the string `\"no-setter\"` to indicate that\ngetters should be checked but only when there is no setter. This may be useful\nif one only wishes documentation on one of the two accessors. Defaults to\n`false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-checksetters-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-checksetters-1\"></a>\n##### <code>checkSetters</code>\n\nA value indicating whether setters should be checked. Besides setting as a\nboolean, this option can be set to the string `\"no-getter\"` to indicate that\nsetters should be checked but only when there is no getter. This may be useful\nif one only wishes documentation on one of the two accessors. Defaults to\n`false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-enablefixer-3\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-enablefixer-3\"></a>\n##### <code>enableFixer</code>\n\nA boolean on whether to enable the fixer (which adds an empty jsdoc block).\nDefaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-jsdoc-options-28-minlinecount\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-jsdoc-options-28-minlinecount\"></a>\n##### <code>minLineCount</code>\n\nAn integer to indicate a minimum number of lines expected for a node in order\nfor it to require documentation. Defaults to `undefined`. This option will\napply to any context; see `contexts` for line counts per context.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `ClassDeclaration`, `ClassExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|N/A|\n|Recommended|true|\n|Options|`publicOnly`, `require`, `contexts`, `exemptEmptyConstructors`, `exemptEmptyFunctions`, `enableFixer`, `minLineCount`|\n\nThe following patterns are considered problems:\n\n````js\n/** This is comment */\nexport interface Foo {\n  /** This is comment x2 */\n  tom: string;\n  catchJerry(): boolean;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"ClassDeclaration\":true,\"ClassExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/** This is comment */\nexport interface Foo {\n  /** This is comment x2 */\n  tom: string;\n  jerry: number;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"ClassDeclaration\":true,\"ClassExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/** This is comment */\nexport interface Foo {\n  bar(): string;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n// Message: Missing JSDoc comment.\n\n/** This is comment */\nexport interface Foo {\n  bar: string;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true,\"esm\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n * Foo interface documentation.\n */\nexport interface Foo extends Bar {\n  /**\n   * baz method documentation.\n   */\n  baz(): void;\n\n  meow(): void;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSMethodSignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc comment.\n\n/**\n * @func myFunction\n */\nfunction myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"maxLines\":3,\"minLines\":2}}\n// Message: Missing JSDoc comment.\n\n/**\n * @func myFunction\n */\n\n\nfunction myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"maxLines\":2}}\n// Message: Missing JSDoc comment.\n\n/** @func myFunction */ function myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"minLines\":1}}\n// Message: Missing JSDoc comment.\n\nfunction myFunction() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"enableFixer\":false}]\n// Message: Missing JSDoc comment.\n\nexport var test = function () {\n\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction test () {\n\n}\nexport var test2 = test;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nexport const test = () => {\n\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport const test = () => {\n\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"ArrowFunctionExpression\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport const test = () => {\n\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"ArrowFunctionExpression\"}],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport let test = class {\n\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ClassExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default function () {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"FunctionDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default () => {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"ArrowFunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default (function () {})\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc comment.\n\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":true}]\n// Message: Missing JSDoc comment.\n\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"minLines\":2}}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":true}]\n// Message: Missing JSDoc comment.\n\nfunction myFunction() {}\n// Message: Missing JSDoc comment.\n\n/**\n * Description for A.\n */\nclass A {\n   constructor(xs) {\n        this.a = xs;\n   }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nclass A {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nclass A extends B {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport class A extends B {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class A extends B {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nvar myFunction = () => {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nvar myFunction = () => () => {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nvar foo = function() {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nconst foo = {bar() {}}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nvar foo = {bar: function() {}}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction foo (abc) {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":false}]\n// Message: Missing JSDoc comment.\n\nfunction foo () {\n  return true;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":false}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = function quux () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = function quux () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = {\n  method: function() {\n\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = {\n  test: {\n    test2: function() {\n\n    }\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = {\n  test: {\n    test2: function() {\n\n    }\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nconst test = module.exports = function () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n*\n*/\nconst test = module.exports = function () {\n\n}\n\ntest.prototype.method = function() {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nconst test = function () {\n\n}\nmodule.exports = {\n  test: test\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nconst test = () => {\n\n}\nmodule.exports = {\n  test: test\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nclass Test {\n    method() {\n\n    }\n}\nmodule.exports = Test;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default function quux () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default function quux () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction quux () {\n\n}\nexport default quux;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport function test() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport function test() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nvar test = function () {\n\n}\nvar test2 = 2;\nexport { test, test2 }\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nvar test = function () {\n\n}\nexport { test as test2 }\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class A {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class A {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nvar test = function () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"window\":true},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nwindow.test = function () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"window\":true},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction test () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"window\":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = function() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":true,\"esm\":false,\"window\":false},\"require\":{\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\nexport function someMethod() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"FunctionDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nexport function someMethod() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"FunctionDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nconst myObject = {\n  myProp: true\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"Property\"]}]\n// Message: Missing JSDoc comment.\n\n/**\n * Foo interface documentation.\n */\nexport interface Foo extends Bar {\n  /**\n   * baz method documentation.\n   */\n  baz(): void;\n\n  meow(): void;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSMethodSignature\"]}]\n// Message: Missing JSDoc comment.\n\nclass MyClass {\n  someProperty: boolean; // Flow type annotation.\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":true,\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class Test {\n  constructor(a) {\n    this.a = a;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":false,\"ClassExpression\":false,\"FunctionDeclaration\":false,\"FunctionExpression\":false,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class Test {\n  constructor(a) {\n    this.a = a;\n  }\n  private abc(a) {\n    this.a = a;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"MethodDefinition:not([accessibility=\\\"private\\\"]) > FunctionExpression\"],\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":false,\"ClassExpression\":false,\"FunctionDeclaration\":false,\"FunctionExpression\":false,\"MethodDefinition\":false}}]\n// Message: Missing JSDoc comment.\n\ne = function () {\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionDeclaration\":false,\"FunctionExpression\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nexport class Class {\n    test = 1;\n\n    foo() {\n        this.test = 2;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionDeclaration\":false,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nclass Dog {\n  eat() {\n\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionDeclaration\":false,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nconst hello = name => {\n  document.body.textContent = \"Hello, \" + name + \"!\";\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true,\"FunctionDeclaration\":false}}]\n// Message: Missing JSDoc comment.\n\nexport const loginSuccessAction = (): BaseActionPayload => ({ type: LOGIN_SUCCESSFUL });\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true,\"FunctionDeclaration\":false}}]\n// Message: Missing JSDoc comment.\n\nexport type Container = {\n  constants?: ObjByString;\n  enums?: { [key in string]: TypescriptEnum };\n  helpers?: { [key in string]: AnyFunction };\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSTypeAliasDeclaration\",{\"context\":\"TSPropertySignature\",\"inlineCommentBlock\":true}]}]\n// Message: Missing JSDoc comment.\n\nclass Foo {\n    constructor() {}\n\n    bar() {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"MethodDefinition[key.name!=\\\"constructor\\\"]\"],\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nclass Example extends React.PureComponent {\n  componentDidMount() {}\n\n  render() {}\n\n  someOtherMethod () {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"MethodDefinition:not([key.name=\\\"componentDidMount\\\"]):not([key.name=\\\"render\\\"])\"],\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction foo(arg: boolean): boolean {\n  return arg;\n}\n\nfunction bar(arg: true): true;\nfunction bar(arg: false): false;\nfunction bar(arg: boolean): boolean {\n  return arg;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSDeclareFunction:not(TSDeclareFunction + TSDeclareFunction)\",\"FunctionDeclaration:not(TSDeclareFunction + FunctionDeclaration)\"],\"require\":{\"FunctionDeclaration\":false}}]\n// Message: Missing JSDoc comment.\n\nexport function foo(arg: boolean): boolean {\n  return arg;\n}\n\nexport function bar(arg: true): true;\nexport function bar(arg: false): false;\nexport function bar(arg: boolean): boolean {\n  return arg;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"ExportNamedDeclaration[declaration.type=\\\"TSDeclareFunction\\\"]:not(ExportNamedDeclaration[declaration.type=\\\"TSDeclareFunction\\\"] + ExportNamedDeclaration[declaration.type=\\\"TSDeclareFunction\\\"])\",\"ExportNamedDeclaration[declaration.type=\\\"FunctionDeclaration\\\"]:not(ExportNamedDeclaration[declaration.type=\\\"TSDeclareFunction\\\"] + ExportNamedDeclaration[declaration.type=\\\"FunctionDeclaration\\\"])\"],\"require\":{\"FunctionDeclaration\":false}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports.foo = (bar) => {\n  return bar + \"biz\"\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":false,\"require\":{\"ArrowFunctionExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nclass Animal {\n\n  #name: string;\n\n  private species: string;\n\n  public color: string;\n\n  @SomeAnnotation('optionalParameter')\n  tail: boolean;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"PropertyDefinition\"]}]\n// Message: Missing JSDoc comment.\n\n@Entity('users')\nexport class User {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nclass Foo {\n    constructor() {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyConstructors\":false,\"require\":{\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nclass Foo {\n    constructor(notEmpty) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyConstructors\":true,\"require\":{\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nclass Foo {\n    constructor() {\n        const notEmpty = true;\n        return notEmpty;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyConstructors\":true,\"require\":{\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":false,\"required\":[\"name\"]}}}}\n// Message: Cannot add \"name\" to `require` with the tag's `name` set to `false`\n\nclass Test {\n  aFunc() {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkConstructors\":false,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":false,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nclass Test {\n  aFunc = () => {}\n  anotherFunc() {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":false,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport enum testEnum {\n  A, B\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSEnumDeclaration\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport interface Test {\n  aFunc: () => void;\n  aVar: string;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport type testType = string | number;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSTypeAliasDeclaration\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport interface Foo {\n    bar: number;\n    baz: string;\n    quux(): void;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSPropertySignature\",\"TSMethodSignature\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport class MyComponentComponent {\n  @Output()\n  public changed = new EventEmitter();\n\n  public test = 'test';\n\n  @Input()\n  public value = new EventEmitter();\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"PropertyDefinition > Decorator[expression.callee.name=\\\"Input\\\"]\"]}]\n// Message: Missing JSDoc comment.\n\nrequestAnimationFrame(draw)\n\nfunction bench() {\n}\n// Message: Missing JSDoc comment.\n\nclass Foo {\n  set aName (val) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkSetters\":\"no-getter\",\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n// Message: Missing JSDoc comment.\n\nclass Foo {\n  get aName () {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":\"no-setter\",\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n// Message: Missing JSDoc comment.\n\nconst obj = {\n  get aName () {},\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":\"no-setter\",\"contexts\":[\"Property > FunctionExpression\"]}]\n// Message: Missing JSDoc comment.\n\nfunction comment () {\n  return \"comment\";\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"enableFixer\":true,\"fixerMessage\":\" TODO: add comment\"}]\n// Message: Missing JSDoc comment.\n\nfunction comment () {\n  return \"comment\";\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"any\",{\"context\":\"FunctionDeclaration\",\"inlineCommentBlock\":true}],\"fixerMessage\":\"TODO: add comment \"}]\n// Message: Missing JSDoc comment.\n\nfunction comment () {\n  return \"comment\";\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"enableFixer\":false,\"fixerMessage\":\" TODO: add comment\"}]\n// Message: Missing JSDoc comment.\n\nexport class InovaAutoCompleteComponent {\n  public disabled = false;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"PropertyDefinition\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nexport default (arg) => arg;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport function outer() {\n    function inner() {\n        console.log('foo');\n    }\n\n    inner();\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nexport const outer = () => {\n    const inner = () => {\n        console.log('foo');\n    };\n\n    inner();\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nexport class InovaAutoCompleteComponent {\n  public disabled = false;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"PropertyDefinition\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\n/**\n* Some comment.\n*/\nexport class Component {\n    public foo?: number;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkConstructors\":false,\"contexts\":[\"PropertyDefinition\"],\"publicOnly\":true}]\n// Message: Missing JSDoc comment.\n\nclass Utility {\n    /**\n     *\n     */\n    mthd() {\n        return false;\n    }\n}\n\nmodule.exports = Utility;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"enableFixer\":false,\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n *\n */\nmodule.exports = class Utility {\n  mthd() {\n    return false;\n  }\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"enableFixer\":false,\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":true,\"MethodDefinition\":true}}]\n// Message: Missing JSDoc comment.\n\nfunction quux () {\n  return 3;\n}\n\nfunction b () {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"minLineCount\":2}]\n// Message: Missing JSDoc comment.\n\nfunction quux () {\n  return 3;\n}\n\nvar a = {};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"FunctionDeclaration\",\"minLineCount\":2},{\"context\":\"VariableDeclaration\",\"minLineCount\":2}],\"require\":{\"FunctionDeclaration\":false}}]\n// Message: Missing JSDoc comment.\n\nfunction quux () {\n  return 3;\n}\n\nvar a = {\n  b: 1,\n  c: 2\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"FunctionDeclaration\",\"minLineCount\":4},{\"context\":\"VariableDeclaration\",\"minLineCount\":2}],\"require\":{\"FunctionDeclaration\":false}}]\n// Message: Missing JSDoc comment.\n\nclass A {\n  setId(newId: number): void {\n    this.id = id;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"MethodDefinition\",\"minLineCount\":3}],\"require\":{\"ClassDeclaration\":false,\"FunctionExpression\":false,\"MethodDefinition\":false}}]\n// Message: Missing JSDoc comment.\n````\n\nThe following patterns are not considered problems:\n\n````js\ninterface FooBar {\n  fooBar: string;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n\n/** This is comment */\ninterface FooBar {\n  fooBar: string;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n\n/** This is comment */\nexport class Foo {\n  someMethod() {\n    interface FooBar {\n      fooBar: string;\n    }\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n\n/** This is comment */\nfunction someFunction() {\n  interface FooBar {\n    fooBar: string;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n\n/** This is comment */\nexport function foo() {\n  interface bar {\n    fooBar: string;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\",\"TSMethodSignature\",\"TSPropertySignature\"],\"publicOnly\":{\"ancestorsOnly\":true}}]\n\n/**\n *\n */\n\nvar array = [1,2,3];\narray.forEach(function() {});\n\n/**\n * @class MyClass\n **/\nfunction MyClass() {}\n\n/**\n Function doing something\n */\nfunction myFunction() {}\n/**\n Function doing something\n */\nvar myFunction = function() {};\n/**\n Function doing something\n */\nObject.myFunction = function () {};\nvar obj = {\n   /**\n    *  Function doing something\n    **/\n    myFunction: function () {} };\n\n/**\n @func myFunction\n */\nfunction myFunction() {}\n/**\n @method myFunction\n */\nfunction myFunction() {}\n/**\n @function myFunction\n */\nfunction myFunction() {}\n\n/**\n @func myFunction\n */\nvar myFunction = function () {}\n/**\n @method myFunction\n */\nvar myFunction = function () {}\n/**\n @function myFunction\n */\nvar myFunction = function () {}\n\n/**\n @func myFunction\n */\nObject.myFunction = function() {}\n/**\n @method myFunction\n */\nObject.myFunction = function() {}\n/**\n @function myFunction\n */\nObject.myFunction = function() {}\n(function(){})();\n\nvar object = {\n  /**\n   *  @func myFunction - Some function\n   */\n  myFunction: function() {} }\nvar object = {\n  /**\n   *  @method myFunction - Some function\n   */\n  myFunction: function() {} }\nvar object = {\n  /**\n   *  @function myFunction - Some function\n   */\n  myFunction: function() {} }\n\nvar array = [1,2,3];\narray.filter(function() {});\nObject.keys(this.options.rules || {}).forEach(function(name) {}.bind(this));\nvar object = { name: 'key'};\nObject.keys(object).forEach(function() {})\n\n/**\n * @func myFunction\n */\n\nfunction myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"maxLines\":2,\"minLines\":0}}\n\n/**\n * @func myFunction\n */\n\n\nfunction myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"maxLines\":3,\"minLines\":0}}\n\n/** @func myFunction */  function myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"maxLines\":0,\"minLines\":0}}\n\n/**\n * @func myFunction\n */\n\nfunction myFunction() {\n\n}\n// Settings: {\"jsdoc\":{\"maxLines\":3,\"minLines\":2}}\n\nfunction myFunction() {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"FunctionDeclaration\":false,\"MethodDefinition\":true}}]\n\nvar myFunction = function() {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"FunctionDeclaration\":false,\"MethodDefinition\":true}}]\n\n/**\n * Description for A.\n */\nclass A {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n\n/**\n * Description for A.\n */\nclass App extends Component {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n\n/**\n * Description for A.\n */\nexport default class App extends Component {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n\n/**\n * Description for A.\n */\nexport class App extends Component {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true,\"MethodDefinition\":true}}]\n\nclass A {\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":false,\"MethodDefinition\":false}}]\n\n/**\n* Function doing something\n*/\nvar myFunction = () => {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true}}]\n\n/**\n* Function doing something\n*/\nvar myFunction = function () {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true}}]\n\n/**\n* Function doing something\n*/\nvar myFunction = () => {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":false}}]\n\n/**\n Function doing something\n*/\nvar myFunction = () => () => {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true}}]\n\nsetTimeout(() => {}, 10);\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":true}}]\n\n/**\nJSDoc Block\n*/\nvar foo = function() {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n\nconst foo = {/**\nJSDoc Block\n*/\nbar() {}}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n\nvar foo = {/**\nJSDoc Block\n*/\nbar: function() {}}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n\nvar foo = { [function() {}]: 1 };\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"FunctionExpression\":true}}]\n\nfunction foo () {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":true}]\n\nfunction foo () {\n  return;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":true}]\n\nconst test = {};\n/**\n * test\n */\n test.method = function () {\n\n}\nmodule.exports = {\n  prop: { prop2: test.method }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nfunction test() {\n\n}\n\nmodule.exports = {\n  prop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\ntest = function() {\n\n}\n\nmodule.exports = {\n  prop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":true,\"esm\":false,\"window\":false},\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\ntest = function() {\n\n}\n\nexports.someMethod = {\n  prop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nconst test = () => {\n\n}\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true}}]\n\nconst test = () => {\n\n}\nmodule.exports = {\n  prop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"ArrowFunctionExpression\":true}}]\n\n/**\n *\n */\nwindow.test = function() {\n\n}\n\nmodule.exports = {\nprop: window\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\ntest = function() {\n\n}\n\n/**\n *\n */\ntest = function() {\n\n}\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\ntest = function() {\n\n}\n\ntest = 2;\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nfunction test() {\n\n}\n\n/**\n *\n */\ntest.prototype.method = function() {\n\n}\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\nclass Test {\n  /**\n   * Test\n   */\n  method() {\n\n  }\n}\nmodule.exports = Test;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"MethodDefinition\":true}}]\n\n/**\n *\n */\nexport default function quux () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nexport default function quux () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nfunction quux () {\n\n}\nexport default quux;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\nfunction quux () {\n\n}\nexport default quux;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nexport function test() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nexport function test() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nvar test = function () {\n\n}\nvar test2 = 2;\nexport { test, test2 }\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nvar test = function () {\n\n}\nexport { test as test2 }\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n *\n */\nexport default class A {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"ancestorsOnly\":true},\"require\":{\"ClassDeclaration\":true}}]\n\n/**\n *\n */\nvar test = function () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"window\":true},\"require\":{\"FunctionExpression\":true}}]\n\nlet test = function () {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"window\":true},\"require\":{\"FunctionExpression\":true}}]\n\nlet test = class {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ClassExpression\":false}}]\n\n/**\n *\n */\nlet test = class {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"ClassExpression\":true}}]\n\nexport function someMethod() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":true,\"esm\":false,\"window\":false},\"require\":{\"FunctionDeclaration\":true}}]\n\nexport function someMethod() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":true,\"esm\":false,\"window\":false},\"require\":{\"FunctionDeclaration\":true}}]\n\nexports.someMethod = function() {\n\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":{\"cjs\":false,\"esm\":true,\"window\":false},\"require\":{\"FunctionExpression\":true}}]\n\nconst myObject = {\n  myProp: true\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[]}]\n\nfunction bear() {}\n/**\n *\n */\nfunction quux () {\n}\nexport default quux;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true,\"require\":{\"FunctionExpression\":true}}]\n\n/**\n * This example interface is great!\n */\nexport interface Example {\n  /**\n   * My super test string!\n   */\n  test: string\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\"]}]\n\n/**\n * This example interface is great!\n */\ninterface Example {\n  /**\n   * My super test string!\n   */\n  test: string\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSInterfaceDeclaration\"]}]\n\n/**\n * This example type is great!\n */\nexport type Example = {\n  /**\n   * My super test string!\n   */\n  test: string\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSTypeAliasDeclaration\"]}]\n\n/**\n * This example type is great!\n */\ntype Example = {\n  /**\n   * My super test string!\n   */\n  test: string\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSTypeAliasDeclaration\"]}]\n\n/**\n * This example enum is great!\n */\nexport enum Example {\n  /**\n   * My super test enum!\n   */\n  test = 123\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSEnumDeclaration\"]}]\n\n/**\n * This example enum is great!\n */\nenum Example {\n  /**\n   * My super test enum!\n   */\n  test = 123\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSEnumDeclaration\"]}]\n\nconst foo = {...{}};\nfunction bar() {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":false,\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":true,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":false,\"MethodDefinition\":true}}]\n\n/**\n * Class documentation\n */\n @logged\nexport default class Foo {\n // ....\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyFunctions\":false,\"require\":{\"ClassDeclaration\":true}}]\n\nconst a = {};\nconst b = {\n  ...a\n};\n\nexport default b;\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"ObjectExpression\"],\"exemptEmptyFunctions\":false,\"publicOnly\":true}]\n\n/**\n * Foo interface documentation.\n */\nexport interface Foo extends Bar {\n  /**\n   * baz method documentation.\n   */\n  baz(): void;\n\n  /**\n   * meow method documentation.\n   */\n  meow(): void;\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSMethodSignature\"]}]\n\nexport default class Test {\n  private abc(a) {\n    this.a = a;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"MethodDefinition:not([accessibility=\\\"private\\\"]) > FunctionExpression\"],\"publicOnly\":true,\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":false,\"ClassExpression\":false,\"FunctionDeclaration\":false,\"FunctionExpression\":false,\"MethodDefinition\":false}}]\n\n/**\n * Basic application controller.\n */\n@Controller()\nexport class AppController {\n  /**\n   * Returns the application information.\n   *\n   * @returns ...\n   */\n  @Get('/info')\n  public getInfo(): string {\n    return 'OK';\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":false,\"MethodDefinition\":true}}]\n\n/**\n * Entity to represent a user in the system.\n */\n@Entity('users')\nexport class User {\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":false,\"MethodDefinition\":true}}]\n\n/**\n * Entity to represent a user in the system.\n */\n@Entity('users', getVal())\nexport class User {\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":true,\"ClassExpression\":true,\"FunctionDeclaration\":true,\"FunctionExpression\":false,\"MethodDefinition\":true}}]\n\n/**\n *\n */\nclass Foo {\n    constructor() {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"exemptEmptyConstructors\":true,\"require\":{\"MethodDefinition\":true}}]\n\n/**\n *\n */\nclass Foo {\n    constructor() {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkConstructors\":false,\"require\":{\"MethodDefinition\":true}}]\n\nclass Foo {\n  get aName () {}\n  set aName (val) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":\"no-setter\",\"checkSetters\":false,\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n\nconst obj = {\n  get aName () {},\n  set aName (val) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":\"no-setter\",\"checkSetters\":false,\"contexts\":[\"Property > FunctionExpression\"]}]\n\nclass Foo {\n  set aName (val) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkSetters\":false,\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n\nclass Foo {\n  get aName () {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":false,\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n\nclass Foo {\n  /**\n   *\n   */\n  set aName (val) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkSetters\":\"no-getter\",\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n\nclass Foo {\n  /**\n   *\n   */\n  get aName () {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":\"no-setter\",\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n\nclass Foo {\n  get aName () {}\n  set aName (val) {}\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"checkGetters\":false,\"checkSetters\":\"no-getter\",\"contexts\":[\"MethodDefinition > FunctionExpression\"]}]\n\nclass Base {\n  constructor() {\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"MethodDefinition\"],\"exemptEmptyConstructors\":true}]\n\n/**\n * This is a text.\n */\nexport function a(); // Reports an error\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"TSDeclareFunction\"],\"require\":{\"FunctionDeclaration\":true}}]\n\n/**\n * Foo\n */\nexport function foo(): void {\n  function bar(): void {\n    console.log('bar');\n  }\n\n  console.log('foo');\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"publicOnly\":true}]\n\nconst foo = {\n  bar: () => {\n    // ...\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\":not(Property) > ArrowFunctionExpression\"],\"require\":{\"ArrowFunctionExpression\":false,\"ClassDeclaration\":true,\"ClassExpression\":true}}]\n\n/** Defines the current user's settings. */\n@Injectable({\n  providedIn: 'root',\n})\n@State<Partial<UserSettingsStateModel>>\n({\n  name: 'userSettings',\n  defaults: {\n    isDev: !environment.production,\n  },\n})\nexport class UserSettingsState { }\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"require\":{\"ClassDeclaration\":true}}]\n\n/**\n * Entity to represent a user in the system.\n */\n@Entity('users')\nexport class User {\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[\"Decorator\"],\"require\":{\"FunctionDeclaration\":false}}]\n\n  function quux () {\n  return 3;\n}\n\nfunction b () {}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"minLineCount\":4}]\n\nfunction quux () {\n  return 3;\n}\n\nvar a = {\n  b: 1,\n  c: 2\n};\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"FunctionDeclaration\",\"minLineCount\":4},{\"context\":\"VariableDeclaration\",\"minLineCount\":5}],\"require\":{\"FunctionDeclaration\":false}}]\n\nclass A {\n  setId(newId: number): void {\n    this.id = id;\n  }\n}\n// \"jsdoc/require-jsdoc\": [\"error\"|\"warn\", {\"contexts\":[{\"context\":\"MethodDefinition\",\"minLineCount\":4}],\"require\":{\"ClassDeclaration\":false,\"FunctionExpression\":false,\"MethodDefinition\":false}}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-description\"></a>\n### <code>require-param-description</code>\n\nRequires that each `@param` tag has a `description` value.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-description-options-29\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-description-options-29\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-description-options-29-contexts-8\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-description-options-29-contexts-8\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n|Recommended|true|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" description.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @param \"foo\" description.\n\n/**\n * @function\n * @param foo\n */\n// \"jsdoc/require-param-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @param \"foo\" description.\n\n/**\n * @callback\n * @param foo\n */\n// \"jsdoc/require-param-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @param \"foo\" description.\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n// Message: Missing JSDoc @arg \"foo\" description.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n * @param foo\n */\n\n/**\n * @callback\n * @param foo\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-name\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-name\"></a>\n### <code>require-param-name</code>\n\nRequires that all function parameters have names.\n\n> The `@param` tag requires you to specify the name of the parameter you are documenting. You can also include the parameter's type, enclosed in curly brackets, and a description of the parameter.\n>\n> [JSDoc](https://jsdoc.app/tags-param.html#overview)\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-name-options-30\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-name-options-30\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-name-options-30-contexts-9\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-name-options-30-contexts-9\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n|Recommended|true|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param\n */\nfunction quux (foo) {\n\n}\n// Message: There must be an identifier after @param type.\n\n/**\n * @param {string}\n */\nfunction quux (foo) {\n\n}\n// Message: There must be an identifier after @param tag.\n\n/**\n * @param {string}\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param-name\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: There must be an identifier after @param tag.\n\n/**\n * @function\n * @param {string}\n */\n// \"jsdoc/require-param-name\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: There must be an identifier after @param tag.\n\n/**\n * @callback\n * @param {string}\n */\n// \"jsdoc/require-param-name\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: There must be an identifier after @param tag.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param-name\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @param {string} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @function\n * @param\n */\n\n/**\n * @callback\n * @param\n */\n\n/**\n * @param {Function} [processor=data => data] A function to run\n */\nfunction processData(processor) {\n  return processor(data)\n}\n\n/** Example with multi-line param type.\n*\n* @param {function(\n*   number\n* )} cb Callback.\n*/\nfunction example(cb) {\n  cb(42);\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-type\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-type\"></a>\n### <code>require-param-type</code>\n\nRequires that each `@param` tag has a `type` value.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-type-options-31\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-type-options-31\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-type-options-31-contexts-10\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-type-options-31-contexts-10\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n|Recommended|true|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" type.\n\n/**\n * @param {a xxx\n */\nfunction quux () {\n}\n// Message: Missing JSDoc @param \"\" type.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @param \"foo\" type.\n\n/**\n * @function\n * @param foo\n */\n// \"jsdoc/require-param-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @param \"foo\" type.\n\n/**\n * @callback\n * @param foo\n */\n// \"jsdoc/require-param-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @param \"foo\" type.\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n// Message: Missing JSDoc @arg \"foo\" type.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n * @param foo\n */\n\n/**\n * @callback\n * @param foo\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param\"></a>\n### <code>require-param</code>\n\nRequires that all function parameters are documented.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-fixer-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-fixer-1\"></a>\n#### Fixer\n\nAdds `@param <name>` for each tag present in the function signature but\nmissing in the jsdoc. Can be disabled by setting the `enableFixer`\noption to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-fixer-1-destructured-object-and-array-naming\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-fixer-1-destructured-object-and-array-naming\"></a>\n##### Destructured object and array naming\n\nWhen the fixer is applied to destructured objects, only the input name is\nused.\n\nSo for:\n\n```js\n/**\n * @param cfg\n */\nfunction quux ({foo: bar, baz: bax = 5}) {\n}\n```\n\n..the fixed jsdoc will be:\n\n```js\n/**\n* @param cfg\n* @param cfg.foo\n* @param cfg.baz\n*/\n```\n\nThis is because the input to the function is the relevant item for\nunderstanding the function's input, not how the variable is renamed\nfor internal use (the signature itself documents that).\n\nFor destructured arrays, the input name is merely the array index.\n\nSo for:\n\n```js\n/**\n * @param cfg\n */\nfunction quux ([foo, bar]) {\n}\n```\n\n..the fixed jsdoc will be:\n\n```js\n/**\n* @param cfg\n* @param cfg.\"0\"\n* @param cfg.\"1\"\n*/\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-fixer-1-missing-root-fixing\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-fixer-1-missing-root-fixing\"></a>\n##### Missing root fixing\n\nNote that unless `enableRootFixer` (or `enableFixer`) is set to `false`,\nmissing roots will be added and auto-incremented. The default behavior\nis for \"root\" to be auto-inserted for missing roots, followed by a\n0-based auto-incrementing number.\n\nSo for:\n\n```js\nfunction quux ({foo}, {bar}, {baz}) {\n}\n```\n\n...the default jsdoc that would be added if the fixer is enabled would be:\n\n```js\n/**\n* @param root0\n* @param root0.foo\n* @param root1\n* @param root1.bar\n* @param root2\n* @param root2.baz\n*/\n```\n\nThe name of \"root\" can be configured with `unnamedRootBase` (which also allows\ncycling through a list of multiple root names before there is need for any\nnumeric component).\n\nAnd one can have the count begin at another number (e.g., `1`) by changing\n`autoIncrementBase` from the default of `0`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-fixer-1-rest-element-restelement-insertions\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-fixer-1-rest-element-restelement-insertions\"></a>\n##### Rest Element (<code>RestElement</code>) insertions\n\nThe fixer will automatically report/insert\n[jsdoc repeatable parameters](https://jsdoc.app/tags-param.html#multiple-types-and-repeatable-parameters)\nif missing.\n\n```js\n/**\n  * @param {GenericArray} cfg\n  * @param {number} cfg.\"0\"\n */\nfunction baar ([a, ...extra]) {\n  //\n}\n```\n\n..becomes:\n\n```js\n/**\n  * @param {GenericArray} cfg\n  * @param {number} cfg.\"0\"\n  * @param {...any} cfg.\"1\"\n */\nfunction baar ([a, ...extra]) {\n  //\n}\n```\n\nNote that the type `any` is included since we don't know of any specific\ntype to use.\n\nTo disable such rest element insertions, set `enableRestElementFixer` to\n`false`.\n\nNote too that the following will be reported even though there is an item\ncorresponding to `extra`:\n\n```js\n/**\n  * @param {GenericArray} cfg\n  * @param {number} cfg.\"0\"\n  * @param {any} cfg.\"1\"\n */\nfunction baar ([a, ...extra]) {\n  //\n}\n```\n\n...because it does not use the `...` syntax in the type.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-fixer-1-object-rest-property-insertions\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-fixer-1-object-rest-property-insertions\"></a>\n##### Object Rest Property insertions\n\nIf the `checkRestProperty` option is set to `true` (`false` by default),\nmissing rest properties will be reported with documentation auto-inserted:\n\n```js\n/**\n * @param cfg\n * @param cfg.num\n */\nfunction quux ({num, ...extra}) {\n}\n```\n\n...becomes:\n\n```js\n/**\n * @param cfg\n * @param cfg.num\n * @param cfg.extra\n */\nfunction quux ({num, ...extra}) {\n}\n```\n\nYou may wish to manually note in your jsdoc for `extra` that this is a\nrest property, however, as jsdoc\n[does not appear](https://github.com/jsdoc/jsdoc/issues/1773)\nto currently support syntax or output to distinguish rest properties from\nother properties, so in looking at the docs alone without looking at the\nfunction signature, it may appear that there is an actual property named\n`extra`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32\"></a>\n#### Options\n\nAn options object accepts the following optional properties:\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-enablefixer-4\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-enablefixer-4\"></a>\n##### <code>enableFixer</code>\n\nWhether to enable the fixer. Defaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-enablerootfixer\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-enablerootfixer\"></a>\n##### <code>enableRootFixer</code>\n\nWhether to enable the auto-adding of incrementing roots (see the \"Fixer\"\nsection). Defaults to `true`. Has no effect if `enableFixer` is set to\n`false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-enablerestelementfixer\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-enablerestelementfixer\"></a>\n##### <code>enableRestElementFixer</code>\n\nWhether to enable the rest element fixer (see\n\"Rest Element (`RestElement`) insertions\"). Defaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checkrestproperty-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checkrestproperty-1\"></a>\n##### <code>checkRestProperty</code>\n\nIf set to `true`, will report (and add fixer insertions) for missing rest\nproperties. Defaults to `false`.\n\nIf set to `true`, note that you can still document the subproperties of the\nrest property using other jsdoc features, e.g., `@typedef`:\n\n```js\n/**\n * @typedef ExtraOptions\n * @property innerProp1\n * @property innerProp2\n */\n\n/**\n * @param cfg\n * @param cfg.num\n * @param {ExtraOptions} extra\n */\nfunction quux ({num, ...extra}) {\n}\n```\n\nSetting this option to `false` (the default) may be useful in cases where\nyou already have separate `@param` definitions for each of the properties\nwithin the rest property.\n\nFor example, with the option disabled, this will not give an error despite\n`extra` not having any definition:\n\n```js\n/**\n * @param cfg\n * @param cfg.num\n */\nfunction quux ({num, ...extra}) {\n}\n```\n\nNor will this:\n\n```js\n/**\n * @param cfg\n * @param cfg.num\n * @param cfg.innerProp1\n * @param cfg.innerProp2\n */\nfunction quux ({num, ...extra}) {\n}\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-autoincrementbase\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-autoincrementbase\"></a>\n##### <code>autoIncrementBase</code>\n\nNumeric to indicate the number at which to begin auto-incrementing roots.\nDefaults to `0`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-unnamedrootbase\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-unnamedrootbase\"></a>\n##### <code>unnamedRootBase</code>\n\nAn array of root names to use in the fixer when roots are missing. Defaults\nto `['root']`. Note that only when all items in the array besides the last\nare exhausted will auto-incrementing occur. So, with\n`unnamedRootBase: ['arg', 'config']`, the following:\n\n```js\nfunction quux ({foo}, [bar], {baz}) {\n}\n```\n\n...will get the following jsdoc block added:\n\n```js\n/**\n* @param arg\n* @param arg.foo\n* @param config0\n* @param config0.\"0\" (`bar`)\n* @param config1\n* @param config1.baz\n*/\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-exemptedby-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-exemptedby-1\"></a>\n##### <code>exemptedBy</code>\n\nArray of tags (e.g., `['type']`) whose presence on the document block\navoids the need for a `@param`. Defaults to an array with\n`inheritdoc`. If you set this array, it will overwrite the default,\nso be sure to add back `inheritdoc` if you wish its presence to cause\nexemption of the rule.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checktypespattern-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checktypespattern-1\"></a>\n##### <code>checkTypesPattern</code>\n\nWhen one specifies a type, unless it is of a generic type, like `object`\nor `array`, it may be considered unnecessary to have that object's\ndestructured components required, especially where generated docs will\nlink back to the specified type. For example:\n\n```js\n/**\n * @param {SVGRect} bbox - a SVGRect\n */\nexport const bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n```\n\nBy default `checkTypesPattern` is set to\n`/^(?:[oO]bject|[aA]rray|PlainObject|Generic(?:Object|Array))$/u`,\nmeaning that destructuring will be required only if the type of the `@param`\n(the text between curly brackets) is a match for \"Object\" or \"Array\" (with or\nwithout initial caps), \"PlainObject\", or \"GenericObject\", \"GenericArray\" (or\nif no type is present). So in the above example, the lack of a match will\nmean that no complaint will be given about the undocumented destructured\nparameters.\n\nNote that the `/` delimiters are optional, but necessary to add flags.\n\nDefaults to using (only) the `u` flag, so to add your own flags, encapsulate\nyour expression as a string, but like a literal, e.g., `/^object$/ui`.\n\nYou could set this regular expression to a more expansive list, or you\ncould restrict it such that even types matching those strings would not\nneed destructuring.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-contexts-11\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-contexts-11\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). May be useful for adding such as\n`TSMethodSignature` in TypeScript or restricting the contexts\nwhich are checked.\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checkconstructors-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checkconstructors-2\"></a>\n##### <code>checkConstructors</code>\n\nA value indicating whether `constructor`s should be checked. Defaults to\n`true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checkgetters-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checkgetters-2\"></a>\n##### <code>checkGetters</code>\n\nA value indicating whether getters should be checked. Defaults to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checksetters-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checksetters-2\"></a>\n##### <code>checkSetters</code>\n\nA value indicating whether setters should be checked. Defaults to `false`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checkdestructured-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checkdestructured-1\"></a>\n##### <code>checkDestructured</code>\n\nWhether to require destructured properties. Defaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-checkdestructuredroots\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-checkdestructuredroots\"></a>\n##### <code>checkDestructuredRoots</code>\n\nWhether to check the existence of a corresponding `@param` for root objects\nof destructured properties (e.g., that for `function ({a, b}) {}`, that there\nis something like `@param myRootObj` defined that can correspond to\nthe `{a, b}` object parameter).\n\nIf `checkDestructuredRoots` is `false`, `checkDestructured` will also be\nimplied to be `false` (i.e., the inside of the roots will not be checked\neither, e.g., it will also not complain if `a` or `b` do not have their own\ndocumentation). Defaults to `true`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-param-options-32-usedefaultobjectproperties-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-param-options-32-usedefaultobjectproperties-1\"></a>\n##### <code>useDefaultObjectProperties</code>\n\nSet to `true` if you wish to expect documentation of properties on objects\nsupplied as default values. Defaults to `false`.\n\n|          |                      |\n| -------- | ----------------------------------------------------------------------------- |\n| Context  | `ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled |\n| Tags     | `param` |\n| Aliases  | `arg`, `argument` |\n|Recommended | true|\n| Options  | `autoIncrementBase`, `checkDestructured`, `checkDestructuredRoots`, `contexts`, `enableFixer`, `enableRootFixer`, `enableRestElementFixer`, `checkRestProperty`, `exemptedBy`, `checkConstructors`, `checkGetters`, `checkSetters`, `checkTypesPattern`, `unnamedRootBase`, `useDefaultObjectProperties`|\n| Settings | `ignoreReplacesDocs`, `overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"FunctionDeclaration\"]}]\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n *\n */\nfunction quux ({foo}) {\n\n}\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar, {baz}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkDestructured\":false}]\n// Message: Missing JSDoc @param \"bar\" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar, {baz}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkDestructuredRoots\":false}]\n// Message: Missing JSDoc @param \"bar\" declaration.\n\n/**\n *\n */\nfunction quux ({foo}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"enableFixer\":false}]\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n *\n */\nfunction quux ({foo: bar = 5} = {}) {\n\n}\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n * @param\n */\nfunction quux ({foo}) {\n\n}\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n * @param\n */\nfunction quux ({foo}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"autoIncrementBase\":1}]\n// Message: Missing JSDoc @param \"root1\" declaration.\n\n/**\n * @param options\n */\nfunction quux ({foo}) {\n\n}\n// Message: Missing JSDoc @param \"options.foo\" declaration.\n\n/**\n * @param\n */\nfunction quux ({ foo, bar: { baz }}) {\n\n}\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n *\n */\nfunction quux ({foo}, {bar}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"unnamedRootBase\":[\"arg\"]}]\n// Message: Missing JSDoc @param \"arg0\" declaration.\n\n/**\n *\n */\nfunction quux ({foo}, {bar}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"unnamedRootBase\":[\"arg\",\"config\"]}]\n// Message: Missing JSDoc @param \"arg\" declaration.\n\n/**\n *\n */\nfunction quux ({foo}, {bar}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"enableRootFixer\":false,\"unnamedRootBase\":[\"arg\",\"config\"]}]\n// Message: Missing JSDoc @param \"arg\" declaration.\n\n/**\n *\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param \"bar\" declaration.\n\n/**\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Missing JSDoc @param \"baz\" declaration.\n\n/**\n * @param baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @param\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n// Message: Missing JSDoc @arg \"foo\" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param \"bar\" declaration.\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"overrideReplacesDocs\":false}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @ignore\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignoreReplacesDocs\":false}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @implements\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @augments\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @extends\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @override\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"overrideReplacesDocs\":false}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @ignore\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"ignoreReplacesDocs\":false}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @implements\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":false}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @augments\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @extends\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\nexport class SomeClass {\n  /**\n   * @param property\n   */\n  constructor(private property: string, private foo: number) {}\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @param\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":false}}}\n// Message: Unexpected tag `@param`\n\n/**\n *\n */\nfunction quux ({bar, baz}, foo) {\n}\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n *\n */\nfunction quux (foo, {bar, baz}) {\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n *\n */\nfunction quux ([bar, baz], foo) {\n}\n// Message: Missing JSDoc @param \"root0\" declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"exemptedBy\":[\"notPresent\"]}]\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"exemptedBy\":[]}]\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n * Assign the project to a list of employees.\n * @param {object[]} employees - The employees who are responsible for the project.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nfunction assign (employees, name) {\n\n};\n// Message: Missing JSDoc @param \"name\" declaration.\n\ninterface ITest {\n/**\n * Test description.\n */\nTestMethod(id: number): void;\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSMethodSignature\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A test class.\n */\nabstract class TestClass\n{\n/**\n * A test method.\n */\nabstract TestFunction(id);\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSEmptyBodyFunctionExpression\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A test class.\n */\ndeclare class TestClass\n{\n/**\n *\n */\nTestMethod(id);\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSEmptyBodyFunctionExpression\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A test function.\n */\ndeclare let TestFunction: (id) => void;\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A test function.\n */\nlet TestFunction: (id) => void;\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A test function.\n */\nfunction test(\n  processor: (id: number) => string\n) {\n  return processor(10);\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A test function.\n */\nlet test = (processor: (id: number) => string) =>\n{\n  return processor(10);\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\nclass TestClass {\n  /**\n  * A class property.\n  */\n  public Test: (id: number) => string;\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\nclass TestClass {\n  /**\n   * A class method.\n   */\n  public TestMethod(): (id: number) => string\n  {\n  }\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\ninterface TestInterface {\n/**\n * An interface property.\n */\npublic Test: (id: number) => string;\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\ninterface TestInterface {\n  /**\n   * An interface method.\n   */\n  public TestMethod(): (id: number) => string;\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A function with return type\n */\nfunction test(): (id: number) => string;\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * A function with return type\n */\nlet test = (): (id: number) => string =>\n{\n  return (id) => `${id}`;\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n// Message: Missing JSDoc @param \"id\" declaration.\n\n/**\n * @param baz\n * @param options\n */\nfunction quux (baz, {foo: bar}) {\n\n}\n// Message: Missing JSDoc @param \"options.foo\" declaration.\n\nclass Client {\n  /**\n   * Set collection data.\n   * @param  {Object}   data                    The collection data object.\n   * @param  {number}   data.last_modified\n   * @param  {Object}   options            The options object.\n   * @param  {Object}   [options.headers]       The headers object option.\n   * @param  {Number}   [options.retry=0]       Number of retries to make\n   *     when faced with transient errors.\n   * @param  {Boolean}  [options.safe]          The safe option.\n   * @param  {Boolean}  [options.patch]         The patch option.\n   * @param  {Number}   [options.last_modified] The last_modified option.\n   * @return {Promise<Object, Error>}\n   */\n  async setData(\n    data: { last_modified?: number },\n    options: {\n      headers?: Record<string, string>;\n      safe?: boolean;\n      retry?: number;\n      patch?: boolean;\n      last_modified?: number;\n      permissions?: [];\n    } = {}\n  ) {}\n}\n// Message: Missing JSDoc @param \"options.permissions\" declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"enableFixer\":false}]\n// Message: Missing JSDoc @param \"foo\" declaration.\n\nclass Client {\n  /**\n   * Set collection data.\n   * @return {Promise<Object, Error>}\n   */\n  async setData(\n    data: { last_modified?: number }\n  ) {}\n}\n// Message: Missing JSDoc @param \"data\" declaration.\n\n/**\n * @param cfg\n * @param cfg.num\n */\nfunction quux ({num, ...extra}) {\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkRestProperty\":true}]\n// Message: Missing JSDoc @param \"cfg.extra\" declaration.\n\n/**\n * @param cfg\n * @param cfg.opts\n * @param cfg.opts.num\n */\nfunction quux ({opts: {num, ...extra}}) {\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkRestProperty\":true}]\n// Message: Missing JSDoc @param \"cfg.opts.extra\" declaration.\n\n/**\n * @param {GenericArray} cfg\n * @param {number} cfg.\"0\"\n */\nfunction baar ([a, ...extra]) {\n  //\n}\n// Message: Missing JSDoc @param \"cfg.\"1\"\" declaration.\n\n/**\n * @param a\n */\nfunction baar (a, ...extra) {\n  //\n}\n// Message: Missing JSDoc @param \"extra\" declaration.\n\n/**\n * Converts an SVGRect into an object.\n * @param {SVGRect} bbox - a SVGRect\n */\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"SVGRect\"}]\n// Message: Missing JSDoc @param \"bbox.x\" declaration.\n\n/**\n * Converts an SVGRect into an object.\n * @param {object} bbox - a SVGRect\n */\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n// Message: Missing JSDoc @param \"bbox.x\" declaration.\n\nmodule.exports = class GraphQL {\n  /**\n   * @param fetchOptions\n   * @param cacheKey\n   */\n  fetch = ({ url, ...options }, cacheKey) => {\n  }\n};\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkRestProperty\":true}]\n// Message: Missing JSDoc @param \"fetchOptions.url\" declaration.\n\n(function() {\n\t/**\n\t * A function.\n\t */\n\tfunction f(param) {\n\t\treturn !param;\n\t}\n})();\n// Message: Missing JSDoc @param \"param\" declaration.\n\n/**\n * Description.\n * @param {Object} options\n * @param {Object} options.foo\n */\nfunction quux ({ foo: { bar } }) {}\n// Message: Missing JSDoc @param \"options.foo.bar\" declaration.\n\n/**\n * Description.\n * @param {FooBar} options\n * @param {FooBar} options.foo\n */\nfunction quux ({ foo: { bar } }) {}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"FooBar\"}]\n// Message: Missing JSDoc @param \"options.foo.bar\" declaration.\n\n/**\n * Description.\n * @param {Object} options\n * @param {FooBar} foo\n */\nfunction quux ({ foo: { bar } }) {}\n// Message: Missing JSDoc @param \"options.foo\" declaration.\n\n/**\n * Description.\n * @param {Object} options\n * @param options.foo\n */\nfunction quux ({ foo: { bar } }) {}\n// Message: Missing JSDoc @param \"options.foo.bar\" declaration.\n\n/**\n * Description.\n * @param {object} options Options.\n * @param {object} options.foo A description.\n * @param {object} options.foo.bar\n */\nfunction foo({ foo: { bar: { baz } }}) {}\n// Message: Missing JSDoc @param \"options.foo.bar.baz\" declaration.\n\n/**\n* Returns a number.\n* @param {Object} props Props.\n* @param {Object} props.prop Prop.\n* @return {number} A number.\n*/\nexport function testFn1 ({ prop = { a: 1, b: 2 } }) {\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"useDefaultObjectProperties\":true}]\n// Message: Missing JSDoc @param \"props.prop.a\" declaration.\n\n/** Foo. */\nfunction foo(a, b, c) {}\n// Message: Missing JSDoc @param \"a\" declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param root0\n * @param root0.foo\n */\nfunction quux ({foo}) {\n\n}\n\n/**\n * @param root0\n * @param root0.foo\n * @param root1\n * @param root1.bar\n */\nfunction quux ({foo}, {bar}) {\n\n}\n\n/**\n * @param arg0\n * @param arg0.foo\n * @param arg1\n * @param arg1.bar\n */\nfunction quux ({foo}, {bar}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"unnamedRootBase\":[\"arg\"]}]\n\n/**\n * @param arg\n * @param arg.foo\n * @param config0\n * @param config0.bar\n * @param config1\n * @param config1.baz\n */\nfunction quux ({foo}, {bar}, {baz}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"unnamedRootBase\":[\"arg\",\"config\"]}]\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @inheritDoc\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"param\":\"arg\"}}}\n\n/**\n * @override\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @override\n */\nclass A {\n  /**\n    *\n    */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"overrideReplacesDocs\":true}}\n\n/**\n * @ignore\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignoreReplacesDocs\":true}}\n\n/**\n * @implements\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @implements\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @implements\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":true}}\n\n/**\n * @implements\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @augments\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @augments\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @extends\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @extends\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @augments\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @extends\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @override\n */\nclass A {\n  /**\n  * @param foo\n  */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @override\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"overrideReplacesDocs\":true}}\n\n/**\n * @ignore\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"ignoreReplacesDocs\":true}}\n\n/**\n * @implements\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"implementsReplacesDocs\":true}}\n\n/**\n * @implements\n */\nclass A {\n  /**\n   * @param foo\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @augments\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @augments\n */\nclass A {\n  /**\n   * @param foo\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @extends\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @extends\n */\nclass A {\n  /**\n   * @param foo\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @augments\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @extends\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {\"jsdoc\":{\"augmentsExtendsReplacesDocs\":true}}\n\n/**\n * @internal\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignoreInternal\":true}}\n\n/**\n * @private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n\n/**\n * @access private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n\n// issue 182: optional chaining\n/** @const {boolean} test */\nconst test = something?.find(_ => _)\n\n/** @type {RequestHandler} */\nfunction foo(req, res, next) {}\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"exemptedBy\":[\"type\"]}]\n\n/**\n * @override\n */\nvar A = class {\n  /**\n    *\n    */\n  quux (foo) {\n\n  }\n}\n\nexport class SomeClass {\n  /**\n   * @param property\n   */\n  constructor(private property: string) {}\n}\n\n/**\n * Assign the project to an employee.\n *\n * @param {object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nfunction assign({name, department}) {\n  // ...\n}\n\nexport abstract class StephanPlugin<O, D> {\n\n    /**\n     * Called right after Stephan loads the plugin file.\n     *\n     * @example\n     *```typescript\n     * type Options = {\n     *      verbose?: boolean;\n     *      token?: string;\n     * }\n     * ```\n     *\n     * Note that your Options type should only have optional properties...\n     *\n     * @param args Arguments compiled and provided by StephanClient.\n     * @param args.options The options as provided by the user, or an empty object if not provided.\n     * @param args.client The options as provided by the user, or an empty object if not provided.\n     * @param defaultOptions The default options as provided by the plugin, or an empty object.\n     */\n    public constructor({options, client}: {\n        options: O;\n        client: unknown;\n    }, defaultOptions: D) {\n\n    }\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"ArrowFunctionExpression\"]}]\n\n/**\n* A function with return type\n*\n* @param id\n*/\nlet test = (): (id: number) => string =>\n{\n  return (id) => `${id}`;\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"contexts\":[\"TSFunctionType\"]}]\n\n/** @abstract */\nclass base {\n/** @param {boolean} arg0 */\nconstructor(arg0) {}\n}\n\nclass foo extends base {\n/** @inheritDoc */\nconstructor(arg0) {\nsuper(arg0);\nthis.arg0 = arg0;\n}\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n    export abstract class StephanPlugin<O, D> {\n\n    /**\n     * Called right after Stephan loads the plugin file.\n     *\n     * @example\n     *```typescript\n     * type Options = {\n     *      verbose?: boolean;\n     *      token?: string;\n     * }\n     * ```\n     *\n     * Note that your Options type should only have optional properties...\n     *\n     * @param args Arguments compiled and provided by StephanClient.\n     * @param args.options The options as provided by the user, or an empty object if not provided.\n     * @param args.client The options as provided by the user, or an empty object if not provided.\n     * @param args.client.name The name of the client.\n     * @param defaultOptions The default options as provided by the plugin, or an empty object.\n     */\n    public constructor({ options, client: { name } }: {\n        options: O;\n        client: { name: string };\n    }, defaultOptions: D) {\n\n    }\n}\n\n/**\n* @param {string} cb\n*/\nfunction createGetter (cb) {\n  return function (...args) {\n    cb();\n  };\n}\n\n/**\n * @param cfg\n * @param cfg.num\n */\nfunction quux ({num, ...extra}) {\n}\n\n/**\n  * @param {GenericArray} cfg\n  * @param {number} cfg.\"0\"\n */\nfunction baar ([a, ...extra]) {\n  //\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"enableRestElementFixer\":false}]\n\n/**\n  * @param a\n */\nfunction baar (a, ...extra) {\n  //\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"enableRestElementFixer\":false}]\n\n/**\n* Converts an SVGRect into an object.\n* @param {SVGRect} bbox - a SVGRect\n*/\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n\n/**\n* Converts an SVGRect into an object.\n* @param {object} bbox - a SVGRect\n*/\nconst bboxToObj = function ({x, y, width, height}) {\n  return {x, y, width, height};\n};\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"SVGRect\"}]\n\nclass CSS {\n  /**\n   * Set one or more CSS properties for the set of matched elements.\n   *\n   * @param {Object} propertyObject - An object of property-value pairs to set.\n   */\n  setCssObject(propertyObject: {[key: string]: string | number}): void {\n  }\n}\n\n/**\n * @param foo\n * @param bar\n * @param cfg\n */\nfunction quux (foo, bar, {baz}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkDestructured\":false}]\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, {baz}) {\n\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkDestructuredRoots\":false}]\n\n/**\n * @param root\n * @param root.foo\n */\nfunction quux ({\"foo\": bar}) {\n\n}\n\n/**\n * @param root\n * @param root.\"foo\"\n */\nfunction quux ({foo: bar}) {\n\n}\n\n/**\n * Description.\n * @param {string} b Description `/**`.\n */\nmodule.exports = function a(b) {\n  console.info(b);\n};\n\n/**\n * Description.\n * @param {Object} options Options.\n * @param {FooBar} options.foo foo description.\n */\nfunction quux ({ foo: { bar } }) {}\n\n/**\n * Description.\n * @param {FooBar} options\n * @param {Object} options.foo\n */\nfunction quux ({ foo: { bar } }) {}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"checkTypesPattern\":\"FooBar\"}]\n\n/**\n * @param obj\n * @param obj.data\n * @param obj.data.\"0\"\n * @param obj.data.\"1\"\n * @param obj.data.\"2\"\n * @param obj.defaulting\n * @param obj.defaulting.\"0\"\n * @param obj.defaulting.\"1\"\n */\nfunction Item({\n  data: [foo, bar, ...baz],\n  defaulting: [quux, xyz] = []\n}) {\n}\n\n/**\n* Returns a number.\n* @param {Object} props Props.\n* @param {Object} props.prop Prop.\n* @return {number} A number.\n*/\nexport function testFn1 ({ prop = { a: 1, b: 2 } }) {\n}\n// \"jsdoc/require-param\": [\"error\"|\"warn\", {\"useDefaultObjectProperties\":false}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-property\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-property\"></a>\n### <code>require-property</code>\n\nRequires that all `@typedef` and `@namespace` tags have `@property`\nwhen their type is a plain `object`, `Object`, or `PlainObject`.\n\nNote that any other type, including a subtype of object such as\n`object<string, string>`, will not be reported.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-property-fixer-2\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-property-fixer-2\"></a>\n#### Fixer\n\nThe fixer for `require-property` will add an empty `@property`.\n\n|||\n|---|---|\n|Context|Everywhere|\n|Tags|`typedef`, `namespace`|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @typedef {object} SomeTypedef\n */\n// Message: Missing JSDoc @property.\n\nclass Test {\n    /**\n     * @typedef {object} SomeTypedef\n     */\n    quux () {}\n}\n// Message: Missing JSDoc @property.\n\n/**\n * @typedef {PlainObject} SomeTypedef\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":\"prop\"}}}\n// Message: Missing JSDoc @prop.\n\n/**\n * @namespace {Object} SomeName\n */\n// Message: Missing JSDoc @property.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\n\n/**\n * @property\n */\n\n/**\n * @typedef {Object} SomeTypedef\n * @property {SomeType} propName Prop description\n */\n\n/**\n * @typedef {object} SomeTypedef\n * @prop {SomeType} propName Prop description\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":\"prop\"}}}\n\n/**\n * @typedef {object} SomeTypedef\n * @property\n * // arbitrary property content\n */\n\n/**\n * @typedef {object<string, string>} SomeTypedef\n */\n\n/**\n * @typedef {string} SomeTypedef\n */\n\n/**\n * @namespace {object} SomeName\n * @property {SomeType} propName Prop description\n */\n\n/**\n * @namespace {object} SomeName\n * @property\n * // arbitrary property content\n */\n\n/**\n * @typedef {object} SomeTypedef\n * @property someProp\n * @property anotherProp This with a description\n * @property {anotherType} yetAnotherProp This with a type and desc.\n */\nfunction quux () {\n\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-property-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-property-description\"></a>\n### <code>require-property-description</code>\n\nRequires that each `@property` tag has a `description` value.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`property`|\n|Aliases|`prop`|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n// Message: Missing JSDoc @property \"foo\" description.\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @prop foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":\"prop\"}}}\n// Message: Missing JSDoc @prop \"foo\" description.\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":false}}}\n// Message: Unexpected tag `@property`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @typedef {SomeType} SomeTypedef\n */\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo Foo.\n */\n\n/**\n * @namespace {SomeType} SomeName\n * @property foo Foo.\n */\n\n/**\n * @class\n * @property foo Foo.\n */\n\n/**\n * Typedef with multi-line property type.\n *\n * @typedef {object} MyType\n * @property {function(\n *   number\n * )} numberEater Method which takes a number.\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-property-name\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-property-name\"></a>\n### <code>require-property-name</code>\n\nRequires that all function `@property` tags have names.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`property`|\n|Aliases|`prop`|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @typedef {SomeType} SomeTypedef\n * @property\n */\n// Message: There must be an identifier after @property type.\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {string}\n */\n// Message: There must be an identifier after @property tag.\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":false}}}\n// Message: Unexpected tag `@property`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {string} foo\n */\n\n/**\n * @namespace {SomeType} SomeName\n * @property {string} foo\n */\n\n/**\n * @class\n * @property {string} foo\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-property-type\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-property-type\"></a>\n### <code>require-property-type</code>\n\nRequires that each `@property` tag has a `type` value.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`property`|\n|Aliases|`prop`|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n// Message: Missing JSDoc @property \"foo\" type.\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @prop foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":\"prop\"}}}\n// Message: Missing JSDoc @prop \"foo\" type.\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"property\":false}}}\n// Message: Unexpected tag `@property`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @typedef {SomeType} SomeTypedef\n */\n\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n\n/**\n * @namespace {SomeType} SomeName\n * @property {number} foo\n */\n\n/**\n * @class\n * @property {number} foo\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-check\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-check\"></a>\n### <code>require-returns-check</code>\n\nRequires a return statement (or non-`undefined` Promise resolve value) in\nfunction bodies if a `@returns` tag (without a `void` or `undefined` type)\nis specified in the function's jsdoc comment.\n\nWill also report `@returns {void}` and `@returns {undefined}` if `exemptAsync`\nis set to `false` no non-`undefined` returned or resolved value is found.\n\nWill also report if multiple `@returns` tags are present.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-check-options-33\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-check-options-33\"></a>\n#### Options\n\n- `exemptGenerators`- Because a generator might be labeled as having a\n  `IterableIterator` `@returns` value (along with an iterator type\n  corresponding to the type of any `yield` statements), projects might wish to\n  leverage `@returns` in generators even without a` return` statement. This\n  option is therefore `true` by default in `typescript` mode (in \"jsdoc\" mode,\n  one might be more likely to take advantage of `@yields`). Set it to `false`\n  if you wish for a missing `return` to be flagged regardless.\n- `exemptAsync` - By default, functions which return a `Promise` that are not\n    detected as resolving with a non-`undefined` value and `async` functions\n    (even ones that do not explicitly return a value, as these are returning a\n    `Promise` implicitly) will be exempted from reporting by this rule.\n    If you wish to insist that only `Promise`'s which resolve to\n    non-`undefined` values or `async` functions with explicit `return`'s will\n    be exempted from reporting (i.e., that `async` functions can be reported\n    if they lack an explicit (non-`undefined`) `return` when a `@returns` is\n    present), you can set `exemptAsync` to `false` on the options object.\n- `reportMissingReturnForUndefinedTypes` - If `true` and no return or\n    resolve value is found, this setting will even insist that reporting occur\n    with `void` or `undefined` (including as an indicated `Promise` type).\n    Unlike `require-returns`, with this option in the rule, one can\n     *discourage* the labeling of `undefined` types. Defaults to `false`.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n|Aliases|`return`|\n|Options|`exemptAsync`, `reportMissingReturnForUndefinedTypes`|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns\n */\nfunction quux (foo) {\n\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @return\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":\"return\"}}}\n// Message: JSDoc @return declaration present but return expression not available in function.\n\n/**\n * @returns\n */\nconst quux = () => {}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {undefined} Foo.\n * @returns {String} Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n// Message: Found more than one @returns declaration.\n\nconst language = {\n  /**\n   * @param {string} name\n   * @returns {string}\n   */\n  get name() {\n    this._name = name;\n  }\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\nclass Foo {\n  /**\n   * @returns {string}\n   */\n  bar () {\n  }\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":false}}}\n// Message: Unexpected tag `@returns`\n\n/**\n * @returns {string}\n */\nfunction f () {\n  function g() {\n    return 'foo'\n  }\n\n  () => {\n    return 5\n  }\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {Promise<void>}\n */\nasync function quux() {}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {IterableIterator<any>}\n */\nfunction * quux() {}\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {IterableIterator<any>}\n */\nfunction * quux() {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptGenerators\":false}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {Promise<void>}\n */\nfunction quux() {\n  return new Promise((resolve, reject) => {})\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {Promise<void>}\n */\nfunction quux() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    });\n  })\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * Description.\n * @returns {string}\n */\nasync function foo() {\n  return new Promise(resolve => resolve());\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * Description.\n * @returns {void}\n */\nasync function foo() {\n  return new Promise(resolve => resolve());\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false,\"reportMissingReturnForUndefinedTypes\":true}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns { void } Foo.\n */\nfunction quux () {}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"reportMissingReturnForUndefinedTypes\":true}]\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {never} Foo.\n */\nfunction quux () {\n  return undefined;\n}\n// Message: JSDoc @returns declaration set with \"never\" but return expression is present in function.\n\n/**\n * @returns {never}\n */\nfunction quux (foo) {\n  return foo;\n}\n// Message: JSDoc @returns declaration set with \"never\" but return expression is present in function.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n * @returns {string} Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n * @returns {string} Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n *\n */\nfunction quux () {\n}\n\n/**\n * @returns {*} Foo.\n */\nconst quux = () => foo;\n\n/**\n * @returns {undefined} Foo.\n */\nfunction quux () {}\n\n/**\n * @returns { void } Foo.\n */\nfunction quux () {}\n\n/**\n * @returns {Promise<void>}\n */\nasync function quux() {}\n\n/**\n * @returns {Promise<void>}\n */\nconst quux = async function () {}\n\n/**\n * @returns {Promise<void>}\n */\nconst quux = async () => {}\n\n/**\n * @returns Foo.\n * @abstract\n */\nfunction quux () {\n  throw new Error('must be implemented by subclass!');\n}\n\n/**\n * @returns Foo.\n * @virtual\n */\nfunction quux () {\n  throw new Error('must be implemented by subclass!');\n}\n\n/**\n * @returns Foo.\n * @constructor\n */\nfunction quux () {\n}\n\n/**\n * @interface\n */\nclass Foo {\n  /**\n   * @returns {string}\n   */\n  bar () {\n  }\n}\n\n/**\n * @record\n */\nclass Foo {\n  /**\n   * @returns {string}\n   */\n  bar () {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @returns {undefined} Foo.\n */\nfunction quux () {\n}\n\n/**\n * @returns {void} Foo.\n */\nfunction quux () {\n}\n\n/**\n * @returns {void} Foo.\n */\nfunction quux () {\n  return undefined;\n}\n\n/**\n * @returns {never} Foo.\n */\nfunction quux () {\n}\n\n/**\n * @returns {void} Foo.\n */\nfunction quux () {\n  return;\n}\n\n/**\n *\n */\nfunction quux () {\n  return undefined;\n}\n\n/**\n *\n */\nfunction quux () {\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n    return true;\n  } catch (err) {\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n  } finally {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n    return;\n  } catch (err) {\n  }\n  return true;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n    something();\n  } catch (err) {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  switch (true) {\n  case 'abc':\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  switch (true) {\n  case 'abc':\n    return;\n  }\n  return true;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  for (const i of abc) {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  for (const a in b) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  for (let i=0; i<n; i+=1) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  while(true) {\n    return true\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  do {\n    return true\n  }\n  while(true)\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  if (true) {\n    return;\n  }\n  return true;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  if (true) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  var a = {};\n  with (a) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  if (true) {\n    return;\n  } else {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {Promise<number>}\n */\nasync function quux() {\n  return 5;\n}\n\n/**\n * @returns {Promise<number>}\n */\nasync function quux() {\n  return 5;\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false}]\n\n/**\n * @returns {Promise<void>}\n */\nfunction quux() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(true);\n    });\n  })\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptAsync\":false}]\n\n/**\n * Description.\n * @returns {void}\n */\nasync function foo() {\n  return new Promise(resolve => resolve());\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"reportMissingReturnForUndefinedTypes\":true}]\n\n/**\n * @returns { void } Foo.\n */\nfunction quux () {\n  return undefined;\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"reportMissingReturnForUndefinedTypes\":true}]\n\n/**\n * @returns { string } Foo.\n */\nfunction quux () {\n  return 'abc';\n}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"reportMissingReturnForUndefinedTypes\":true}]\n\n/**\n * @returns {IterableIterator<any>}\n */\nfunction * quux() {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @returns {IterableIterator<any>}\n */\nfunction * quux() {}\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// \"jsdoc/require-returns-check\": [\"error\"|\"warn\", {\"exemptGenerators\":true}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-description\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-description\"></a>\n### <code>require-returns-description</code>\n\nRequires that the `@returns` tag has a `description` value. The error\nwill not be reported if the return value is `void` or `undefined`\nor if it is `Promise<void>` or `Promise<undefined>`.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-description-options-34\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-description-options-34\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-description-options-34-contexts-12\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-description-options-34-contexts-12\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`returns`|\n|Aliases|`return`|\n|Recommended|true|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @returns description.\n\n/**\n * @returns {string}\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @returns description.\n\n/**\n * @returns {string}\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-returns-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @returns description.\n\n/**\n * @function\n * @returns {string}\n */\n// \"jsdoc/require-returns-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @returns description.\n\n/**\n * @callback\n * @returns {string}\n */\n// \"jsdoc/require-returns-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @returns description.\n\n/**\n * @return\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":\"return\"}}}\n// Message: Missing JSDoc @return description.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":false}}}\n// Message: Unexpected tag `@returns`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-returns-description\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @returns {undefined}\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {Promise<void>}\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {Promise<undefined>}\n */\nfunction quux () {\n\n}\n\n/**\n * @function\n * @returns\n */\n\n/**\n * @callback\n * @returns\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-type\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-type\"></a>\n### <code>require-returns-type</code>\n\nRequires that `@returns` tag has `type` value.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-type-options-35\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-type-options-35\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-type-options-35-contexts-13\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-type-options-35-contexts-13\"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context (or an object with\n`context` and `comment` properties) where you wish the rule to be applied.\nOverrides the default contexts (see below). Set to `\"any\"` if you want\nthe rule to apply to any jsdoc block throughout your files (as is necessary\nfor finding function blocks not attached to a function declaration or\nexpression, i.e., `@callback` or `@function` (or its aliases `@func` or\n`@method`) (including those associated with an `@interface`).\n\nSee the [\"AST and Selectors\"](#user-content-eslint-plugin-jsdoc-advanced-ast-and-selectors)\nsection of our README for more on the expected format.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`returns`|\n|Aliases|`return`|\n|Recommended|true|\n|Options|`contexts`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @returns type.\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @returns type.\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-returns-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @returns type.\n\n/**\n * @function\n * @returns Foo.\n */\n// \"jsdoc/require-returns-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @returns type.\n\n/**\n * @callback\n * @returns Foo.\n */\n// \"jsdoc/require-returns-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n// Message: Missing JSDoc @returns type.\n\n/**\n * @return Foo.\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":\"return\"}}}\n// Message: Missing JSDoc @return type.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":false}}}\n// Message: Unexpected tag `@returns`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @returns {number}\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {number}\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-returns-type\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n * @returns Foo.\n */\n\n/**\n * @callback\n * @returns Foo.\n */\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns\"></a>\n### <code>require-returns</code>\n\nRequires that returns are documented.\n\nWill also report if multiple `@returns` tags are present.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-returns-options-36\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-options-36\"></a>\n#### Options\n\n- `checkConstructors` - A value indicating whether `constructor`s should\n    be checked for `@returns` tags. Defaults to `false`.\n- `checkGetters` - Boolean to determine whether getter methods should\n    be checked for `@returns` tags. Defaults to `true`.\n- `exemptedBy` - Array of tags (e.g., `['type']`) whose presence on the\n    document block avoids the need for a `@returns`. Defaults to an array\n    with `inheritdoc`. If you set this array, it will overwrite the default,\n    so be sure to add back `inheritdoc` if you wish its presence to cause\n    exemption of the rule.\n- `forceRequireReturn` - Set to `true` to always insist on\n    `@returns` documentation regardless of implicit or explicit `return`'s\n    in the function. May be desired to flag that a project is aware of an\n    `undefined`/`void` return. Defaults to `false`.\n- `forceReturnsWithAsync` - By default `async` functions that do not explicitly\n    return a value pass this rule as an `async` function will always return a\n    `Promise`, even if the `Promise` resolves to void. You can force all\n    `async` functions (including ones with an explicit `Promise` but no\n    detected non-`undefined` `resolve` value) to require `@return`\n    documentation by setting `forceReturnsWithAsync` to `true` on the options\n    object. This may be useful for flagging that there has been consideration\n    of return type. Defaults to `false`.\n- `contexts` - Set this to an array of strings representing the AST context\n    (or an object with `context` and `comment` properties) where you wish\n    the rule to be applied.\n    Overrides the default contexts (see below). Set to `\"any\"` if you want\n    the rule to apply to any jsdoc block throughout your files (as is necessary\n    for finding function blocks not attached to a function declaration or\n    expression, i.e., `@callback` or `@function` (or its aliases `@func` or\n    `@method`) (including those associated with an `@interface`). This\n    rule will only apply on non-default contexts when there is such a tag\n    present and the `forceRequireReturn` option is set or if the\n    `forceReturnsWithAsync` option is set with a present `@async` tag\n    (since we are not checking against the actual `return` values in these\n    cases).\n\n|          |         |\n| -------- | ------- |\n| Context  | `ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled |\n| Tags     | `returns` |\n| Aliases  | `return` |\n|Recommended|true|\n| Options  | `checkConstructors`, `checkGetters`, `contexts`, `exemptedBy`, `forceRequireReturn`, `forceReturnsWithAsync` |\n| Settings | `ignoreReplacesDocs`, `overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs` |\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n  return foo;\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst foo = () => ({\n  bar: 'baz'\n})\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst foo = bar=>({ bar })\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst foo = bar => bar.baz()\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return foo;\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":\"return\"}}}\n// Message: Missing JSDoc @return declaration.\n\n/**\n *\n */\nasync function quux() {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst quux = async function () {}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst quux = async () => {}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nasync function quux () {}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @function\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @callback\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\nconst language = {\n  /**\n   * @param {string} name\n   */\n  get name() {\n    return this._name;\n  }\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nasync function quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @function\n * @async\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @callback\n * @async\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @returns {undefined}\n * @returns {void}\n */\nfunction quux (foo) {\n\n  return foo;\n}\n// Message: Found more than one @returns declaration.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"returns\":false}}}\n// Message: Unexpected tag `@returns`\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n  return 'bar';\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"exemptedBy\":[\"notPresent\"]}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @param {array} a\n */\nasync function foo(a) {\n  return;\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @param {array} a\n */\nasync function foo(a) {\n  return Promise.all(a);\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\nclass foo {\n  /** gets bar */\n  get bar() {\n    return 0;\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n// Message: Missing JSDoc @returns declaration.\n\nclass TestClass {\n  /**\n   *\n   */\n  constructor() {\n    return new Map();\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkConstructors\":true}]\n// Message: Missing JSDoc @returns declaration.\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() {\n    return 0;\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n// Message: Missing JSDoc @returns declaration.\n\nclass quux {\n  /**\n   *\n   */\n  quux () {\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireReturn\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    resolve(foo);\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    setTimeout(() => {\n      resolve(true);\n    });\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    foo(resolve);\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    while(true) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    do {\n      resolve(true);\n    }\n    while(true)\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    if (true) {\n      resolve(true);\n    }\n    return;\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    if (true) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  var a = {};\n  return new Promise((resolve, reject) => {\n    with (a) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  var a = {};\n  return new Promise((resolve, reject) => {\n    try {\n      resolve(true);\n    } catch (err) {}\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  var a = {};\n  return new Promise((resolve, reject) => {\n    try {\n    } catch (err) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  var a = {};\n  return new Promise((resolve, reject) => {\n    try {\n    } catch (err) {\n    } finally {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  var a = {};\n  return new Promise((resolve, reject) => {\n    switch (a) {\n    case 'abc':\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    if (true) {\n      resolve();\n    } else {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    for (let i = 0; i < 5 ; i++) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    for (const i of obj) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    for (const i in obj) {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    if (true) {\n      return;\n    } else {\n      resolve(true);\n    }\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    function a () {\n      resolve(true);\n    }\n    a();\n  });\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n  return new Promise();\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nasync function quux () {\n  return new Promise();\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nasync function quux () {\n  return new Promise((resolve, reject) => {});\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n// Message: Missing JSDoc @returns declaration.\n\nexport class A {\n  /**\n   * Description.\n   */\n  public f(): string {\n    return \"\";\n  }\n}\n\nexport interface B {\n  /**\n   * Description.\n   */\n  f(): string;\n\n  /**\n   * Description.\n   */\n  g: () => string;\n\n  /**\n   * Description.\n   */\n  h(): void;\n\n  /**\n   * Description.\n   */\n  i: () => void;\n}\n\n/**\n * Description.\n */\nexport function f(): string {\n  return \"\";\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\":not(BlockStatement) > FunctionDeclaration\",\"MethodDefinition\",\"TSMethodSignature\",\"TSPropertySignature > TSTypeAnnotation > TSFunctionType\"]}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @param ms time in millis\n */\nexport const sleep = (ms: number) =>\n  new Promise<string>((res) => setTimeout(res, ms));\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @param ms time in millis\n */\nexport const sleep = (ms: number) => {\n  return new Promise<string>((res) => setTimeout(res, ms));\n};\n// Message: Missing JSDoc @returns declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n *\n */\nfunction quux () {\n}\n\n/**\n *\n */\nfunction quux (bar) {\n  bar.filter(baz => {\n    return baz.corge();\n  })\n}\n\n/**\n * @returns Array\n */\nfunction quux (bar) {\n  return bar.filter(baz => {\n    return baz.corge();\n  })\n}\n\n/**\n * @returns Array\n */\nconst quux = (bar) => bar.filter(({ corge }) => corge())\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n}\n\n/**\n * @constructor\n */\nfunction quux (foo) {\n  return true;\n}\n\n/**\n * @implements\n */\nfunction quux (foo) {\n  return true;\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n  return foo;\n}\n\n/**\n * @class\n */\nfunction quux (foo) {\n  return true;\n}\n\n/**\n * @constructor\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @returns {object}\n */\nfunction quux () {\n\n  return {a: foo};\n}\n\n/**\n * @returns {object}\n */\nconst quux = () => ({a: foo});\n\n/**\n * @returns {object}\n */\nconst quux = () => {\n  return {a: foo}\n};\n\n/**\n * @returns {void}\n */\nfunction quux () {\n}\n\n/**\n * @returns {void}\n */\nconst quux = () => {\n\n}\n\n/**\n * @returns {undefined}\n */\nfunction quux () {\n}\n\n/**\n * @returns {undefined}\n */\nconst quux = () => {\n\n}\n\n/**\n *\n */\nfunction quux () {\n}\n\n/**\n *\n */\nconst quux = () => {\n\n}\n\nclass Foo {\n  /**\n   *\n   */\n  constructor () {\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\nconst language = {\n  /**\n   * @param {string} name\n   */\n  set name(name) {\n    this._name = name;\n  }\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return undefined;\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return undefined;\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return;\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return;\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/** @type {RequestHandler} */\nfunction quux (req, res , next) {\n  return;\n}\n\n/**\n * @returns {Promise}\n */\nasync function quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/**\n * @returns {Promise}\n */\nasync function quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n\n/**\n *\n */\nasync function quux () {}\n\n/**\n *\n */\nconst quux = async function () {}\n\n/**\n *\n */\nconst quux = async () => {}\n\n/** foo class */\nclass foo {\n  /** foo constructor */\n  constructor () {\n    // =>\n    this.bar = true;\n  }\n}\n\nexport default foo;\n\n/**\n *\n */\nfunction quux () {\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"exemptedBy\":[\"type\"]}]\n\n/**\n * @param {array} a\n */\nasync function foo(a) {\n  return;\n}\n\n/**\n *\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @async\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/**\n * @callback\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceRequireReturn\":true}]\n\n/**\n * @function\n * @async\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n\n/**\n * @callback\n * @async\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"forceReturnsWithAsync\":true}]\n\n/**\n * @function\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceReturnsWithAsync\":true}]\n\n/**\n * @callback\n */\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceReturnsWithAsync\":true}]\n\nclass foo {\n  get bar() {\n    return 0;\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkGetters\":false}]\n\nclass foo {\n  /** @returns zero */\n  get bar() {\n    return 0;\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkGetters\":true}]\n\nclass foo {\n  /** @returns zero */\n  get bar() {\n    return 0;\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkGetters\":false}]\n\nclass TestClass {\n  /**\n   *\n   */\n  constructor() { }\n}\n\nclass TestClass {\n  /**\n   * @returns A map.\n   */\n  constructor() {\n    return new Map();\n  }\n}\n\nclass TestClass {\n  /**\n   *\n   */\n  constructor() { }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkConstructors\":false}]\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() { }\n}\n\nclass TestClass {\n  /**\n   * @returns A number.\n   */\n  get Test() {\n    return 0;\n  }\n}\n\nclass TestClass {\n  /**\n   *\n   */\n  get Test() {\n    return 0;\n  }\n}\n// \"jsdoc/require-returns\": [\"error\"|\"warn\", {\"checkGetters\":false}]\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    resolve();\n  });\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    setTimeout(() => {\n      resolve();\n    });\n  });\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    foo();\n  });\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    abc((resolve) => {\n      resolve(true);\n    });\n  });\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return new Promise(function (resolve, reject) {\n    abc(function (resolve) {\n      resolve(true);\n    });\n  });\n}\n\n/**\n *\n */\nfunction quux () {\n  return new Promise((resolve, reject) => {\n    if (true) {\n      resolve();\n    }\n  });\n  return;\n}\n\n/**\n *\n */\nfunction quux () {\n  return new Promise();\n}\n\n/**\n * Description.\n */\nasync function foo() {\n  return new Promise(resolve => resolve());\n}\n\n/**\n * @param {array} a\n */\nasync function foo(a) {\n  return Promise.all(a);\n}\n\n/**\n * @param ms time in millis\n */\nexport const sleep = (ms: number) =>\n  new Promise<void>((res) => setTimeout(res, ms));\n\n/**\n * @param ms time in millis\n */\nexport const sleep = (ms: number) => {\n  return new Promise<void>((res) => setTimeout(res, ms));\n};\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-throws\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-throws\"></a>\n### <code>require-throws</code>\n\nRequires that throw statements are documented.\n\nNote that since throw statements within async functions end up as rejected\nPromises, they are not considered as throw statements for the purposes of this\nrule. See [issue 755](https://github.com/gajus/eslint-plugin-jsdoc/issues/755)\nfor our desire for a separate tag to document rejection types and see\n[this discussion](https://stackoverflow.com/questions/50071115/typescript-promise-rejection-type)\non why TypeScript doesn't offer such a feature.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-throws-options-37\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-throws-options-37\"></a>\n#### Options\n\n- `exemptedBy` - Array of tags (e.g., `['type']`) whose presence on the\n    document block avoids the need for a `@throws`. Defaults to an array\n    with `inheritdoc`. If you set this array, it will overwrite the default,\n    so be sure to add back `inheritdoc` if you wish its presence to cause\n    exemption of the rule.\n- `contexts` - Set this to an array of strings representing the AST context\n    (or an object with `context` and `comment` properties) where you wish\n    the rule to be applied.\n    Overrides the default contexts (see below). Set to `\"any\"` if you want\n    the rule to apply to any jsdoc block throughout your files (as is necessary\n    for finding function blocks not attached to a function declaration or\n    expression, i.e., `@callback` or `@function` (or its aliases `@func` or\n    `@method`) (including those associated with an `@interface`).\n\n```js\n'jsdoc/require-throws': 'error',\n```\n\n| | |\n| -------- | --- |\n| Context  | `ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled |\n| Tags     | `throws` |\n| Aliases  | `exception` |\n|Recommended|true|\n| Options  | `contexts`, `exemptedBy` |\n| Settings | `ignoreReplacesDocs`, `overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs` |\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n  throw new Error('err')\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nconst quux = function (foo) {\n  throw new Error('err')\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nconst quux = (foo) => {\n  throw new Error('err')\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  while(true) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  do {\n    throw new Error('err')\n  } while(true)\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  for(var i = 0; i <= 10; i++) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  for(num in [1,2,3]) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  for(const num of [1,2,3]) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  for(const index in [1,2,3]) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  with(foo) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  if (true) {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  if (false) {\n    // do nothing\n  } else {\n    throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  try {\n    throw new Error('err')\n  } catch(e) {\n    throw new Error(e.message)\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  try {\n    // do nothing\n  } finally {\n    throw new Error(e.message)\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n  const a = 'b'\n  switch(a) {\n    case 'b':\n      throw new Error('err')\n  }\n}\n// Message: Missing JSDoc @throws declaration.\n\n/**\n * @throws\n */\nfunction quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"throws\":false}}}\n// Message: Unexpected tag `@throws`\n\n/**\n *\n */\nconst directThrowAfterArrow = (b) => {\n  const a = () => {};\n  if (b) {\n    throw new Error('oops')\n  }\n  return a;\n};\n// Message: Missing JSDoc @throws declaration.\n\n/**\n * @throws {never}\n */\nfunction quux (foo) {\n  throw new Error('err')\n}\n// Message: JSDoc @throws declaration set to \"never\" but throw value found.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @throws An error.\n */\nfunction quux () {\n  throw new Error('err')\n}\n\n/**\n *\n */\nfunction quux (foo) {\n  try {\n    throw new Error('err')\n  } catch(e) {}\n}\n\n/**\n * @throws {object}\n */\nfunction quux (foo) {\n  throw new Error('err')\n}\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n  throw new Error('err')\n}\n\n/**\n * @abstract\n */\nfunction quux (foo) {\n  throw new Error('err')\n}\n\n/**\n *\n */\nfunction quux (foo) {\n}\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n  throw new Error('err')\n}\n// \"jsdoc/require-throws\": [\"error\"|\"warn\", {\"exemptedBy\":[\"type\"]}]\n\n/**\n *\n */\nconst itself = (n) => n;\n\n/**\n * Not tracking on nested function\n */\nconst nested = () => () => {throw new Error('oops');};\n\n/**\n */\nasync function foo() {\n  throw Error(\"bar\");\n}\n\n/**\n * @throws {never}\n */\nfunction quux (foo) {\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-yields\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-yields\"></a>\n### <code>require-yields</code>\n\nRequires that yields are documented.\n\nWill also report if multiple `@yields` tags are present.\n\nSee the `next`, `forceRequireNext`, and `nextWithGeneratorTag` options for an\noption to expect a non-standard `@next` tag.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-yields-options-38\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-yields-options-38\"></a>\n#### Options\n\n- `exemptedBy` - Array of tags (e.g., `['type']`) whose presence on the\n    document block avoids the need for a `@yields`. Defaults to an array\n    with `inheritdoc`. If you set this array, it will overwrite the default,\n    so be sure to add back `inheritdoc` if you wish its presence to cause\n    exemption of the rule.\n- `forceRequireYields` - Set to `true` to always insist on\n    `@yields` documentation for generators even if there are only\n    expressionless `yield` statements in the function. May be desired to flag\n    that a project is aware of an `undefined`/`void` yield. Defaults to\n    `false`.\n- `contexts` - Set this to an array of strings representing the AST context\n    (or an object with `context` and `comment` properties) where you wish\n    the rule to be applied.\n    Overrides the default contexts (see below). Set to `\"any\"` if you want\n    the rule to apply to any jsdoc block throughout your files (as is necessary\n    for finding function blocks not attached to a function declaration or\n    expression, i.e., `@callback` or `@function` (or its aliases `@func` or\n    `@method`) (including those associated with an `@interface`). This\n    rule will only apply on non-default contexts when there is such a tag\n    present and the `forceRequireYields` option is set or if the\n    `withGeneratorTag` option is set with a present `@generator` tag\n    (since we are not checking against the actual `yield` values in these\n    cases).\n- `withGeneratorTag` - If a `@generator` tag is present on a block, require\n    `@yields`/`@yield`. Defaults to `true`. See `contexts` to `any` if you want\n    to catch `@generator` with `@callback` or such not attached to a function.\n- `next` - If `true`, this option will insist that any use of a `yield` return\n    value (e.g., `const rv = yield;` or `const rv = yield value;`) has a\n    (non-standard) `@next` tag (in addition to any `@yields` tag) so as to be\n    able to document the type expected to be supplied into the iterator\n    (the `Generator` iterator that is returned by the call to the generator\n    function) to the iterator (e.g., `it.next(value)`). The tag will not be\n    expected if the generator function body merely has plain `yield;` or\n    `yield value;` statements without returning the values. Defaults to\n    `false`.\n- `forceRequireNext` - Set to `true` to always insist on\n    `@next` documentation even if there are no `yield` statements in the\n    function or none return values. May be desired to flag that a project is\n    aware of the expected yield return being `undefined`. Defaults to `false`.\n- `nextWithGeneratorTag` - If a `@generator` tag is present on a block, require\n    (non-standard ) `@next` (see `next` option). This will require using `void`\n    or `undefined` in cases where generators do not use the `next()`-supplied\n    incoming `yield`-returned value. Defaults to `false`. See `contexts` to\n    `any` if you want to catch `@generator` with `@callback` or such not\n    attached to a function.\n\n|||\n|---|---|\n|Context|Generator functions (`FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled)|\n|Tags|`yields`|\n|Aliases|`yield`|\n|Recommended|true|\n| Options  | `contexts`,  `exemptedBy`, `withGeneratorTag`, `nextWithGeneratorTag`, `forceRequireYields`, `next` |\n| Settings | `ignoreReplacesDocs`, `overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs` |\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction * quux (foo) {\n\n  yield foo;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @yields\n */\nfunction * quux (foo) {\n\n  const retVal = yield foo;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: Missing JSDoc @next declaration.\n\n/**\n * @yields\n */\nfunction * quux (foo) {\n\n  const retVal = yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: Missing JSDoc @next declaration.\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireNext\":true}]\n// Message: Missing JSDoc @next declaration.\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireNext\":true}]\n// Message: Missing JSDoc @next declaration.\n\n/**\n *\n */\nfunction * quux (foo) {\n\n  const a = yield foo;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux (foo) {\n  yield foo;\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"yields\":\"yield\"}}}\n// Message: Missing JSDoc @yield declaration.\n\n/**\n * @yields\n */\nfunction * quux (foo) {\n  const val = yield foo;\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"next\":\"yield-returns\"}}}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: Missing JSDoc @yield-returns declaration.\n\n/**\n * @yields\n * @next\n */\nfunction * quux () {\n  const ret = yield 5;\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"next\":false}}}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: Unexpected tag `@next`\n\n/**\n *\n */\nfunction * quux() {\n  yield 5;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux() {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nconst quux = async function * () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nasync function * quux () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @function\n * @generator\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @callback\n * @generator\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @yields {undefined}\n * @yields {void}\n */\nfunction * quux (foo) {\n\n  return foo;\n}\n// Message: Found more than one @yields declaration.\n\n/**\n * @yields\n */\nfunction * quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"yields\":false}}}\n// Message: Unexpected tag `@yields`\n\n/**\n * @param foo\n */\nfunction * quux (foo) {\n  yield 'bar';\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"exemptedBy\":[\"notPresent\"]}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @param {array} a\n */\nasync function * foo(a) {\n  return;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @param {array} a\n */\nasync function * foo(a) {\n  yield Promise.all(a);\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\nclass quux {\n  /**\n   *\n   */\n  * quux () {\n    yield;\n  }\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"forceRequireYields\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @param {array} a\n */\nasync function * foo(a) {\n  yield Promise.all(a);\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @generator\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"withGeneratorTag\":true}]\n// Message: Missing JSDoc @yields declaration.\n\n/**\n * @generator\n * @yields\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"nextWithGeneratorTag\":true}]\n// Message: Missing JSDoc @next declaration.\n\n/**\n *\n */\nfunction * quux () {\n  if (true) {\n    yield;\n  }\n  yield true;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  try {\n    yield true;\n  } catch (err) {\n  }\n  yield;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  try {\n  } finally {\n    yield true;\n  }\n  yield;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  try {\n    yield;\n  } catch (err) {\n  }\n  yield true;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  try {\n    something();\n  } catch (err) {\n    yield true;\n  }\n  yield;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  switch (true) {\n  case 'abc':\n    yield true;\n  }\n  yield;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  switch (true) {\n  case 'abc':\n    yield;\n  }\n  yield true;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  for (const i of abc) {\n    yield true;\n  }\n  yield;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  for (const a in b) {\n    yield true;\n  }\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  for (let i=0; i<n; i+=1) {\n    yield true;\n  }\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  while(true) {\n    yield true\n  }\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  do {\n    yield true\n  }\n  while(true)\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  if (true) {\n    yield;\n  }\n  yield true;\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  if (true) {\n    yield true;\n  }\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  var a = {};\n  with (a) {\n    yield true;\n  }\n}\n// Message: Missing JSDoc @yields declaration.\n\n/**\n *\n */\nfunction * quux () {\n  if (true) {\n    yield;\n  } else {\n    yield true;\n  }\n  yield;\n}\n// Message: Missing JSDoc @yields declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @yields Foo.\n */\nfunction * quux () {\n\n  yield foo;\n}\n\n/**\n * @yields Foo.\n */\nfunction * quux () {\n\n  yield foo;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n *\n */\nfunction * quux () {\n}\n\n/**\n *\n */\nfunction * quux () {\n  yield;\n}\n\n/**\n *\n */\nfunction quux (bar) {\n  bar.doSomething(function * (baz) {\n    yield baz.corge();\n  })\n}\n\n/**\n * @yields {Array}\n */\nfunction * quux (bar) {\n  yield bar.doSomething(function * (baz) {\n    yield baz.corge();\n  })\n}\n\n/**\n * @inheritdoc\n */\nfunction * quux (foo) {\n}\n\n/**\n * @override\n */\nfunction * quux (foo) {\n}\n\n/**\n * @constructor\n */\nfunction * quux (foo) {\n}\n\n/**\n * @implements\n */\nfunction * quux (foo) {\n  yield;\n}\n\n/**\n * @override\n */\nfunction * quux (foo) {\n\n  yield foo;\n}\n\n/**\n * @class\n */\nfunction * quux (foo) {\n  yield foo;\n}\n\n/**\n * @constructor\n */\nfunction * quux (foo) {\n}\n\n/**\n * @yields {object}\n */\nfunction * quux () {\n\n  yield {a: foo};\n}\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n}\n\n/**\n * @yields {undefined}\n */\nfunction * quux () {\n}\n\n/**\n *\n */\nfunction * quux () {\n}\n\n/**\n * @yields {void}\n */\nfunction quux () {\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/**\n * @yields {void}\n * @next {void}\n */\nfunction * quux () {\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireNext\":true}]\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n  yield undefined;\n}\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n  yield undefined;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n  yield;\n}\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/** @type {SpecialIterator} */\nfunction * quux () {\n  yield 5;\n}\n\n/**\n * @yields {Something}\n */\nasync function * quux () {\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/**\n *\n */\nasync function * quux () {}\n\n/**\n *\n */\nconst quux = async function * () {}\n\n/**\n * @type {MyCallback}\n */\nfunction * quux () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"exemptedBy\":[\"type\"]}]\n\n/**\n * @param {array} a\n */\nasync function * foo (a) {\n  yield;\n}\n\n/**\n *\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"]}]\n\n/**\n * @function\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/**\n * @callback\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"forceRequireYields\":true}]\n\n/**\n * @generator\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"withGeneratorTag\":true}]\n\n/**\n * @generator\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"nextWithGeneratorTag\":true}]\n\n/**\n * @generator\n * @yields\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"withGeneratorTag\":true}]\n\n/**\n * @generator\n * @yields\n * @next\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"nextWithGeneratorTag\":true}]\n\n/**\n * @generator\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"withGeneratorTag\":false}]\n\n/**\n * @generator\n * @yields\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"nextWithGeneratorTag\":false}]\n\n/**\n * @yields\n */\nfunction * quux (foo) {\n\n  const a = yield foo;\n}\n\n/**\n * @yields\n * @next\n */\nfunction * quux (foo) {\n  let a = yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n\n/**\n * @yields\n * @next\n */\nfunction * quux (foo) {\n  const a = yield foo;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n\n/**\n *\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"nextWithGeneratorTag\":true}]\n\n/**\n *\n */\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"next\":true}]\n\n/**\n *\n */\nfunction quux () {}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"contexts\":[\"any\"],\"next\":true}]\n\n/**\n * @yields {void}\n */\nfunction * quux () {\n  yield;\n}\n// \"jsdoc/require-yields\": [\"error\"|\"warn\", {\"next\":true}]\n\n/**\n *\n */\nfunction * quux (foo) {\n  const a = function * bar () {\n    yield foo;\n  }\n}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-yields-check\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-yields-check\"></a>\n### <code>require-yields-check</code>\n\nEnsures that if a `@yields` is present that a `yield` (or `yield` with a\nvalue) is present in the function body (or that if a `@next` is present that\nthere is a `yield` with a return value present).\n\nPlease also note that JavaScript does allow generators not to have `yield`\n(e.g., with just a return or even no explicit return), but if you want to\nenforce that all generators (except wholly empty ones) have a `yield` in the\nfunction body, you can use the ESLint\n[`require-yield`](https://eslint.org/docs/rules/require-yield) rule. In\nconjunction with this, you can also use the `checkGeneratorsOnly` option\nas an optimization so that this rule won't need to do its own checking within\nfunction bodies.\n\nWill also report if multiple `@yields` tags are present.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-require-yields-check-options-39\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-require-yields-check-options-39\"></a>\n#### Options\n\n- `checkGeneratorsOnly` - Avoids checking the function body and merely insists\n    that all generators have `@yields`. This can be an optimization with the\n    ESLint `require-yield` rule, as that rule already ensures a `yield` is\n    present in generators, albeit assuming the generator is not empty).\n    Defaults to `false`.\n- `next` - If `true`, this option will insist that any use of a (non-standard)\n    `@next` tag (in addition to any `@yields` tag) will be matched by a `yield`\n    which uses a return value in the body of the generator (e.g.,\n    `const rv = yield;` or `const rv = yield value;`). This (non-standard)\n    tag is intended to be used to indicate a type and/or description of\n    the value expected to be supplied by the user when supplied to the iterator\n    by its `next` method, as with `it.next(value)` (with the iterator being\n    the `Generator` iterator that is returned by the call to the generator\n    function). This option will report an error if the generator function body\n    merely has plain `yield;` or `yield value;` statements without returning\n    the values. Defaults to `false`.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`yields`|\n|Aliases|`yield`|\n|Recommended|true|\n|Options|`checkGeneratorsOnly`|\nThe following patterns are considered problems:\n\n````js\n/**\n * @yields\n */\nfunction * quux (foo) {\n\n}\n// Message: JSDoc @yields declaration present but yield expression not available in function.\n\n/**\n * @yields\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"checkGeneratorsOnly\":true}]\n// Message: JSDoc @yields declaration present but yield expression not available in function.\n\n/**\n * @next\n */\nfunction quux (foo) {\n\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"checkGeneratorsOnly\":true,\"next\":true}]\n// Message: JSDoc @next declaration present but yield expression with return value not available in function.\n\n/**\n * @next {SomeType}\n */\nfunction * quux (foo) {\n\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: JSDoc @next declaration present but yield expression with return value not available in function.\n\n/**\n * @next {SomeType}\n */\nfunction * quux (foo) {\n  yield;\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: JSDoc @next declaration present but yield expression with return value not available in function.\n\n/**\n * @next {SomeType}\n */\nfunction * quux (foo) {\n  yield 5;\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: JSDoc @next declaration present but yield expression with return value not available in function.\n\n/**\n * @yield\n */\nfunction * quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"yields\":\"yield\"}}}\n// Message: JSDoc @yield declaration present but yield expression not available in function.\n\n/**\n * @yield-returns {Something}\n */\nfunction * quux (foo) {\n  yield;\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"next\":\"yield-returns\"}}}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: JSDoc @yield-returns declaration present but yield expression with return value not available in function.\n\n/**\n * @yields {undefined} Foo.\n * @yields {String} Foo.\n */\nfunction * quux () {\n\n  yield foo;\n}\n// Message: Found more than one @yields declaration.\n\nclass Foo {\n  /**\n   * @yields {string}\n   */\n  * bar () {\n  }\n}\n// Message: JSDoc @yields declaration present but yield expression not available in function.\n\n/**\n * @yields\n */\nfunction * quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"yields\":false}}}\n// Message: Unexpected tag `@yields`\n\n/**\n * @next\n */\nfunction * quux () {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"next\":false}}}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: Unexpected tag `@next`\n\n/**\n * @yields {string}\n */\nfunction * f () {\n  function * g() {\n    yield 'foo'\n  }\n}\n// Message: JSDoc @yields declaration present but yield expression not available in function.\n\n/**\n * @yields {Promise<void>}\n */\nasync function * quux() {}\n// Message: JSDoc @yields declaration present but yield expression not available in function.\n\n/**\n * @yields {Promise<void>}\n */\nconst quux = async function * () {}\n// Message: JSDoc @yields declaration present but yield expression not available in function.\n\n/**\n * @yields {never} Foo.\n */\nfunction * quux () {\n  yield 5;\n}\n// Message: JSDoc @yields declaration set with \"never\" but yield expression is present in function.\n\n/**\n * @next {never}\n */\nfunction * quux (foo) {\n  const a = yield;\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n// Message: JSDoc @next declaration set with \"never\" but yield expression with return value is present in function.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @yields Foo.\n */\nfunction * quux () {\n\n  yield foo;\n}\n\n/**\n * @yields {string} Foo.\n */\nfunction * quux () {\n\n  yield foo;\n}\n\n/**\n * @yields {string} Foo.\n */\nfunction * quux () {\n\n  yield foo;\n}\n\n/**\n *\n */\nfunction * quux () {\n}\n\n/**\n * @yields {undefined} Foo.\n */\nfunction * quux () {}\n\n/**\n * @yields { void } Foo.\n */\nfunction quux () {}\n\n/**\n * @yields Foo.\n * @abstract\n */\nfunction * quux () {\n  throw new Error('must be implemented by subclass!');\n}\n\n/**\n * @yields Foo.\n * @virtual\n */\nfunction * quux () {\n  throw new Error('must be implemented by subclass!');\n}\n\n/**\n * @yields Foo.\n * @constructor\n */\nfunction * quux () {\n}\n\n/**\n * @interface\n */\nclass Foo {\n  /**\n   * @yields {string}\n   */\n  * bar () {\n  }\n}\n\n/**\n * @record\n */\nclass Foo {\n  /**\n   * @yields {string}\n   */\n  * bar () {\n  }\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @yields {undefined} Foo.\n */\nfunction * quux () {\n}\n\n/**\n * @yields {void} Foo.\n */\nfunction * quux () {\n}\n\n/**\n * @yields {never} Foo.\n */\nfunction * quux () {\n}\n\n/**\n * @yields {void} Foo.\n */\nfunction * quux () {\n  yield undefined;\n}\n\n/**\n * @yields {void} Foo.\n */\nfunction * quux () {\n  yield;\n}\n\n/**\n *\n */\nfunction * quux () {\n  yield undefined;\n}\n\n/**\n *\n */\nfunction * quux () {\n  yield;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  try {\n    yield true;\n  } catch (err) {\n  }\n  yield;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  try {\n  } finally {\n    yield true;\n  }\n  yield;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  try {\n    yield;\n  } catch (err) {\n  }\n  yield true;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  try {\n    something();\n  } catch (err) {\n    yield true;\n  }\n  yield;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  switch (true) {\n  case 'abc':\n    yield true;\n  }\n  yield;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  switch (true) {\n  case 'abc':\n    yield;\n  }\n  yield true;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  for (const i of abc) {\n    yield true;\n  }\n  yield;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  for (const a in b) {\n    yield true;\n  }\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  for (let i=0; i<n; i+=1) {\n    yield true;\n  }\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  while(true) {\n    yield true\n  }\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  do {\n    yield true\n  }\n  while(true)\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  if (true) {\n    yield;\n  }\n  yield true;\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  if (true) {\n    yield true;\n  }\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  var a = {};\n  with (a) {\n    yield true;\n  }\n}\n\n/**\n * @yields {true}\n */\nfunction * quux () {\n  if (true) {\n    yield;\n  } else {\n    yield true;\n  }\n  yield;\n}\n\n/**\n * @next {void}\n */\nfunction * quux (foo) {\n\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n\n/**\n * @next {SomeType}\n */\nfunction * quux (foo) {\n  const a = yield;\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n\n/**\n * @next {SomeType}\n */\nfunction * quux (foo) {\n  const a = yield 5;\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n\n/**\n * @next {never}\n */\nfunction * quux (foo) {\n\n}\n// \"jsdoc/require-yields-check\": [\"error\"|\"warn\", {\"next\":true}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-sort-tags\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-sort-tags\"></a>\n### <code>sort-tags</code>\n\nSorts tags by a specified sequence according to tag name.\n\n(Default order originally inspired by [`@homer0/prettier-plugin-jsdoc`](https://github.com/homer0/packages/tree/main/packages/public/prettier-plugin-jsdoc).)\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-sort-tags-options-40\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-sort-tags-options-40\"></a>\n#### Options\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-sort-tags-options-40-tagsequence\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-sort-tags-options-40-tagsequence\"></a>\n##### <code>tagSequence</code>\n\nAn array of tag names indicating the preferred sequence for sorting tags.\n\nTag names earlier in the list will be arranged first. The relative position of\ntags of the same name will not be changed.\n\nTags not in the list will be sorted alphabetically at the end (or in place of\nthe pseudo-tag `-other` placed within `tagSequence`) if `alphabetizeExtras` is\nenabled and in their order of appearance otherwise (so if you want all your\ntags alphabetized, supply an empty array with `alphabetizeExtras` enabled).\n\nDefaults to the array below.\n\nPlease note that this order is still experimental, so if you want to retain\na fixed order that doesn't change into the future, supply your own\n`tagSequence`.\n\n```js\n[\n  // Brief descriptions\n  'summary',\n  'typeSummary',\n\n  // Module/file-level\n  'module',\n  'exports',\n  'file',\n  'fileoverview',\n  'overview',\n\n  // Identifying (name, type)\n  'typedef',\n  'interface',\n  'record',\n  'template',\n  'name',\n  'kind',\n  'type',\n  'alias',\n  'external',\n  'host',\n  'callback',\n  'func',\n  'function',\n  'method',\n  'class',\n  'constructor',\n\n  // Relationships\n  'modifies',\n  'mixes',\n  'mixin',\n  'mixinClass',\n  'mixinFunction',\n  'namespace',\n  'borrows',\n  'constructs',\n  'lends',\n  'implements',\n  'requires',\n\n  // Long descriptions\n  'desc',\n  'description',\n  'classdesc',\n  'tutorial',\n  'copyright',\n  'license',\n\n  // Simple annotations\n  'const',\n  'constant',\n  'final',\n  'global',\n  'readonly',\n  'abstract',\n  'virtual',\n  'var',\n  'member',\n  'memberof',\n  'memberof!',\n  'inner',\n  'instance',\n  'inheritdoc',\n  'inheritDoc',\n  'override',\n  'hideconstructor',\n\n  // Core function/object info\n  'param',\n  'arg',\n  'argument',\n  'prop',\n  'property',\n  'return',\n  'returns',\n\n  // Important behavior details\n  'async',\n  'generator',\n  'default',\n  'defaultvalue',\n  'enum',\n  'augments',\n  'extends',\n  'throws',\n  'exception',\n  'yield',\n  'yields',\n  'event',\n  'fires',\n  'emits',\n  'listens',\n  'this',\n\n  // Access\n  'static',\n  'private',\n  'protected',\n  'public',\n  'access',\n  'package',\n\n  '-other',\n\n  // Supplementary descriptions\n  'see',\n  'example',\n\n  // METADATA\n\n  // Other Closure (undocumented) metadata\n  'closurePrimitive',\n  'customElement',\n  'expose',\n  'hidden',\n  'idGenerator',\n  'meaning',\n  'ngInject',\n  'owner',\n  'wizaction',\n\n  // Other Closure (documented) metadata\n  'define',\n  'dict',\n  'export',\n  'externs',\n  'implicitCast',\n  'noalias',\n  'nocollapse',\n  'nocompile',\n  'noinline',\n  'nosideeffects',\n  'polymer',\n  'polymerBehavior',\n  'preserve',\n  'struct',\n  'suppress',\n  'unrestricted',\n\n  // @homer0/prettier-plugin-jsdoc metadata\n  'category',\n\n  // Non-Closure metadata\n  'ignore',\n  'author',\n  'version',\n  'variation',\n  'since',\n  'deprecated',\n  'todo',\n];\n```\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-sort-tags-options-40-alphabetizeextras\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-sort-tags-options-40-alphabetizeextras\"></a>\n##### <code>alphabetizeExtras</code>\n\nDefaults to `false`. Alphabetizes any items not within `tagSequence` after any\nitems within `tagSequence` (or in place of the special `-other` pseudo-tag)\nare sorted.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|any|\n|Recommended|false|\n|Settings||\n|Options|`tagSequence`, `alphabetizeExtras`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns {string}\n * @param b\n * @param a\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * Some description\n * @returns {string}\n * @param b\n * @param a\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * @returns {string}\n * @param b A long\n *   description\n * @param a\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * Some description\n * @returns {string}\n * @param b A long\n *   description\n * @param a\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * @param b A long\n *   description\n * @returns {string}\n * @param a\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * @def\n * @xyz\n * @abc\n */\nfunction quux () {}\n// \"jsdoc/sort-tags\": [\"error\"|\"warn\", {\"alphabetizeExtras\":true}]\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * @xyz\n * @def\n * @abc\n */\nfunction quux () {}\n// \"jsdoc/sort-tags\": [\"error\"|\"warn\", {\"tagSequence\":[\"def\",\"xyz\",\"abc\"]}]\n// Message: Tags are not in the prescribed order: def, xyz, abc\n\n/**\n * @returns {string}\n * @ignore\n * @param b A long\n *   description\n * @param a\n * @module\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * @xyz\n * @abc\n * @abc\n * @def\n * @xyz\n */\nfunction quux () {}\n// \"jsdoc/sort-tags\": [\"error\"|\"warn\", {\"alphabetizeExtras\":true}]\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n\n/**\n * @param b A long\n *   description\n * @module\n */\nfunction quux () {}\n// Message: Tags are not in the prescribed order: summary, typeSummary, module, exports, file, fileoverview, overview, typedef, interface, record, template, name, kind, type, alias, external, host, callback, func, function, method, class, constructor, modifies, mixes, mixin, mixinClass, mixinFunction, namespace, borrows, constructs, lends, implements, requires, desc, description, classdesc, tutorial, copyright, license, internal, const, constant, final, global, readonly, abstract, virtual, var, member, memberof, memberof!, inner, instance, inheritdoc, inheritDoc, override, hideconstructor, param, arg, argument, prop, property, return, returns, async, generator, default, defaultvalue, enum, augments, extends, throws, exception, yield, yields, event, fires, emits, listens, this, static, private, protected, public, access, package, -other, see, example, closurePrimitive, customElement, expose, hidden, idGenerator, meaning, ngInject, owner, wizaction, define, dict, export, externs, implicitCast, noalias, nocollapse, nocompile, noinline, nosideeffects, polymer, polymerBehavior, preserve, struct, suppress, unrestricted, category, ignore, author, version, variation, since, deprecated, todo\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param b\n * @param a\n * @returns {string}\n */\nfunction quux () {}\n\n/**\n * @abc\n * @def\n * @xyz\n */\nfunction quux () {}\n// \"jsdoc/sort-tags\": [\"error\"|\"warn\", {\"alphabetizeExtras\":true}]\n\n/**\n * @def\n * @xyz\n * @abc\n */\nfunction quux () {}\n// \"jsdoc/sort-tags\": [\"error\"|\"warn\", {\"alphabetizeExtras\":false}]\n\n/**\n * @def\n * @xyz\n * @abc\n */\nfunction quux () {}\n// \"jsdoc/sort-tags\": [\"error\"|\"warn\", {\"tagSequence\":[\"def\",\"xyz\",\"abc\"]}]\n\n/** @def */\nfunction quux () {}\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-tag-lines\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-tag-lines\"></a>\n### <code>tag-lines</code>\n\nEnforces lines (or no lines) between tags.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-tag-lines-options-41\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-tag-lines-options-41\"></a>\n#### Options\n\nThe first option is a single string set to \"always\", \"never\", or \"any\"\n(defaults to \"never\").\n\n\"any\" is only useful with `tags` (allowing non-enforcement of lines except\nfor particular tags) or with `dropEndLines`.\n\nThe second option is an object with the following optional properties.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-tag-lines-options-41-count-defaults-to-1\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-tag-lines-options-41-count-defaults-to-1\"></a>\n##### <code>count</code> (defaults to 1)\n\nUse with \"always\" to indicate the number of lines to require be present.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-tag-lines-options-41-noendlines-defaults-to-false\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-tag-lines-options-41-noendlines-defaults-to-false\"></a>\n##### <code>noEndLines</code> (defaults to <code>false</code>)\n\nUse with \"always\" to indicate the normal lines to be added after tags should\nnot be added after the final tag.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-tag-lines-options-41-dropendlines-defaults-to-false\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-tag-lines-options-41-dropendlines-defaults-to-false\"></a>\n##### <code>dropEndLines</code> (defaults to <code>false</code>)\n\nIf defined, will drop end lines for the final tag only.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-tag-lines-options-41-tags-default-to-empty-object\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-tag-lines-options-41-tags-default-to-empty-object\"></a>\n##### <code>tags</code> (default to empty object)\n\nOverrides the default behavior depending on specific tags.\n\nAn object whose keys are tag names and whose values are objects with the\nfollowing keys:\n\n1. `lines` - Set to `always`, `never`, or `any` to override.\n2. `count` - Overrides main `count` (for \"always\")\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|Any|\n|Recommended|true|\n|Settings|N/A|\n|Options|(a string matching `\"always\" or \"never\"` and optional object with `count` and `noEndLines`)|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"count\":2}]\n// Message: Expected 2 lines between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"count\":2}]\n// Message: Expected 2 lines between tags but found 1\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"noEndLines\":true}]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\"]\n// Message: Expected no lines between tags\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n *\n */\n// Message: Expected no lines between tags\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n * @param {number} c\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"param\":{\"lines\":\"always\"}}}]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"param\":{\"lines\":\"always\"}}}]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"param\":{\"lines\":\"never\"}}}]\n// Message: Expected no lines between tags\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"count\":2,\"tags\":{\"param\":{\"lines\":\"always\"}}}]\n// Message: Expected 2 lines between tags but found 1\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"count\":5,\"tags\":{\"param\":{\"count\":2,\"lines\":\"always\"}}}]\n// Message: Expected 2 lines between tags but found 1\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"anotherTag\":{\"lines\":\"never\"}}}]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} A broken up\n *\n * tag description.\n * @param {number} b\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {number} b\n *\n * @returns {string} A broken up\n *\n * tag description.\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected 1 line between tags but found 0\n\n/**\n * Some description\n * @param {string} a\n * @param {string} b\n *\n * @returns {SomeType} An extended\n * description.\n *\n * This is still part of `@returns`.\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"any\",{\"dropEndLines\":true}]\n// Message: Expected no trailing lines\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\"]\n\n/**\n * @param {string} a\n *\n * @param {string} a\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"noEndLines\":true}]\n\n/**\n * @param {string} a\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"noEndLines\":true}]\n\n/** @param {number} b */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"noEndLines\":true}]\n\n/**\n * Some description\n * @param {string} a\n *\n * @param {number} b\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Some description\n * @param {string} a\n *\n *\n * @param {number} b\n *\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"count\":2}]\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"param\":{\"lines\":\"any\"}}}]\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"param\":{\"lines\":\"any\"}}}]\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\",{\"tags\":{\"param\":{\"lines\":\"never\"}}}]\n\n/**\n * Some description\n * @param {number} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"param\":{\"lines\":\"any\"}}}]\n\n/**\n * Some description\n * @param {number} a\n *\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"param\":{\"lines\":\"any\"}}}]\n\n/**\n * Some description\n * @param {number} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"param\":{\"lines\":\"never\"}}}]\n\n/**\n * Some description\n * @param {string} a\n *\n *\n * @param {number} b\n *\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"count\":5,\"tags\":{\"param\":{\"count\":2,\"lines\":\"always\"}}}]\n\n/**\n * Some description\n * @param {string} a\n * @param {number} b\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\",{\"tags\":{\"anotherTag\":{\"lines\":\"always\"}}}]\n\n/**\n * Some description\n * @param {string} a\n *\n * This is still part of `@param`.\n * @returns {SomeType} An extended\n * description.\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\"]\n\n/**\n * Some description\n * @param {string} a\n * @returns {SomeType} An extended\n * description.\n *\n * This is still part of `@returns`.\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"never\"]\n\n/**\n * Some description\n * @param {string} a\n *\n * This is still part of `@param`.\n *\n * @returns {SomeType} An extended\n * description.\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Some description\n * @param {string} a\n *\n * @returns {SomeType} An extended\n * description.\n *\n * This is still part of `@returns`.\n *\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"always\"]\n\n/**\n * Some description\n * @param {string} a\n * @param {string} b\n *\n * @returns {SomeType} An extended\n * description.\n *\n * This is still part of `@returns`.\n */\n// \"jsdoc/tag-lines\": [\"error\"|\"warn\", \"any\",{\"dropEndLines\":true}]\n````\n\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-valid-types\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-valid-types\"></a>\n### <code>valid-types</code>\n\nRequires all types to be valid JSDoc, Closure, or TypeScript compiler types\nwithout syntax errors. Note that what determines a valid type is handled by\nour type parsing engine, [jsdoc-type-pratt-parser](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser),\nusing [`settings.jsdoc.mode`](#user-content-eslint-plugin-jsdoc-settings-mode) to\ndetermine whether to use jsdoc-type-pratt-parser's \"permissive\" parsing or\nthe stricter \"jsdoc\", \"typescript\", \"closure\" modes.\n\nThe following tags have their \"type\" portions (the segment within brackets)\nchecked (though those portions may sometimes be confined to namepaths,\ne.g., `@modifies`):\n\n1. Tags with required types: `@type`, `@implements`\n1. Tags with required types in Closure or TypeScript: `@this`,\n    `@define` (Closure only)\n1. Tags with optional types: `@enum`, `@member` (`@var`), `@typedef`,\n  `@augments` (or `@extends`), `@class` (or `@constructor`), `@constant`\n  (or `@const`), `@module` (module paths are not planned for TypeScript),\n  `@namespace`, `@throws`, `@exception`, `@yields` (or `@yield`),\n  `@modifies` (undocumented jsdoc); `@param` (`@arg`, `@argument`),\n  `@property` (`@prop`), and `@returns` (`@return`) also fall into this\n  category, but while this rule will check their type validity, we leave\n  the requiring of the type portion to the rules `require-param-type`,\n  `require-property-type`, and `require-returns-type`, respectively.\n1. Tags with types that are available optionally in Closure: `@export`,\n    `@package`, `@private`, `@protected`, `@public`, `@static`;\n    `@template` (TypeScript also)\n1. Tags with optional types that may take free text instead: `@throws`\n\nThe following tags have their name/namepath portion (the non-whitespace\ntext after the tag name) checked:\n\n1. Name(path)-defining tags requiring namepath: `@event`, `@callback`,\n    `@external`, `@host`, `@name`, `@typedef`, and `@template`\n    (TypeScript/Closure only); `@param` (`@arg`, `@argument`) and `@property`\n    (`@prop`) also fall into this category, but while this rule will check\n    their namepath validity, we leave the requiring of the name portion\n    to the rules `require-param-name` and `require-property-name`,\n    respectively.\n1. Name(path)-defining tags (which may have value without namepath or their\n    namepath can be expressed elsewhere on the block):\n    `@class`, `@constructor`, `@constant`, `@const`, `@function`, `@func`,\n    `@method`, `@interface` (TypeScript tag only), `@member`, `@var`,\n    `@mixin`, `@namespace`, `@module` (module paths are not planned for\n    TypeScript)\n1. Name(path)-pointing tags requiring namepath: `@alias`, `@augments`,\n    `@extends`, `@lends`, `@memberof`, `@memberof!`, `@mixes`, `@this`\n    (jsdoc only)\n1. Name(path)-pointing tags (which may have value without namepath or their\n    namepath can be expressed elsewhere on the block): `@listens`, `@fires`,\n    `@emits`.\n1. Name(path)-pointing tags which may have free text or a namepath: `@see`\n1. Name(path)-pointing tags (multiple names in one): `@borrows`\n\n...with the following applying to the above sets:\n\n- Expect tags in set 1-4 to have a valid namepath if present\n- Prevent sets 2 and 4 from being empty by setting `allowEmptyNamepaths` to\n  `false` as these tags might have some indicative value without a path\n  or may allow a name expressed elsewhere on the block (but sets 1 and 3 will\n  always fail if empty)\n- For the special case of set 6, i.e.,\n  `@borrows <that namepath> as <this namepath>`,\n  check that both namepaths are present and valid and ensure there is an `as `\n  between them. In the case of `<this namepath>`, it can be preceded by\n  one of the name path operators, `#`, `.`, or `~`.\n- For the special case of `@memberof` and `@memberof!` (part of set 3), as\n   per the [specification](https://jsdoc.app/tags-memberof.html), they also\n   allow `#`, `.`, or `~` at the end (which is not allowed at the end of\n   normal paths).\n\nIf you define your own tags, `settings.jsdoc.structuredTags` will allow\nthese custom tags to be checked, with the name portion of tags checked for\nvalid namepaths (based on the tag's `name` value), their type portions checked\nfor valid types (based on the tag's `type` value), and either portion checked\nfor presence (based on `false` `name` or `type` values or their `required`\nvalue). See the setting for more details.\n\n<a name=\"user-content-eslint-plugin-jsdoc-rules-valid-types-options-42\"></a>\n<a name=\"eslint-plugin-jsdoc-rules-valid-types-options-42\"></a>\n#### Options\n\n- `allowEmptyNamepaths` (default: true) - Set to `false` to bulk disallow\n  empty name paths with namepath groups 2 and 4 (these might often be\n  expected to have an accompanying name path, though they have some\n  indicative value without one; these may also allow names to be defined\n  in another manner elsewhere in the block); you can use\n  `settings.jsdoc.structuredTags` with the `required` key set to \"name\" if you\n  wish to require name paths on a tag-by-tag basis.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|For name only unless otherwise stated: `alias`, `augments`, `borrows`, `callback`, `class` (for name and type), `constant` (for name and type), `enum` (for type), `event`, `external`, `fires`, `function`, `implements` (for type), `interface`, `lends`, `listens`, `member` (for name and type),  `memberof`, `memberof!`, `mixes`, `mixin`, `modifies`, `module` (for name and type), `name`, `namespace` (for name and type), `param` (for name and type), `property` (for name and type), `returns` (for type), `see` (optionally for name), `this`, `throws` (for type), `type` (for type), `typedef` (for name and type), `yields` (for type)|\n|Aliases|`extends`, `constructor`, `const`, `host`, `emits`, `func`, `method`, `var`, `arg`, `argument`, `prop`, `return`, `exception`, `yield`|\n|Closure-only|For type only: `package`, `private`, `protected`, `public`, `static`|\n|Recommended|true|\n|Options|`allowEmptyNamepaths`|\n|Settings|`mode`, `structuredTags`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {Array<string} foo\n */\nfunction quux() {\n\n}\n// Message: Syntax error in type: Array<string\n\n/**\n * @memberof module:namespace.SomeClass<~\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:namespace.SomeClass<~\n\n/**\n * @param someParam<~\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: someParam<~\n\n/**\n * @memberof module:namespace.SomeClass~<\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:namespace.SomeClass~<\n\n/**\n * @borrows foo% as bar\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: foo%\n\n/**\n * @borrows #foo as bar\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: #foo\n\n/**\n * @borrows foo as bar%\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: bar%\n\n/**\n * @borrows foo\n */\nfunction quux() {\n\n}\n// Message: @borrows must have an \"as\" expression. Found \"\"\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":\"namepath-referencing\",\"required\":[\"name\"]}}}}\n// Message: Syntax error in namepath: foo%\n\n/**\n * @mixes module:namespace.SomeClass~\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:namespace.SomeClass~\n\n/**\n * @callback\n */\nfunction quux() {\n\n}\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":false}]\n// Message: Tag @callback must have a name/namepath.\n\n/**\n * @constant {str%ng}\n */\n const FOO = 'foo';\n// Message: Syntax error in type: str%ng\n\n/**\n * @typedef {str%ng} UserString\n */\n// Message: Syntax error in type: str%ng\n\n/**\n * @typedef {string} UserStr%ng\n */\n// Message: Syntax error in namepath: UserStr%ng\n\n/**\n * @this\n */\n class Bar {};\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":false}]\n// Message: Tag @this must have either a type or namepath in \"jsdoc\" mode.\n\n/**\n * @aCustomTag\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"required\":[\"typeOrNameRequired\"]}}}}\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":false}]\n// Message: Tag @aCustomTag must have either a type or namepath.\n\n/**\n * @type\n */\n let foo;\n// Message: Tag @type must have a type.\n\n/**\n * @modifies {bar | foo<}\n */\nfunction quux (foo, bar, baz) {}\n// Message: Syntax error in type: bar | foo<\n\n/**\n * @private {BadTypeChecked<}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Syntax error in type: BadTypeChecked<\n\n/**\n * @this {BadTypeChecked<}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Syntax error in type: BadTypeChecked<\n\n/**\n * @define\n */\n function quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Tag @define must have a type in \"closure\" mode.\n\n/**\n * @this\n */\n let foo;\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Tag @this must have a type in \"closure\" mode.\n\n/**\n * Foo function.\n *\n * @param {[number, string]} bar - The bar array.\n */\nfunction foo(bar) {}\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: Syntax error in type: [number, string]\n\n/**\n * @interface name<\n */\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: Syntax error in namepath: name<\n\n/**\n * @module name<\n */\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: Syntax error in namepath: name<\n\n/**\n * @module module:name<\n */\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: Syntax error in namepath: module:name<\n\n/**\n * @interface name\n */\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: @interface should not have a name in \"closure\" mode.\n\n/**\n * @aCustomTag name\n */\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"name\":false}}}}\n// Message: @aCustomTag should not have a name.\n\n/**\n * @typedef {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":false}]\n// Message: Tag @typedef must have a name/namepath in \"jsdoc\" mode.\n\n/**\n * @private {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n// Message: @private should not have a bracketed type in \"jsdoc\" mode.\n\n/**\n * @aCustomTag {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"aCustomTag\":{\"type\":false}}}}\n// Message: @aCustomTag should not have a bracketed type.\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":false,\"required\":[\"name\"]}}}}\n// Message: Cannot add \"name\" to `require` with the tag's `name` set to `false`\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"required\":[\"type\"],\"type\":false}}}}\n// Message: Cannot add \"type\" to `require` with the tag's `type` set to `false`\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":false,\"required\":[\"typeOrNameRequired\"]}}}}\n// Message: Cannot add \"typeOrNameRequired\" to `require` with the tag's `name` set to `false`\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"required\":[\"typeOrNameRequired\"],\"type\":false}}}}\n// Message: Cannot add \"typeOrNameRequired\" to `require` with the tag's `type` set to `false`\n\n/**\n * @template T<~, R\n * @param {function(!T): !R} parser\n * @return {function(!Array<!T>): !Array<!R>}\n */\nparseArray = function(parser) {\n    return function(array) {\n        return array.map(parser);\n    };\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Syntax error in namepath: T<~\n\n/**\n * @template T, R<~\n * @param {function(!T): !R} parser\n * @return {function(!Array<!T>): !Array<!R>}\n */\nparseArray = function(parser) {\n    return function(array) {\n        return array.map(parser);\n    };\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Syntax error in namepath: R<~\n\n/**\n * @template    T, R<~\n * @param {function(!T): !R} parser\n * @return {function(!Array<!T>): !Array<!R>}\n */\nparseArray = function(parser) {\n    return function(array) {\n        return array.map(parser);\n    };\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Syntax error in namepath: R<~\n\n/**\n * @suppress\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Tag @suppress must have a type in \"closure\" mode.\n\n/**\n * @suppress {visibility} sth\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: @suppress should not have a name in \"closure\" mode.\n\n/**\n * @suppress {visibility|blah}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// Message: Syntax error in supresss type: blah\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {Array<string>} foo\n */\nfunction quux() {\n\n}\n\n/**\n * @param {string} foo\n */\nfunction quux() {\n\n}\n\n/**\n * @param foo\n */\nfunction quux() {\n\n}\n\n/**\n * @borrows foo as bar\n */\nfunction quux() {\n\n}\n\n/**\n * @borrows foo as #bar\n */\nfunction quux() {\n\n}\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n\n/**\n * @alias module:namespace.SomeClass#event:ext_anevent\n */\nfunction quux() {\n\n}\n\n/**\n * @callback foo\n */\nfunction quux() {\n\n}\n\n/**\n * @callback\n */\nfunction quux() {\n\n}\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":true}]\n\n/**\n * @class\n */\nfunction quux() {\n\n}\n\n/**\n * @see {@link foo}\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":\"namepath-referencing\",\"required\":[\"name\"]}}}}\n\n/**\n *\n * @fires module:namespace.SomeClass#event:ext_anevent\n */\nfunction quux() {\n\n}\n\n/**\n * @memberof module:namespace.SomeClass~\n */\nfunction quux() {\n\n}\n\n/**\n * @memberof! module:namespace.SomeClass.\n */\nfunction quux() {\n\n}\n\n/**\n *\n */\nfunction quux() {\n\n}\n\n/**\n * @aCustomTag\n */\nfunction quux() {\n\n}\n\n/**\n * @constant {string}\n */\n const FOO = 'foo';\n\n/**\n * @constant {string} FOO\n */\n const FOO = 'foo';\n\n/**\n * @extends Foo\n */\n class Bar {};\n\n/**\n * @extends Foo<String>\n */\n class Bar {};\n\n/**\n * @extends {Foo<String>}\n */\n class Bar {};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @typedef {number | string} UserDefinedType\n */\n\n/**\n * @typedef {number | string}\n */\nlet UserDefinedGCCType;\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @modifies {foo | bar}\n */\nfunction quux (foo, bar, baz) {}\n\n/**\n * @this {Navigator}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @export {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @define {boolean}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @define\n */\n function quux () {}\n\n/**\n * Foo function.\n *\n * @interface foo\n */\nfunction foo(bar) {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * Foo function.\n *\n * @param {[number, string]} bar - The bar array.\n */\nfunction foo(bar) {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * Foo function.\n *\n * @param {[number, string]} bar - The bar array.\n */\nfunction foo(bar) {}\n\n/**\n * Foo function.\n *\n * @param {[number, string]} bar - The bar array.\n */\nfunction foo(bar) {}\n// Settings: {\"jsdoc\":{\"mode\":\"permissive\"}}\n\n/**\n * @typedef {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":false}]\n\n/**\n * @private {SomeType}\n */\nfunction quux () {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @param\n */\nfunction quux() {\n\n}\n// \"jsdoc/valid-types\": [\"error\"|\"warn\", {\"allowEmptyNamepaths\":false}]\n\n/**\n * @see\n */\nfunction quux() {\n\n}\n// Settings: {\"jsdoc\":{\"structuredTags\":{\"see\":{\"name\":\"namepath-referencing\"}}}}\n\n/**\n * @template T, R\n * @param {function(!T): !R} parser\n * @return {function(!Array<!T>): !Array<!R>}\n */\nparseArray = function(parser) {\n    return function(array) {\n        return array.map(parser);\n    };\n};\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @template T, R<~\n * @param {function(!T): !R} parser\n * @return {function(!Array<!T>): !Array<!R>}\n */\nparseArray = function(parser) {\n    return function(array) {\n        return array.map(parser);\n    };\n};\n// Settings: {\"jsdoc\":{\"mode\":\"jsdoc\"}}\n\n/**\n * @template {string} K - K must be a string or string literal\n * @template {{ serious: string }} Seriousalizable - must have a serious property\n * @param {K} key\n * @param {Seriousalizable} object\n */\nfunction seriousalize(key, object) {\n  // ????\n}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @module foo/bar\n */\n\n/**\n * @module module:foo/bar\n */\n\n/**\n * @template invalid namepath,T Description\n */\nfunction f() {}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * Description of complicated type.\n *\n * @template T Description of the T type parameter.\n * @template U - Like other tags, this can have an optional hyphen before the description.\n * @template V,W More parameters\n * @template W,X - Also with a hyphen\n */\ntype ComplicatedType<T, U, V, W, X> = never\n\n/** Multi-line typedef for an options object type.\n *\n * @typedef {{\n *   prop: number\n * }} MyOptions\n */\n\n/**\n * @extends {SomeType}\n */\nclass quux {}\n// Settings: {\"jsdoc\":{\"mode\":\"typescript\"}}\n\n/**\n * @suppress {visibility|underscore}\n */\nfunction quux() {\n}\n// Settings: {\"jsdoc\":{\"mode\":\"closure\"}}\n\n/**\n * @param {string} id\n * @param {Object} options\n * @param {boolean} options.isSet\n * @param {string} options.module\n */\nfunction quux ( id, options ) {\n}\n````\n\n\n",
    "licenseText": "Copyright (c) 2018, Gajus Kuizinas (http://gajus.com/)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Gajus Kuizinas (http://gajus.com/) nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ANUARY BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-jsdoc/-/eslint-plugin-jsdoc-39.3.2.tgz#b9c3becdbd860a75b8bd07bd04a0eaaad7c79403",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-jsdoc/-/eslint-plugin-jsdoc-39.3.2.tgz",
    "hash": "b9c3becdbd860a75b8bd07bd04a0eaaad7c79403",
    "integrity": "sha512-RSGN94RYzIJS/WfW3l6cXzRLfJWxvJgNQZ4w0WCaxJWDJMigtwTsILEAfKqmmPkT2rwMH/s3C7G5ChDE6cwPJg==",
    "registry": "npm",
    "packageName": "eslint-plugin-jsdoc",
    "cacheIntegrity": "sha512-RSGN94RYzIJS/WfW3l6cXzRLfJWxvJgNQZ4w0WCaxJWDJMigtwTsILEAfKqmmPkT2rwMH/s3C7G5ChDE6cwPJg== sha1-ucO+zb2GCnW4vQe9BKDqqtfHlAM="
  },
  "registry": "npm",
  "hash": "b9c3becdbd860a75b8bd07bd04a0eaaad7c79403"
}