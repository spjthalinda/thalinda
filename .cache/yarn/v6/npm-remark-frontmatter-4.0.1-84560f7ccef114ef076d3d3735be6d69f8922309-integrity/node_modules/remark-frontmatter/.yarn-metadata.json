{
  "manifest": {
    "name": "remark-frontmatter",
    "version": "4.0.1",
    "description": "remark plugin to support frontmatter (yaml, toml, and more)",
    "license": "MIT",
    "keywords": [
      "unified",
      "remark",
      "remark-plugin",
      "plugin",
      "mdast",
      "markdown",
      "frontmatter",
      "yaml",
      "toml"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/remarkjs/remark-frontmatter.git"
    },
    "bugs": {
      "url": "https://github.com/remarkjs/remark-frontmatter/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "Lars Trieloff",
        "email": "lars@trieloff.net"
      },
      {
        "name": "Max Kueng",
        "email": "me@maxkueng.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/mdast": "^3.0.0",
      "mdast-util-frontmatter": "^1.0.0",
      "micromark-extension-frontmatter": "^1.0.0",
      "unified": "^10.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "is-hidden": "^2.0.0",
      "prettier": "^2.0.0",
      "remark": "^14.0.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "to-vfile": "^7.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.45.0"
    },
    "scripts": {
      "build": "rimraf \"test/**/*.d.ts\" \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo --ignore-pattern test/ && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --conditions development test/index.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "ignores": [
        "types/"
      ]
    },
    "remarkConfig": {
      "plugins": [
        [
          "./index.js",
          [
            "yaml",
            "toml"
          ]
        ],
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-remark-frontmatter-4.0.1-84560f7ccef114ef076d3d3735be6d69f8922309-integrity/node_modules/remark-frontmatter/package.json",
    "readmeFilename": "readme.md",
    "readme": "# remark-frontmatter\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[**remark**][remark] plugin to support frontmatter (YAML, TOML, and more).\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`unified().use(remarkFrontmatter[, options])`](#unifieduseremarkfrontmatter-options)\n*   [Examples](#examples)\n    *   [Example: custom marker](#example-custom-marker)\n    *   [Example: custom fence](#example-custom-fence)\n*   [Syntax](#syntax)\n*   [Syntax tree](#syntax-tree)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [unified][] ([remark][]) plugin to add support for YAML, TOML,\nand other frontmatter.\nYou can use this to add support for parsing and serializing this syntax\nextension.\n\nunified is an AST (abstract syntax tree) based transform project.\n**remark** is everything unified that relates to markdown.\nThe layer under remark is called mdast, which is only concerned with syntax\ntrees.\nAnother layer underneath is micromark, which is only concerned with parsing.\nThis package is a small wrapper to integrate all of these.\n\n## When should I use this?\n\nFrontmatter is a metadata format in front of content.\nIt’s typically written in YAML and is often used with markdown.\nThis mechanism works well when you want authors, that have some markup\nexperience, to configure where or how the content is displayed or supply\nmetadata about content.\nFrontmatter does not work everywhere so it makes markdown less portable.\nA good example use case is markdown being rendered by (static) site generators.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nIn Node.js (12.20+, 14.14+, 16.0+), install with [npm][]:\n\n```sh\nnpm install remark-frontmatter\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport remarkFrontmatter from 'https://cdn.skypack.dev/remark-frontmatter@4?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import remarkFrontmatter from 'https://cdn.skypack.dev/remark-frontmatter@4?min'\n</script>\n```\n\n## Use\n\nSay we have the following file, `example.md`:\n\n```markdown\n+++\ntitle = \"New Website\"\n+++\n\n# Other markdown\n```\n\nAnd our module, `example.js`, looks as follows:\n\n```js\nimport {read} from 'to-vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkStringify from 'remark-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkStringify)\n    .use(remarkFrontmatter, ['yaml', 'toml'])\n    .use(() => (tree) => {\n      console.dir(tree)\n    })\n    .process(await read('example.md'))\n\n  console.log(String(file))\n}\n```\n\nNow, running `node example` yields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'toml', value: 'title = \"New Website\"', position: [Object]},\n    {type: 'heading', depth: 1, children: [Array], position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 6, column: 1, offset: 48}\n  }\n}\n```\n\n```markdown\n+++\ntitle = \"New Website\"\n+++\n\n# Other markdown\n```\n\n## API\n\nThis package exports no identifiers.\nThe default export is `remarkFrontmatter`.\n\n### `unified().use(remarkFrontmatter[, options])`\n\nConfigures remark so that it can parse and serialize frontmatter (YAML, TOML,\nand more).\nDoesn’t parse the data inside them: [create your own plugin][create-plugin] to\ndo that.\n\n##### `options`\n\nOne `preset` or `Matter`, or an array of them, defining all the supported\nfrontmatters (default: `'yaml'`).\n\n##### `preset`\n\nEither `'yaml'` or `'toml'`:\n\n*   `'yaml'` — `Matter` defined as `{type: 'yaml', marker: '-'}`\n*   `'toml'` — `Matter` defined as `{type: 'toml', marker: '+'}`\n\n##### `Matter`\n\nAn object with a `type` and either a `marker` or a `fence`:\n\n*   `type` (`string`)\n    — Type to tokenize as\n*   `marker` (`string` or `{open: string, close: string}`)\n    — Character used to construct fences.\n    By providing an object with `open` and `close` different characters can be\n    used for opening and closing fences.\n    For example the character `'-'` will result in `'---'` being used as the\n    fence\n*   `fence` (`string` or `{open: string, close: string}`)\n    — String used as the complete fence.\n    By providing an object with `open` and `close` different values can be used\n    for opening and closing fences.\n    This can be used too if fences contain different characters or lengths other\n    than 3\n*   `anywhere` (`boolean`, default: `false`)\n    – if `true`, matter can be found anywhere in the document.\n    If `false` (default), only matter at the start of the document is recognized\n\n## Examples\n\n### Example: custom marker\n\nA custom frontmatter with different open and close markers, repeated 3 times,\nthat looks like this:\n\n```text\n<<<\ndata\n>>>\n\n# hi\n```\n\n…can be supported with:\n\n```js\n// …\n.use(remarkFrontmatter, {type: 'custom', marker: {open: '<', close: '>'}})\n// …\n```\n\n### Example: custom fence\n\nA custom frontmatter with custom fences that are not repeated like this:\n\n```text\n{\n  \"key\": \"value\"\n}\n\n# hi\n```\n\n…can be supported with:\n\n```js\n// …\n.use(remarkFrontmatter, {type: 'json', fence: {open: '{', close: '}'}})\n// …\n```\n\n## Syntax\n\nThis plugin applies a micromark extensions to parse the syntax.\nSee its readme for how it works:\n\n*   [`micromark-extension-frontmatter`](https://github.com/micromark/micromark-extension-frontmatter)\n\nThe syntax supported depends on the given configuration.\n\n## Syntax tree\n\nThis plugin applies one mdast utility to build and serialize the AST.\nSee its readme for how it works:\n\n*   [`mdast-util-frontmatter`](https://github.com/syntax-tree/mdast-util-directive)\n\nThe node types supported in the tree depend on the given configuration.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nThe YAML node type is supported in `@types/mdast` by default.\nTo add other node types, register them by adding them to\n`FrontmatterContentMap`:\n\n```ts\nimport type {Literal} from 'mdast'\n\ninterface TOML extends Literal {\n  type: 'toml'\n}\n\ndeclare module 'mdast' {\n  interface FrontmatterContentMap {\n    // Allow using toml nodes defined by `remark-frontmatter`.\n    toml: TOML\n  }\n}\n```\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\nThis plugin works with unified 6+ and remark 13+.\n\n## Security\n\nUse of `remark-frontmatter` does not involve [**rehype**][rehype]\n([**hast**][hast]) or user content so there are no openings for\n[cross-site scripting (XSS)][xss] attacks.\n\n## Related\n\n*   [`remark-yaml-config`](https://github.com/remarkjs/remark-yaml-config)\n    — configure remark from YAML configuration\n*   [`remark-gfm`](https://github.com/remarkjs/remark-gfm)\n    — support GFM (autolink literals, strikethrough, tables, tasklists)\n*   [`remark-github`](https://github.com/remarkjs/remark-github)\n    — link references to commits, issues, pull-requests, and users, like on\n    GitHub\n*   [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    — support directives\n*   [`remark-math`](https://github.com/remarkjs/remark-math)\n    — support math\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/remarkjs/remark-frontmatter/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/remark-frontmatter/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark-frontmatter.svg\n\n[coverage]: https://codecov.io/github/remarkjs/remark-frontmatter\n\n[downloads-badge]: https://img.shields.io/npm/dm/remark-frontmatter.svg\n\n[downloads]: https://www.npmjs.com/package/remark-frontmatter\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/remark-frontmatter.svg\n\n[size]: https://bundlephobia.com/result?p=remark-frontmatter\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark]: https://github.com/remarkjs/remark\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[typescript]: https://www.typescriptlang.org\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[hast]: https://github.com/syntax-tree/hast\n\n[create-plugin]: https://unifiedjs.com/learn/guide/create-a-plugin/\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2017 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/remark-frontmatter/-/remark-frontmatter-4.0.1.tgz#84560f7ccef114ef076d3d3735be6d69f8922309",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/remark-frontmatter/-/remark-frontmatter-4.0.1.tgz",
    "hash": "84560f7ccef114ef076d3d3735be6d69f8922309",
    "integrity": "sha512-38fJrB0KnmD3E33a5jZC/5+gGAC2WKNiPw1/fdXJvijBlhA7RCsvJklrYJakS0HedninvaCYW8lQGf9C918GfA==",
    "registry": "npm",
    "packageName": "remark-frontmatter",
    "cacheIntegrity": "sha512-38fJrB0KnmD3E33a5jZC/5+gGAC2WKNiPw1/fdXJvijBlhA7RCsvJklrYJakS0HedninvaCYW8lQGf9C918GfA== sha1-hFYPfM7xFO8HbT03Nb5tafiSIwk="
  },
  "registry": "npm",
  "hash": "84560f7ccef114ef076d3d3735be6d69f8922309"
}