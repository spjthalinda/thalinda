{
  "manifest": {
    "name": "outdent",
    "version": "0.5.0",
    "description": "Remove leading indentation from ES6 template literals.",
    "main": "lib/index.js",
    "jsnext:main": "lib-module/index.js",
    "module": "lib-module/index.js",
    "typings": "lib/index.d.ts",
    "scripts": {
      "clean": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts",
      "build": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts",
      "test": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts",
      "lint": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts",
      "format": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts",
      "prepack": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts",
      "setup": "ts-node -F -P ./scripts/tsconfig.json ./scripts/npm-run.ts"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/cspotcode/outdent.git"
    },
    "keywords": [
      "es6",
      "es2015",
      "template string",
      "template literal",
      "interpolation",
      "string",
      "template",
      "indent"
    ],
    "author": {
      "name": "Andrew Bradley",
      "email": "cspotcode@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/cspotcode/outdent/issues"
    },
    "homepage": "https://github.com/cspotcode/outdent#readme",
    "devDependencies": {
      "@types/chai": "^4.0.4",
      "@types/mocha": "^2.2.43",
      "@types/node": "^8.0.44",
      "@types/rimraf": "^2.0.2",
      "@types/source-map-support": "^0.4.0",
      "@types/which": "^1.0.28",
      "chai": "^4.1.2",
      "mocha": "^4.0.1",
      "rimraf": "^2.6.2",
      "source-map-support": "^0.5.0",
      "ts-node": "^3.3.0",
      "tslint": "^5.9.1",
      "tslint-language-service": "^0.9.6",
      "typescript": "^2.7.2",
      "typescript-formatter": "^6.0.0",
      "which": "^1.3.0"
    },
    "files": [
      "lib",
      "lib-module",
      "src",
      "LICENSE",
      "README.md",
      "tsconfig-module.json",
      "tsconfig.json"
    ],
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-outdent-0.5.0-9e10982fdc41492bb473ad13840d22f9655be2ff-integrity/node_modules/outdent/package.json",
    "readmeFilename": "README.md",
    "readme": "# outdent\n\n## Removes leading indentation from ES6 template strings\n\n[![Build Status](https://travis-ci.org/cspotcode/outdent.svg?branch=master)](https://travis-ci.org/cspotcode/outdent) [![typings included](https://img.shields.io/badge/typings-included-brightgreen.svg)](#typescript-declarations)\n\nES6 template strings are great, but they preserve everything between the backticks, including leading spaces.\nSometimes I want to indent my template literals to make my code more readable without including all those spaces in the\nstring.\n\nOutdent will remove those leading spaces, as well as the leading and trailing newlines.\n\n### Usage\n\nImport **outdent** using your module system of choice.\n\nCommonJS:\n```javascript\nconst outdent = require('outdent');\n```\n\nES6 Modules & TypeScript:\n```javascript\nimport outdent from 'outdent';\n```\n\n#### Examples\n\n```javascript\nimport outdent from 'outdent';\n\nconst markdown = outdent`\n    # My Markdown File\n\n    Here is some indented code:\n\n        console.log(\"hello world!\");\n`;\n\nconsole.log(markdown);\n\nfs.writeFileSync('output.md', markdown);\n```\n\nThe contents of `output.md` do not have the leading indentation:\n\n```markdown\n# My Markdown File\n\nHere is some indented code:\n\n    console.log(\"hello world!\");\n```\n\nAs a JavaScript string:\n\n```javascript\nvar markdown = '# My Markdown File\\n' +\n               '\\n' +\n               'Here is some indented code:' +\n               '\\n' +\n               '    console.log(\"hello world!\");';\n```\n\nYou can pass options to **outdent** to control its behavior. They are explained in [Options](#options).\n\n```javascript\nconst output = outdent({trimLeadingNewline: false, trimTrailingNewline: false})`\n    Hello world!\n`;\n\nassert(output === '\\nHello world!\\n');\n```\n\nYou can explicitly specify the indentation level by passing `outdent` as the first interpolated value. Its position sets the indentation level and it is removed from the output:\n\n```javascript\nconst output = outdent`\n      ${outdent}\n        Yo\n    12345\n          Hello world\n`;\n\nassert(output === '  Yo\\n345\\n    Hello world');\n```\n\n*Note: `${outdent}` must be alone on its own line without anything before or after it. It cannot be preceded by any non-whitespace characters.*\n*If these conditions are not met, outdent will follow normal indentation-detection behavior.*\n\nOutdent can also remove indentation from plain strings via the `string` method.\n\n```javascript\nconst output = outdent.string('\\n    Hello world!\\n');\n\nassert(output === 'Hello world!');\n```\n\n### Options\n\n#### `trimLeadingNewline`\n*Default: true*\n\n#### `trimTrailingNewline`\n*Default: true*\n\nWhether or not outdent should remove the leading and/or trailing newline from your template string.  For example:\n\n```javascript\nvar s = outdent({trimLeadingNewline: false})`\n    Hello\n`;\n\nassert(s === '\\nHello');\n\ns = outdent({trimTrailingNewline: false})`\n    Hello\n`\n\nassert(s === 'Hello\\n');\n\ns = outdent({trimLeadingNewline: false, trimTrailingNewline: false})`\n\n`;\n\nassert(s === '\\n\\n');\n```\n\n<!--\n#### `pass`\n\nReturns an arguments array that can be passed to another tagging function, instead of returning a string.\n\nFor example, say you want to use outdent with the following code:\n\n```javascript\nfunction query(barVal) {\n    return prepareSql`\nSELECT * from foo where bar = ${barVal}\n    `;\n}\n```\n\n`prepareSql` is expecting to receive a strings array and all interpolated values so that it can create a safe SQL\nquery.  To add outdent into the mix, we\nmust set `pass: true` and splat the result into `prepareSql`.\n\n```javascript\nvar odRaw = outdent({pass: true});\nfunction query(barVal) {\n    return prepareSql(...odRaw`\n        SELECT * from foo where bar = ${barVal}\n    `)\n}\n```\n\n*This is a contrived example because SQL servers don't care about indentation.  But perhaps the result is\nbeing logged and looks better without indentation?  Perhaps you're doing something totally different with tagged\ntemplate strings? Regardless, the `pass` option is here in case you need it. :-)*\n\n-->\n\n### Gotchas\n\n#### Start on a new line\n\nStart the contents of your template string on a new line *after* the opening backtick.  Otherwise, outdent\nhas no choice but to detect indentation from the *second* line, which does not work in all situations.\n\n```javascript\n// Bad\nconst output = outdent `* item 1\n                          * sub-item\n`;\n// output === '* item 1\\n* sub-item'; Indentation of sub-item is lost\n\n// Good\nconst output = outdent `\n    * item 1\n      * sub-item\n`;\n```\n\n#### Spaces and tabs\n\nSpaces and tabs are treated identically. **outdent** does not verify that you are using spaces or tabs consistently; they\nare all treated as a single character for the purpose of removing indentation. Spaces, tabs, and smart tabs should\nall work correctly provided you use them consistently.\n\n### TypeScript declarations\n\nThis module includes TypeScript type declarations so you will get code completion and error-checking without installing anything else.\n\n<!--\n### TODOs\n\n[ ] Support tabs and/or smart tabs (verify they're being used correctly?  Throw an error if not?)\n-->\n\n### Questions or Bugs?\n\nFile an issue on Github: https://github.com/cspotcode/outdent/issues\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Andrew Bradley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/outdent/-/outdent-0.5.0.tgz#9e10982fdc41492bb473ad13840d22f9655be2ff",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/outdent/-/outdent-0.5.0.tgz",
    "hash": "9e10982fdc41492bb473ad13840d22f9655be2ff",
    "integrity": "sha512-/jHxFIzoMXdqPzTaCpFzAAWhpkSjZPF4Vsn6jAfNpmbH/ymsmd7Qc6VE9BGn0L6YMj6uwpQLxCECpus4ukKS9Q==",
    "registry": "npm",
    "packageName": "outdent",
    "cacheIntegrity": "sha512-/jHxFIzoMXdqPzTaCpFzAAWhpkSjZPF4Vsn6jAfNpmbH/ymsmd7Qc6VE9BGn0L6YMj6uwpQLxCECpus4ukKS9Q== sha1-nhCYL9xBSSu0c60ThA0i+WVb4v8="
  },
  "registry": "npm",
  "hash": "9e10982fdc41492bb473ad13840d22f9655be2ff"
}