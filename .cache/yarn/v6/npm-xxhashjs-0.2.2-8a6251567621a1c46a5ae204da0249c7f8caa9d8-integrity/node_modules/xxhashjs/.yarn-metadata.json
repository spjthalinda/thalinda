{
  "manifest": {
    "name": "xxhashjs",
    "version": "0.2.2",
    "description": "xxHash in Javascript",
    "main": "./lib/index.js",
    "scripts": {
      "test": "mocha",
      "prepublish": "webpack && uglifyjs -m -c -o build/xxhash.min.js build/xxhash.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/pierrec/js-xxhash"
    },
    "keywords": [
      "xxhash",
      "xxh"
    ],
    "author": {
      "name": "Pierre Curto"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pierrec/js-xxhash/issues"
    },
    "homepage": "https://github.com/pierrec/js-xxhash",
    "dependencies": {
      "cuint": "^0.2.2"
    },
    "devDependencies": {
      "benchmark": "*",
      "uglifyjs": "^2.4.11",
      "webpack": "^3.10.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-xxhashjs-0.2.2-8a6251567621a1c46a5ae204da0249c7f8caa9d8-integrity/node_modules/xxhashjs/package.json",
    "readmeFilename": "README.md",
    "readme": "# Javascript implementation of xxHash\n\n## Synopsis\n\nxxHash is a very fast hashing algorithm (see the details [here](https://code.google.com/p/xxhash/)). xxhashjs is a Javascript implementation of it, written in 100% Javascript. Although not as fast as the C version, it does perform pretty well given the current Javascript limitations in handling unsigned 32 bits integers.\n\n\n## Installation\n\nIn nodejs:\n\n    npm install xxhashjs\n\nIn the browser, include the following, and access the constructor with _XXH_:\n\n```javascript\n<script src=\"/your/path/to/xxhash.js\"></script>\n```\n\n\n## Examples\n\n* In one step:\n```javascript\nvar h = XXH.h32( 'abcd', 0xABCD ).toString(16)\t// seed = 0xABCD\n```\n> 0xCDA8FAE4\n\n* In several steps (useful in conjunction of NodeJS streams):\n```javascript\nvar H = XXH.h32( 0xABCD )\t// seed = 0xABCD\nvar h = H.update( 'abcd' ).digest().toString(16)\n```\n> 0xCDA8FAE4\n\n* More examples in the examples directory:\n\t* Compute xxHash from a file data\n\t* Use xxHashjs in the browser\n\n\n## Usage\n\n* XXH makes 2 functions available for 32 bits XXH and 64 bits XXH respectively, with the same signature:\n\n\t* XXH.h32\n\t* XXH.h64\n\n* In one step:\n`XXH.h32(<data>, <seed>)`\nThe data can either be a string, an ArrayBuffer or a NodeJS Buffer object.\nThe seed can either be a number or a UINT32 object.\n\n* In several steps:\n\t* instantiate a new XXH object H:\n`XXH.h32(<seed>)` or `XXH.h32()`\nThe seed can be set later on with the `init` method\n\n\t* add data to the hash calculation:\n`H.update(<data>)`\n\n\t* finish the calculations:\n`H.digest()`\n\nThe object returned can be converted to a string with `toString(<radix>)` or a number `toNumber()`.\nOnce `digest()` has been called, the object can be reused. The same seed will be used or it can be changed with `init(<seed>)`.\n\n\n## Methods\n\n* `XXH.h32()`\n\t* `.init(<seed>)`\n\tInitialize the XXH object with the given seed. The seed can either be a number or a UINT32 object.\n\t* `.update(<data>)`\n\tAdd data for hashing. The data can either be a string, an ArrayBuffer or a NodeJS Buffer object.\n\n* `digest()` (_UINT32_)\n\tFinalize the hash calculations and returns an UINT32 object. The hash value can be retrieved with toString(<radix>).\n\n* `XXH.h64()`\n\t* `.init(<seed>)`\n\tInitialize the XXH object with the given seed. The seed can either be a number or a UINT64 object.\n\t* `.update(<data>)`\n\tAdd data for hashing. The data can either be a string, an ArrayBuffer or a NodeJS Buffer object.\n\t* `.digest()` (_UINT64_)\n\tFinalize the hash calculations and returns an UINT64 object. The hash value can be retrieved with toString(<radix>).\n\n\n## License\n\nMIT",
    "licenseText": "Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xxhashjs/-/xxhashjs-0.2.2.tgz#8a6251567621a1c46a5ae204da0249c7f8caa9d8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xxhashjs/-/xxhashjs-0.2.2.tgz",
    "hash": "8a6251567621a1c46a5ae204da0249c7f8caa9d8",
    "integrity": "sha512-AkTuIuVTET12tpsVIQo+ZU6f/qDmKuRUcjaqR+OIvm+aCBsZ95i7UVY5WJ9TMsSaZ0DA2WxoZ4acu0sPH+OKAw==",
    "registry": "npm",
    "packageName": "xxhashjs",
    "cacheIntegrity": "sha512-AkTuIuVTET12tpsVIQo+ZU6f/qDmKuRUcjaqR+OIvm+aCBsZ95i7UVY5WJ9TMsSaZ0DA2WxoZ4acu0sPH+OKAw== sha1-imJRVnYhocRqWuIE2gJJx/jKqdg="
  },
  "registry": "npm",
  "hash": "8a6251567621a1c46a5ae204da0249c7f8caa9d8"
}