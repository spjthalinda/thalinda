{
  "manifest": {
    "name": "estree-util-build-jsx",
    "version": "2.1.0",
    "description": "Transform JSX in estrees to function calls (for react, preact, and most hyperscript interfaces)",
    "license": "MIT",
    "keywords": [
      "estree",
      "ast",
      "ecmascript",
      "javascript",
      "tree",
      "jsx",
      "xml",
      "build",
      "hyperscript",
      "compile",
      "call",
      "acorn",
      "espree",
      "recast",
      "react",
      "preact"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/estree-util-build-jsx.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/estree-util-build-jsx/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/estree-jsx": "^0.0.1",
      "estree-util-is-identifier-name": "^2.0.0",
      "estree-walker": "^3.0.0"
    },
    "devDependencies": {
      "@types/escodegen": "^0.0.6",
      "@types/tape": "^4.0.0",
      "acorn": "^8.0.0",
      "acorn-jsx": "^5.0.0",
      "astring": "^1.0.0",
      "c8": "^7.0.0",
      "escodegen": "^2.0.0",
      "nyc": "^15.0.0",
      "prettier": "^2.0.0",
      "recast": "^0.21.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.49.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"lib/**/*.d.ts\" \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-estree-util-build-jsx-2.1.0-629aa81fbb1b16ed628c7a9334d37bc8a2a3726f-integrity/node_modules/estree-util-build-jsx/package.json",
    "readmeFilename": "readme.md",
    "readme": "# estree-util-build-jsx\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[estree][] utility to turn JSX into function calls: `<x />` -> `h('x')`!\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`buildJsx(tree, options?)`](#buildjsxtree-options)\n*   [Examples](#examples)\n    *   [Example: use with Acorn](#example-use-with-acorn)\n*   [Algorithm](#algorithm)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a utility that takes an [estree][] (JavaScript) syntax tree as\ninput that contains embedded JSX nodes (elements, fragments) and turns them into\nfunction calls.\n\n## When should I use this?\n\nIf you already have a tree and only need to compile JSX away, use this.\nIf you have code, using something like [SWC][] or [esbuild][] instead.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install estree-util-build-jsx\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {buildJsx} from 'https://esm.sh/estree-util-build-jsx@2'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {buildJsx} from 'https://esm.sh/estree-util-build-jsx@2?bundle'\n</script>\n```\n\n## Use\n\nSay we have the following `example.jsx`:\n\n```js\nimport x from 'xastscript'\n\nconsole.log(\n  <album id={123}>\n    <name>Born in the U.S.A.</name>\n    <artist>Bruce Springsteen</artist>\n    <releasedate date=\"1984-04-06\">April 6, 1984</releasedate>\n  </album>\n)\n\nconsole.log(\n  <>\n    {1 + 1}\n    <self-closing />\n    <x name key=\"value\" key={expression} {...spread} />\n  </>\n)\n```\n\nâ€¦and next to it a module `example.js`:\n\n```js\nimport fs from 'node:fs/promises'\nimport {Parser} from 'acorn'\nimport jsx from 'acorn-jsx'\nimport {generate} from 'astring'\nimport {buildJsx} from 'estree-util-build-jsx'\n\nconst doc = String(await fs.readFile('example.jsx'))\n\nconst tree = Parser.extend(jsx()).parse(doc, {\n  sourceType: 'module',\n  ecmaVersion: 2022\n})\n\nbuildJsx(tree, {pragma: 'x', pragmaFrag: 'null'})\n\nconsole.log(generate(tree))\n```\n\nâ€¦now running `node example.js` yields:\n\n```js\nimport x from 'xastscript';\nconsole.log(x(\"album\", {\n  id: 123\n}, x(\"name\", null, \"Born in the U.S.A.\"), x(\"artist\", null, \"Bruce Springsteen\"), x(\"releasedate\", {\n  date: \"1984-04-06\"\n}, \"April 6, 1984\")));\nconsole.log(x(null, null, 1 + 1, x(\"self-closing\"), x(\"x\", Object.assign({\n  name: true,\n  key: \"value\",\n  key: expression\n}, spread))));\n```\n\n## API\n\nThis package exports the identifier `buildJsx`.\nThere is no default export.\n\n### `buildJsx(tree, options?)`\n\nTurn JSX in `tree` ([`Program`][program]) into function calls:\n`<x />` -> `h('x')`!\n\n##### `options`\n\nConfiguration (optional).\n\n> ðŸ‘‰ **Note**: you can also configure `runtime`, `importSource`, `pragma`, and\n> `pragmaFrag` from within files through comments.\n\n###### `options.runtime`\n\nChoose the [runtime][]\n(`string`, `'automatic'` or `'classic'`, default: `'classic'`).\n\nComment form: `@jsxRuntime theRuntime`.\n\n###### `options.importSource`\n\nPlace to import `jsx`, `jsxs`, `jsxDEV`, and/or `Fragment` from, when the\neffective runtime is automatic (`string`, default: `'react'`).\n\nComment form: `@jsxImportSource theSource`.\n\n> ðŸ‘‰ **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this provided\n> source.\n> In CJS, that can resolve to a file, as in `theSource/jsx-runtime.js`, but for\n> ESM an export map needs to be set up to point to files:\n>\n> ```js\n> // â€¦\n> \"exports\": {\n>   // â€¦\n>   \"./jsx-runtime\": \"./path/to/jsx-runtime.js\",\n>   \"./jsx-dev-runtime\": \"./path/to/jsx-runtime.js\"\n>   // â€¦\n> ```\n\n###### `options.pragma`\n\nIdentifier or member expression to call when the effective runtime is classic\n(`string`, default: `'React.createElement'`).\n\nComment form: `@jsx identifier`.\n\n###### `options.pragmaFrag`\n\nIdentifier or member expression to use as a symbol for fragments when the\neffective runtime is classic (`string`, default: `'React.Fragment'`).\n\nComment form: `@jsxFrag identifier`.\n\n###### `options.development`\n\nImport `jsxDEV` from `theSource/jsx-dev-runtime.js` and add location info on\nwhere a component originated from (`boolean`, default: `false`).\nThis helps debugging but adds a lot of code that you donâ€™t want in production.\nOnly used in the automatic runtime.\n\n###### `options.filePath`\n\nFile path to the original source file (`string`, example: `'path/to/file.js'`).\nUsed in the location info when using the automatic runtime with\n`development: true`.\n\n##### Returns\n\nThe given `tree` (`Node`).\n\n## Examples\n\n### Example: use with Acorn\n\nTo support configuration from comments in Acorn, those comments have to be in\nthe program.\nThis is done by [`espree`][espree] but not automatically by [`acorn`][acorn]:\n\n```js\nimport {Parser} from 'acorn'\nimport jsx from 'acorn-jsx'\n\nconst doc = '' // To do: get `doc` somehow.\n\nconst comments = []\nconst tree = Parser.extend(jsx()).parse(doc, {onComment: comments})\ntree.comments = comments\n```\n\n## Algorithm\n\nIn almost all cases, this utility is the same as the Babel plugin, except that\nthey work on slightly different syntax trees.\n\nSome differences:\n\n*   No pure annotations things\n*   `this` is not a component: `<this>` -> `h('this')`, not `h(this)`\n*   Namespaces are supported: `<a:b c:d>` -> `h('a:b', {'c:d': true})`,\n    which throws by default in Babel or can be turned on with `throwIfNamespace`\n*   No `useSpread`, `useBuiltIns`, or `filter` options\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the types `Options` and `Node`.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\n## Related\n\n*   [`syntax-tree/hast-util-to-estree`](https://github.com/syntax-tree/hast-util-to-estree)\n    â€” turn [hast](https://github.com/syntax-tree/hast) (HTML) to [estree][]\n    JSX\n*   [`coderaiser/estree-to-babel`](https://github.com/coderaiser/estree-to-babel)\n    â€” turn [estree][] to Babel trees\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] Â© [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/estree-util-build-jsx/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/estree-util-build-jsx/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/estree-util-build-jsx.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/estree-util-build-jsx\n\n[downloads-badge]: https://img.shields.io/npm/dm/estree-util-build-jsx.svg\n\n[downloads]: https://www.npmjs.com/package/estree-util-build-jsx\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/estree-util-build-jsx.svg\n\n[size]: https://bundlephobia.com/result?p=estree-util-build-jsx\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[esmsh]: https://esm.sh\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[typescript]: https://www.typescriptlang.org\n\n[contributing]: https://github.com/syntax-tree/.github/blob/main/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/main/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/main/code-of-conduct.md\n\n[acorn]: https://github.com/acornjs/acorn\n\n[estree]: https://github.com/estree/estree\n\n[espree]: https://github.com/eslint/espree\n\n[program]: https://github.com/estree/estree/blob/master/es5.md#programs\n\n[runtime]: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n\n[swc]: https://swc.rs\n\n[esbuild]: https://esbuild.github.io\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2020 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/estree-util-build-jsx/-/estree-util-build-jsx-2.1.0.tgz#629aa81fbb1b16ed628c7a9334d37bc8a2a3726f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/estree-util-build-jsx/-/estree-util-build-jsx-2.1.0.tgz",
    "hash": "629aa81fbb1b16ed628c7a9334d37bc8a2a3726f",
    "integrity": "sha512-gsBGfsY6LOJUIDwmMkTOcgCX+3r/LUjRBccgHMSW55PHjhZsV13RmPl/iwpAvW8KcQqoN9P0FEFWTSS2Zc5bGA==",
    "registry": "npm",
    "packageName": "estree-util-build-jsx",
    "cacheIntegrity": "sha512-gsBGfsY6LOJUIDwmMkTOcgCX+3r/LUjRBccgHMSW55PHjhZsV13RmPl/iwpAvW8KcQqoN9P0FEFWTSS2Zc5bGA== sha1-YpqoH7sbFu1ijHqTNNN7yKKjcm8="
  },
  "registry": "npm",
  "hash": "629aa81fbb1b16ed628c7a9334d37bc8a2a3726f"
}